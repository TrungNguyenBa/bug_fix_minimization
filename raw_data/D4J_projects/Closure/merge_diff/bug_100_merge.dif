diff --git a/javadoc/com/google/javascript/rhino/jstype/JSTypeRegistry.ResolveMode.html b/javadoc/com/google/javascript/rhino/jstype/JSTypeRegistry.ResolveMode.html
index f4060998..05b9e48a 100644
--- a/javadoc/com/google/javascript/rhino/jstype/JSTypeRegistry.ResolveMode.html
+++ b/javadoc/com/google/javascript/rhino/jstype/JSTypeRegistry.ResolveMode.html
@@ -106,7 +106,7 @@ Enum JSTypeRegistry.ResolveMode</H2>
 
 <P>
 The type registry has three modes, which control how type ASTs are
- converted to types in <A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#createFromTypeNodes(com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.rhino.jstype.StaticScope)"><CODE>JSTypeRegistry.createFromTypeNodes(com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>)</CODE></A>.
+ converted to types in <CODE>@createFromTypeNodes</CODE>.
 <P>
 
 <P>
diff --git a/javadoc/com/google/javascript/rhino/jstype/JSTypeRegistry.html b/javadoc/com/google/javascript/rhino/jstype/JSTypeRegistry.html
index 0a2e95d8..29bebdc9 100644
--- a/javadoc/com/google/javascript/rhino/jstype/JSTypeRegistry.html
+++ b/javadoc/com/google/javascript/rhino/jstype/JSTypeRegistry.html
@@ -127,7 +127,7 @@ The type registry is used to resolve named types.
 
 <BR>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The type registry has three modes, which control how type ASTs are
- converted to types in <A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#createFromTypeNodes(com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.rhino.jstype.StaticScope)"><CODE>createFromTypeNodes(com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>)</CODE></A>.</TD>
+ converted to types in <CODE>@createFromTypeNodes</CODE>.</TD>
 </TR>
 </TABLE>
 &nbsp;
diff --git a/javadoc/com/google/javascript/rhino/jstype/package-summary.html b/javadoc/com/google/javascript/rhino/jstype/package-summary.html
index 4a7edddb..e51fd622 100644
--- a/javadoc/com/google/javascript/rhino/jstype/package-summary.html
+++ b/javadoc/com/google/javascript/rhino/jstype/package-summary.html
@@ -240,7 +240,7 @@ Provides abstractions to represent types in JavaScript.
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD WIDTH="15%"><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.ResolveMode.html" title="enum in com.google.javascript.rhino.jstype">JSTypeRegistry.ResolveMode</A></B></TD>
 <TD>The type registry has three modes, which control how type ASTs are
- converted to types in <A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#createFromTypeNodes(com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.rhino.jstype.StaticScope)"><CODE>JSTypeRegistry.createFromTypeNodes(com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>)</CODE></A>.</TD>
+ converted to types in <CODE>@createFromTypeNodes</CODE>.</TD>
 </TR>
 <TR BGCOLOR="white" CLASS="TableRowColor">
 <TD WIDTH="15%"><B><A HREF="../../../../../com/google/javascript/rhino/jstype/TernaryValue.html" title="enum in com.google.javascript.rhino.jstype">TernaryValue</A></B></TD>
diff --git a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java
index 4e0d0d8b..dd9a87df 100644
--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java
+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java
@@ -750,6 +750,8 @@ abstract class AbstractCommandLineRunner<A extends Compiler,
    * exists.
    *
    * @param options The options to the Compiler.
+   * @param path The path of the generated file for which the source map was
+   *        created.
    */
   private void outputSourceMap(B options)
       throws IOException {
diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java
index 1b6c93fb..94c94119 100644
--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java
+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java
@@ -28,13 +28,11 @@ import com.google.javascript.rhino.Token;
  * unintentionally.
  * 
  * <p>A use of {@code this} is considered unsafe if it's on the left side of an
- * assignment or a property access, and not inside one of the following:
+ * assignment and not inside one of the following:
  * <ol>
  * <li>a prototype method
  * <li>a function annotated with {@code @constructor}
  * <li>a function annotated with {@code @this}.
- * <li>a function where there's no logical place to put a
- *     {@code this} annotation.
  * </ol>
  *
  * <p>Note that this check does not track assignments of {@code this} to
@@ -90,19 +88,6 @@ final class CheckGlobalThis implements Callback {
       if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType())) {
         return false;
       }
-
-      // Don't traverse functions unless they would normally
-      // be able to have a @this annotation associated with them. e.g.,
-      // var a = function() { }; // or
-      // function a() {} // or
-      // a.x = function() {};
-      int pType = parent.getType();
-      if (!(pType == Token.BLOCK ||
-            pType == Token.SCRIPT ||
-            pType == Token.NAME ||
-            pType == Token.ASSIGN)) {
-        return false;
-      }
     }
     
     if (parent != null && parent.getType() == Token.ASSIGN) {
@@ -135,7 +120,7 @@ final class CheckGlobalThis implements Callback {
   }
 
   public void visit(NodeTraversal t, Node n, Node parent) {
-    if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {
+    if (assignLhsChild != null && n.getType() == Token.THIS) {
       compiler.report(t.makeError(n, level, GLOBAL_THIS));
     }
     if (n == assignLhsChild) {
@@ -143,16 +128,6 @@ final class CheckGlobalThis implements Callback {
     }
   }
 
-  private boolean shouldReportThis(Node n, Node parent) {
-    if (assignLhsChild != null) {
-      // Always report a THIS on the left side of an assign.
-      return true;
-    }
-
-    // Also report a THIS with a property access.
-    return parent != null && NodeUtil.isGet(parent);
-  }
-
   /**
    * Gets a function's JSDoc information, if it has any. Checks for a few
    * patterns (ellipses show where JSDoc would be):
diff --git a/src/com/google/javascript/jscomp/CodingConvention.java b/src/com/google/javascript/jscomp/CodingConvention.java
index 02148cda..a410ed89 100644
--- a/src/com/google/javascript/jscomp/CodingConvention.java
+++ b/src/com/google/javascript/jscomp/CodingConvention.java
@@ -22,6 +22,7 @@ import com.google.javascript.rhino.jstype.JSTypeRegistry;
 import com.google.javascript.rhino.jstype.ObjectType;
 
 import java.util.Collection;
+import java.util.Collections;
 import java.util.List;
 
 /**
diff --git a/src/com/google/javascript/jscomp/DefaultCodingConvention.java b/src/com/google/javascript/jscomp/DefaultCodingConvention.java
index 82a96364..814b01c1 100644
--- a/src/com/google/javascript/jscomp/DefaultCodingConvention.java
+++ b/src/com/google/javascript/jscomp/DefaultCodingConvention.java
@@ -15,6 +15,7 @@
  */
 package com.google.javascript.jscomp;
 
+import com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec;
 import com.google.javascript.rhino.Node;
 import com.google.javascript.rhino.jstype.FunctionType;
 import com.google.javascript.rhino.jstype.JSTypeRegistry;
diff --git a/src/com/google/javascript/jscomp/JSModuleGraph.java b/src/com/google/javascript/jscomp/JSModuleGraph.java
index 47e14745..ecffc6f9 100644
--- a/src/com/google/javascript/jscomp/JSModuleGraph.java
+++ b/src/com/google/javascript/jscomp/JSModuleGraph.java
@@ -290,7 +290,7 @@ public class JSModuleGraph {
    * a symbol that is not required until a later module, then that
    * file will be moved to the later module.
    *
-   * @param inputs The original list of sources. Used to ensure that the sort
+   * @param The original list of sources. Used to ensure that the sort
    *     is stable.
    * @return The sorted list of sources.
    */
diff --git a/src/com/google/javascript/jscomp/JsMessageExtractor.java b/src/com/google/javascript/jscomp/JsMessageExtractor.java
index 7412463a..03156355 100644
--- a/src/com/google/javascript/jscomp/JsMessageExtractor.java
+++ b/src/com/google/javascript/jscomp/JsMessageExtractor.java
@@ -19,6 +19,7 @@ package com.google.javascript.jscomp;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
+import com.google.common.collect.Sets;
 import com.google.javascript.rhino.Node;
 
 import java.io.IOException;
diff --git a/src/com/google/javascript/jscomp/LinkedFlowScope.java b/src/com/google/javascript/jscomp/LinkedFlowScope.java
index 3747e098..47b0a5eb 100644
--- a/src/com/google/javascript/jscomp/LinkedFlowScope.java
+++ b/src/com/google/javascript/jscomp/LinkedFlowScope.java
@@ -148,6 +148,7 @@ class LinkedFlowScope implements FlowScope {
     return cache.getSlot(name);
   }
 
+  /** @inheritDoc */
   @Override
   public StaticSlot<JSType> getOwnSlot(String name) {
     throw new UnsupportedOperationException();
diff --git a/src/com/google/javascript/jscomp/SanityCheck.java b/src/com/google/javascript/jscomp/SanityCheck.java
index a363a9bc..aa554273 100644
--- a/src/com/google/javascript/jscomp/SanityCheck.java
+++ b/src/com/google/javascript/jscomp/SanityCheck.java
@@ -18,6 +18,7 @@ package com.google.javascript.jscomp;
 
 import com.google.common.base.Preconditions;
 import com.google.javascript.rhino.Node;
+import com.google.javascript.rhino.Token;
 
 /**
  * A compiler pass that verifies the structure of the AST conforms
diff --git a/src/com/google/javascript/jscomp/SourceFile.java b/src/com/google/javascript/jscomp/SourceFile.java
index 0c40f030..f13ac252 100644
--- a/src/com/google/javascript/jscomp/SourceFile.java
+++ b/src/com/google/javascript/jscomp/SourceFile.java
@@ -371,7 +371,6 @@ public abstract class SourceFile {
     /**
      * Gets a reader for the code in this source file.
      */
-    @Override
     public Reader getCodeReader() throws IOException {
       if (hasSourceInMemory()) {
         return super.getCodeReader();
diff --git a/src/com/google/javascript/jscomp/Tracer.java b/src/com/google/javascript/jscomp/Tracer.java
index 2a137aec..fe4229e1 100644
--- a/src/com/google/javascript/jscomp/Tracer.java
+++ b/src/com/google/javascript/jscomp/Tracer.java
@@ -224,7 +224,7 @@ final class Tracer {
   static final int MAX_TRACE_SIZE = 1000;
 
   /**
-   * For unit testing. Can't use {@link com.google.common.time.Clock} because
+   * For unit testing. Can't use {@link com.google.common.time} because
    * this code is in base and has minimal dependencies.
    */
   static interface InternalClock {
diff --git a/src/com/google/javascript/jscomp/TypedCodeGenerator.java b/src/com/google/javascript/jscomp/TypedCodeGenerator.java
index de51a7a2..9cedd0e4 100644
--- a/src/com/google/javascript/jscomp/TypedCodeGenerator.java
+++ b/src/com/google/javascript/jscomp/TypedCodeGenerator.java
@@ -74,7 +74,7 @@ class TypedCodeGenerator extends CodeGenerator {
   }
 
   /**
-   * @param fnNode A node for a function for which to generate a type annotation
+   * @param node A node for a function for which to generate a type annotation
    */
   private String getFunctionAnnotation(Node fnNode) {
     Preconditions.checkState(fnNode.getType() == Token.FUNCTION);
diff --git a/src/com/google/javascript/jscomp/deps/DependencyInfo.java b/src/com/google/javascript/jscomp/deps/DependencyInfo.java
index 52e04cd8..e65a03fb 100644
--- a/src/com/google/javascript/jscomp/deps/DependencyInfo.java
+++ b/src/com/google/javascript/jscomp/deps/DependencyInfo.java
@@ -17,6 +17,8 @@
 package com.google.javascript.jscomp.deps;
 
 import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
 
 /**
  * A data structure for JS dependency information for a single .js file.
diff --git a/src/com/google/javascript/jscomp/deps/DepsFileParser.java b/src/com/google/javascript/jscomp/deps/DepsFileParser.java
index ef1a9d7c..e67a6ed0 100644
--- a/src/com/google/javascript/jscomp/deps/DepsFileParser.java
+++ b/src/com/google/javascript/jscomp/deps/DepsFileParser.java
@@ -17,9 +17,12 @@
 package com.google.javascript.jscomp.deps;
 
 import com.google.common.base.CharMatcher;
+import com.google.common.base.Charsets;
 import com.google.common.collect.Lists;
+import com.google.common.io.Files;
 import com.google.javascript.jscomp.ErrorManager;
 
+import java.io.File;
 import java.io.FileReader;
 import java.io.IOException;
 import java.io.Reader;
diff --git a/src/com/google/javascript/jscomp/deps/JsFileLineParser.java b/src/com/google/javascript/jscomp/deps/JsFileLineParser.java
index 06c9c1aa..238f804e 100644
--- a/src/com/google/javascript/jscomp/deps/JsFileLineParser.java
+++ b/src/com/google/javascript/jscomp/deps/JsFileLineParser.java
@@ -25,6 +25,7 @@ import com.google.javascript.jscomp.JSError;
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.Reader;
+import java.io.StringReader;
 import java.util.List;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
diff --git a/src/com/google/javascript/jscomp/deps/JsFileParser.java b/src/com/google/javascript/jscomp/deps/JsFileParser.java
index 0f8ab48b..a06bf81d 100644
--- a/src/com/google/javascript/jscomp/deps/JsFileParser.java
+++ b/src/com/google/javascript/jscomp/deps/JsFileParser.java
@@ -17,9 +17,13 @@
 package com.google.javascript.jscomp.deps;
 
 import com.google.common.base.CharMatcher;
+import com.google.common.base.Charsets;
 import com.google.common.collect.Lists;
+import com.google.common.io.Files;
 import com.google.javascript.jscomp.ErrorManager;
 
+import java.io.BufferedReader;
+import java.io.File;
 import java.io.FileReader;
 import java.io.IOException;
 import java.io.Reader;
diff --git a/src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java b/src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java
index 8dc53648..399cc7f7 100644
--- a/src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java
+++ b/src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java
@@ -17,6 +17,8 @@
 package com.google.javascript.jscomp.deps;
 
 import com.google.common.base.Objects;
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.Lists;
 
 import java.util.Collection;
 import java.util.Collections;
diff --git a/src/com/google/javascript/jscomp/deps/SortedDependencies.java b/src/com/google/javascript/jscomp/deps/SortedDependencies.java
index adb6d81b..60cbec8d 100644
--- a/src/com/google/javascript/jscomp/deps/SortedDependencies.java
+++ b/src/com/google/javascript/jscomp/deps/SortedDependencies.java
@@ -38,6 +38,8 @@ import java.util.List;
 import java.util.Map;
 import java.util.PriorityQueue;
 import java.util.Set;
+import java.util.SortedSet;
+import java.util.TreeSet;
 
 /**
  * A sorted list of inputs with dependency information. Uses a stable
diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
index 477b2871..a0f264b2 100644
--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
@@ -1034,6 +1034,14 @@ public final class JsDocInfoParser {
       this.string = string;
       this.token = token;
     }
+
+    public String getString() {
+      return string;
+    }
+
+    public JsDocToken getToken() {
+      return token;
+    }
   }
 
   /**
diff --git a/src/com/google/javascript/jscomp/parsing/ParserRunner.java b/src/com/google/javascript/jscomp/parsing/ParserRunner.java
index 72a66687..7007f036 100644
--- a/src/com/google/javascript/jscomp/parsing/ParserRunner.java
+++ b/src/com/google/javascript/jscomp/parsing/ParserRunner.java
@@ -25,6 +25,7 @@ import com.google.javascript.jscomp.mozilla.rhino.EvaluatorException;
 import com.google.javascript.jscomp.mozilla.rhino.Parser;
 import com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot;
 import com.google.javascript.rhino.Node;
+import com.google.javascript.rhino.jstype.JSTypeRegistry;
 
 import java.io.IOException;
 import java.util.ResourceBundle;
diff --git a/src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java b/src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java
index b4f44fed..f1aeb7b6 100644
--- a/src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java
+++ b/src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java
@@ -39,8 +39,12 @@
 
 package com.google.javascript.rhino.jstype;
 
+import com.google.javascript.rhino.ErrorReporter;
 import com.google.javascript.rhino.jstype.ObjectType;
 
+import java.util.List;
+import java.util.Set;
+
 /**
  * Represents the prototype of a {@link FunctionType}.
  * @author nicksantos@google.com (Nick Santos)
diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java
index 48e0f076..cbd4dc26 100644
--- a/src/com/google/javascript/rhino/jstype/FunctionType.java
+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java
@@ -41,6 +41,8 @@ package com.google.javascript.rhino.jstype;
 
 import static com.google.javascript.rhino.jstype.JSTypeNative.U2U_CONSTRUCTOR_TYPE;
 
+import com.google.common.annotations.VisibleForTesting;
+import com.google.common.base.Objects;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Iterables;
@@ -820,6 +822,11 @@ public class FunctionType extends PrototypeObjectType {
     return super.resolveInternal(t, scope);
   }
 
+  // A helper method for creating arrow types.
+  private ArrowType createArrowType(Node parameters, JSType returnType) {
+    return registry.createArrowType(parameters, returnType);
+  }
+
   @Override
   public String toDebugHashCodeString() {
     if (this == registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)) {
diff --git a/src/com/google/javascript/rhino/jstype/InstanceObjectType.java b/src/com/google/javascript/rhino/jstype/InstanceObjectType.java
index 256f0147..ba1e47bf 100644
--- a/src/com/google/javascript/rhino/jstype/InstanceObjectType.java
+++ b/src/com/google/javascript/rhino/jstype/InstanceObjectType.java
@@ -41,6 +41,10 @@ package com.google.javascript.rhino.jstype;
 
 
 import com.google.common.base.Preconditions;
+import com.google.javascript.rhino.ErrorReporter;
+
+import java.util.List;
+import java.util.Set;
 
 /**
  * An object type that is an instance of some function constructor.
diff --git a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java
index 76dd3b6d..df73e948 100644
--- a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java
+++ b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java
@@ -147,7 +147,7 @@ public class JSTypeRegistry implements Serializable {
 
   /**
    * The type registry has three modes, which control how type ASTs are
-   * converted to types in {@link #createFromTypeNodes}.
+   * converted to types in {@link @createFromTypeNodes}.
    */
   public static enum ResolveMode {
     /**
diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java
index 6af723cc..b67876c3 100644
--- a/src/com/google/javascript/rhino/jstype/NamedType.java
+++ b/src/com/google/javascript/rhino/jstype/NamedType.java
@@ -110,7 +110,6 @@ class NamedType extends ProxyObjectType {
     this.charno = charno;
   }
 
-  @Override
   void forgiveUnknownNames() {
     forgiving = true;
   }
diff --git a/src/com/google/javascript/rhino/jstype/ObjectType.java b/src/com/google/javascript/rhino/jstype/ObjectType.java
index 78583fe1..2fcc8cff 100644
--- a/src/com/google/javascript/rhino/jstype/ObjectType.java
+++ b/src/com/google/javascript/rhino/jstype/ObjectType.java
@@ -42,11 +42,13 @@ package com.google.javascript.rhino.jstype;
 import static com.google.javascript.rhino.jstype.TernaryValue.FALSE;
 import static com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
 
+import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Sets;
 import com.google.javascript.rhino.JSDocInfo;
 
 import java.util.HashSet;
+import java.util.List;
 import java.util.Set;
 
 /**
diff --git a/src/com/google/javascript/rhino/jstype/ProxyObjectType.java b/src/com/google/javascript/rhino/jstype/ProxyObjectType.java
index bd23c71b..8761a538 100644
--- a/src/com/google/javascript/rhino/jstype/ProxyObjectType.java
+++ b/src/com/google/javascript/rhino/jstype/ProxyObjectType.java
@@ -42,6 +42,7 @@ package com.google.javascript.rhino.jstype;
 import com.google.javascript.rhino.ErrorReporter;
 import com.google.javascript.rhino.JSDocInfo;
 
+import java.util.List;
 import java.util.Set;
 
 /**
diff --git a/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java b/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java
index e9deda4a..95fc0822 100644
--- a/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java
+++ b/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java
@@ -40,6 +40,9 @@
 package com.google.javascript.rhino.jstype;
 
 import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.Maps;
+
+import java.util.Map;
 
 /**
  * A builder for record types.
diff --git a/src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java b/src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java
index e485054a..275c7512 100644
--- a/src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java
+++ b/src/com/google/javascript/rhino/jstype/UnresolvedTypeExpression.java
@@ -41,6 +41,7 @@ package com.google.javascript.rhino.jstype;
 
 import com.google.common.base.Preconditions;
 import com.google.javascript.rhino.ErrorReporter;
+import com.google.javascript.rhino.JSTypeExpression;
 import com.google.javascript.rhino.Node;
 
 /**
