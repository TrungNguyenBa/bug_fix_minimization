diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java
index 657ee0a5..f6d6a27f 100644
--- a/src/com/google/javascript/jscomp/FoldConstants.java
+++ b/src/com/google/javascript/jscomp/FoldConstants.java
@@ -1474,24 +1474,22 @@ class FoldConstants extends AbstractPostOrderCallback
 
     String joinString = NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
-    StringBuilder sb = null;
+    StringBuilder sb = new StringBuilder();
     int foldedSize = 0;
     Node elem = arrayNode.getFirstChild();
     // Merges adjacent String nodes.
     while (elem != null) {
       if (NodeUtil.isImmutableValue(elem)) {
-        if (sb == null) {
-          sb = new StringBuilder();
-        } else {
+        if (sb.length() > 0) {
           sb.append(joinString);
         }
         sb.append(NodeUtil.getStringValue(elem));
       } else {
-        if (sb != null) {
+        if (sb.length() > 0) {
           // + 2 for the quotes.
           foldedSize += sb.length() + 2;
           arrayFoldedChildren.add(Node.newString(sb.toString()));
-          sb = null;
+          sb = new StringBuilder();
         }
         foldedSize += InlineCostEstimator.getCost(elem);
         arrayFoldedChildren.add(elem);
@@ -1499,7 +1497,7 @@ class FoldConstants extends AbstractPostOrderCallback
       elem = elem.getNext();
     }
 
-    if (sb != null) {
+    if (sb.length() > 0) {
       // + 2 for the quotes.
       foldedSize += sb.length() + 2;
       arrayFoldedChildren.add(Node.newString(sb.toString()));
diff --git a/test/com/google/javascript/jscomp/FoldConstantsTest.java b/test/com/google/javascript/jscomp/FoldConstantsTest.java
index 6edfbb20..c5544a6d 100644
--- a/test/com/google/javascript/jscomp/FoldConstantsTest.java
+++ b/test/com/google/javascript/jscomp/FoldConstantsTest.java
@@ -641,20 +641,6 @@ public class FoldConstantsTest extends CompilerTestCase {
     // Only optimize if it's a size win.
     fold("x = ['a', '5', 'c'].join('a very very very long chain')",
          "x = [\"a\",\"5\",\"c\"].join(\"a very very very long chain\")");
-    
-    // TODO(user): Its possible to fold this better.
-    foldSame("x = ['', foo].join(',')");
-    foldSame("x = ['', foo, ''].join(',')");
-    
-    fold("x = ['', '', foo, ''].join(',')", "x = [',', foo, ''].join(',')");
-    fold("x = ['', '', foo, '', ''].join(',')",
-         "x = [',', foo, ','].join(',')");
-    
-    fold("x = ['', '', foo, '', '', bar].join(',')",
-         "x = [',', foo, ',', bar].join(',')");
-    
-    fold("x = [1,2,3].join('abcdef')",
-         "x = '1abcdef2abcdef3'");
   }
 
   public void testStringJoinAdd_b1992789() {
