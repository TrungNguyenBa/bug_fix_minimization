diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java
index b2a16900..82350529 100644
--- a/src/com/google/javascript/jscomp/ScopedAliases.java
+++ b/src/com/google/javascript/jscomp/ScopedAliases.java
@@ -255,9 +255,6 @@ class ScopedAliases implements HotSwapCompilerPass {
     // This map is temporary and cleared for each scope.
     private final Map<String, Var> aliases = Maps.newHashMap();
 
-    // Also temporary and cleared for each scope.
-    private final Set<Node> injectedDecls = Sets.newHashSet();
-
     // Suppose you create an alias.
     // var x = goog.x;
     // As a side-effect, this means you can shadow the namespace 'goog'
@@ -314,7 +311,6 @@ class ScopedAliases implements HotSwapCompilerPass {
 
       if (t.getScopeDepth() == 2) {
         renameNamespaceShadows(t);
-        injectedDecls.clear();
         aliases.clear();
         forbiddenLocals.clear();
         transformation = null;
@@ -431,7 +427,6 @@ class ScopedAliases implements HotSwapCompilerPass {
             } else {
               grandparent.addChildBefore(newDecl, varNode);
             }
-            injectedDecls.add(newDecl.getFirstChild());
           }
 
           // Rewrite "var name = EXPR;" to "var name = $jscomp.scope.name;"
@@ -578,10 +573,8 @@ class ScopedAliases implements HotSwapCompilerPass {
           aliasUsages.add(new AliasedNode(aliasVar, n));
         }
 
-        // When we inject declarations, we duplicate jsdoc. Make sure
-        // we only process that jsdoc once.
         JSDocInfo info = n.getJSDocInfo();
-        if (info != null && !injectedDecls.contains(n)) {
+        if (info != null) {
           for (Node node : info.getTypeNodes()) {
             fixTypeNode(node);
           }
diff --git a/test/com/google/javascript/jscomp/ScopedAliasesTest.java b/test/com/google/javascript/jscomp/ScopedAliasesTest.java
index 45ab1b04..a08cd49f 100644
--- a/test/com/google/javascript/jscomp/ScopedAliasesTest.java
+++ b/test/com/google/javascript/jscomp/ScopedAliasesTest.java
@@ -566,22 +566,6 @@ public class ScopedAliasesTest extends CompilerTestCase {
          SCOPE_NAMESPACE + "/** @type {number} */ $jscomp.scope.a;");
   }
 
-  public void testIssue1144() {
-    test("var ns = {};" +
-         "ns.sub = {};" +
-         "/** @constructor */ ns.sub.C = function () {};" +
-         "goog.scope(function () {" +
-         "  var sub = ns.sub;" +
-         "  /** @type {sub.C} */" +
-         "  var x = null;" +
-         "});",
-         SCOPE_NAMESPACE +
-         "var ns = {};" +
-         "ns.sub = {};" +
-         "/** @constructor */ ns.sub.C = function () {};" +
-         "$jscomp.scope.x = null;");
-  }
-
   // Alias Recording Tests
   // TODO(tylerg) : update these to EasyMock style tests once available
   public void testNoGoogScope() {
