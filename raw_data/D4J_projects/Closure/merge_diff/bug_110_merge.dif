diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java
index fbd46d33..3a771c95 100644
--- a/src/com/google/javascript/jscomp/ScopedAliases.java
+++ b/src/com/google/javascript/jscomp/ScopedAliases.java
@@ -25,7 +25,6 @@ import com.google.common.collect.Sets;
 import com.google.javascript.jscomp.CompilerOptions.AliasTransformation;
 import com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler;
 import com.google.javascript.jscomp.Scope.Var;
-import com.google.javascript.rhino.IR;
 import com.google.javascript.rhino.JSDocInfo;
 import com.google.javascript.rhino.Node;
 import com.google.javascript.rhino.SourcePosition;
@@ -355,7 +354,6 @@ class ScopedAliases implements HotSwapCompilerPass {
         Node n = v.getNode();
         Node parent = n.getParent();
         boolean isVar = parent.isVar();
-        boolean isFunctionDecl = NodeUtil.isFunctionDeclaration(parent);
         if (isVar && n.getFirstChild() != null && n.getFirstChild().isQualifiedName()) {
           recordAlias(v);
         } else if (v.isBleedingFunction()) {
@@ -364,14 +362,10 @@ class ScopedAliases implements HotSwapCompilerPass {
         } else if (parent.getType() == Token.LP) {
           // Parameters of the scope function also get a BAD_PARAMETERS
           // error.
-        } else if (isVar || isFunctionDecl) {
-          boolean isHoisted = NodeUtil.isHoistedFunctionDeclaration(parent);
-          Node grandparent = parent.getParent();
-          Node value = v.getInitialValue() != null ?
-              v.getInitialValue() :
+        } else if (isVar) {
+          Node value = n.hasChildren() ?
+              v.getInitialValue().detachFromParent() :
               null;
-          Node varNode = null;
-
           String name = n.getString();
           int nameCount = scopedAliasNames.count(name);
           scopedAliasNames.add(name);
@@ -380,33 +374,6 @@ class ScopedAliases implements HotSwapCompilerPass {
 
           compiler.ensureLibraryInjected("base");
 
-          // First, we need to free up the function expression (EXPR)
-          // to be used in another expression.
-          if (isFunctionDecl) {
-            // Replace "function NAME() { ... }" with "var NAME;".
-            Node existingName = v.getNameNode();
-
-            // We can't keep the local name on the function expression,
-            // because IE is buggy and will leak the name into the global
-            // scope. This is covered in more detail here:
-            // http://wiki.ecmascript.org/lib/exe/fetch.php?id=resources:resources&cache=cache&media=resources:jscriptdeviationsfromes3.pdf
-            //
-            // This will only cause problems if this is a hoisted, recursive
-            // function, and the programmer is using the hoisting.
-            Node newName = IR.name("").useSourceInfoFrom(existingName);
-            value.replaceChild(existingName, newName);
-
-            varNode = IR.var(existingName).useSourceInfoFrom(existingName);
-            grandparent.replaceChild(parent, varNode);
-          } else {
-            if (value != null) {
-              // If this is a VAR, we can just detach the expression and
-              // the tree will still be valid.
-              value.detachFromParent();
-            }
-            varNode = parent;
-          }
-
           // Add $jscomp.scope.name = EXPR;
           // Make sure we copy over all the jsdoc and debug info.
           if (value != null || v.getJSDocInfo() != null) {
@@ -418,12 +385,7 @@ class ScopedAliases implements HotSwapCompilerPass {
                 .useSourceInfoIfMissingFromForTree(n);
             NodeUtil.setDebugInformation(
                 newDecl.getFirstChild().getFirstChild(), n, name);
-
-            if (isHoisted) {
-              grandparent.addChildToFront(newDecl);
-            } else {
-              grandparent.addChildBefore(newDecl, varNode);
-            }
+            parent.getParent().addChildBefore(newDecl, parent);
           }
 
           // Rewrite "var name = EXPR;" to "var name = $jscomp.scope.name;"
@@ -433,7 +395,7 @@ class ScopedAliases implements HotSwapCompilerPass {
 
           recordAlias(v);
         } else {
-          // Do not other kinds of local symbols, like catch params.
+          // Do not allow hoisted functions or other kinds of local symbols.
           report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
         }
       }
diff --git a/src/com/google/javascript/rhino/Node.java b/src/com/google/javascript/rhino/Node.java
index 6a3e9e03..558a3aa3 100644
--- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -551,10 +551,6 @@ public class Node implements Cloneable, Serializable {
       return null;
     }
     Node n = first;
-    if (n == null) {
-      throw new RuntimeException("node is not a child");
-    }
-
     while (n.next != child) {
       n = n.next;
       if (n == null) {
diff --git a/test/com/google/javascript/jscomp/ScopedAliasesTest.java b/test/com/google/javascript/jscomp/ScopedAliasesTest.java
index 30aa1903..9150a1c8 100644
--- a/test/com/google/javascript/jscomp/ScopedAliasesTest.java
+++ b/test/com/google/javascript/jscomp/ScopedAliasesTest.java
@@ -494,7 +494,7 @@ public class ScopedAliasesTest extends CompilerTestCase {
   }
 
   public void testNonAliasLocal() {
-    testScopedFailure("try { } catch (e) {}",
+    testScopedFailure("function f() {}",
         ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);
   }
 
@@ -511,20 +511,6 @@ public class ScopedAliasesTest extends CompilerTestCase {
                "    return $jscomp.scope.x + $jscomp.scope.y; }");
   }
 
-  public void testFunctionDeclaration() {
-    testScoped("if (x) { function f() {} } g(f)",
-               SCOPE_NAMESPACE +
-               "if (x) { $jscomp.scope.f = function () {}; } " +
-               "g($jscomp.scope.f); ");
-  }
-
-  public void testHoistedFunctionDeclaration() {
-    testScoped(" g(f); function f() {} ",
-               SCOPE_NAMESPACE +
-               " $jscomp.scope.f = function () {}; " +
-               "g($jscomp.scope.f); ");
-  }
-
   public void testAliasReassign() {
     testScopedFailure("var x = 3; x = 5;",
         ScopedAliases.GOOG_SCOPE_ALIAS_REDEFINED);
