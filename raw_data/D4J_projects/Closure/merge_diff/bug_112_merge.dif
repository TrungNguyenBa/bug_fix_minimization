diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java
index 4b30d57b..b88744df 100644
--- a/src/com/google/javascript/jscomp/TypeInference.java
+++ b/src/com/google/javascript/jscomp/TypeInference.java
@@ -28,8 +28,6 @@ import static com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE;
 import static com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE;
 
 import com.google.common.base.Preconditions;
-import com.google.common.base.Predicate;
-import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec;
@@ -1182,22 +1180,13 @@ class TypeInference
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
-    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
-        .getTemplateKeys();
-    if (keys.isEmpty()) {
+    if (fnType.getTemplateTypeMap().getTemplateKeys().isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
-    Map<TemplateType, JSType> inferred = Maps.filterKeys(
-        inferTemplateTypesFromParameters(fnType, n),
-        new Predicate<TemplateType>() {
-
-          @Override
-          public boolean apply(TemplateType key) {
-            return keys.contains(key);
-          }}
-        );
+    Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(
+        fnType, n);
 
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
index 4fa5c448..14569dc2 100644
--- a/test/com/google/javascript/jscomp/TypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
@@ -12137,48 +12137,6 @@ public class TypeCheckTest extends CompilerTypeTestCase {
         "required: string");
   }
 
-  public void testTemplatized11() throws Exception {
-    testTypes(
-        "/** \n" +
-        " * @template T\n" +
-        " * @constructor\n" +
-        " */\n" +
-        "function C() {}\n" +
-        "\n" +
-        "/**\n" +
-        " * @param {T|K} a\n" +
-        " * @return {T}\n" +
-        " * @template K\n" +
-        " */\n" +
-        "C.prototype.method = function (a) {};\n" +
-        "\n" +
-        // method returns "?"
-        "/** @type {void} */ var x = new C().method(1);");
-  }
-
-  public void testIssue1058() throws Exception {
-    testTypes(
-        "/**\n" +
-        "  * @constructor\n" +
-        "  * @template CLASS\n" +
-        "  */\n" +
-        "var Class = function() {};\n" +
-        "\n" +
-        "/**\n" +
-        "  * @param {function(CLASS):CLASS} a\n" +
-        "  * @template T\n" +
-        "  */\n" +
-        "Class.prototype.foo = function(a) {\n" +
-        "  return 'string';\n" +
-        "};\n" +
-        "\n" +
-        "/** @param {number} a\n" +
-        "  * @return {string} */\n" +
-        "var a = function(a) { return '' };\n" +
-        "\n" +
-        "new Class().foo(a);");
-  }
-
   public void testUnknownTypeReport() throws Exception {
     compiler.getOptions().setWarningLevel(DiagnosticGroups.REPORT_UNKNOWN_TYPES,
         CheckLevel.WARNING);
