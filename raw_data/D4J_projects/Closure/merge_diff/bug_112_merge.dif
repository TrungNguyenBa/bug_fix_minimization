diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java
index 4b30d57b..b88744df 100644
--- a/src/com/google/javascript/jscomp/TypeInference.java
+++ b/src/com/google/javascript/jscomp/TypeInference.java
@@ -28,8 +28,6 @@ import static com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE;
 import static com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE;
 
 import com.google.common.base.Preconditions;
-import com.google.common.base.Predicate;
-import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec;
@@ -1182,22 +1180,13 @@ class TypeInference
    */
   private boolean inferTemplatedTypesForCall(
       Node n, FunctionType fnType) {
-    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
-        .getTemplateKeys();
-    if (keys.isEmpty()) {
+    if (fnType.getTemplateTypeMap().getTemplateKeys().isEmpty()) {
       return false;
     }
 
     // Try to infer the template types
-    Map<TemplateType, JSType> inferred = Maps.filterKeys(
-        inferTemplateTypesFromParameters(fnType, n),
-        new Predicate<TemplateType>() {
-
-          @Override
-          public boolean apply(TemplateType key) {
-            return keys.contains(key);
-          }}
-        );
+    Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(
+        fnType, n);
 
     // Replace all template types. If we couldn't find a replacement, we
     // replace it with UNKNOWN.
