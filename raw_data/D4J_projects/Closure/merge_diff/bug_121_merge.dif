diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java
index 5c9df618..b1500532 100644
--- a/src/com/google/javascript/jscomp/InlineVariables.java
+++ b/src/com/google/javascript/jscomp/InlineVariables.java
@@ -299,14 +299,8 @@ class InlineVariables implements CompilerPass {
       // reference data is out of sync. We're better off just waiting for
       // the next pass.)
       if (!maybeModifiedArguments &&
-          !staleVars.contains(v) &&
-          referenceInfo.isWellDefined() &&
-          referenceInfo.isAssignedOnceInLifetime() &&
-          // Inlining the variable based solely on well-defined and assigned
-          // once is *NOT* correct. We relax the correctness requirement if
-          // the variable is declared constant.
-          (isInlineableDeclaredConstant(v, referenceInfo) ||
-           referenceInfo.isOnlyAssignmentSameScopeAsDeclaration())) {
+          !staleVars.contains(v) && referenceInfo.isWellDefined() &&
+          referenceInfo.isAssignedOnceInLifetime()) {
         List<Reference> refs = referenceInfo.references;
         for (int i = 1 /* start from a read */; i < refs.size(); i++) {
           Node nameNode = refs.get(i).getNode();
diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java
index f89f10c0..cdacc5f7 100644
--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java
+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java
@@ -438,29 +438,6 @@ class ReferenceCollectingCallback implements ScopedCallback,
     }
 
     /**
-     * @return Whether the variable is only assigned a value once for its
-     *     lifetime.
-     */
-    boolean isOnlyAssignmentSameScopeAsDeclaration() {
-      Reference ref = getOneAndOnlyAssignment();
-      Preconditions.checkNotNull(ref);
-      
-      // Make sure the declaration is the same scope as the assignment.
-      // Otherwise, the variable can be assigned multiple times and possibly
-      // with a different variable.
-      for (BasicBlock block = ref.getBasicBlock();
-           block != null; block = block.getParent()) {
-        if (block.isFunction) {
-          if (ref.getSymbol().getScope() != ref.scope) {
-            return false;
-          }
-        }
-      }
-
-      return true;
-    }
-
-    /**
      * @return The one and only assignment. Returns if there are 0 or 2+
      *    assignments.
      */
diff --git a/test/com/google/javascript/jscomp/InlineVariablesTest.java b/test/com/google/javascript/jscomp/InlineVariablesTest.java
index d1c0ed71..23f9fee5 100644
--- a/test/com/google/javascript/jscomp/InlineVariablesTest.java
+++ b/test/com/google/javascript/jscomp/InlineVariablesTest.java
@@ -1064,9 +1064,4 @@ public class InlineVariablesTest extends CompilerTestCase {
         "F.prototype.inc = function() { this.a++; return 10; };" +
         "F.prototype.bar = function() { var x = this.inc(); this.a += x; };");
   }
-
-  public void testExternalIssue1053() {
-    testSame(
-        "var u; function f() { u = Random(); var x = u; f(); alert(x===u)}");
-  }
 }
