diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java
index 8d268b6b..3b2a9d42 100644
--- a/src/com/google/javascript/jscomp/CodeGenerator.java
+++ b/src/com/google/javascript/jscomp/CodeGenerator.java
@@ -282,12 +282,11 @@ class CodeGenerator {
       case Token.HOOK: {
         Preconditions.checkState(childCount == 3);
         int p = NodeUtil.precedence(type);
-        Context rhsContext = getContextForNoInOperator(context);
         addExpr(first, p + 1, context);
         cc.addOp("?", true);
-        addExpr(first.getNext(), 1, rhsContext);
+        addExpr(first.getNext(), 1, Context.OTHER);
         cc.addOp(":", true);
-        addExpr(last, 1, rhsContext);
+        addExpr(last, 1, Context.OTHER);
         break;
       }
 
diff --git a/test/com/google/javascript/jscomp/CodePrinterTest.java b/test/com/google/javascript/jscomp/CodePrinterTest.java
index a369e4c6..de53fc76 100644
--- a/test/com/google/javascript/jscomp/CodePrinterTest.java
+++ b/test/com/google/javascript/jscomp/CodePrinterTest.java
@@ -466,9 +466,6 @@ public class CodePrinterTest extends TestCase {
     // Test we correctly handle an in operator inside a comma.
     assertPrintSame("for(x,(y in z);;)foo()");
     assertPrintSame("for(var x,w=(y in z);;)foo()");
-
-    // And in operator inside a hook.
-    assertPrintSame("for(a=c?0:(0 in d);;)foo()");
   }
 
   public void testLiteralProperty() {
