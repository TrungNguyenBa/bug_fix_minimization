diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java
index 8361ac9b..9867a140 100644
--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java
+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java
@@ -22,7 +22,6 @@ import com.google.common.collect.Multimap;
 import com.google.common.collect.Sets;
 import com.google.javascript.jscomp.ControlFlowGraph.Branch;
 import com.google.javascript.jscomp.Scope.Var;
-import com.google.javascript.jscomp.graph.DiGraph.DiGraphEdge;
 import com.google.javascript.jscomp.graph.GraphNode;
 import com.google.javascript.jscomp.graph.LatticeElement;
 import com.google.javascript.rhino.Node;
@@ -146,26 +145,10 @@ class MaybeReachingVariableUse extends
   @Override
   ReachingUses flowThrough(Node n, ReachingUses input) {
     ReachingUses output = new ReachingUses(input);
-
-    // If there's an ON_EX edge, this cfgNode may or may not get executed.
-    // We can express this concisely by just pretending this happens in
-    // a conditional.
-    boolean conditional = hasExceptionHandler(n);
-    computeMayUse(n, n, output, conditional);
-
+    computeMayUse(n, n, output, false);
     return output;
   }
 
-  private boolean hasExceptionHandler(Node cfgNode) {
-    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);
-    for (DiGraphEdge<Node, Branch> edge : branchEdges) {
-      if (edge.getValue() == Branch.ON_EX) {
-        return true;
-      }
-    }
-    return false;
-  }
-
   private void computeMayUse(
       Node n, Node cfgNode, ReachingUses output, boolean conditional) {
     switch (n.getType()) {
diff --git a/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java b/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java
index 6e5c4004..103262c2 100644
--- a/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java
+++ b/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java
@@ -500,24 +500,6 @@ public class FlowSensitiveInlineVariablesTest extends CompilerTestCase  {
         "function f(x) { var a    ; var b = x; var c    ; x = 3; return b; }");
   }
 
-  public void testIssue794a() {
-    noInline(
-        "var x = 1; " +
-        "try { x += someFunction(); } catch (e) {}" +
-        "x += 1;" +
-        "try { x += someFunction(); } catch (e) {}" +
-        "return x;");
-  }
-
-  public void testIssue794b() {
-    noInline(
-        "var x = 1; " +
-        "try { x = x + someFunction(); } catch (e) {}" +
-        "x = x + 1;" +
-        "try { x = x + someFunction(); } catch (e) {}" +
-        "return x;");
-  }
-
   private void noInline(String input) {
     inline(input, input);
   }
diff --git a/test/com/google/javascript/jscomp/MaybeReachingVariableUseTest.java b/test/com/google/javascript/jscomp/MaybeReachingVariableUseTest.java
index c6086fe4..7924eb37 100644
--- a/test/com/google/javascript/jscomp/MaybeReachingVariableUseTest.java
+++ b/test/com/google/javascript/jscomp/MaybeReachingVariableUseTest.java
@@ -108,13 +108,6 @@ public class MaybeReachingVariableUseTest extends TestCase {
     assertMatch("var x = [], foo; D: for (x in foo) { U:x }");
   }
 
-  public void testTryCatch() {
-    assertMatch(
-        "D: var x = 1; " +
-        "try { U: var y = foo() + x; } catch (e) {} " +
-        "U: var z = x;");
-  }
-
   /**
    * The def of x at D: may be used by the read of x at U:.
    */
