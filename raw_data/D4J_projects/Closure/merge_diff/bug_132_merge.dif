diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
index 520c5923..ae568e8e 100644
--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
@@ -779,9 +779,7 @@ class PeepholeSubstituteAlternateSyntax
               // evaluates LHS before cond]
               // NOTE - there are some circumstances where we can
               // proceed even if there are side effects...
-              !mayEffectMutableState(lhs) &&
-              (!mayHaveSideEffects(cond) ||
-                  (thenOp.isAssign() && thenOp.getFirstChild().isName()))) {
+              !mayEffectMutableState(lhs)) {
 
             n.removeChild(cond);
             Node assignName = thenOp.removeFirstChild();
diff --git a/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java b/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java
index 263352c4..a421ac7e 100644
--- a/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java
+++ b/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java
@@ -963,30 +963,6 @@ public class PeepholeSubstituteAlternateSyntaxTest extends CompilerTestCase {
     testSame("function f() { if (x) { if (y) { return 1; } } else f() }");
   }
 
-  public void testIssue925() {
-    test(
-        "if (x[--y] === 1) {\n" +
-        "    x[y] = 0;\n" +
-        "} else {\n" +
-        "    x[y] = 1;\n" +
-        "}",
-        "(x[--y] === 1) ? x[y] = 0 : x[y] = 1;");
-
-    test(
-        "if (x[--y]) {\n" +
-        "    a = 0;\n" +
-        "} else {\n" +
-        "    a = 1;\n" +
-        "}",
-        "a = (x[--y]) ? 0 : 1;");
-
-    test("if (x++) { x += 2 } else { x += 3 }",
-         "x++ ? x += 2 : x += 3");
-
-    test("if (x++) { x = x + 2 } else { x = x + 3 }",
-        "x = x++ ? x + 2 : x + 3");
-  }
-
   public void testBindToCall1() {
     test("(goog.bind(f))()", "f()");
     test("(goog.bind(f,a))()", "f.call(a)");
