diff --git a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
index 752e04ff..7221be51 100644
--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
@@ -169,10 +169,6 @@ public abstract class ChainableReverseAbstractInterpreter
         scope.inferQualifiedSlot(node, qualifiedName, origType, type);
         break;
 
-      case Token.THIS:
-        // "this" references aren't currently modeled in the CFG.
-        break;
-
       default:
         throw new IllegalArgumentException("Node cannot be refined. \n" +
             node.toStringTree());
diff --git a/test/com/google/javascript/jscomp/TypeInferenceTest.java b/test/com/google/javascript/jscomp/TypeInferenceTest.java
index 9269bff3..3f097b74 100644
--- a/test/com/google/javascript/jscomp/TypeInferenceTest.java
+++ b/test/com/google/javascript/jscomp/TypeInferenceTest.java
@@ -996,11 +996,4 @@ public class TypeInferenceTest extends TestCase {
 
     assertEquals("{foo: (number|undefined)}", getType("y").toString());
   }
-
-  public void testNoThisInference() {
-    JSType thisType = createNullableType(OBJECT_TYPE);
-    assumingThisType(thisType);
-    inFunction("var out = 3; if (goog.isNull(this)) out = this;");
-    verify("out", createUnionType(OBJECT_TYPE, NUMBER_TYPE));
-  }
 }
