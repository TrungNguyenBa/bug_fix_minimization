diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
index 7a0313cc..13895f32 100644
--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -1446,18 +1446,9 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {
       return n;
     }
 
-    Node current = left.getFirstChild();
-    Node elem = null;
-    for (int i = 0; current != null; i++) {
-      if (i != intIndex) {
-        if (mayHaveSideEffects(current)) {
-          return n;
-        }
-      } else {
-        elem = current;
-      }
-
-      current = current.getNext();
+    Node elem = left.getFirstChild();
+    for (int i = 0; elem != null && i < intIndex; i++) {
+      elem = elem.getNext();
     }
 
     if (elem == null) {
diff --git a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
index b5a907bb..92ef4b9a 100644
--- a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
+++ b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
@@ -771,10 +771,6 @@ public class PeepholeFoldConstantsTest extends CompilerTestCase {
         PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);
     fold("x = [10, 20][2]",     "",
         PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);
-
-    foldSame("x = [foo(), 0][1]");
-    fold("x = [0, foo()][1]", "x = foo()");
-    foldSame("x = [0, foo()][0]");
   }
 
   public void testFoldComplex() {
