diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java
index c248002e..7a943f83 100644
--- a/src/com/google/javascript/jscomp/ScopedAliases.java
+++ b/src/com/google/javascript/jscomp/ScopedAliases.java
@@ -275,8 +275,8 @@ class ScopedAliases implements HotSwapCompilerPass {
         Node n = v.getNode();
         int type = n.getType();
         Node parent = n.getParent();
-        if (parent.isVar() &&
-            n.hasChildren() && n.getFirstChild().isQualifiedName()) {
+        if (parent.isVar()) {
+          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {
             String name = n.getString();
             Var aliasVar = scope.getVar(name);
             aliases.put(name, aliasVar);
@@ -284,18 +284,13 @@ class ScopedAliases implements HotSwapCompilerPass {
             String qualifiedName =
                 aliasVar.getInitialValue().getQualifiedName();
             transformation.addAlias(name, qualifiedName);
-        } else if (v.isBleedingFunction()) {
-          // Bleeding functions already get a BAD_PARAMETERS error, so just
-          // do nothing.
-        } else if (parent.getType() == Token.LP) {
-          // Parameters of the scope function also get a BAD_PARAMETERS
-          // error.
           } else {
             // TODO(robbyw): Support using locals for private variables.
             report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
           }
         }
       }
+    }
 
     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {
       if (preprocessorSymbolTable != null) {
diff --git a/test/com/google/javascript/jscomp/ScopedAliasesTest.java b/test/com/google/javascript/jscomp/ScopedAliasesTest.java
index 30f85d2c..96a9920f 100644
--- a/test/com/google/javascript/jscomp/ScopedAliasesTest.java
+++ b/test/com/google/javascript/jscomp/ScopedAliasesTest.java
@@ -313,18 +313,18 @@ public class ScopedAliasesTest extends CompilerTestCase {
         " * @constructor\n" +
         " */\n" +
         "foo.Foo = function() {};" +
-        "/** @param {Foo.Bar} x */ foo.Foo.actual = function(x) {3};" +
+        "/** @param {Foo.Bar} x */ function actual(x) {3}" +
         "var Foo = foo.Foo;" +
         "/** @constructor */ Foo.Bar = function() {};" +
-        "/** @param {foo.Foo.Bar} x */ foo.Foo.expected = function(x) {};",
+        "/** @param {foo.Foo.Bar} x */ function expected(x) {}",
 
         "/**\n" +
         " * @constructor\n" +
         " */\n" +
         "foo.Foo = function() {};" +
-        "/** @param {foo.Foo.Bar} x */ foo.Foo.actual = function(x) {3};" +
+        "/** @param {foo.Foo.Bar} x */ function actual(x) {3}" +
         "/** @constructor */ foo.Foo.Bar = function() {};" +
-        "/** @param {foo.Foo.Bar} x */ foo.Foo.expected = function(x) {};");
+        "/** @param {foo.Foo.Bar} x */ function expected(x) {}");
     verifyTypes();
   }
 
@@ -410,8 +410,6 @@ public class ScopedAliasesTest extends CompilerTestCase {
         ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);
     testScopedFailure("var x = goog.dom, y = 10",
         ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);
-    testScopedFailure("function f() {}",
-        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);
   }
 
   // Alias Recording Tests
