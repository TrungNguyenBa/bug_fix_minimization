diff --git a/src/com/google/javascript/jscomp/ProcessCommonJSModules.java b/src/com/google/javascript/jscomp/ProcessCommonJSModules.java
index fa01cd9e..a0f2dda0 100644
--- a/src/com/google/javascript/jscomp/ProcessCommonJSModules.java
+++ b/src/com/google/javascript/jscomp/ProcessCommonJSModules.java
@@ -16,7 +16,6 @@
 package com.google.javascript.jscomp;
 
 import com.google.common.base.Preconditions;
-import com.google.common.collect.Sets;
 import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
 import com.google.javascript.rhino.IR;
 import com.google.javascript.rhino.Node;
@@ -24,7 +23,6 @@ import com.google.javascript.rhino.Node;
 import java.io.File;
 import java.net.URI;
 import java.net.URISyntaxException;
-import java.util.Set;
 import java.util.regex.Pattern;
 
 /**
@@ -125,7 +123,6 @@ public class ProcessCommonJSModules implements CompilerPass {
       AbstractPostOrderCallback {
 
     private int scriptNodeCount = 0;
-    private Set<String> modulesWithExports = Sets.newHashSet();
 
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
@@ -205,10 +202,6 @@ public class ProcessCommonJSModules implements CompilerPass {
      */
     private void emitOptionalModuleExportsOverride(Node script,
         String moduleName) {
-      if (!modulesWithExports.contains(moduleName)) {
-        return;
-      }
-
       Node moduleExportsProp = IR.getprop(IR.name(moduleName),
           IR.string("module$exports"));
       script.addChildToBack(IR.ifNode(
@@ -229,7 +222,6 @@ public class ProcessCommonJSModules implements CompilerPass {
       Node exports = prop.getChildAtIndex(1);
       exports.putProp(Node.ORIGINALNAME_PROP, "exports");
       exports.setString("module$exports");
-      modulesWithExports.add(moduleName);
     }
 
     /**
