diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
index 8c3159d6..62ff35dd 100644
--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java
+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
@@ -154,7 +154,6 @@ class InlineObjectLiterals implements CompilerPass {
      */
     private boolean isInlinableObject(List<Reference> refs) {
       boolean ret = false;
-      Set<String> validProperties = Sets.newHashSet();
       for (Reference ref : refs) {
         Node name = ref.getNode();
         Node parent = ref.getParent();
@@ -170,23 +169,6 @@ class InlineObjectLiterals implements CompilerPass {
               && gramps.getFirstChild() == parent) {
             return false;
           }
-
-          // NOTE(nicksantos): This pass's object-splitting algorithm has
-          // a blind spot. It assumes that if a property isn't defined on an
-          // object, then the value is undefined. This is not true, because
-          // Object.prototype can have arbitrary properties on it.
-          //
-          // We short-circuit this problem by bailing out if we see a reference
-          // to a property that isn't defined on the object literal. This
-          // isn't a perfect algorithm, but it should catch most cases.
-          String propName = parent.getLastChild().getString();
-          if (!validProperties.contains(propName)) {
-            if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {
-              validProperties.add(propName);
-            } else {
-              return false;
-            }
-          }
           continue;
         }
 
@@ -221,9 +203,6 @@ class InlineObjectLiterals implements CompilerPass {
             // ES5 get/set not supported.
             return false;
           }
-
-          validProperties.add(child.getString());
-
           Node childVal = child.getFirstChild();
           // Check if childVal is the parent of any of the passed in
           // references, as that is how self-referential assignments
diff --git a/test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java b/test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java
index 369fc2f4..2e15d4f4 100644
--- a/test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java
+++ b/test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java
@@ -172,7 +172,14 @@ public class InlineObjectLiteralsTest extends CompilerTestCase {
          "JSCompiler_object_inline_a_0=a,JSCompiler_object_inline_b_1=b,true;" +
          "if(JSCompiler_object_inline_a_0) g(JSCompiler_object_inline_b_1)");
     testLocal("var x = {}; var b = f(); x = {a:a, b:b}; if(x.a) g(x.b) + x.c",
-         "var x = {}; var b = f(); x = {a:a, b:b}; if(x.a) g(x.b) + x.c");
+         "var JSCompiler_object_inline_a_0;" +
+         "var JSCompiler_object_inline_b_1;" +
+         "var JSCompiler_object_inline_c_2;" +
+         "var b=f();" +
+         "JSCompiler_object_inline_a_0=a,JSCompiler_object_inline_b_1=b," +
+         "  JSCompiler_object_inline_c_2=void 0,true;" +
+         "if(JSCompiler_object_inline_a_0) " +
+         "  g(JSCompiler_object_inline_b_1) + JSCompiler_object_inline_c_2");
     testLocal("var x; var b = f(); x = {a:a, b:b}; x.c = c; if(x.a) g(x.b) + x.c",
          "var JSCompiler_object_inline_a_0;" +
          "var JSCompiler_object_inline_b_1;" +
@@ -213,7 +220,14 @@ public class InlineObjectLiteralsTest extends CompilerTestCase {
 
   public void testObject12() {
     testLocal("var a; a = {x:1, y:2}; f(a.x, a.y2);",
-        "var a; a = {x:1, y:2}; f(a.x, a.y2);");
+         "var JSCompiler_object_inline_x_0;" +
+         "var JSCompiler_object_inline_y_1;" +
+         "var JSCompiler_object_inline_y2_2;" +
+         "JSCompiler_object_inline_x_0=1," +
+         "JSCompiler_object_inline_y_1=2," +
+         "JSCompiler_object_inline_y2_2=void 0," +
+         "true;" +
+         "f(JSCompiler_object_inline_x_0, JSCompiler_object_inline_y2_2);");
   }
 
   public void testObject13() {
@@ -286,7 +300,14 @@ public class InlineObjectLiteralsTest extends CompilerTestCase {
       "}");
 
     testLocal("var a; while (1) { f(a.x, a.y); a = {x:1, y:1};}",
-        "var a; while (1) { f(a.x, a.y); a = {x:1, y:1};}");
+      "var JSCompiler_object_inline_x_0;" +
+      "var JSCompiler_object_inline_y_1;" +
+      "for(;1;) {" +
+      " f(JSCompiler_object_inline_x_0,JSCompiler_object_inline_y_1);" +
+      " JSCompiler_object_inline_x_0=1," +
+      " JSCompiler_object_inline_y_1=1," +
+      " true" +
+      "}");
   }
 
   public void testObject23() {
@@ -340,14 +361,6 @@ public class InlineObjectLiteralsTest extends CompilerTestCase {
     testLocal("var a; a = {}", "true");
   }
 
-  public void testIssue724() {
-    testSameLocal(
-        "var getType; getType = {};" +
-        "return functionToCheck && " +
-        "   getType.toString.apply(functionToCheck) === " +
-        "   '[object Function]';");
-  }
-
   private final String LOCAL_PREFIX = "function local(){";
   private final String LOCAL_POSTFIX = "}";
 
diff --git a/test/com/google/javascript/jscomp/IntegrationTest.java b/test/com/google/javascript/jscomp/IntegrationTest.java
index 2a1766e6..a9e2d908 100644
--- a/test/com/google/javascript/jscomp/IntegrationTest.java
+++ b/test/com/google/javascript/jscomp/IntegrationTest.java
@@ -1669,24 +1669,6 @@ public class IntegrationTest extends IntegrationTestCase {
     assertEquals(result, lastCompiler.toSource());
   }
 
-  public void testIssue724() {
-    CompilerOptions options = createCompilerOptions();
-    CompilationLevel.ADVANCED_OPTIMIZATIONS
-        .setOptionsForCompilationLevel(options);
-    String code =
-        "isFunction = function(functionToCheck) {" +
-        "  var getType = {};" +
-        "  return functionToCheck && " +
-        "      getType.toString.apply(functionToCheck) === " +
-        "     '[object Function]';" +
-        "};";
-    String result =
-        "isFunction=function(a){var b={};" +
-        "return a&&\"[object Function]\"===b.b.a(a)}";
-
-    test(options, code, result);
-  }
-
   public void testCoaleseVariables() {
     CompilerOptions options = createCompilerOptions();
 
