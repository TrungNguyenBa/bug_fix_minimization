diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java
index 96f256d8..07ecdfa4 100644
--- a/src/com/google/javascript/jscomp/TypeCheck.java
+++ b/src/com/google/javascript/jscomp/TypeCheck.java
@@ -28,7 +28,6 @@ import static com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE;
 import static com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE;
 
 import com.google.common.base.Preconditions;
-import com.google.common.collect.ImmutableSet;
 import com.google.javascript.jscomp.CheckLevel;
 import com.google.javascript.jscomp.Scope.Var;
 import com.google.javascript.jscomp.type.ReverseAbstractInterpreter;
@@ -1567,15 +1566,8 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
       String functionName, HashMap<String, ObjectType> properties,
       HashMap<String, ObjectType> currentProperties,
       ObjectType interfaceType) {
-    ObjectType implicitProto = interfaceType.getImplicitPrototype();
-    Set<String> currentPropertyNames;
-    if (implicitProto == null) {
-      // This can be the case if interfaceType is proxy to a non-existent
-      // object (which is a bad type annotation, but shouldn't crash).
-      currentPropertyNames = ImmutableSet.of();
-    } else {
-      currentPropertyNames = implicitProto.getOwnPropertyNames();
-    }
+    Set<String> currentPropertyNames =
+        interfaceType.getImplicitPrototype().getOwnPropertyNames();
     for (String name : currentPropertyNames) {
       ObjectType oType = properties.get(name);
       if (oType != null) {
diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
index 3fb9439e..b693dd29 100644
--- a/test/com/google/javascript/jscomp/TypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
@@ -3768,18 +3768,6 @@ public class TypeCheckTest extends CompilerTypeTestCase {
         "Bad type annotation. Unknown type nonExistent");
   }
 
-  public void testBadInterfaceExtendsNonExistentInterfaces() throws Exception {
-    String js = "/** @interface \n" +
-        " * @extends {nonExistent1} \n" +
-        " * @extends {nonExistent2} \n" +
-        " */function A() {}";
-    String[] expectedWarnings = {
-      "Bad type annotation. Unknown type nonExistent1",
-      "Bad type annotation. Unknown type nonExistent2"
-    };
-    testTypes(js, expectedWarnings);
-  }
-
   public void testBadInterfaceExtends2() throws Exception {
     testTypes("/** @constructor */function A() {}\n" +
         "/** @interface \n * @extends {A} */function B() {}",
