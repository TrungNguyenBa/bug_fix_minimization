diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
index cfdccbe6..f1f57359 100644
--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
@@ -1352,19 +1352,10 @@ public final class JsDocInfoParser {
 
     boolean ignoreStar = false;
 
-    // Track the start of the line to count whitespace that
-    // the tokenizer skipped. Because this case is rare, it's easier
-    // to do this here than in the tokenizer.
-    int lineStartChar = -1;
-
     do {
       switch (token) {
         case STAR:
-          if (ignoreStar) {
-            // Mark the position after the star as the new start of the line.
-            lineStartChar = stream.getCharno() + 1;
-          } else {
-            // The star is part of the comment.
+          if (!ignoreStar) {
             if (builder.length() > 0) {
               builder.append(' ');
             }
@@ -1381,34 +1372,16 @@ public final class JsDocInfoParser {
           }
 
           ignoreStar = true;
-          lineStartChar = 0;
           token = next();
           continue;
 
-        default:
-          ignoreStar = false;
-          state = State.SEARCHING_ANNOTATION;
-
-          boolean isEOC = token == JsDocToken.EOC;
-          if (!isEOC) {
-            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {
-              int numSpaces = stream.getCharno() - lineStartChar;
-              for (int i = 0; i < numSpaces; i++) {
-                builder.append(' ');
-              }
-              lineStartChar = -1;
-            } else if (builder.length() > 0) {
-              // All tokens must be separated by a space.
-              builder.append(' ');
-            }
-          }
-
-          if (token == JsDocToken.EOC ||
-              token == JsDocToken.EOF ||
+        case ANNOTATION:
+        case EOC:
+        case EOF:
           // When we're capturing a license block, annotations
           // in the block are ok.
-              (token == JsDocToken.ANNOTATION &&
-               option != WhitespaceOption.PRESERVE)) {
+          if (!(option == WhitespaceOption.PRESERVE &&
+                token == JsDocToken.ANNOTATION)) {
             String multilineText = builder.toString();
 
             if (option != WhitespaceOption.PRESERVE) {
@@ -1426,6 +1399,16 @@ public final class JsDocInfoParser {
             return new ExtractionInfo(multilineText, token);
           }
 
+          // FALL THROUGH
+
+        default:
+          ignoreStar = false;
+          state = State.SEARCHING_ANNOTATION;
+
+          if (builder.length() > 0) {
+            builder.append(' ');
+          }
+
           builder.append(toString(token));
 
           line = stream.getRemainingJSDocLine();
diff --git a/test/com/google/javascript/jscomp/IntegrationTest.java b/test/com/google/javascript/jscomp/IntegrationTest.java
index efdad8c2..0f49999d 100644
--- a/test/com/google/javascript/jscomp/IntegrationTest.java
+++ b/test/com/google/javascript/jscomp/IntegrationTest.java
@@ -1657,23 +1657,6 @@ public class IntegrationTest extends TestCase {
     testSame(options, code);
   }
 
-  public void testIssue701() {
-    // Check ASCII art in license comments.
-    String ascii = "/**\n" +
-        " * @preserve\n" +
-        "   This\n" +
-        "     is\n" +
-        "       ASCII    ART\n" +
-        "*/";
-    String result = "/*\n\n" +
-        "   This\n" +
-        "     is\n" +
-        "       ASCII    ART\n" +
-        "*/\n";
-    testSame(createCompilerOptions(), ascii);
-    assertEquals(result, lastCompiler.toSource());
-  }
-
   public void testCoaleseVariables() {
     CompilerOptions options = createCompilerOptions();
 
diff --git a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
index 26accc96..26731216 100644
--- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
@@ -1275,7 +1275,7 @@ public class JsDocInfoParserTest extends BaseJSTypeTestCase {
     this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();
     String comment = "@preserve Foo\nBar\n\nBaz*/";
     parse(comment);
-    assertEquals(" Foo\nBar\n\nBaz", node.getJSDocInfo().getLicense());
+    assertEquals(" Foo\n Bar\n\n Baz", node.getJSDocInfo().getLicense());
   }
 
   public void testParseLicense() throws Exception {
@@ -1283,14 +1283,6 @@ public class JsDocInfoParserTest extends BaseJSTypeTestCase {
     this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();
     String comment = "@license Foo\nBar\n\nBaz*/";
     parse(comment);
-    assertEquals(" Foo\nBar\n\nBaz", node.getJSDocInfo().getLicense());
-  }
-
-  public void testParseLicenseAscii() throws Exception {
-    Node node = new Node(1);
-    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();
-    String comment = "@license Foo\n *   Bar\n\n  Baz*/";
-    parse(comment);
     assertEquals(" Foo\n Bar\n\n Baz", node.getJSDocInfo().getLicense());
   }
 
