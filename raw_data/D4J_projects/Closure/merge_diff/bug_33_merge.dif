diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java
index 81a7d89e..1a51afb6 100644
--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java
+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java
@@ -553,11 +553,6 @@ class PrototypeObjectType extends ObjectType {
 
   @Override
   public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
-    if (hasReferenceName()) {
-      return;
-    }
-
     // Handle the case where the constraint object is a record type.
     //
     // param constraintObj {{prop: (number|undefined)}}
diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
index 0213f37f..90847750 100644
--- a/test/com/google/javascript/jscomp/TypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
@@ -5773,48 +5773,6 @@ public class TypeCheckTest extends CompilerTypeTestCase {
          "}");
   }
 
-  public void testIssue700() throws Exception {
-    testTypes(
-        "/**\n" +
-        " * @param {{text: string}} opt_data\n" +
-        " * @return {string}\n" +
-        " */\n" +
-        "function temp1(opt_data) {\n" +
-        "  return opt_data.text;\n" +
-        "}\n" +
-        "\n" +
-        "/**\n" +
-        " * @param {{activity: (boolean|number|string|null|Object)}} opt_data\n" +
-        " * @return {string}\n" +
-        " */\n" +
-        "function temp2(opt_data) {\n" +
-        "  /** @notypecheck */\n" +
-        "  function __inner() {\n" +
-        "    return temp1(opt_data.activity);\n" +
-        "  }\n" +
-        "  return __inner();\n" +
-        "}\n" +
-        "\n" +
-        "/**\n" +
-        " * @param {{n: number, text: string, b: boolean}} opt_data\n" +
-        " * @return {string}\n" +
-        " */\n" +
-        "function temp3(opt_data) {\n" +
-        "  return 'n: ' + opt_data.n + ', t: ' + opt_data.text + '.';\n" +
-        "}\n" +
-        "\n" +
-        "function callee() {\n" +
-        "  var output = temp3({\n" +
-        "    n: 0,\n" +
-        "    text: 'a string',\n" +
-        "    b: true\n" +
-        "  })\n" +
-        "  alert(output);\n" +
-        "}\n" +
-        "\n" +
-        "callee();");
-  }
-
   /**
    * Tests that the || operator is type checked correctly, that is of
    * the type of the first argument or of the second argument. See
@@ -5953,7 +5911,7 @@ public class TypeCheckTest extends CompilerTypeTestCase {
 
   public void testBug1942972() throws Exception {
     testTypes(
-        "var google = {\n" +
+        "var google = {\n"+
         "  gears: {\n" +
         "    factory: {},\n" +
         "    workerPool: {}\n" +
@@ -8418,7 +8376,7 @@ public class TypeCheckTest extends CompilerTypeTestCase {
         "    f(this.bar.baz);" +
         "  }" +
         "};",
-        "actual parameter 1 of f does not match formal parameter\n" +
+        "actual parameter 1 of f does not match formal parameter\n"+
         "found   : (null|{baz: number})\n" +
         "required: number");
   }
@@ -8445,7 +8403,7 @@ public class TypeCheckTest extends CompilerTypeTestCase {
         "    g(this.bar);" +
         "  }" +
         "};",
-        "actual parameter 1 of f does not match formal parameter\n" +
+        "actual parameter 1 of f does not match formal parameter\n"+
         "found   : (null|{baz: number})\n" +
         "required: number");
   }
