diff --git a/src/com/google/javascript/jscomp/CodeConsumer.java b/src/com/google/javascript/jscomp/CodeConsumer.java
index 3522e89e..8023324c 100644
--- a/src/com/google/javascript/jscomp/CodeConsumer.java
+++ b/src/com/google/javascript/jscomp/CodeConsumer.java
@@ -241,12 +241,11 @@ abstract class CodeConsumer {
     // This is not pretty printing. This is to prevent misparsing of x- -4 as
     // x--4 (which is a syntax error).
     char prev = getLastChar();
-    boolean negativeZero = isNegativeZero(x);
-    if ((x < 0 || negativeZero) && prev == '-') {
+    if (x < 0 && prev == '-') {
       add(" ");
     }
 
-    if ((long) x == x && !negativeZero) {
+    if ((long) x == x && !isNegativeZero(x)) {
       long value = (long) x;
       long mantissa = value;
       int exp = 0;
diff --git a/test/com/google/javascript/jscomp/CodePrinterTest.java b/test/com/google/javascript/jscomp/CodePrinterTest.java
index a76dfa64..420ffba4 100644
--- a/test/com/google/javascript/jscomp/CodePrinterTest.java
+++ b/test/com/google/javascript/jscomp/CodePrinterTest.java
@@ -1367,10 +1367,4 @@ public class CodePrinterTest extends TestCase {
     String actual = printNode(current).replace("\n", "");
     assertEquals(expected, actual);
   }
-
-  public void testMinusNegativeZero() {
-    // Negative zero is weird, because we have to be able to distinguish
-    // it from positive zero (there are some subtle differences in behavior).
-    assertPrint("x- -0", "x- -0.0");
-  }
 }
