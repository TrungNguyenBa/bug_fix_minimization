diff --git a/src/com/google/javascript/jscomp/FunctionTypeBuilder.java b/src/com/google/javascript/jscomp/FunctionTypeBuilder.java
index e20d788d..e2f0f437 100644
--- a/src/com/google/javascript/jscomp/FunctionTypeBuilder.java
+++ b/src/com/google/javascript/jscomp/FunctionTypeBuilder.java
@@ -271,7 +271,7 @@ final class FunctionTypeBuilder {
               oldParam.isVarArgs() ||
               oldParam.isOptionalArg();
 
-          // The subclass method might write its var_args as individual
+          // The subclass method might right its var_args as individual
           // arguments.
           if (currentParam.getNext() != null && newParam.isVarArgs()) {
             newParam.setVarArgs(false);
@@ -287,12 +287,6 @@ final class FunctionTypeBuilder {
               codingConvention.isVarArgsParameter(currentParam));
         }
       }
-
-      // Clone any remaining params that aren't in the function literal.
-      while (oldParams.hasNext()) {
-        paramBuilder.newParameterFromNode(oldParams.next());
-      }
-
       parametersNode = paramBuilder.build();
     }
     return this;
@@ -443,7 +437,6 @@ final class FunctionTypeBuilder {
         Sets.<String>newHashSet() :
         Sets.newHashSet(info.getParameterNames());
     boolean foundTemplateType = false;
-    boolean isVarArgs = false;
     for (Node arg : argsParent.children()) {
       String argumentName = arg.getString();
       allJsDocParams.remove(argumentName);
@@ -451,8 +444,7 @@ final class FunctionTypeBuilder {
       // type from JSDocInfo
       JSType parameterType = null;
       boolean isOptionalParam = isOptionalParameter(arg, info);
-      isVarArgs = isVarArgsParameter(arg, info);
-
+      boolean isVarArgs = isVarArgsParameter(arg, info);
       if (info != null && info.hasParameterType(argumentName)) {
         parameterType =
             info.getParameterType(argumentName).evaluate(scope, typeRegistry);
@@ -482,14 +474,6 @@ final class FunctionTypeBuilder {
       }
     }
 
-    // Copy over any old parameters that aren't in the param list.
-    if (!isVarArgs) {
-      while (oldParameterType != null && !isVarArgs) {
-        builder.newParameterFromNode(oldParameterType);
-        oldParameterType = oldParameterType.getNext();
-      }
-    }
-
     if (templateTypeName != null && !foundTemplateType) {
       reportError(TEMPLATE_TYPE_EXPECTED, fnName);
     }
