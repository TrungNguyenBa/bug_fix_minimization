diff --git a/src/com/google/debugging/sourcemap/FilePosition.java b/src/com/google/debugging/sourcemap/FilePosition.java
index f84320a0..cc7243bb 100644
--- a/src/com/google/debugging/sourcemap/FilePosition.java
+++ b/src/com/google/debugging/sourcemap/FilePosition.java
@@ -20,6 +20,9 @@ package com.google.debugging.sourcemap;
  * Represents a position in a source file.
  *
  */
+/**
+ * Represents a position in a source file.
+ */
 public class FilePosition {
   private final int line;
   private final int column;
@@ -30,18 +33,15 @@ public class FilePosition {
   }
 
   /**
-   * Returns the line number of this position.
-   * Note: The v1 and v2 source maps use a line number with the first line
-   * being 1, whereas the v3 source map corrects this and uses a first line
-   * number of 0 to be consistent with the column representation.
+   * Returns the line number of this postion.
    */
   public int getLine() {
     return line;
   }
 
   /**
-   * @return the character index on the line
-   * of this position, with the first column being 0.
+   * Returns the character index on the line
+   * of this position.
    */
   public int getColumn() {
     return column;
diff --git a/src/com/google/debugging/sourcemap/SourceMapConsumerV3.java b/src/com/google/debugging/sourcemap/SourceMapConsumerV3.java
index 5ee9108c..3b07ae45 100644
--- a/src/com/google/debugging/sourcemap/SourceMapConsumerV3.java
+++ b/src/com/google/debugging/sourcemap/SourceMapConsumerV3.java
@@ -483,11 +483,10 @@ public class SourceMapConsumerV3 implements SourceMapConsumer,
     if (entry.getSourceFileId() == UNMAPPED) {
       return null;
     } else {
-      // Adjust the line/column here to be start at 1.
       Builder x = OriginalMapping.newBuilder()
         .setOriginalFile(sources[entry.getSourceFileId()])
-        .setLineNumber(entry.getSourceLine() + 1)
-        .setColumnPosition(entry.getSourceColumn() + 1);
+        .setLineNumber(entry.getSourceLine())
+        .setColumnPosition(entry.getSourceColumn());
       if (entry.getNameId() != UNMAPPED) {
         x.setIdentifier(names[entry.getNameId()]);
       }
diff --git a/src/com/google/javascript/jscomp/SourceMap.java b/src/com/google/javascript/jscomp/SourceMap.java
index 71924081..04ff6233 100644
--- a/src/com/google/javascript/jscomp/SourceMap.java
+++ b/src/com/google/javascript/jscomp/SourceMap.java
@@ -22,8 +22,6 @@ import com.google.debugging.sourcemap.FilePosition;
 import com.google.debugging.sourcemap.SourceMapFormat;
 import com.google.debugging.sourcemap.SourceMapGenerator;
 import com.google.debugging.sourcemap.SourceMapGeneratorFactory;
-import com.google.debugging.sourcemap.SourceMapGeneratorV1;
-import com.google.debugging.sourcemap.SourceMapGeneratorV2;
 import com.google.javascript.rhino.Node;
 
 import java.io.IOException;
@@ -131,19 +129,9 @@ public class SourceMap {
 
     String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);
 
-    // Strangely, Rhino source lines are one based but columns are
-    // zero based.
-    // We don't change this for the v1 or v2 source maps but for
-    // v3 we make them both 0 based.
-    int lineBaseOffset = 1;
-    if (generator instanceof SourceMapGeneratorV1
-        || generator instanceof SourceMapGeneratorV2) {
-      lineBaseOffset = 0;
-    }
-
     generator.addMapping(
         sourceFile, originalName,
-        new FilePosition(node.getLineno() - lineBaseOffset, node.getCharno()),
+        new FilePosition(node.getLineno(), node.getCharno()),
         outputStartPosition, outputEndPosition);
   }
 
