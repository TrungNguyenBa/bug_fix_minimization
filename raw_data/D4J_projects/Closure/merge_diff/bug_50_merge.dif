diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java
index afaf85a8..1c4a3458 100644
--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java
+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java
@@ -372,11 +372,9 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{
     }
 
     Node right = callTarget.getNext();
-    if (right != null) {
-      if (right.getNext() != null || !NodeUtil.isImmutableValue(right)) {
+    if (right != null && !NodeUtil.isImmutableValue(right)) {
       return n;
     }
-    }
 
     Node arrayNode = callTarget.getFirstChild();
     Node functionName = arrayNode.getNext();
@@ -386,13 +384,6 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{
       return n;
     }
 
-    if (right != null && right.getType() == Token.STRING
-        && ",".equals(right.getString())) {
-      // "," is the default, it doesn't need to be explicit
-      n.removeChild(right);
-      reportCodeChange();
-    }
-
     String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
     List<Node> arrayFoldedChildren = Lists.newLinkedList();
     StringBuilder sb = null;
diff --git a/test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java b/test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java
index d0f0daf4..3a6e5b70 100644
--- a/test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java
+++ b/test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java
@@ -74,22 +74,17 @@ public class PeepholeReplaceKnownMethodsTest extends CompilerTestCase {
     fold("x = [,,'a'].join(',')", "x = ',,a'");
   }
 
-  public void testNoStringJoin() {
-    foldSame("x = [].join(',',2)");
-    foldSame("x = [].join(f)");
-  }
-
   public void testStringJoinAdd() {
     fold("x = ['a', 'b', 'c'].join('')", "x = \"abc\"");
     fold("x = [].join(',')", "x = \"\"");
     fold("x = ['a'].join(',')", "x = \"a\"");
     fold("x = ['a', 'b', 'c'].join(',')", "x = \"a,b,c\"");
     fold("x = ['a', foo, 'b', 'c'].join(',')",
-        "x = [\"a\",foo,\"b,c\"].join()");
+        "x = [\"a\",foo,\"b,c\"].join(\",\")");
     fold("x = [foo, 'a', 'b', 'c'].join(',')",
-        "x = [foo,\"a,b,c\"].join()");
+        "x = [foo,\"a,b,c\"].join(\",\")");
     fold("x = ['a', 'b', 'c', foo].join(',')",
-        "x = [\"a,b,c\",foo].join()");
+        "x = [\"a,b,c\",foo].join(\",\")");
 
     // Works with numbers
     fold("x = ['a=', 5].join('')", "x = \"a=5\"");
@@ -105,16 +100,15 @@ public class PeepholeReplaceKnownMethodsTest extends CompilerTestCase {
          "x = [\"a\",\"5\",\"c\"].join(\"a very very very long chain\")");
 
     // TODO(user): Its possible to fold this better.
-    foldSame("x = ['', foo].join('-')");
-    foldSame("x = ['', foo, ''].join()");
+    foldSame("x = ['', foo].join(',')");
+    foldSame("x = ['', foo, ''].join(',')");
 
-    fold("x = ['', '', foo, ''].join(',')",
-         "x = [',', foo, ''].join()");
+    fold("x = ['', '', foo, ''].join(',')", "x = [',', foo, ''].join(',')");
     fold("x = ['', '', foo, '', ''].join(',')",
-         "x = [',', foo, ','].join()");
+         "x = [',', foo, ','].join(',')");
 
     fold("x = ['', '', foo, '', '', bar].join(',')",
-         "x = [',', foo, ',', bar].join()");
+         "x = [',', foo, ',', bar].join(',')");
 
     fold("x = [1,2,3].join('abcdef')",
          "x = '1abcdef2abcdef3'");
