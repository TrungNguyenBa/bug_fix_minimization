diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
index d92b16cb..a7544505 100644
--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java
+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
@@ -327,10 +327,6 @@ class InlineObjectLiterals implements CompilerPass {
                    NodeUtil.newUndefinedNode(null)));
       }
 
-      Node replacement;
-      if (nodes.isEmpty()) {
-        replacement = new Node(Token.TRUE);
-      } else {
       // All assignments evaluate to true, so make sure that the
       // expr statement evaluates to true in case it matters.
       nodes.add(new Node(Token.TRUE));
@@ -339,7 +335,7 @@ class InlineObjectLiterals implements CompilerPass {
       // create a tree. In the tree the first child be the COMMA to match
       // the parser, otherwise tree equality tests fail.
       nodes = Lists.reverse(nodes);
-        replacement = new Node(Token.COMMA);
+      Node replacement = new Node(Token.COMMA);
       Node cur = replacement;
       int i;
       for (i = 0; i < nodes.size() - 2; i++) {
@@ -350,7 +346,6 @@ class InlineObjectLiterals implements CompilerPass {
       }
       cur.addChildToFront(nodes.get(i));
       cur.addChildToFront(nodes.get(i + 1));
-      }
 
       Node replace = ref.getParent();
       replacement.copyInformationFromForTree(replace);
