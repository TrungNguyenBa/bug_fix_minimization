diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
index 167e2cbf..9ceae7c5 100644
--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
@@ -865,9 +865,9 @@ public final class JsDocInfoParser {
                         }
                         break;
                     }
-                  }
 
                     token = eatTokensUntilEOL();
+                  }
                   continue retry;
               }
             }
@@ -1706,7 +1706,6 @@ public final class JsDocInfoParser {
       }
     }
 
-    restoreLookAhead(token);
     return reportGenericTypeSyntaxWarning();
   }
 
@@ -1759,7 +1758,6 @@ public final class JsDocInfoParser {
     // NOTE(nicksantos): We're not implementing generics at the moment, so
     // just throw out TypeParameters.
     if (token != JsDocToken.LP) {
-      restoreLookAhead(token);
       return reportTypeSyntaxWarning("msg.jsdoc.missing.lp");
     }
 
diff --git a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
index ddef0bff..be8599c8 100644
--- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
@@ -505,16 +505,6 @@ public class JsDocInfoParserTest extends BaseJSTypeTestCase {
     parse("@type {function(Object, string, *)|null} */");
   }
 
-  public void testIssue477() throws Exception {
-    parse("@type function */",
-        "Bad type annotation. missing opening (");
-  }
-
-  public void testMalformedThisAnnotation() throws Exception {
-    parse("@this */",
-        "Bad type annotation. type not recognized due to syntax error");
-  }
-
   public void testParseFunctionalTypeError1() throws Exception {
     parse("@type {function number):string}*/",
         "Bad type annotation. missing opening (");
