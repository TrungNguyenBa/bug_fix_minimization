diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java
index 5edb4f05..74f1564c 100644
--- a/src/com/google/javascript/jscomp/TypeCheck.java
+++ b/src/com/google/javascript/jscomp/TypeCheck.java
@@ -226,11 +226,6 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
           "Interface {0} has a property {1} with incompatible types in " +
           "its super interfaces {2} and {3}");
 
-  static final DiagnosticType EXPECTED_THIS_TYPE =
-      DiagnosticType.warning(
-          "JSC_EXPECTED_THIS_TYPE",
-          "\"{0}\" must be called with a \"this\" type");
-
   static final DiagnosticGroup ALL_DIAGNOSTICS = new DiagnosticGroup(
       DETERMINISTIC_TEST,
       DETERMINISTIC_TEST_NO_RESULT,
@@ -259,7 +254,6 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
       WRONG_ARGUMENT_COUNT,
       ILLEGAL_IMPLICIT_CAST,
       INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
-      EXPECTED_THIS_TYPE,
       RhinoErrorReporter.TYPE_PARSE_ERROR,
       TypedScopeCreator.UNKNOWN_LENDS,
       TypedScopeCreator.LENDS_ON_NON_OBJECT,
@@ -1575,16 +1569,6 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
         report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());
       }
 
-      // Functions with explcit 'this' types must be called in a GETPROP
-      // or GETELEM.
-      if (functionType.isOrdinaryFunction() &&
-          !functionType.getTypeOfThis().isUnknownType() &&
-          !functionType.getTypeOfThis().isNativeObjectType() &&
-          !(child.getType() == Token.GETELEM ||
-            child.getType() == Token.GETPROP)) {
-        report(t, n, EXPECTED_THIS_TYPE, functionType.toString());
-      }
-
       visitParameterList(t, n, functionType);
       ensureTyped(t, n, functionType.getReturnType());
     } else {
diff --git a/test/com/google/javascript/jscomp/RemoveUnusedNamesTest.java b/test/com/google/javascript/jscomp/RemoveUnusedNamesTest.java
index d4a2b65a..45a58de3 100644
--- a/test/com/google/javascript/jscomp/RemoveUnusedNamesTest.java
+++ b/test/com/google/javascript/jscomp/RemoveUnusedNamesTest.java
@@ -128,11 +128,7 @@ public class RemoveUnusedNamesTest extends CompilerTestCase {
   }
 
   public void testStatement() {
-    test("/**\n" +
-         " * @fileoverview\n" +
-         " * @notypecheck\n" +
-         " */ \n" +
-         "/** @constructor */" +
+    test("/** @constructor */ \n" +
         "function e(){}" +
            "var x = e.prototype.method1 = function(){};" +
            "var y = new e; x()",
diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
index 71c85bc4..28277b9b 100644
--- a/test/com/google/javascript/jscomp/TypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
@@ -4543,45 +4543,6 @@ public class TypeCheckTest extends CompilerTypeTestCase {
         "required: number");
   }
 
-  public void testThisTypeOfFunction1() throws Exception {
-    testTypes(
-        "/** @type {function(this:Object)} */ function f() {}" +
-        "f();");
-  }
-
-  public void testThisTypeOfFunction2() throws Exception {
-    testTypes(
-        "/** @constructor */ function F() {}" +
-        "/** @type {function(this:F)} */ function f() {}" +
-        "f();",
-        "\"function (this:F): ?\" must be called with a \"this\" type");
-  }
-
-  public void testThisTypeOfFunction3() throws Exception {
-    testTypes(
-        "/** @constructor */ function F() {}" +
-        "F.prototype.bar = function() {};" +
-        "var f = (new F()).bar; f();",
-        "\"function (this:F): undefined\" must be called with a \"this\" type");
-  }
-
-  public void testThisTypeOfFunction4() throws Exception {
-    testTypes(
-        "/** @constructor */ function F() {}" +
-        "F.prototype.moveTo = function(x, y) {};" +
-        "F.prototype.lineTo = function(x, y) {};" +
-        "function demo() {" +
-        "  var path = new F();" +
-        "  var points = [[1,1], [2,2]];" +
-        "  for (var i = 0; i < points.length; i++) {" +
-        "    (i == 0 ? path.moveTo : path.lineTo)(" +
-        "       points[i][0], points[i][1]);" +
-        "  }" +
-        "}",
-        "\"function (this:F, ?, ?): undefined\" " +
-        "must be called with a \"this\" type");
-  }
-
   public void testGlobalThis1() throws Exception {
     testTypes("/** @constructor */ function Window() {}" +
         "/** @param {string} msg */ " +
