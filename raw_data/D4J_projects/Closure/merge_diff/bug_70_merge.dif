diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java
index aa7e2458..210bb66e 100644
--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java
+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java
@@ -1742,7 +1742,7 @@ final class TypedScopeCreator implements ScopeCreator {
           for (Node astParameter : astParameters.children()) {
             if (jsDocParameter != null) {
               defineSlot(astParameter, functionNode,
-                  jsDocParameter.getJSType(), false);
+                  jsDocParameter.getJSType(), true);
               jsDocParameter = jsDocParameter.getNext();
             } else {
               defineSlot(astParameter, functionNode, null, true);
diff --git a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java
index d2e90dcc..87c3fdcf 100644
--- a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java
@@ -1342,13 +1342,13 @@ public class LooseTypeCheckTest extends CompilerTypeTestCase {
   }
 
   public void testFunctionArguments13() throws Exception {
-    // verifying that the argument type have non-inferrable types
+    // verifying that the argument type have inferable types
     testTypes(
         "/** @return {boolean} */ function u() { return true; }" +
-        "/** @param {boolean} b\n@return {?boolean} */" +
+        "/** @param {boolean} b\n@return {boolean} */" +
         "function f(b) { if (u()) { b = null; } return b; }",
-        "assignment\n" +
-        "found   : null\n" +
+        "inconsistent return type\n" +
+        "found   : (boolean|null)\n" +
         "required: boolean");
   }
 
@@ -1967,15 +1967,11 @@ public class LooseTypeCheckTest extends CompilerTypeTestCase {
   }
 
   public void testDuplicateLocalVarDecl() throws Exception {
-    testClosureTypesMultipleWarnings(
+    testTypes(
         "/** @param {number} x */\n" +
         "function f(x) { /** @type {string} */ var x = ''; }",
-        Lists.newArrayList(
-            "variable x redefined with type string, original definition" +
-            " at  [testcode] :2 with type number",
-            "initializing variable\n" +
-            "found   : string\n" +
-            "required: number"));
+        "variable x redefined with type string, " +
+        "original definition at [testcode]:2 with type number");
   }
 
   public void testStubFunctionDeclaration1() throws Exception {
diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
index 50007116..1a887db6 100644
--- a/test/com/google/javascript/jscomp/TypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
@@ -1417,21 +1417,6 @@ public class TypeCheckTest extends CompilerTypeTestCase {
         "required: number");
   }
 
-  public void testScoping12() throws Exception {
-    testTypes(
-        "/** @constructor */ function F() {}" +
-        "/** @type {number} */ F.prototype.bar = 3;" +
-        "/** @param {!F} f */ function g(f) {" +
-        "  /** @return {string} */" +
-        "  function h() {" +
-        "    return f.bar;" +
-        "  }" +
-        "}",
-        "inconsistent return type\n" +
-        "found   : number\n" +
-        "required: string");
-  }
-
   public void testFunctionArguments1() throws Exception {
     testFunctionType(
         "/** @param {number} a\n@return {string} */" +
@@ -1510,13 +1495,13 @@ public class TypeCheckTest extends CompilerTypeTestCase {
   }
 
   public void testFunctionArguments13() throws Exception {
-    // verifying that the argument type have non-inferrable types
+    // verifying that the argument type have inferable types
     testTypes(
         "/** @return {boolean} */ function u() { return true; }" +
-        "/** @param {boolean} b\n@return {?boolean} */" +
+        "/** @param {boolean} b\n@return {boolean} */" +
         "function f(b) { if (u()) { b = null; } return b; }",
-        "assignment\n" +
-        "found   : null\n" +
+        "inconsistent return type\n" +
+        "found   : (boolean|null)\n" +
         "required: boolean");
   }
 
@@ -2144,15 +2129,11 @@ public class TypeCheckTest extends CompilerTypeTestCase {
   }
 
   public void testDuplicateLocalVarDecl() throws Exception {
-    testClosureTypesMultipleWarnings(
+    testTypes(
         "/** @param {number} x */\n" +
         "function f(x) { /** @type {string} */ var x = ''; }",
-        Lists.newArrayList(
-            "variable x redefined with type string, original definition" +
-            " at  [testcode] :2 with type number",
-            "initializing variable\n" +
-            "found   : string\n" +
-            "required: number"));
+        "variable x redefined with type string, " +
+        "original definition at [testcode]:2 with type number");
   }
 
   public void testStubFunctionDeclaration1() throws Exception {
