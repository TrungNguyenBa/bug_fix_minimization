diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
index 9d2f97a5..4295d9c3 100644
--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -904,9 +904,8 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {
           && right.getString().equals("undefined"))
           || (Token.VOID == right.getType()
               && NodeUtil.isLiteralValue(right.getFirstChild(), false)));
-    int lhType = getNormalizedNodeType(left);
-    int rhType = getNormalizedNodeType(right);
-    switch (lhType) {
+
+    switch (left.getType()) {
       case Token.VOID:
         if (!NodeUtil.isLiteralValue(left.getFirstChild(), false)) {
           return n;
@@ -924,6 +923,7 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {
           result = compareToUndefined(left, op);
           break;
         }
+        int rhType = right.getType();
         if (rhType != Token.TRUE &&
             rhType != Token.FALSE &&
             rhType != Token.NULL) {
@@ -932,12 +932,12 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {
         switch (op) {
           case Token.SHEQ:
           case Token.EQ:
-            result = lhType == rhType;
+            result = left.getType() == right.getType();
             break;
 
           case Token.SHNE:
           case Token.NE:
-            result = lhType != rhType;
+            result = left.getType() != right.getType();
             break;
 
           case Token.GE:
@@ -1069,23 +1069,6 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {
   }
 
   /**
-   * @return Translate NOT expressions into TRUE or FALSE when possible.
-   */
-  private int getNormalizedNodeType(Node n) {
-    int type = n.getType();
-    if (type == Token.NOT) {
-      TernaryValue value = NodeUtil.getPureBooleanValue(n);
-      switch (value) {
-        case TRUE:
-          return Token.TRUE;
-        case FALSE:
-          return Token.FALSE;
-      }
-    }
-    return type;
-  }
-
-  /**
    * The result of the comparison as a Boolean or null if the
    * result could not be determined.
    */
diff --git a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
index ad698ebf..78bd30a6 100644
--- a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
+++ b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
@@ -616,7 +616,7 @@ public class PeepholeFoldConstantsTest extends CompilerTestCase {
     fold("x = -1 >= 9", "x = false");
 
     fold("x = true == true", "x = true");
-    fold("x = false == false", "x = true");
+    fold("x = true == true", "x = true");
     fold("x = false == null", "x = false");
     fold("x = false == true", "x = false");
     fold("x = true == null", "x = false");
@@ -666,7 +666,7 @@ public class PeepholeFoldConstantsTest extends CompilerTestCase {
     fold("x = y === y", "x = y===y");
 
     fold("x = true === true", "x = true");
-    fold("x = false === false", "x = true");
+    fold("x = true === true", "x = true");
     fold("x = false === null", "x = false");
     fold("x = false === true", "x = false");
     fold("x = true === null", "x = false");
@@ -696,32 +696,6 @@ public class PeepholeFoldConstantsTest extends CompilerTestCase {
     fold("true === null", "false");
   }
 
-  public void testFoldComparison3() {
-    fold("x = !1 == !0", "x = false");
-
-    fold("x = !0 == !0", "x = true");
-    fold("x = !1 == !1", "x = true");
-    fold("x = !1 == null", "x = false");
-    fold("x = !1 == !0", "x = false");
-    fold("x = !0 == null", "x = false");
-
-    fold("!0 == !0", "true");
-    fold("!1 == null", "false");
-    fold("!1 == !0", "false");
-    fold("!0 == null", "false");
-
-    fold("x = !0 === !0", "x = true");
-    fold("x = !1 === !1", "x = true");
-    fold("x = !1 === null", "x = false");
-    fold("x = !1 === !0", "x = false");
-    fold("x = !0 === null", "x = false");
-
-    fold("!0 === !0", "true");
-    fold("!1 === null", "false");
-    fold("!1 === !0", "false");
-    fold("!0 === null", "false");
-  }
-
   public void testFoldGetElem() {
     fold("x = [,10][0]", "x = void 0");
     fold("x = [10, 20][0]", "x = 10");
@@ -1072,8 +1046,6 @@ public class PeepholeFoldConstantsTest extends CompilerTestCase {
           "void 0",
           "true",
           "false",
-          "!0",
-          "!1",
           "0",
           "1",
           "''",
@@ -1083,9 +1055,9 @@ public class PeepholeFoldConstantsTest extends CompilerTestCase {
           "NaN",
           "Infinity"
           // TODO(nicksantos): Add more literals
-          // "-Infinity",
+          //-Infinity
           //"({})",
-          // "[]"
+          //"[]",
           //"[0]",
           //"Object",
           //"(function() {})"
