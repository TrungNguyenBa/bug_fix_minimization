diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java
index dfcd3eb6..477d444b 100644
--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -1258,8 +1258,6 @@ public final class NodeUtil {
       case Token.INSTANCEOF:
       // Inversion
       case Token.NOT:
-      // delete operator returns a boolean.
-      case Token.DELPROP:
         return true;
       default:
         return false;
@@ -2908,7 +2906,6 @@ public final class NodeUtil {
       case Token.OBJECTLIT:
         // Literals objects with non-literal children are allowed.
         return true;
-      case Token.DELPROP:
       case Token.IN:
         // TODO(johnlenz): should IN operator be included in #isSimpleOperator?
         return true;
diff --git a/test/com/google/javascript/jscomp/NodeUtilTest.java b/test/com/google/javascript/jscomp/NodeUtilTest.java
index 13e495f8..98e8e922 100644
--- a/test/com/google/javascript/jscomp/NodeUtilTest.java
+++ b/test/com/google/javascript/jscomp/NodeUtilTest.java
@@ -1165,8 +1165,6 @@ public class NodeUtilTest extends TestCase {
     assertTrue(testLocalValue("o.toString()"));
 
     assertFalse(testLocalValue("o.valueOf()"));
-
-    assertTrue(testLocalValue("delete a.b"));
   }
 
   public void testLocalValue2() {
@@ -1501,7 +1499,6 @@ public class NodeUtilTest extends TestCase {
     assertFalse(NodeUtil.isBooleanResult(getNode("a.b()")));
     assertFalse(NodeUtil.isBooleanResult(getNode("a().b()")));
     assertFalse(NodeUtil.isBooleanResult(getNode("new a()")));
-    assertTrue(NodeUtil.isBooleanResult(getNode("delete a")));
 
     // Definitely not boolean
     assertFalse(NodeUtil.isBooleanResult(getNode("([true,false])")));
