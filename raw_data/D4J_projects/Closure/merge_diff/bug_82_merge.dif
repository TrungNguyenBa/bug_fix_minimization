diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java
index 51f2ce20..32a0b250 100644
--- a/src/com/google/javascript/rhino/jstype/JSType.java
+++ b/src/com/google/javascript/rhino/jstype/JSType.java
@@ -160,9 +160,7 @@ public abstract class JSType implements Serializable {
   }
 
   public final boolean isEmptyType() {
-    return isNoType() || isNoObjectType() || isNoResolvedType() ||
-        (registry.getNativeFunctionType(
-             JSTypeNative.LEAST_FUNCTION_TYPE) == this);
+    return isNoType() || isNoObjectType() || isNoResolvedType();
   }
 
   public boolean isNumberObjectType() {
diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
index 0760addb..b890e92b 100644
--- a/test/com/google/javascript/jscomp/TypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
@@ -4951,14 +4951,6 @@ public class TypeCheckTest extends CompilerTypeTestCase {
         "required: number");
   }
 
-  public void testIssue301() throws Exception {
-    testTypes(
-        "Array.indexOf = function() {};" +
-        "var s = 'hello';" +
-        "alert(s.toLowerCase.indexOf('1'));",
-        "Property indexOf never defined on String.prototype.toLowerCase");
-  }
-
   /**
    * Tests that the || operator is type checked correctly, that is of
    * the type of the first argument or of the second argument. See
diff --git a/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java b/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java
index 8ad98e64..cb20b509 100644
--- a/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java
+++ b/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java
@@ -169,11 +169,6 @@ public class FunctionTypeTest extends BaseJSTypeTestCase {
     assertTrue(ctor.getInstanceType().isUnknownType());
   }
 
-  public void testEmptyFunctionTypes() {
-    assertTrue(LEAST_FUNCTION_TYPE.isEmptyType());
-    assertFalse(GREATEST_FUNCTION_TYPE.isEmptyType());
-  }
-
   private void assertLeastSupertype(String s, JSType t1, JSType t2) {
     assertEquals(s, t1.getLeastSupertype(t2).toString());
     assertEquals(s, t2.getLeastSupertype(t1).toString());
