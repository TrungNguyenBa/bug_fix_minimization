diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java
index 879056f7..e07b5fc5 100644
--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java
+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java
@@ -293,7 +293,7 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements
       for(Node sibling = n.getNext(); sibling != null;
           sibling = sibling.getNext()) {
         if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) {
-          VariableLiveness state = isVariableReadBeforeKill(sibling, variable);
+          VariableLiveness state = readVariableBeforeKilling(sibling, variable);
 
           // If we see a READ or KILL there is no need to continue.
           if (state == VariableLiveness.READ) {
@@ -316,34 +316,25 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements
   }
 
   /**
-   * Give an expression and a variable. It returns READ, if the first
-   * reference of that variable is a read. It returns KILL, if the first
+   * Give an expression and a variable. It returns READ, if the right-most
+   * reference of that variable is a read. It returns KILL, if the right-most
    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.
+   *
+   * This need to be a pre-order traversal so we cannot use the normal node
+   * traversals.
    */
-  private VariableLiveness isVariableReadBeforeKill(
-      Node n, String variable) {
+  private VariableLiveness readVariableBeforeKilling(Node n, String variable) {
     if (NodeUtil.isName(n) && variable.equals(n.getString())) {
       if (NodeUtil.isLhs(n, n.getParent())) {
-        Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);
-        // The expression to which the assignment is made is evaluated before
-        // the RHS is evaluated (normal left to right evaluation) but the KILL
-        // occurs after the RHS is evaluated.
-        Node rhs = n.getNext();
-        VariableLiveness state = isVariableReadBeforeKill(rhs, variable);
-        if (state == VariableLiveness.READ) {
-          return state;
-        }
         return VariableLiveness.KILL;
       } else {
         return VariableLiveness.READ;
       }
     }
-
-    // Expressions are evaluated left-right, depth first.
     for (Node child = n.getFirstChild();
         child != null; child = child.getNext()) {
-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
-        VariableLiveness state = isVariableReadBeforeKill(child, variable);
+      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {
+        VariableLiveness state = readVariableBeforeKilling(child, variable);
         if (state != VariableLiveness.MAYBE_LIVE) {
           return state;
         }
diff --git a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java
index 2d59cd7d..5dc9662f 100644
--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java
+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java
@@ -247,18 +247,6 @@ public class CommandLineRunnerTest extends TestCase {
          "}");
   }
 
-  public void testIssue297() {
-    args.add("--compilation_level=SIMPLE_OPTIMIZATIONS");
-    test("function f(p) {" +
-         " var x;" +
-         " return ((x=p.id) && (x=parseInt(x.substr(1))) && x>0);" +
-         "}",
-         "function f(b) {" +
-         " var a;" +
-         " return ((a=b.id) && (a=parseInt(a.substr(1))) && a>0);" +
-         "}");
-  }  
-
   public void testDebugFlag1() {
     args.add("--compilation_level=SIMPLE_OPTIMIZATIONS");
     args.add("--debug=false");
diff --git a/test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java b/test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java
index 2d82661d..a74acb4f 100644
--- a/test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java
+++ b/test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java
@@ -361,95 +361,6 @@ public class DeadAssignmentsEliminationTest extends CompilerTestCase {
   }
 
   public void testAssignToExtern() {
-    inFunction("extern = true;");
-  }
-
-  public void testIssue297a() {
-    testSame("function f(p) {" +
-         " var x;" +
-         " return ((x=p.id) && (x=parseInt(x.substr(1))) && x>0);" +
-         "}; f('');");
-  }
-
-  public void testIssue297b() {
-    test("function f() {" +
-         " var x;" +
-         " return (x='') && (x = x.substr(1));" +
-         "};",
-         "function f() {" +
-         " var x;" +
-         " return (x='') && (x.substr(1));" +
-         "};");
-  }
-
-  public void testIssue297c() {
-    test("function f() {" +
-         " var x;" +
-         " return (x=1) && (x = f(x));" +
-         "};",
-         "function f() {" +
-         " var x;" +
-         " return (x=1) && f(x);" +
-         "};");
-  }
-
-  public void testIssue297d() {
-    test("function f(a) {" +
-         " return (a=1) && (a = f(a));" +
-         "};",
-         "function f(a) {" +
-         " return (a=1) && (f(a));" +
-         "};");
-  }
-
-  public void testIssue297e() {
-    test("function f(a) {" +
-         " return (a=1) - (a = g(a));" +
-         "};",
-         "function f(a) {" +
-         " return (a=1) - (g(a));" +
-         "};");
-  }
-
-  public void testIssue297f() {
-    test("function f(a) {" +
-         " h((a=1) - (a = g(a)));" +
-         "};",
-         "function f(a) {" +
-         " h((a=1) - (g(a)));" +
-         "};");
-  }
-
-  public void testIssue297g() {
-    test("function f(a) {" +
-         " var b = h((b=1) - (b = g(b)));" +
-         " return b;" +
-         "};",
-         // The last assignment in the initializer should be eliminated
-         "function f(a) {" +
-         " var b = h((b=1) - (b = g(b)));" +
-         " return b;" +
-         "};");
-  }
-
-  public void testIssue297h() {
-    test("function f(a) {" +
-         " var b = b=1;" +
-         " return b;" +
-         "};",
-         // The assignment in the initializer should be eliminated
-         "function f(a) {" +
-         " var b = b = 1;" +
-         " return b;" +
-         "};");
-  }
-
-
-  public void testInExpression() {
-    inFunction("var a; return a=(a=(a=3));", "var a; return 3;");
-    inFunction("var a; return a=(a=(a=a));", "var a; return a;");
-    inFunction("var a; return a=(a=(a=a+1)+1);", "var a; return a+1+1;");
-    inFunction("var a; return a=(a=(a=f(a)+1)+1);", "var a; return f(a)+1+1;");
-    inFunction("var a; return a=f(a=f(a=f(a)));", "var a; return f(f(f(a)));");
+    inFunction("extern = true;", "extern = true;");
   }
 }
