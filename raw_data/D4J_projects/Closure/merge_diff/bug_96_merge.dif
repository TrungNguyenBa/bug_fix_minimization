diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java
index b05fbc44..8198efc8 100644
--- a/src/com/google/javascript/jscomp/TypeCheck.java
+++ b/src/com/google/javascript/jscomp/TypeCheck.java
@@ -1403,17 +1403,9 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
 
     Iterator<Node> parameters = functionType.getParameters().iterator();
     int ordinal = 0;
-    Node parameter = null;
-    Node argument = null;
-    while (arguments.hasNext() &&
-           (parameters.hasNext() ||
-            parameter != null && parameter.isVarArgs())) {
-      // If there are no parameters left in the list, then the while loop
-      // above implies that this must be a var_args function.
-      if (parameters.hasNext()) {
-        parameter = parameters.next();
-      }
-      argument = arguments.next();
+    while (arguments.hasNext() && parameters.hasNext()) {
+      Node parameter = parameters.next();
+      Node argument = arguments.next();
       ordinal++;
 
       validator.expectArgumentMatchesParameter(t, argument,
diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
index bbe11aae..0bc7a923 100644
--- a/test/com/google/javascript/jscomp/TypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
@@ -1358,15 +1358,6 @@ public class TypeCheckTest extends CompilerTypeTestCase {
         "and no more than 1 argument(s).");
   }
 
-  public void testFunctionArguments16() throws Exception {
-    testTypes(
-        "/** @param {...number} var_args */" +
-        "function g(var_args) {} g(1, true);",
-        "actual parameter 2 of g does not match formal parameter\n" +
-        "found   : boolean\n" +
-        "required: (number|undefined)");
-  }
-
   public void testPrintFunctionName1() throws Exception {
     // Ensures that the function name is pretty.
     testTypes(
