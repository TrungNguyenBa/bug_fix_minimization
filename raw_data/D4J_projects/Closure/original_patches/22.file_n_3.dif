diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java
index 00e31e0e..5de1e6f7 100644
--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -3111,7 +3111,6 @@ public final class NodeUtil {
     // TODO(johnlenz): consider sharing some code with trySimpleUnusedResult.
     Node parent = expr.getParent();
     switch (parent.getType()) {
-      case Token.BLOCK:
       case Token.EXPR_RESULT:
         return false;
       case Token.HOOK:
@@ -3120,21 +3119,6 @@ public final class NodeUtil {
         return (expr == parent.getFirstChild())
             ? true : isExpressionResultUsed(parent);
       case Token.COMMA:
-        Node gramps = parent.getParent();
-        if (gramps.isCall() &&
-            parent == gramps.getFirstChild()) {
-          // Semantically, a direct call to eval is different from an indirect
-          // call to an eval. See ECMA-262 S15.1.2.1. So it's OK for the first
-          // expression to a comma to be a no-op if it's used to indirect
-          // an eval. This we pretend that this is "used".
-          if (expr == parent.getFirstChild() &&
-              parent.getChildCount() == 2 &&
-              expr.getNext().isName() &&
-              "eval".equals(expr.getNext().getString())) {
-            return true;
-          }
-        }
-
         return (expr == parent.getFirstChild())
             ? false : isExpressionResultUsed(parent);
       case Token.FOR:
