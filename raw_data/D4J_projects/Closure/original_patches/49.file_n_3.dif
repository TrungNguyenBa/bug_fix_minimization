diff --git a/test/com/google/javascript/jscomp/FunctionInjectorTest.java b/test/com/google/javascript/jscomp/FunctionInjectorTest.java
index 19ece5ae..d21107ff 100644
--- a/test/com/google/javascript/jscomp/FunctionInjectorTest.java
+++ b/test/com/google/javascript/jscomp/FunctionInjectorTest.java
@@ -867,8 +867,8 @@ public class FunctionInjectorTest extends TestCase {
         "function foo(a){return a;}; " +
         "function x() { foo(x++); }",
         "function foo(a){return a;}; " +
-        "function x() {{var a$$inline_0=x++;" +
-            "a$$inline_0}}",
+        "function x() {{var a$$inline_1=x++;" +
+            "a$$inline_1}}",
         "foo", INLINE_BLOCK);
   }
 
@@ -877,9 +877,9 @@ public class FunctionInjectorTest extends TestCase {
     helperInlineReferenceToFunction(
         "function foo(a){return a+a;}; foo(x++);",
         "function foo(a){return a+a;}; " +
-            "{var a$$inline_0=x++;" +
-            " a$$inline_0+" +
-            "a$$inline_0;}",
+            "{var a$$inline_1=x++;" +
+            " a$$inline_1+" +
+            "a$$inline_1;}",
         "foo", INLINE_BLOCK);
   }
 
@@ -888,9 +888,9 @@ public class FunctionInjectorTest extends TestCase {
     helperInlineReferenceToFunction(
         "function foo(a){return a+a;}; foo(new Date());",
         "function foo(a){return a+a;}; " +
-            "{var a$$inline_0=new Date();" +
-            " a$$inline_0+" +
-            "a$$inline_0;}",
+            "{var a$$inline_1=new Date();" +
+            " a$$inline_1+" +
+            "a$$inline_1;}",
         "foo", INLINE_BLOCK);
   }
 
@@ -899,9 +899,9 @@ public class FunctionInjectorTest extends TestCase {
     helperInlineReferenceToFunction(
         "function foo(a){return a+a;}; foo(function(){});",
         "function foo(a){return a+a;}; " +
-            "{var a$$inline_0=function(){};" +
-            " a$$inline_0+" +
-            "a$$inline_0;}",
+            "{var a$$inline_1=function(){};" +
+            " a$$inline_1+" +
+            "a$$inline_1;}",
         "foo", INLINE_BLOCK);
   }
 
@@ -910,7 +910,7 @@ public class FunctionInjectorTest extends TestCase {
     helperInlineReferenceToFunction(
         "function foo(a){return true;}; foo(goo());",
         "function foo(a){return true;};" +
-            "{var a$$inline_0=goo();true}",
+            "{var a$$inline_1=goo();true}",
         "foo", INLINE_BLOCK);
   }
 
@@ -920,8 +920,8 @@ public class FunctionInjectorTest extends TestCase {
         "function foo(a){var b;return a;}; " +
             "function x() { foo(goo()); }",
             "function foo(a){var b;return a;}; " +
-            "function x() {{var a$$inline_0=goo();" +
-                "var b$$inline_1;a$$inline_0}}",
+            "function x() {{var a$$inline_2=goo();" +
+                "var b$$inline_3;a$$inline_2}}",
         "foo", INLINE_BLOCK);
   }
 
@@ -934,9 +934,9 @@ public class FunctionInjectorTest extends TestCase {
         "var x = 1; var y = 2;" +
         "function foo(a,b){x = b; y = a;}; " +
         "function bar() {" +
-           "{var a$$inline_0=x;" +
+           "{var a$$inline_2=x;" +
             "x = y;" +
-            "y = a$$inline_0;}" +
+            "y = a$$inline_2;}" +
         "}",
         "foo", INLINE_BLOCK);
   }
@@ -949,9 +949,9 @@ public class FunctionInjectorTest extends TestCase {
         "var x = 1; var y = 2;" +
         "function foo(a,b){y = a; x = b;}; " +
         "function bar() {" +
-           "{var b$$inline_1=y;" +
+           "{var b$$inline_3=y;" +
             "y = x;" +
-            "x = b$$inline_1;}" +
+            "x = b$$inline_3;}" +
         "}",
         "foo", INLINE_BLOCK);
   }
@@ -962,7 +962,7 @@ public class FunctionInjectorTest extends TestCase {
         "for(;1;){ foo(1); }",
         "function foo(a){var b;return a;}; " +
         "for(;1;){ {" +
-            "var b$$inline_1=void 0;1}}",
+            "var b$$inline_3=void 0;1}}",
         "foo", INLINE_BLOCK);
 
     helperInlineReferenceToFunction(
@@ -970,16 +970,16 @@ public class FunctionInjectorTest extends TestCase {
         "do{ foo(1); } while(1)",
         "function foo(a){var b;return a;}; " +
         "do{ {" +
-            "var b$$inline_1=void 0;1}}while(1)",
+            "var b$$inline_3=void 0;1}}while(1)",
         "foo", INLINE_BLOCK);
 
     helperInlineReferenceToFunction(
         "function foo(a){for(var b in c)return a;}; " +
         "for(;1;){ foo(1); }",
         "function foo(a){var b;for(b in c)return a;}; " +
-        "for(;1;){ {JSCompiler_inline_label_foo_2:{" +
-            "var b$$inline_1=void 0;for(b$$inline_1 in c){" +
-              "1;break JSCompiler_inline_label_foo_2" +
+        "for(;1;){ {JSCompiler_inline_label_foo_4:{" +
+            "var b$$inline_3=void 0;for(b$$inline_3 in c){" +
+              "1;break JSCompiler_inline_label_foo_4" +
             "}}}}",
         "foo", INLINE_BLOCK);
   }
@@ -1025,8 +1025,8 @@ public class FunctionInjectorTest extends TestCase {
     helperInlineReferenceToFunction(
         "function foo(){function x() {var a; return true;} return x}; foo();",
         "function foo(){function x(){var a;return true}return x};" +
-            "{var x$$inline_0 = function(){" +
-            "var a$$inline_1;return true};x$$inline_0}",
+            "{var x$$inline_1 = function(){" +
+            "var a$$inline_2;return true};x$$inline_1}",
         "foo", INLINE_BLOCK);
   }
 
@@ -1314,18 +1314,18 @@ public class FunctionInjectorTest extends TestCase {
   public void testBug1897706() {
     helperInlineReferenceToFunction(
         "function foo(a){}; foo(x())",
-        "function foo(a){}; {var a$$inline_0=x()}",
+        "function foo(a){}; {var a$$inline_1=x()}",
         "foo", INLINE_BLOCK);
 
     helperInlineReferenceToFunction(
         "function foo(a){bar()}; foo(x())",
-        "function foo(a){bar()}; {var a$$inline_0=x();bar()}",
+        "function foo(a){bar()}; {var a$$inline_1=x();bar()}",
         "foo", INLINE_BLOCK);
 
     helperInlineReferenceToFunction(
         "function foo(a,b){bar()}; foo(x(),y())",
         "function foo(a,b){bar()};" +
-        "{var a$$inline_0=x();var b$$inline_1=y();bar()}",
+        "{var a$$inline_2=x();var b$$inline_3=y();bar()}",
         "foo", INLINE_BLOCK);
   }
 
