diff --git a/test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java b/test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java
index 7e1a21dd..a2b38e93 100644
--- a/test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java
+++ b/test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java
@@ -112,7 +112,7 @@ public class FunctionToBlockMutatorTest extends TestCase {
     helperMutate(
         "function foo(a){return a;}; " +
         "function x() { foo(x++); }",
-        "{var a$$inline_0 = x++; a$$inline_0}",
+        "{var a$$inline_1 = x++; a$$inline_1}",
         "foo", null);
   }
 
@@ -120,25 +120,25 @@ public class FunctionToBlockMutatorTest extends TestCase {
     // Parameter has side-effects.
     helperMutate(
         "function foo(a){return a+a;}; foo(x++);",
-        "{var a$$inline_0 = x++;" +
-            "a$$inline_0 + a$$inline_0;}",
+        "{var a$$inline_1 = x++;" +
+            "a$$inline_1 + a$$inline_1;}",
         "foo", null);
   }
 
   public void testMutateInitializeUninitializedVars1() {
     helperMutate(
         "function foo(a){var b;return a;}; foo(1);",
-        "{var b$$inline_1=void 0;1}",
+        "{var b$$inline_3=void 0;1}",
         "foo", null, false, true);
   }
 
   public void testMutateInitializeUninitializedVars2() {
     helperMutate(
         "function foo(a){for(var b in c)return a;}; foo(1);",
-        "{JSCompiler_inline_label_foo_2:" +
+        "{JSCompiler_inline_label_foo_4:" +
           "{" +
-            "for(var b$$inline_1 in c){" +
-                "1;break JSCompiler_inline_label_foo_2" +
+            "for(var b$$inline_3 in c){" +
+                "1;break JSCompiler_inline_label_foo_4" +
              "}" +
           "}" +
         "}",
@@ -150,14 +150,14 @@ public class FunctionToBlockMutatorTest extends TestCase {
     boolean callInLoop = false;
     helperMutate(
         "function foo(a){var B = bar(); a;}; foo(1);",
-        "{var B$$inline_1=bar(); 1;}",
+        "{var B$$inline_3=bar(); 1;}",
         "foo", null, false, callInLoop);
     // ... in a loop, the constant-ness is removed.
     // TODO(johnlenz): update this test to look for the const annotation.
     callInLoop = true;
     helperMutate(
         "function foo(a){var B = bar(); a;}; foo(1);",
-        "{var B$$inline_1 = bar(); 1;}",
+        "{var B$$inline_3 = bar(); 1;}",
         "foo", null, false, callInLoop);
   }
 
@@ -166,7 +166,7 @@ public class FunctionToBlockMutatorTest extends TestCase {
      // expressions
      helperMutate(
         "function foo(a){function g(){}}; foo(1);",
-        "{var g$$inline_1=function(){};}",
+        "{var g$$inline_3=function(){};}",
         "foo", null);
   }
 
