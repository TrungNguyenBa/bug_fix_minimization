diff --git a/test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java b/test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java
index 5b85c159..30c95184 100644
--- a/test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java
+++ b/test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java
@@ -69,7 +69,7 @@ public class MakeDeclaredNamesUniqueTest extends CompilerTestCase {
     useDefaultRenamer = false;
   }
 
-  private void testWithInversion(String original, String expected) {
+  public void testWithInversion(String original, String expected) {
     invert = false;
     test(original, expected);
     invert = true;
@@ -77,7 +77,7 @@ public class MakeDeclaredNamesUniqueTest extends CompilerTestCase {
     invert = false;
   }
 
-  private void testSameWithInversion(String externs, String original) {
+  public void testSameWithInversion(String externs, String original) {
     invert = false;
     testSame(externs, original, null);
     invert = true;
@@ -85,7 +85,7 @@ public class MakeDeclaredNamesUniqueTest extends CompilerTestCase {
     invert = false;
   }
 
-  private void testSameWithInversion(String original) {
+  public void testSameWithInversion(String original) {
     testSameWithInversion("", original);
   }
 
@@ -93,11 +93,11 @@ public class MakeDeclaredNamesUniqueTest extends CompilerTestCase {
     return "function f(){" + s + "}";
   }
 
-  private void testInFunction(String original, String expected) {
+  public void testInFunction(String original, String expected) {
     test(wrapInFunction(original), wrapInFunction(expected));
   }
 
-  private void testSameInFunction(String original) {
+  public void testSameInFunction(String original) {
     testSame(wrapInFunction(original));
   }
 
@@ -205,31 +205,6 @@ public class MakeDeclaredNamesUniqueTest extends CompilerTestCase {
         "try { } catch(e) {e; try { } catch(e$$0) {e$$0;} };var e$$1");
   }
 
-  public void testMakeLocalNamesUniqueWithContext5() {
-    // Set the test type
-    this.useDefaultRenamer = true;
-
-    testWithInversion(
-        "function f(){var f; f = 1}",
-        "function f(){var f$$1; f$$1 = 1}");
-    testWithInversion(
-        "function f(f){f = 1}",
-        "function f(f$$1){f$$1 = 1}");
-    testWithInversion(
-        "function f(f){var f; f = 1}",
-        "function f(f$$1){var f$$1; f$$1 = 1}");
-
-    test(
-        "var fn = function f(){var f; f = 1}",
-        "var fn = function f(){var f$$1; f$$1 = 1}");
-    test(
-        "var fn = function f(f){f = 1}",
-        "var fn = function f(f$$1){f$$1 = 1}");
-    test(
-        "var fn = function f(f){var f; f = 1}",
-        "var fn = function f(f$$1){var f$$1; f$$1 = 1}");
-  }
-
   public void testArguments() {
     // Set the test type
     this.useDefaultRenamer = true;
