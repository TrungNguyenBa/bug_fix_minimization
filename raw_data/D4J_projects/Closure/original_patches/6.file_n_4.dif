diff --git a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java
index 94ee207a..f88a769c 100644
--- a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java
@@ -18,7 +18,6 @@ package com.google.javascript.jscomp;
 
 import com.google.common.base.Joiner;
 import com.google.common.collect.Lists;
-import com.google.common.collect.Sets;
 import com.google.javascript.jscomp.CheckLevel;
 import com.google.javascript.jscomp.Scope.Var;
 import com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter;
@@ -34,7 +33,6 @@ import com.google.javascript.rhino.testing.Asserts;
 
 import java.util.Arrays;
 import java.util.List;
-import java.util.Set;
 
 /**
  * Tests {@link TypeCheck}.
@@ -2118,15 +2116,10 @@ public class LooseTypeCheckTest extends CompilerTypeTestCase {
   }
 
   public void testTypeRedefinition() throws Exception {
-    testClosureTypesMultipleWarnings(
-        "a={};/**@enum {string}*/ a.A = {ZOR:'b'};"
+    testTypes("a={};/**@enum {string}*/ a.A = {ZOR:'b'};"
         + "/** @constructor */ a.A = function() {}",
-        Lists.newArrayList(
         "variable a.A redefined with type function (new:a.A): undefined, " +
-            "original definition at [testcode]:1 with type enum{a.A}",
-            "assignment to property A of a\n" +
-            "found   : function (new:a.A): undefined\n" +
-            "required: enum{a.A}"));
+        "original definition at [testcode]:1 with type enum{a.A}");
   }
 
   public void testIn1() throws Exception {
@@ -6937,12 +6930,10 @@ public class LooseTypeCheckTest extends CompilerTypeTestCase {
           0, compiler.getWarningCount());
     } else {
       assertEquals(descriptions.size(), compiler.getWarningCount());
-      Set<String> actualWarningDescriptions = Sets.newHashSet();
       for (int i = 0; i < descriptions.size(); i++) {
-        actualWarningDescriptions.add(compiler.getWarnings()[i].description);
+        assertEquals(descriptions.get(i),
+            compiler.getWarnings()[i].description);
       }
-      assertEquals(
-          Sets.newHashSet(descriptions), actualWarningDescriptions);
     }
   }
 
