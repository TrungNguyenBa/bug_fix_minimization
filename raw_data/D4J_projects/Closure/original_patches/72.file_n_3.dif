diff --git a/src/com/google/javascript/jscomp/RenameLabels.java b/src/com/google/javascript/jscomp/RenameLabels.java
index 28e52ee4..01ad5362 100644
--- a/src/com/google/javascript/jscomp/RenameLabels.java
+++ b/src/com/google/javascript/jscomp/RenameLabels.java
@@ -17,7 +17,6 @@
 package com.google.javascript.jscomp;
 
 import com.google.common.base.Preconditions;
-import com.google.common.base.Supplier;
 import com.google.common.collect.Lists;
 import com.google.javascript.jscomp.NodeTraversal.ScopedCallback;
 import com.google.javascript.rhino.Node;
@@ -70,31 +69,9 @@ import java.util.Map;
  */
 final class RenameLabels implements CompilerPass {
   private final AbstractCompiler compiler;
-  private final Supplier<String> nameSupplier;
-  private final boolean removeUnused;
 
   RenameLabels(AbstractCompiler compiler) {
-    this(compiler, new DefaultNameSupplier(), true);
-  }
-
-  RenameLabels(
-      AbstractCompiler compiler,
-      Supplier<String> supplier,
-      boolean removeUnused) {
     this.compiler = compiler;
-    this.nameSupplier = supplier;
-    this.removeUnused = removeUnused;
-  }
-
-  static class DefaultNameSupplier implements Supplier<String> {
-    // NameGenerator is used to create safe label names.
-    final NameGenerator nameGenerator =
-        new NameGenerator(new HashSet<String>(), "", null);
-
-    @Override
-    public String get() {
-      return nameGenerator.generateNextName();
-    }
   }
 
   /**
@@ -111,6 +88,10 @@ final class RenameLabels implements CompilerPass {
     // inner scope, so a new namespace is created each time a scope is entered.
     final Deque<LabelNamespace> namespaceStack = Lists.newLinkedList();
 
+    // NameGenerator is used to create safe label names.
+    final NameGenerator nameGenerator =
+        new NameGenerator(new HashSet<String>(), "", null);
+
     // The list of generated names. Typically, the first name will be "a",
     // the second "b", etc.
     final ArrayList<String> names = new ArrayList<String>();
@@ -148,7 +129,7 @@ final class RenameLabels implements CompilerPass {
 
         // Create a new name, if needed, for this depth.
         if (names.size() < currentDepth) {
-          names.add(nameSupplier.get());
+          names.add(nameGenerator.generateNextName());
         }
 
         String newName = getNameForId(currentDepth);
@@ -212,7 +193,7 @@ final class RenameLabels implements CompilerPass {
       String name = nameNode.getString();
       LabelInfo li = getLabelInfo(name);
       // This is a label...
-      if (li.referenced || !removeUnused) {
+      if (li.referenced) {
         String newName = getNameForId(li.id);
         if (!name.equals(newName)) {
           // ... and it is used, give it the short name.
