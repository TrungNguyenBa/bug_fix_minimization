diff --git a/test/com/google/javascript/jscomp/CompilerTestCase.java b/test/com/google/javascript/jscomp/CompilerTestCase.java
index b4124163..d0cf9fc1 100644
--- a/test/com/google/javascript/jscomp/CompilerTestCase.java
+++ b/test/com/google/javascript/jscomp/CompilerTestCase.java
@@ -88,11 +88,6 @@ public abstract class CompilerTestCase extends TestCase  {
   private boolean acceptES5 = true;
 
   /**
-   * Whether externs changes should be allowed for this pass.
-   */
-  private boolean allowExternsChanges = false;
-
-  /**
    * Constructs a test.
    *
    * @param externs Externs JS as a string
@@ -196,13 +191,6 @@ public abstract class CompilerTestCase extends TestCase  {
   }
 
   /**
-   * Whether to allow externs changes.
-   */
-  protected void allowExternsChanges(boolean allowExternsChanges) {
-    this.allowExternsChanges = allowExternsChanges;
-  }
-
-  /**
    * Perform type checking before running the test pass. This will check
    * for type errors and annotate nodes with type information.
    *
@@ -628,8 +616,7 @@ public abstract class CompilerTestCase extends TestCase  {
    * @param error Expected error, or null if no error is expected
    * @param warning Expected warning, or null if no warning is expected
    */
-  public void testSame(
-      String[] js, DiagnosticType error, DiagnosticType warning) {
+  public void testSame(String[] js, DiagnosticType error, DiagnosticType warning) {
     test(js, js, error, warning);
   }
 
@@ -816,20 +803,7 @@ public abstract class CompilerTestCase extends TestCase  {
         normalizeActualCode(compiler, externsRootClone, mainRootClone);
       }
 
-      boolean codeChange = !mainRootClone.checkTreeEqualsSilent(mainRoot);
-      boolean externsChange = !externsRootClone
-          .checkTreeEqualsSilent(externsRoot);
-
-      // Generally, externs should not be change by the compiler passes.
-      if (externsChange && !allowExternsChanges) {
-        String explanation = externsRootClone.checkTreeEquals(externsRoot);
-        fail("Unexpected changes to externs" +
-            "\nExpected: " + compiler.toSource(externsRootClone) +
-            "\nResult: " + compiler.toSource(externsRoot) +
-            "\n" + explanation);
-      }
-
-      if (!codeChange && !externsChange) {
+      if (mainRootClone.checkTreeEqualsSilent(mainRoot)) {
         assertFalse(
             "compiler.reportCodeChange() was called " +
             "even though nothing changed",
