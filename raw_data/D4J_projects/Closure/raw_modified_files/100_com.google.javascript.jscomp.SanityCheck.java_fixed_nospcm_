package com.google.javascript.jscomp;
import com.google.common.base.Preconditions;
import com.google.javascript.rhino.Node;
class SanityCheck implements CompilerPass {
static final DiagnosticType CANNOT_PARSE_GENERATED_CODE =
DiagnosticType.error("JSC_CANNOT_PARSE_GENERATED_CODE",
"Internal compiler error. Cannot parse generated code: {0}");
static final DiagnosticType GENERATED_BAD_CODE = DiagnosticType.error(
"JSC_GENERATED_BAD_CODE",
"Internal compiler error. Generated bad code." +
"----------------------------------------\n" +
"Expected:\n{0}\n" +
"----------------------------------------\n" +
"Actual\n{1}");
private final AbstractCompiler compiler;
SanityCheck(AbstractCompiler compiler) {
this.compiler = compiler;
}
public void process(Node externs, Node root) {
sanityCheckNormalization(externs, root);
sanityCheckCodeGeneration(root);
}
private Node sanityCheckCodeGeneration(Node root) {
if (compiler.hasHaltingErrors()) {
return null;
}
String source = compiler.toSource(root);
Node root2 = compiler.parseSyntheticCode(source);
if (compiler.hasHaltingErrors()) {
compiler.report(JSError.make(CANNOT_PARSE_GENERATED_CODE,
Strings.truncateAtMaxLength(source, 100, true)));
return null;
}
String source2 = compiler.toSource(root2);
if (!source.equals(source2)) {
compiler.report(JSError.make(GENERATED_BAD_CODE,
Strings.truncateAtMaxLength(source, 100, true),
Strings.truncateAtMaxLength(source2, 100, true)));
}
return root2;
}
private void sanityCheckNormalization(Node externs, Node root) {
CodeChangeHandler.RecentChange handler =
new CodeChangeHandler.RecentChange();
compiler.addChangeHandler(handler);
new PrepareAst(compiler, true).process(null, root);
Preconditions.checkState(!handler.hasCodeChanged(),
"This should never fire, NodeTypeNormalizer should assert first.");
if (compiler.isNormalized()) {
(new Normalize(compiler, true)).process(externs, root);
Preconditions.checkState(!handler.hasCodeChanged(),
"This should never fire, Normalize should assert first.");
boolean checkUserDeclarations = true;
CompilerPass pass = new Normalize.VerifyConstants(
compiler, checkUserDeclarations);
pass.process(externs, root);
}
compiler.removeChangeHandler(handler);
}
}
