package com.google.javascript.jscomp.deps;
import com.google.common.base.CharMatcher;
import com.google.common.base.Charsets;
import com.google.common.collect.Lists;
import com.google.common.io.Files;
import com.google.javascript.jscomp.ErrorManager;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
public class DepsFileParser extends JsFileLineParser {
private static Logger logger = Logger.getLogger(DepsFileParser.class.getName());
private final Matcher depMatcher =
Pattern.compile("\\s*goog.addDependency\\((.*)\\);?\\s*").matcher("");
private final Matcher depArgsMatch =
Pattern.compile("\\s*([^,]*), (\\[[^\\]]*\\]), (\\[[^\\]]*\\])\\s*").matcher("");
private List<DependencyInfo> depInfos;
public DepsFileParser(ErrorManager errorManager) {
super(errorManager);
}
public List<DependencyInfo> parseFile(String filePath) throws IOException {
return parseFileReader(filePath, new FileReader(filePath));
}
public List<DependencyInfo> parseFile(String filePath, String fileContents) {
return parseFileReader(filePath, new StringReader(fileContents));
}
public List<DependencyInfo> parseFileReader(String filePath, Reader reader) {
depInfos = Lists.newArrayList();
logger.info("Parsing Dep: " + filePath);
doParse(filePath, reader);
return depInfos;
}
@Override
protected boolean parseLine(String line) throws ParseException {
boolean hasDependencies = false;
if (line.indexOf("addDependency") != -1) {
depMatcher.reset(line);
if (depMatcher.matches()) {
hasDependencies = true;
String addDependencyParams = depMatcher.group(1);
depArgsMatch.reset(addDependencyParams);
if (!depArgsMatch.matches()) {
throw new ParseException("Invalid arguments to goog.addDependency(). Found: "
+ addDependencyParams, true);
}
String path = parseJsString(depArgsMatch.group(1));
DependencyInfo depInfo = new SimpleDependencyInfo(path, filePath,
parseJsStringArray(depArgsMatch.group(2)),
parseJsStringArray(depArgsMatch.group(3)));
if (logger.isLoggable(Level.FINE)) {
logger.fine("Found dep: " + depInfo);
}
depInfos.add(depInfo);
}
}
return !shortcutMode || hasDependencies ||
CharMatcher.WHITESPACE.matchesAllOf(line);
}
}
