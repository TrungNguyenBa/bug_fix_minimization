75a76,82
> if (n.getParent() == null) {
> List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
> if (outEdges.size() == 1) {
> return tryRemoveUnconditionalBranching(
> outEdges.get(0).getDestination().getValue());
> }
> }
76a84,91
> case Token.BLOCK:
> if (n.hasChildren()) {
> Node first = n.getFirstChild();
> return tryRemoveUnconditionalBranching(first);
> } else {
> return tryRemoveUnconditionalBranching(
> ControlFlowAnalysis.computeFollowNode(n));
> }
87c102,103
< Node fallThrough = computeFollowing(n);
---
> Node fallThrough = tryRemoveUnconditionalBranching(
> ControlFlowAnalysis.computeFollowNode(n));
97,107d112
< private Node computeFollowing(Node n) {
< Node next = ControlFlowAnalysis.computeFollowNode(n);
< while (next != null && next.getType() == Token.BLOCK) {
< if (next.hasChildren()) {
< next = next.getFirstChild();
< } else {
< next = computeFollowing(next);
< }
< }
< return next;
< }
