2c2
< index c115e10..e30c350 100644
---
> index c115e109..e642d758 100644
5,8c5,12
< @@ -1905,11 +1905,7 @@ public final class JsDocInfoParser {
<     * For expressions on the right hand side of a this: or new:
<     */
<    private Node parseContextTypeExpression(JsDocToken token) {
---
> @@ -1901,18 +1901,6 @@ public final class JsDocInfoParser {
>    }
>  
>    /**
> -   * ContextTypeExpression := BasicTypeExpression | '?'
> -   * For expressions on the right hand side of a this: or new:
> -   */
> -  private Node parseContextTypeExpression(JsDocToken token) {
14c18,38
< +          return parseTypeName(token);
---
> -  }
> -
> -  /**
>     * BasicTypeExpression := '*' | 'null' | 'undefined' | TypeName
>     *     | FunctionType | UnionType | RecordType | ArrayType
>     */
> @@ -2015,7 +2003,7 @@ public final class JsDocInfoParser {
>              skipEOLs();
>              Node contextType = wrapNode(
>                  isThis ? Token.THIS : Token.NEW,
> -                parseContextTypeExpression(next()));
> +                parseTypeName(next()));
>              if (contextType == null) {
>                return null;
>              }
> diff --git a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
> index 84e538b4..ad564757 100644
> --- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
> +++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
> @@ -581,20 +581,6 @@ public class JsDocInfoParserTest extends BaseJSTypeTestCase {
>      assertFalse(type.isNominalConstructor());
17c41,57
<    /**
---
> -  public void testStructuralConstructor2() throws Exception {
> -    JSType type = testParseType(
> -        "function (new:?)",
> -        // toString skips unknowns, but isConstructor reveals the truth.
> -        "function (): ?");
> -    assertTrue(type.isConstructor());
> -    assertFalse(type.isNominalConstructor());
> -  }
> -
> -  public void testStructuralConstructor3() throws Exception {
> -    resolve(parse("@type {function (new:*)} */").getType(),
> -        "constructed type must be an object type");
> -  }
> -
>    public void testNominalConstructor() throws Exception {
>      ObjectType type = testParseType("Array", "(Array|null)").dereference();
>      assertTrue(type.getConstructor().isNominalConstructor());
