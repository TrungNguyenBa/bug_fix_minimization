2c2
< index e428dfa..ae8a320 100644
---
> index e428dfab..9388a2b9 100644
5c5,7
< @@ -1311,6 +1311,8 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
---
> @@ -1309,8 +1309,14 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
>      Node objNode = n.getFirstChild();
>      JSType childType = getJSType(objNode);
6a9
> +    // Do this first b/c we want to check even when the getprop is an lvalue
9a13,15
> +      // GETPROP nodes have an assigned type on their node by the scope creator
> +      // if this is an enum declaration. The only namespaced enum declarations
> +      // that we allow are of the form object.name = ...;
13a20,105
> diff --git a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java
> index 0a979fe5..69d12619 100644
> --- a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java
> +++ b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java
> @@ -5183,19 +5183,19 @@ public class LooseTypeCheckTest extends CompilerTypeTestCase {
>    }
>  
>    public void testAnonymousType1() throws Exception {
> -    testTypes("function f() { return {}; }" +
> +    testTypes("function f() {}" +
>          "/** @constructor */\n" +
>          "f().bar = function() {};");
>    }
>  
>    public void testAnonymousType2() throws Exception {
> -    testTypes("function f() { return {}; }" +
> +    testTypes("function f() {}" +
>          "/** @interface */\n" +
>          "f().bar = function() {};");
>    }
>  
>    public void testAnonymousType3() throws Exception {
> -    testTypes("function f() { return {}; }" +
> +    testTypes("function f() {}" +
>          "/** @enum */\n" +
>          "f().bar = {FOO: 1};");
>    }
> diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
> index 349cc59c..e6282ee4 100644
> --- a/test/com/google/javascript/jscomp/TypeCheckTest.java
> +++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
> @@ -3923,13 +3923,6 @@ public class TypeCheckTest extends CompilerTypeTestCase {
>          "};");
>    }
>  
> -  public void testGetprop4() throws Exception {
> -    testTypes("var x = null; x.prop = 3;",
> -        "No properties on this expression\n" +
> -        "found   : null\n" +
> -        "required: Object");
> -  }
> -
>    public void testGetpropDict1() throws Exception {
>      testTypes("/**\n" +
>                " * @constructor\n" +
> @@ -6182,17 +6175,6 @@ public class TypeCheckTest extends CompilerTypeTestCase {
>          "Property unknownProp never defined on Type");
>    }
>  
> -  public void testIssue810() throws Exception {
> -    testTypes(
> -        "/** @constructor */" +
> -        "var Type = function () {" +
> -        "};" +
> -        "Type.prototype.doIt = function(obj) {" +
> -        "  this.prop = obj.unknownProp;" +
> -        "};",
> -        "Property unknownProp never defined on obj");
> -  }
> -
>    /**
>     * Tests that the || operator is type checked correctly, that is of
>     * the type of the first argument or of the second argument. See
> @@ -7452,19 +7434,19 @@ public class TypeCheckTest extends CompilerTypeTestCase {
>    }
>  
>    public void testAnonymousType1() throws Exception {
> -    testTypes("function f() { return {}; }" +
> +    testTypes("function f() {}" +
>          "/** @constructor */\n" +
>          "f().bar = function() {};");
>    }
>  
>    public void testAnonymousType2() throws Exception {
> -    testTypes("function f() { return {}; }" +
> +    testTypes("function f() {}" +
>          "/** @interface */\n" +
>          "f().bar = function() {};");
>    }
>  
>    public void testAnonymousType3() throws Exception {
> -    testTypes("function f() { return {}; }" +
> +    testTypes("function f() {}" +
>          "/** @enum */\n" +
>          "f().bar = {FOO: 1};");
>    }
