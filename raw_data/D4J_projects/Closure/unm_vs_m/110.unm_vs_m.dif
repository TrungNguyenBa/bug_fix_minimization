2c2
< index fbd46d3..7e9c8b8 100644
---
> index fbd46d33..3a771c95 100644
5c5,13
< @@ -355,7 +355,6 @@ class ScopedAliases implements HotSwapCompilerPass {
---
> @@ -25,7 +25,6 @@ import com.google.common.collect.Sets;
>  import com.google.javascript.jscomp.CompilerOptions.AliasTransformation;
>  import com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler;
>  import com.google.javascript.jscomp.Scope.Var;
> -import com.google.javascript.rhino.IR;
>  import com.google.javascript.rhino.JSDocInfo;
>  import com.google.javascript.rhino.Node;
>  import com.google.javascript.rhino.SourcePosition;
> @@ -355,7 +354,6 @@ class ScopedAliases implements HotSwapCompilerPass {
13c21
< @@ -364,13 +363,12 @@ class ScopedAliases implements HotSwapCompilerPass {
---
> @@ -364,14 +362,10 @@ class ScopedAliases implements HotSwapCompilerPass {
19,20c27
< +        } else if (isVar) {
<            Node grandparent = parent.getParent();
---
> -          Node grandparent = parent.getParent();
22a30
> +        } else if (isVar) {
27,28c35
< +          Node varNode = parent;
<  
---
> -
31c38,39
< @@ -382,9 +380,7 @@ class ScopedAliases implements HotSwapCompilerPass {
---
>            scopedAliasNames.add(name);
> @@ -380,33 +374,6 @@ class ScopedAliases implements HotSwapCompilerPass {
33,34c41,44
<            // First, we need to free up the function expression (EXPR)
<            // to be used in another expression.
---
>            compiler.ensureLibraryInjected("base");
>  
> -          // First, we need to free up the function expression (EXPR)
> -          // to be used in another expression.
36c46
<              // Replace "function NAME() { ... }" with "var NAME;".
---
> -            // Replace "function NAME() { ... }" with "var NAME;".
38,44c48,55
<  
<              // We can't keep the local name on the function expression,
<              // because IE is buggy and will leak the name into the global
< @@ -393,19 +389,9 @@ class ScopedAliases implements HotSwapCompilerPass {
<              //
<              // This will only cause problems if this is a hoisted, recursive
<              // function, and the programmer is using the hoisting.
---
> -
> -            // We can't keep the local name on the function expression,
> -            // because IE is buggy and will leak the name into the global
> -            // scope. This is covered in more detail here:
> -            // http://wiki.ecmascript.org/lib/exe/fetch.php?id=resources:resources&cache=cache&media=resources:jscriptdeviationsfromes3.pdf
> -            //
> -            // This will only cause problems if this is a hoisted, recursive
> -            // function, and the programmer is using the hoisting.
47c58
<  
---
> -
52,53c63,64
<                // If this is a VAR, we can just detach the expression and
<                // the tree will still be valid.
---
> -              // If this is a VAR, we can just detach the expression and
> -              // the tree will still be valid.
58c69
<  
---
> -
61c72,74
< @@ -419,11 +405,7 @@ class ScopedAliases implements HotSwapCompilerPass {
---
>            if (value != null || v.getJSDocInfo() != null) {
> @@ -418,12 +385,7 @@ class ScopedAliases implements HotSwapCompilerPass {
>                  .useSourceInfoIfMissingFromForTree(n);
64c77
<  
---
> -
68c81
<                grandparent.addChildBefore(newDecl, varNode);
---
> -              grandparent.addChildBefore(newDecl, varNode);
69a83
> +            parent.getParent().addChildBefore(newDecl, parent);
72a87,95
> @@ -433,7 +395,7 @@ class ScopedAliases implements HotSwapCompilerPass {
>  
>            recordAlias(v);
>          } else {
> -          // Do not other kinds of local symbols, like catch params.
> +          // Do not allow hoisted functions or other kinds of local symbols.
>            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());
>          }
>        }
74c97
< index 6a3e9e0..b645632 100644
---
> index 6a3e9e03..558a3aa3 100644
77c100
< @@ -551,9 +551,6 @@ public class Node implements Cloneable, Serializable {
---
> @@ -551,10 +551,6 @@ public class Node implements Cloneable, Serializable {
84c107
<  
---
> -
86a110,144
>        if (n == null) {
> diff --git a/test/com/google/javascript/jscomp/ScopedAliasesTest.java b/test/com/google/javascript/jscomp/ScopedAliasesTest.java
> index 30aa1903..9150a1c8 100644
> --- a/test/com/google/javascript/jscomp/ScopedAliasesTest.java
> +++ b/test/com/google/javascript/jscomp/ScopedAliasesTest.java
> @@ -494,7 +494,7 @@ public class ScopedAliasesTest extends CompilerTestCase {
>    }
>  
>    public void testNonAliasLocal() {
> -    testScopedFailure("try { } catch (e) {}",
> +    testScopedFailure("function f() {}",
>          ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);
>    }
>  
> @@ -511,20 +511,6 @@ public class ScopedAliasesTest extends CompilerTestCase {
>                 "    return $jscomp.scope.x + $jscomp.scope.y; }");
>    }
>  
> -  public void testFunctionDeclaration() {
> -    testScoped("if (x) { function f() {} } g(f)",
> -               SCOPE_NAMESPACE +
> -               "if (x) { $jscomp.scope.f = function () {}; } " +
> -               "g($jscomp.scope.f); ");
> -  }
> -
> -  public void testHoistedFunctionDeclaration() {
> -    testScoped(" g(f); function f() {} ",
> -               SCOPE_NAMESPACE +
> -               " $jscomp.scope.f = function () {}; " +
> -               "g($jscomp.scope.f); ");
> -  }
> -
>    public void testAliasReassign() {
>      testScopedFailure("var x = 3; x = 5;",
>          ScopedAliases.GOOG_SCOPE_ALIAS_REDEFINED);
