2c2
< index 4b30d57..4c24e2f 100644
---
> index 4b30d57b..b88744df 100644
5c5,22
< @@ -1189,15 +1189,9 @@ class TypeInference
---
> @@ -28,8 +28,6 @@ import static com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE;
>  import static com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE;
>  
>  import com.google.common.base.Preconditions;
> -import com.google.common.base.Predicate;
> -import com.google.common.collect.ImmutableList;
>  import com.google.common.collect.Lists;
>  import com.google.common.collect.Maps;
>  import com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec;
> @@ -1182,22 +1180,13 @@ class TypeInference
>     */
>    private boolean inferTemplatedTypesForCall(
>        Node n, FunctionType fnType) {
> -    final ImmutableList<TemplateType> keys = fnType.getTemplateTypeMap()
> -        .getTemplateKeys();
> -    if (keys.isEmpty()) {
> +    if (fnType.getTemplateTypeMap().getTemplateKeys().isEmpty()) {
>        return false;
18,20c35,36
< +    Map<TemplateType, JSType> inferred = 
< +        inferTemplateTypesFromParameters(fnType, n);
< +
---
> +    Map<TemplateType, JSType> inferred = inferTemplateTypesFromParameters(
> +        fnType, n);
23a40,92
> diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
> index 4fa5c448..14569dc2 100644
> --- a/test/com/google/javascript/jscomp/TypeCheckTest.java
> +++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
> @@ -12137,48 +12137,6 @@ public class TypeCheckTest extends CompilerTypeTestCase {
>          "required: string");
>    }
>  
> -  public void testTemplatized11() throws Exception {
> -    testTypes(
> -        "/** \n" +
> -        " * @template T\n" +
> -        " * @constructor\n" +
> -        " */\n" +
> -        "function C() {}\n" +
> -        "\n" +
> -        "/**\n" +
> -        " * @param {T|K} a\n" +
> -        " * @return {T}\n" +
> -        " * @template K\n" +
> -        " */\n" +
> -        "C.prototype.method = function (a) {};\n" +
> -        "\n" +
> -        // method returns "?"
> -        "/** @type {void} */ var x = new C().method(1);");
> -  }
> -
> -  public void testIssue1058() throws Exception {
> -    testTypes(
> -        "/**\n" +
> -        "  * @constructor\n" +
> -        "  * @template CLASS\n" +
> -        "  */\n" +
> -        "var Class = function() {};\n" +
> -        "\n" +
> -        "/**\n" +
> -        "  * @param {function(CLASS):CLASS} a\n" +
> -        "  * @template T\n" +
> -        "  */\n" +
> -        "Class.prototype.foo = function(a) {\n" +
> -        "  return 'string';\n" +
> -        "};\n" +
> -        "\n" +
> -        "/** @param {number} a\n" +
> -        "  * @return {string} */\n" +
> -        "var a = function(a) { return '' };\n" +
> -        "\n" +
> -        "new Class().foo(a);");
> -  }
> -
>    public void testUnknownTypeReport() throws Exception {
>      compiler.getOptions().setWarningLevel(DiagnosticGroups.REPORT_UNKNOWN_TYPES,
>          CheckLevel.WARNING);
