2c2
< index 1639f2c..0f03e35 100644
---
> index 1639f2c6..1f925ba4 100644
5c5,14
< @@ -210,9 +210,7 @@ class ExploitAssigns extends AbstractPeepholeOptimization {
---
> @@ -73,7 +73,7 @@ class ExploitAssigns extends AbstractPeepholeOptimization {
>     * @param value The value node.
>     * @param isLValue Whether it's on the left-hand side of an expr.
>     */
> -  private static boolean isCollapsibleValue(Node value, boolean isLValue) {
> +  private boolean isCollapsibleValue(Node value, boolean isLValue) {
>      switch (value.getType()) {
>        case Token.GETPROP:
>          // Do not collapse GETPROPs on arbitrary objects, because
> @@ -210,11 +210,9 @@ class ExploitAssigns extends AbstractPeepholeOptimization {
10c19
<        node = node.getFirstChild();
---
> -      node = node.getFirstChild();
12,13c21,25
<      if (node.isName()
<          && isNameAssignedTo(node.getString(), replacement)) {
---
> -    if (node.isName()
> -        && isNameAssignedTo(node.getString(), replacement)) {
> +    Node name = node.getFirstChild();
> +    if (name.isName()
> +        && isNameAssignedTo(name.getString(), replacement)) {
14a27,43
>      }
>  
> diff --git a/test/com/google/javascript/jscomp/ExploitAssignsTest.java b/test/com/google/javascript/jscomp/ExploitAssignsTest.java
> index 72cf2531..318652d0 100644
> --- a/test/com/google/javascript/jscomp/ExploitAssignsTest.java
> +++ b/test/com/google/javascript/jscomp/ExploitAssignsTest.java
> @@ -157,10 +157,6 @@ public class ExploitAssignsTest extends CompilerTestCase {
>      testSame("this.$e$ = []; this.$b$ = null;");
>    }
>  
> -  public void testIssue1017() {
> -    testSame("x = x.parentNode.parentNode; x = x.parentNode.parentNode;");
> -  }
> -
>    @Override
>    protected CompilerPass getProcessor(Compiler compiler) {
>      return new PeepholeOptimizationsPass(compiler,new ExploitAssigns());
