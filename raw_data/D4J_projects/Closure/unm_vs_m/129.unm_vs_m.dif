2c2
< index 42982af..d993bee 100644
---
> index 42982afb..eda524ec 100644
5c5,7
< @@ -163,9 +163,6 @@ class PrepareAst implements CompilerPass {
---
> @@ -161,12 +161,6 @@ class PrepareAst implements CompilerPass {
>        // Keep track of of the "this" context of a call.  A call without an
>        // explicit "this" is a free call.
7,8c9,10
<  
<        // ignore cast nodes.
---
> -
> -      // ignore cast nodes.
12c14
<  
---
> -
14a17,45
>        }
> diff --git a/test/com/google/javascript/jscomp/IntegrationTest.java b/test/com/google/javascript/jscomp/IntegrationTest.java
> index c7067e9d..0c7ef23a 100644
> --- a/test/com/google/javascript/jscomp/IntegrationTest.java
> +++ b/test/com/google/javascript/jscomp/IntegrationTest.java
> @@ -2415,23 +2415,6 @@ public class IntegrationTest extends IntegrationTestCase {
>      test(options, code, ConstCheck.CONST_REASSIGNED_VALUE_ERROR);
>    }
>  
> -  public void testIssue937() {
> -    CompilerOptions options = createCompilerOptions();
> -    CompilationLevel level = CompilationLevel.SIMPLE_OPTIMIZATIONS;
> -    level.setOptionsForCompilationLevel(options);
> -    WarningLevel warnings = WarningLevel.DEFAULT;
> -    warnings.setOptionsForWarningLevel(options);
> -
> -    String code = "" +
> -        "console.log(" +
> -            "/** @type {function():!string} */ ((new x())['abc'])() );";
> -    String result = "" +
> -        "console.log((new x()).abc());";
> -    test(options, code, result);
> -  }
> -
> -
> -
>    public void testIssue787() {
>      CompilerOptions options = createCompilerOptions();
>      CompilationLevel level = CompilationLevel.SIMPLE_OPTIMIZATIONS;
