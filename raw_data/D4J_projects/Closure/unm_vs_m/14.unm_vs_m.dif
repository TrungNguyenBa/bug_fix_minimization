2c2
< index 980deff..5c6927f 100644
---
> index 980deff1..5c6927f9 100644
13a14,73
> diff --git a/src/com/google/javascript/jscomp/ControlFlowGraph.java b/src/com/google/javascript/jscomp/ControlFlowGraph.java
> index 49bbdd89..56ed9d79 100644
> --- a/src/com/google/javascript/jscomp/ControlFlowGraph.java
> +++ b/src/com/google/javascript/jscomp/ControlFlowGraph.java
> @@ -113,15 +113,7 @@ class ControlFlowGraph<N> extends
>      ON_FALSE,
>      /** Unconditional branch. */
>      UNCOND,
> -    /**
> -     * Exception-handling code paths.
> -     * Conflates two kind of control flow passing:
> -     * - An exception is thrown, and falls into a catch or finally block
> -     * - During exception handling, a finally block finishes and control
> -     *   passes to the next finally block.
> -     * In theory, we need 2 different edge types. In practice, we
> -     * can just treat them as "the edges we can't really optimize".
> -     */
> +    /** Exception related. */
>      ON_EX,
>      /** Possible folded-away template */
>      SYN_BLOCK;
> diff --git a/test/com/google/javascript/jscomp/CheckMissingReturnTest.java b/test/com/google/javascript/jscomp/CheckMissingReturnTest.java
> index 3a33aae7..5b43e178 100644
> --- a/test/com/google/javascript/jscomp/CheckMissingReturnTest.java
> +++ b/test/com/google/javascript/jscomp/CheckMissingReturnTest.java
> @@ -191,12 +191,6 @@ public class CheckMissingReturnTest extends CompilerTestCase {
>      testNotMissing("if (a) { return 1} else { while (1) {return 1} }");
>    }
>  
> -  public void testIssue779() {
> -    testNotMissing(
> -        "var a = f(); try { alert(); if (a > 0) return 1; }" +
> -        "finally { a = 5; } return 2;");
> -  }
> -
>    private static String createFunction(String returnType, String body) {
>      return "/** @return {" + returnType + "} */ function foo() {" + body + "}";
>    }
> diff --git a/test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java b/test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java
> index 5560e2cc..90422d58 100644
> --- a/test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java
> +++ b/test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java
> @@ -1104,7 +1104,7 @@ public class ControlFlowAnalysisTest extends TestCase {
>      // BREAK to FINALLY.
>      assertCrossEdge(cfg, Token.BREAK, Token.BLOCK, Branch.UNCOND);
>      // FINALLY to FINALLY.
> -    assertCrossEdge(cfg, Token.BLOCK, Token.BLOCK, Branch.ON_EX);
> +    assertCrossEdge(cfg, Token.BLOCK, Token.BLOCK, Branch.UNCOND);
>      assertCrossEdge(cfg, Token.WHILE, Token.BLOCK, Branch.ON_FALSE);
>      assertReturnEdge(cfg, Token.BLOCK);
>    }
> @@ -1115,7 +1115,7 @@ public class ControlFlowAnalysisTest extends TestCase {
>      ControlFlowGraph<Node> cfg = createCfg(src);
>      assertCrossEdge(cfg, Token.THROW, Token.BLOCK, Branch.ON_EX);
>      assertCrossEdge(cfg, Token.VAR, Token.BLOCK, Branch.UNCOND);
> -    assertCrossEdge(cfg, Token.IF, Token.BLOCK, Branch.ON_EX);
> +    assertCrossEdge(cfg, Token.IF, Token.BLOCK, Branch.UNCOND);
>    }
>  
>    public void testReturn() {
