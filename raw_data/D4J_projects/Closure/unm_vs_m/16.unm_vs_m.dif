2c2
< index e2f0538..26fb230 100644
---
> index e2f05387..426069fc 100644
5c5,14
< @@ -167,23 +167,17 @@ class ScopedAliases implements HotSwapCompilerPass {
---
> @@ -16,7 +16,6 @@
>  
>  package com.google.javascript.jscomp;
>  
> -import com.google.common.base.Preconditions;
>  import com.google.common.collect.Lists;
>  import com.google.common.collect.Maps;
>  import com.google.common.collect.Sets;
> @@ -166,24 +165,18 @@ class ScopedAliases implements HotSwapCompilerPass {
>    }
8c17
<      private final Node typeReference;
---
> -    private final Node typeReference;
10c19,20
<      private final String aliasName;
---
> -    private final String aliasName;
> +    private final Node aliasReference;
13,15c23,24
< +    AliasedTypeNode(Node typeReference,
<          String aliasName) {
<        this.typeReference = typeReference;
---
> -        String aliasName) {
> -      this.typeReference = typeReference;
17c26,31
<        this.aliasName = aliasName;
---
> -      this.aliasName = aliasName;
> +    private final String correctedType;
> +
> +    AliasedTypeNode(Node aliasReference, String correctedType) {
> +      this.aliasReference = aliasReference;
> +      this.correctedType = correctedType;
27c41
< +      typeReference.setString(aliasName);
---
> +      aliasReference.setString(correctedType);
31c45
< @@ -471,7 +465,7 @@ class ScopedAliases implements HotSwapCompilerPass {
---
> @@ -471,7 +464,8 @@ class ScopedAliases implements HotSwapCompilerPass {
36c50,52
< +          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));
---
> +          aliasUsages.add(new AliasedTypeNode(typeNode,
> +              aliasedNode.getQualifiedName() + name.substring(endIndex)));
>          }
37a54,95
>  
> diff --git a/test/com/google/javascript/jscomp/IntegrationTest.java b/test/com/google/javascript/jscomp/IntegrationTest.java
> index 5306ccea..8ae9fd9b 100644
> --- a/test/com/google/javascript/jscomp/IntegrationTest.java
> +++ b/test/com/google/javascript/jscomp/IntegrationTest.java
> @@ -1861,30 +1861,6 @@ public class IntegrationTest extends IntegrationTestCase {
>          "");
>    }
>  
> -  public void testIssue772() throws Exception {
> -    CompilerOptions options = createCompilerOptions();
> -    options.closurePass = true;
> -    options.checkTypes = true;
> -    test(
> -        options,
> -        "/** @const */ var a = {};" +
> -        "/** @const */ a.b = {};" +
> -        "/** @const */ a.b.c = {};" +
> -        "goog.scope(function() {" +
> -        "  var b = a.b;" +
> -        "  var c = b.c;" +
> -        "  /** @typedef {string} */" +
> -        "  c.MyType;" +
> -        "  /** @param {c.MyType} x The variable. */" +
> -        "  c.myFunc = function(x) {};" +
> -        "});",
> -        "/** @const */ var a = {};" +
> -        "/** @const */ a.b = {};" +
> -        "/** @const */ a.b.c = {};" +
> -        "a.b.c.MyType;" +
> -        "a.b.c.myFunc = function(x) {};");
> -  }
> -
>    public void testCodingConvention() {
>      Compiler compiler = new Compiler();
>      compiler.initOptions(new CompilerOptions());
> diff --git a/test/com/google/javascript/jscomp/ScopedAliasesTest.java b/test/com/google/javascript/jscomp/ScopedAliasesTest.java
> index fda89aa6..ac09a045 100644
> --- a/test/com/google/javascript/jscomp/ScopedAliasesTest.java
> +++ b/test/com/google/javascript/jscomp/ScopedAliasesTest.java
> @@ -403,14 +403,6 @@ public class ScopedAliasesTest extends CompilerTestCase {
>          + "/** @param draggable */ types.expected;");
39a98,108
> -  public void testIssue772() {
> -    testTypes(
> -        "var b = a.b;" +
> -        "var c = b.c;",
> -        "/** @param {c.MyType} x */ types.actual;" +
> -        "/** @param {a.b.c.MyType} x */ types.expected;");
> -  }
> -
>    // TODO(robbyw): What if it's recursive?  var goog = goog.dom;
>  
>    // FAILURE CASES
