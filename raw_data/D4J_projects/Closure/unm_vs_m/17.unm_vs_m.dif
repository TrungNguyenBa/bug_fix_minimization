2c2
< index 8bc7bda..efaba2c 100644
---
> index 8bc7bdad..0a2d6eb5 100644
5c5
< @@ -1288,12 +1288,8 @@ final class TypedScopeCreator implements ScopeCreator {
---
> @@ -1288,14 +1288,8 @@ final class TypedScopeCreator implements ScopeCreator {
11,12c11
< +              if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {
<                  // If rValue has a type-cast, we use the type in the type-cast.
---
> -                // If rValue has a type-cast, we use the type in the type-cast.
15,17c14,17
< -                  && !rValue.getJSType().isUnknownType()) {
<                  // If rValue's type was already computed during scope creation,
<                  // then we can safely use that.
---
> +              if (rValue.getJSType() != null
>                    && !rValue.getJSType().isUnknownType()) {
> -                // If rValue's type was already computed during scope creation,
> -                // then we can safely use that.
18a19,50
>                } else if (rValue.isOr()) {
>                  // Check for a very specific JS idiom:
> diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
> index aeb98a4d..b8760e15 100644
> --- a/test/com/google/javascript/jscomp/TypeCheckTest.java
> +++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
> @@ -5902,25 +5902,6 @@ public class TypeCheckTest extends CompilerTypeTestCase {
>           "}");
>    }
>  
> -  public void testIssue688() throws Exception {
> -    testTypes(
> -        "/** @const */ var SOME_DEFAULT =\n" +
> -        "    /** @type {TwoNumbers} */ ({first: 1, second: 2});\n" +
> -        "/**\n" +
> -        "* Class defining an interface with two numbers.\n" +
> -        "* @interface\n" +
> -        "*/\n" +
> -        "function TwoNumbers() {}\n" +
> -        "/** @type number */\n" +
> -        "TwoNumbers.prototype.first;\n" +
> -        "/** @type number */\n" +
> -        "TwoNumbers.prototype.second;\n" +
> -        "/** @return {number} */ function f() { return SOME_DEFAULT; }",
> -        "inconsistent return type\n" +
> -        "found   : (TwoNumbers|null)\n" +
> -        "required: number");
> -  }
> -
>    public void testIssue700() throws Exception {
>      testTypes(
>          "/**\n" +
