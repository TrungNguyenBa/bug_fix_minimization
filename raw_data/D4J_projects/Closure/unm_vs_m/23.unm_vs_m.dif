2c2
< index 7a0313c..f777b1c 100644
---
> index 7a0313cc..13895f32 100644
5c5,7
< @@ -1448,14 +1448,8 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {
---
> @@ -1446,18 +1446,9 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {
>        return n;
>      }
7,8c9,10
<      Node current = left.getFirstChild();
<      Node elem = null;
---
> -    Node current = left.getFirstChild();
> -    Node elem = null;
15,16c17
< +    for (int i = 0; current != null && i < intIndex; i++) {
<          elem = current;
---
> -        elem = current;
17a19,24
> -
> -      current = current.getNext();
> +    Node elem = left.getFirstChild();
> +    for (int i = 0; elem != null && i < intIndex; i++) {
> +      elem = elem.getNext();
>      }
19c26,38
<        current = current.getNext();
---
>      if (elem == null) {
> diff --git a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
> index b5a907bb..92ef4b9a 100644
> --- a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
> +++ b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
> @@ -771,10 +771,6 @@ public class PeepholeFoldConstantsTest extends CompilerTestCase {
>          PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);
>      fold("x = [10, 20][2]",     "",
>          PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);
> -
> -    foldSame("x = [foo(), 0][1]");
> -    fold("x = [0, foo()][1]", "x = foo()");
> -    foldSame("x = [0, foo()][0]");
20a40,41
>  
>    public void testFoldComplex() {
