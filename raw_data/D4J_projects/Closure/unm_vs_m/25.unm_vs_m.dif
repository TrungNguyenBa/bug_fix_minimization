2c2
< index 74728ee..7e218d8 100644
---
> index 74728ee9..bc248974 100644
10c10
<  
---
> -
12a13
> +
16c17
< @@ -1052,11 +1052,13 @@ class TypeInference
---
> @@ -1052,11 +1052,14 @@ class TypeInference
24a26
> +
30a33,81
> diff --git a/test/com/google/javascript/jscomp/TypeInferenceTest.java b/test/com/google/javascript/jscomp/TypeInferenceTest.java
> index 91119b5b..a370ae2e 100644
> --- a/test/com/google/javascript/jscomp/TypeInferenceTest.java
> +++ b/test/com/google/javascript/jscomp/TypeInferenceTest.java
> @@ -44,7 +44,6 @@ import com.google.javascript.rhino.jstype.JSType;
>  import com.google.javascript.rhino.jstype.JSTypeNative;
>  import com.google.javascript.rhino.jstype.JSTypeRegistry;
>  import com.google.javascript.rhino.jstype.StaticSlot;
> -import com.google.javascript.rhino.testing.Asserts;
>  
>  import junit.framework.TestCase;
>  
> @@ -129,7 +128,7 @@ public class TypeInferenceTest extends TestCase {
>    }
>  
>    private void verify(String name, JSType type) {
> -    Asserts.assertTypeEquals(type, getType(name));
> +    assertEquals(type, getType(name));
>    }
>  
>    private void verify(String name, JSTypeNative type) {
> @@ -866,27 +865,4 @@ public class TypeInferenceTest extends TestCase {
>              registry.getNativeType(BOOLEAN_TYPE),
>              ImmutableList.<JSType>of() /* params */));
>    }
> -
> -  public void testBackwardsInferenceCall() {
> -    inFunction(
> -        "/** @param {{foo: (number|undefined)}} x */" +
> -        "function f(x) {}" +
> -        "var y = {};" +
> -        "f(y);");
> -
> -    assertEquals("{foo: (number|undefined)}", getType("y").toString());
> -  }
> -
> -  public void testBackwardsInferenceNew() {
> -    inFunction(
> -        "/**\n" +
> -        " * @constructor\n" +
> -        " * @param {{foo: (number|undefined)}} x\n" +
> -        " */" +
> -        "function F(x) {}" +
> -        "var y = {};" +
> -        "new F(y);");
> -
> -    assertEquals("{foo: (number|undefined)}", getType("y").toString());
> -  }
>  }
