0a1,55
> diff --git a/src/com/google/javascript/jscomp/CodeConsumer.java b/src/com/google/javascript/jscomp/CodeConsumer.java
> index 5b5ab44d..3522e89e 100644
> --- a/src/com/google/javascript/jscomp/CodeConsumer.java
> +++ b/src/com/google/javascript/jscomp/CodeConsumer.java
> @@ -257,19 +257,15 @@ abstract class CodeConsumer {
>          }
>        }
>        if (exp > 2) {
> -        addConstant(Long.toString(mantissa) + "E" + Integer.toString(exp));
> +        add(Long.toString(mantissa) + "E" + Integer.toString(exp));
>        } else {
> -        addConstant(Long.toString(value));
> +        add(Long.toString(value));
>        }
>      } else {
> -      addConstant(String.valueOf(x));
> +      add(String.valueOf(x));
>      }
>    }
>  
> -  void addConstant(String newcode) {
> -    add(newcode);
> -  }
> -
>    static boolean isNegativeZero(double x) {
>      return x == 0.0 && Math.copySign(1, x) == -1.0;
>    }
> diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java
> index e793ddf2..da05c4f8 100644
> --- a/src/com/google/javascript/jscomp/CodeGenerator.java
> +++ b/src/com/google/javascript/jscomp/CodeGenerator.java
> @@ -550,7 +550,7 @@ class CodeGenerator {
>  
>        case Token.NULL:
>          Preconditions.checkState(childCount == 0);
> -        cc.addConstant("null");
> +        add("null");
>          break;
>  
>        case Token.THIS:
> @@ -560,12 +560,12 @@ class CodeGenerator {
>  
>        case Token.FALSE:
>          Preconditions.checkState(childCount == 0);
> -        cc.addConstant("false");
> +        add("false");
>          break;
>  
>        case Token.TRUE:
>          Preconditions.checkState(childCount == 0);
> -        cc.addConstant("true");
> +        add("true");
>          break;
>  
>        case Token.CONTINUE:
2c57
< index 65694ab..76a5d0a 100644
---
> index 65694ab7..9d0dde74 100644
5,8c60,68
< @@ -99,9 +99,5 @@ class InlineCostEstimator {
<       * Constants (true, false, null) are considered basically free,
<       * because it's likely that they will get folded when we're done.
<       */
---
> @@ -94,14 +94,5 @@ class InlineCostEstimator {
>      void addIdentifier(String identifier) {
>        add(ESTIMATED_IDENTIFIER);
>      }
> -
> -    /**
> -     * Constants (true, false, null) are considered basically free,
> -     * because it's likely that they will get folded when we're done.
> -     */
14a75,116
> diff --git a/test/com/google/javascript/jscomp/InlineCostEstimatorTest.java b/test/com/google/javascript/jscomp/InlineCostEstimatorTest.java
> index 57567324..5524e6e3 100644
> --- a/test/com/google/javascript/jscomp/InlineCostEstimatorTest.java
> +++ b/test/com/google/javascript/jscomp/InlineCostEstimatorTest.java
> @@ -46,13 +46,11 @@ public class InlineCostEstimatorTest extends TestCase {
>  
>    public void testCost() {
>      checkCost("1", "1");
> -    checkCost("true", "1");
> -    checkCost("false", "1");
>      checkCost("a", "xx");
>      checkCost("a + b", "xx+xx");
>      checkCost("foo()", "xx()");
>      checkCost("foo(a,b)", "xx(xx,xx)");
> -    checkCost("10 + foo(a,b)", "0+xx(xx,xx)");
> +    checkCost("10 + foo(a,b)", "10+xx(xx,xx)");
>      checkCost("1 + foo(a,b)", "1+xx(xx,xx)");
>      checkCost("a ? 1 : 0", "xx?1:0");
>      checkCost("a.b", "xx.xx");
> diff --git a/test/com/google/javascript/jscomp/InlineFunctionsTest.java b/test/com/google/javascript/jscomp/InlineFunctionsTest.java
> index 80ab5cc8..1515f973 100644
> --- a/test/com/google/javascript/jscomp/InlineFunctionsTest.java
> +++ b/test/com/google/javascript/jscomp/InlineFunctionsTest.java
> @@ -2164,18 +2164,6 @@ public class InlineFunctionsTest extends CompilerTestCase {
>          "}");
>    }
>  
> -  public void testIssue728() {
> -    String f = "var f = function() { return false; };";
> -    StringBuilder calls = new StringBuilder();
> -    StringBuilder folded = new StringBuilder();
> -    for (int i = 0; i < 30; i++) {
> -      calls.append("if (!f()) alert('x');");
> -      folded.append("if (!false) alert('x');");
> -    }
> -
> -    test(f + calls, folded.toString());
> -  }
> -
>    public void testAnonymous1() {
>      assumeMinimumCapture = false;
>      test("(function(){var a=10;(function(){var b=a;a++;alert(b)})()})();",
