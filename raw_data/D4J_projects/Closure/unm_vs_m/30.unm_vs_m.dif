2c2
< index 3f39c07..d53a8f8 100644
---
> index 3f39c07e..d31bdcd6 100644
13a14,22
> @@ -205,8 +205,6 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback
>              }
>  
>              Node defNode = reachingDef.getDef(name, cfgNode);
> -            // TODO(nicksantos): We need to add some notion of @const outer
> -            // scope vars. We can inline those just fine.
>              if (defNode != null &&
>                  !reachingDef.dependsOnOuterScopeVars(name, cfgNode)) {
>                candidates.add(new Candidate(name, defNode, n, cfgNode));
15c24
< index 589f673..1487af3 100644
---
> index 589f6736..cc7dd734 100644
18c27
< @@ -68,7 +68,6 @@ final class MustBeReachingVariableDef extends
---
> @@ -68,8 +68,6 @@ final class MustBeReachingVariableDef extends
23c32
<  
---
> -
26c35,36
< @@ -394,13 +393,9 @@ final class MustBeReachingVariableDef extends
---
>      }
> @@ -394,13 +392,8 @@ final class MustBeReachingVariableDef extends
31,32c41
< +        if (n.isName() && jsScope.isDeclared(n.getString(), true)) {
<            Var dep = jsScope.getVar(n.getString());
---
> -          Var dep = jsScope.getVar(n.getString());
36c45
<              def.depends.add(dep);
---
> -            def.depends.add(dep);
37a47,48
> +        if (n.isName() && jsScope.isDeclared(n.getString(), true)) {
> +          def.depends.add(jsScope.getVar(n.getString()));
41c52
< @@ -432,9 +427,6 @@ final class MustBeReachingVariableDef extends
---
> @@ -432,10 +425,6 @@ final class MustBeReachingVariableDef extends
48c59
<  
---
> -
50a62,153
>          return true;
> diff --git a/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java b/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java
> index d3eeb7d0..839e00ea 100644
> --- a/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java
> +++ b/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java
> @@ -25,7 +25,6 @@ import com.google.javascript.rhino.Node;
>  public class FlowSensitiveInlineVariablesTest extends CompilerTestCase  {
>  
>    public static final String EXTERN_FUNCTIONS = "" +
> -      "var print;\n" +
>        "/** @nosideeffects */ function noSFX() {} \n" +
>        "                      function hasSFX() {} \n";
>  
> @@ -193,19 +192,13 @@ public class FlowSensitiveInlineVariablesTest extends CompilerTestCase  {
>  
>    public void testInlineExpression8() {
>      // The same variable inlined twice.
> -    inline(
> -        "var a,b;" +
> -        "var x = a + b; print(x);      x = a - b; print(x)",
> -        "var a,b;" +
> +    inline("var x = a + b; print(x);      x = a - b; print(x)",
>             "var x;         print(a + b);             print(a - b)");
>    }
>  
>    public void testInlineExpression9() {
>      // Check for actual control flow sensitivity.
> -    inline(
> -        "var a,b;" +
> -        "var x; if (g) { x= a + b; print(x)    }  x = a - b; print(x)",
> -        "var a,b;" +
> +    inline("var x; if (g) { x= a + b; print(x)    }  x = a - b; print(x)",
>             "var x; if (g) {           print(a + b)}             print(a - b)");
>    }
>  
> @@ -322,12 +315,7 @@ public class FlowSensitiveInlineVariablesTest extends CompilerTestCase  {
>    }
>  
>    public void testInlineAcrossSideEffect1() {
> -    // This can't be inlined because print() has side-effects and might change
> -    // the definition of noSFX.
> -    //
> -    // noSFX must be both const and pure in order to inline it.
> -    noInline("var y; var x = noSFX(y); print(x)");
> -    //inline("var y; var x = noSFX(y); print(x)", "var y;var x;print(noSFX(y))");
> +    inline("var y; var x = noSFX(y); print(x)", "var y;var x;print(noSFX(y))");
>    }
>  
>    public void testInlineAcrossSideEffect2() {
> @@ -357,14 +345,8 @@ public class FlowSensitiveInlineVariablesTest extends CompilerTestCase  {
>    }
>  
>    public void testCanInlineAcrossNoSideEffect() {
> -    // This can't be inlined because print() has side-effects and might change
> -    // the definition of noSFX. We should be able to mark noSFX as const
> -    // in some way.
> -    noInline(
> -        "var y; var x = noSFX(y), z = noSFX(); noSFX(); noSFX(), print(x)");
> -    //inline(
> -    //    "var y; var x = noSFX(y), z = noSFX(); noSFX(); noSFX(), print(x)",
> -    //    "var y; var x, z = noSFX(); noSFX(); noSFX(), print(noSFX(y))");
> +    inline("var y; var x = noSFX(Y), z = noSFX(); noSFX(); noSFX(), print(x)",
> +           "var y; var x, z = noSFX(); noSFX(); noSFX(), print(noSFX(Y))");
>    }
>  
>    public void testDependOnOuterScopeVariables() {
> @@ -416,25 +398,6 @@ public class FlowSensitiveInlineVariablesTest extends CompilerTestCase  {
>      noInline("var x; for(; x = 1;foo(x)) {}");
>    }
>  
> -  public void testIssue698() {
> -    // Most of the flow algorithms operate on Vars. We want to make
> -    // sure the algorithm bails out appropriately if it sees
> -    // a var that it doesn't know about.
> -    inline(
> -        "var x = ''; "
> -        + "unknown.length < 2 && (unknown='0' + unknown);"
> -        + "x = x + unknown; "
> -        + "unknown.length < 3 && (unknown='0' + unknown);"
> -        + "x = x + unknown; "
> -        + "return x;",
> -        "var x; "
> -        + "unknown.length < 2 && (unknown='0' + unknown);"
> -        + "x = '' + unknown; "
> -        + "unknown.length < 3 && (unknown='0' + unknown);"
> -        + "x = x + unknown; "
> -        + "return x;");
> -  }
> -
>    private void noInline(String input) {
>      inline(input, input);
>    }
