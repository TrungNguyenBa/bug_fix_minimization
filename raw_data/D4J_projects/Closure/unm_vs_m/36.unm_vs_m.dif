2c2
< index 47b8e8a..0b4b3de 100644
---
> index 47b8e8a3..857845bb 100644
5c5,7
< @@ -572,9 +572,6 @@ class InlineVariables implements CompilerPass {
---
> @@ -558,23 +558,16 @@ class InlineVariables implements CompilerPass {
>          return false;
>        }
7,8c9,25
<            // issue 668: Don't inline singleton getter methods
<            // calls as this confused class removing logic.
---
> +      // Bug 2388531: Don't inline subclass definitions into class defining
> +      // calls as this confused class removing logic.
>        if (value.isFunction()) {
>          Node callNode = reference.getParent();
>          if (reference.getParent().isCall()) {
> -          CodingConvention convention = compiler.getCodingConvention();
> -          // Bug 2388531: Don't inline subclass definitions into class defining
> -          // calls as this confused class removing logic.
>            SubclassRelationship relationship =
> -              convention.getClassesDefinedByCall(callNode);
> +              compiler.getCodingConvention().getClassesDefinedByCall(callNode);
>            if (relationship != null) {
>              return false;
>            }
> -
> -          // issue 668: Don't inline singleton getter methods
> -          // calls as this confused class removing logic.
14a32,64
> diff --git a/test/com/google/javascript/jscomp/IntegrationTest.java b/test/com/google/javascript/jscomp/IntegrationTest.java
> index 35bda042..d1ffc4c5 100644
> --- a/test/com/google/javascript/jscomp/IntegrationTest.java
> +++ b/test/com/google/javascript/jscomp/IntegrationTest.java
> @@ -1934,28 +1934,6 @@ public class IntegrationTest extends TestCase {
>          "print(3/0);print(3/-0);");
>    }
>  
> -  public void testSingletonGetter1() {
> -    CompilerOptions options = createCompilerOptions();
> -    CompilationLevel.ADVANCED_OPTIMIZATIONS
> -        .setOptionsForCompilationLevel(options);
> -    options.setCodingConvention(new ClosureCodingConvention());
> -    test(options,
> -        "/** @const */\n" +
> -        "var goog = goog || {};\n" +
> -        "goog.addSingletonGetter = function(ctor) {\n" +
> -        "  ctor.getInstance = function() {\n" +
> -        "    return ctor.instance_ || (ctor.instance_ = new ctor());\n" +
> -        "  };\n" +
> -        "};" +
> -        "function Foo() {}\n" +
> -        "goog.addSingletonGetter(Foo);" +
> -        "Foo.prototype.bar = 1;" +
> -        "function Bar() {}\n" +
> -        "goog.addSingletonGetter(Bar);" +
> -        "Bar.prototype.bar = 1;",
> -        "");
> -  }
> -
>    public void testIncompleteFunction() {
>      CompilerOptions options = createCompilerOptions();
>      options.ideMode = true;
