2c2
< index 06988ab..70142c4 100644
---
> index 06988abe..70142c45 100644
22a23,123
> diff --git a/src/com/google/javascript/rhino/jstype/ObjectType.java b/src/com/google/javascript/rhino/jstype/ObjectType.java
> index eecdab9c..43a50a16 100644
> --- a/src/com/google/javascript/rhino/jstype/ObjectType.java
> +++ b/src/com/google/javascript/rhino/jstype/ObjectType.java
> @@ -44,7 +44,6 @@ import static com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
>  
>  import com.google.common.collect.ImmutableList;
>  import com.google.common.collect.ImmutableSet;
> -import com.google.common.collect.Iterables;
>  import com.google.common.collect.Sets;
>  import com.google.javascript.rhino.JSDocInfo;
>  import com.google.javascript.rhino.Node;
> @@ -172,6 +171,8 @@ public abstract class ObjectType extends JSType implements StaticScope<JSType> {
>     * invoked only after the object is sufficiently initialized to respond to
>     * calls to this method.<p>
>     *
> +   * The method is not thread safe.<p>
> +   *
>     * @return True iff an implicit prototype cycle was detected.
>     */
>    final boolean detectImplicitPrototypeCycle() {
> @@ -197,22 +198,6 @@ public abstract class ObjectType extends JSType implements StaticScope<JSType> {
>    }
>  
>    /**
> -   * Detects cycles in either the implicit prototype chain, or the implemented/extended
> -   * interfaces.<p>
> -   *
> -   * @return True iff a cycle was detected.
> -   */
> -  final boolean detectInheritanceCycle() {
> -    // TODO(user): This should get moved to preventing cycles in FunctionTypeBuilder
> -    // rather than removing them here after they have been created.
> -    // Also, this doesn't do the right thing for extended interfaces, though that is
> -    // masked by another bug.
> -    return detectImplicitPrototypeCycle()
> -        || Iterables.contains(this.getCtorImplementedInterfaces(), this)
> -        || Iterables.contains(this.getCtorExtendedInterfaces(), this);
> -  }
> -
> -  /**
>     * Gets the reference name for this object. This includes named types
>     * like constructors, prototypes, and enums. It notably does not include
>     * literal types like strings and booleans and structural types.
> diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
> index 0e48208f..42b01f96 100644
> --- a/test/com/google/javascript/jscomp/TypeCheckTest.java
> +++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
> @@ -9219,52 +9219,6 @@ public class TypeCheckTest extends CompilerTypeTestCase {
>              "Could not resolve type in @extends tag of T"));
>    }
>  
> -  public void testImplementsLoop() throws Exception {
> -    testClosureTypesMultipleWarnings(
> -        suppressMissingProperty("foo") +
> -        "/** @constructor \n * @implements {T} */var T = function() {};" +
> -        "alert((new T).foo);",
> -        Lists.newArrayList(
> -            "Parse error. Cycle detected in inheritance chain of type T"));
> -  }
> -
> -  public void testImplementsExtendsLoop() throws Exception {
> -    testClosureTypesMultipleWarnings(
> -        suppressMissingProperty("foo") +
> -            "/** @constructor \n * @implements {F} */var G = function() {};" +
> -            "/** @constructor \n * @extends {G} */var F = function() {};" +
> -        "alert((new F).foo);",
> -        Lists.newArrayList(
> -            "Parse error. Cycle detected in inheritance chain of type F"));
> -  }
> -
> -  public void testInterfaceExtendsLoop() throws Exception {
> -    // TODO(user): This should give a cycle in inheritance graph error,
> -    // not a cannot resolve error.
> -    testClosureTypesMultipleWarnings(
> -        suppressMissingProperty("foo") +
> -            "/** @interface \n * @extends {F} */var G = function() {};" +
> -            "/** @interface \n * @extends {G} */var F = function() {};",
> -        Lists.newArrayList(
> -            "Could not resolve type in @extends tag of G"));
> -  }
> -
> -  public void testConversionFromInterfaceToRecursiveConstructor()
> -      throws Exception {
> -    testClosureTypesMultipleWarnings(
> -        suppressMissingProperty("foo") +
> -            "/** @interface */ var OtherType = function() {}\n" +
> -            "/** @implements {MyType} \n * @constructor */\n" +
> -            "var MyType = function() {}\n" +
> -            "/** @type {MyType} */\n" +
> -            "var x = /** @type {!OtherType} */ (new Object());",
> -        Lists.newArrayList(
> -            "Parse error. Cycle detected in inheritance chain of type MyType",
> -            "initializing variable\n" +
> -            "found   : OtherType\n" +
> -            "required: (MyType|null)"));
> -  }
> -
>    public void testDirectPrototypeAssign() throws Exception {
>      // For now, we just ignore @type annotations on the prototype.
>      testTypes(
