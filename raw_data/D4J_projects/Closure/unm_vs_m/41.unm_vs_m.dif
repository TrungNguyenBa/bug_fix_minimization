2c2
< index e20d788..14694ce 100644
---
> index e20d788d..e2f0f437 100644
5,6c5,7
< @@ -289,9 +289,6 @@ final class FunctionTypeBuilder {
<        }
---
> @@ -271,7 +271,7 @@ final class FunctionTypeBuilder {
>                oldParam.isVarArgs() ||
>                oldParam.isOptionalArg();
8c9,19
<        // Clone any remaining params that aren't in the function literal.
---
> -          // The subclass method might write its var_args as individual
> +          // The subclass method might right its var_args as individual
>            // arguments.
>            if (currentParam.getNext() != null && newParam.isVarArgs()) {
>              newParam.setVarArgs(false);
> @@ -287,12 +287,6 @@ final class FunctionTypeBuilder {
>                codingConvention.isVarArgsParameter(currentParam));
>          }
>        }
> -
> -      // Clone any remaining params that aren't in the function literal.
12c23
<  
---
> -
15c26,46
< @@ -483,12 +480,6 @@ final class FunctionTypeBuilder {
---
>      return this;
> @@ -443,7 +437,6 @@ final class FunctionTypeBuilder {
>          Sets.<String>newHashSet() :
>          Sets.newHashSet(info.getParameterNames());
>      boolean foundTemplateType = false;
> -    boolean isVarArgs = false;
>      for (Node arg : argsParent.children()) {
>        String argumentName = arg.getString();
>        allJsDocParams.remove(argumentName);
> @@ -451,8 +444,7 @@ final class FunctionTypeBuilder {
>        // type from JSDocInfo
>        JSType parameterType = null;
>        boolean isOptionalParam = isOptionalParameter(arg, info);
> -      isVarArgs = isVarArgsParameter(arg, info);
> -
> +      boolean isVarArgs = isVarArgsParameter(arg, info);
>        if (info != null && info.hasParameterType(argumentName)) {
>          parameterType =
>              info.getParameterType(argumentName).evaluate(scope, typeRegistry);
> @@ -482,14 +474,6 @@ final class FunctionTypeBuilder {
>        }
18c49
<      // Copy over any old parameters that aren't in the param list.
---
> -    // Copy over any old parameters that aren't in the param list.
25c56
<  
---
> -
27a59,119
>      }
> diff --git a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java
> index 152da7e9..4c481b46 100644
> --- a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java
> +++ b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java
> @@ -1775,7 +1775,10 @@ public class LooseTypeCheckTest extends CompilerTypeTestCase {
>          "/** @constructor \n * @extends {F} */ " +
>          "function G() {}" +
>          "/** @override */ G.prototype.foo = function() { };" +
> -        "(new G()).foo(1);");
> +        "(new G()).foo(1);",
> +        "Function G.prototype.foo: called with 1 argument(s). " +
> +        "Function requires at least 0 argument(s) " +
> +        "and no more than 0 argument(s).");
>    }
>  
>    public void testMethodInference7() throws Exception {
> diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
> index 7544dde6..11613655 100644
> --- a/test/com/google/javascript/jscomp/TypeCheckTest.java
> +++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
> @@ -2030,7 +2030,10 @@ public class TypeCheckTest extends CompilerTypeTestCase {
>          "/** @constructor \n * @extends {F} */ " +
>          "function G() {}" +
>          "/** @override */ G.prototype.foo = function() { };" +
> -        "(new G()).foo(1);");
> +        "(new G()).foo(1);",
> +        "Function G.prototype.foo: called with 1 argument(s). " +
> +        "Function requires at least 0 argument(s) " +
> +        "and no more than 0 argument(s).");
>    }
>  
>    public void testMethodInference7() throws Exception {
> @@ -5322,27 +5325,6 @@ public class TypeCheckTest extends CompilerTypeTestCase {
>          "Property indexOf never defined on String.prototype.toLowerCase");
>    }
>  
> -  public void testIssue368() throws Exception {
> -    testTypes(
> -        "/** @constructor */ function Foo(){}" +
> -        "/**\n" +
> -        " * @param {number} one\n" +
> -        " * @param {string} two\n" +
> -        " */\n" +
> -        "Foo.prototype.add = function(one, two) {};" +
> -        "/**\n" +
> -        " * @constructor\n" +
> -        " * @extends {Foo}\n" +
> -        " */\n" +
> -        "function Bar(){}" +
> -        "/** @override */\n" +
> -        "Bar.prototype.add = function(ignored) {};" +
> -        "(new Bar()).add(1, 2);",
> -        "actual parameter 2 of Bar.prototype.add does not match formal parameter\n" +
> -        "found   : number\n" +
> -        "required: string");
> -  }
> -
>    public void testIssue380() throws Exception {
>      testTypes(
>          "/** @type { function(string): {innerHTML: string} } */" +
