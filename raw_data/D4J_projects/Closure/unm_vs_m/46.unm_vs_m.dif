2c2
< index b418dbd..7289803 100755
---
> index b418dbdd..a8ed1d18 100755
5c5
< @@ -137,6 +137,22 @@ class RecordType extends PrototypeObjectType {
---
> @@ -137,9 +137,33 @@ class RecordType extends PrototypeObjectType {
13a14,15
> +
> +    RecordType thatRecord = that.toMaybeRecordType();
14a17,20
> +
> +    // The least supertype consist of those properties of the record
> +    // type that both record types hold in common both by name and
> +    // type of the properties themselves.
16,17c22,23
< +      if (that.toMaybeRecordType().hasProperty(property) &&
< +          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(
---
> +      if (thatRecord.hasProperty(property) &&
> +          thatRecord.getPropertyType(property).isEquivalentTo(
22a29
> +
24a32
> +
27c35,138
<        RecordType thatRecord = that.toMaybeRecordType();
---
> -      RecordType thatRecord = that.toMaybeRecordType();
> +      RecordType thatRecord = (RecordType) that;
>        RecordTypeBuilder builder = new RecordTypeBuilder(registry);
>  
>        // The greatest subtype consists of those *unique* properties of both
> diff --git a/test/com/google/javascript/rhino/jstype/JSTypeTest.java b/test/com/google/javascript/rhino/jstype/JSTypeTest.java
> index 20818551..ce46b96b 100644
> --- a/test/com/google/javascript/rhino/jstype/JSTypeTest.java
> +++ b/test/com/google/javascript/rhino/jstype/JSTypeTest.java
> @@ -2716,11 +2716,14 @@ public class JSTypeTest extends BaseJSTypeTestCase {
>      builder.addProperty("e", NUMBER_TYPE, null);
>      builder.addProperty("b", STRING_TYPE, null);
>      builder.addProperty("c", STRING_TYPE, null);
> -    JSType otherRecordType = builder.build();
> +    JSType subRecordType = builder.build();
>  
> -    assertTypeEquals(
> -        registry.createUnionType(recordType, otherRecordType),
> -        recordType.getLeastSupertype(otherRecordType));
> +    JSType leastSupertype = recordType.getLeastSupertype(subRecordType);
> +
> +    builder = new RecordTypeBuilder(registry);
> +    builder.addProperty("b", STRING_TYPE, null);
> +
> +    assertTypeEquals(leastSupertype, builder.build());
>    }
>  
>    public void testRecordTypeLeastSuperType3() {
> @@ -2728,11 +2731,10 @@ public class JSTypeTest extends BaseJSTypeTestCase {
>      builder.addProperty("d", NUMBER_TYPE, null);
>      builder.addProperty("e", STRING_TYPE, null);
>      builder.addProperty("f", STRING_TYPE, null);
> -    JSType otherRecordType = builder.build();
> +    JSType subRecordType = builder.build();
>  
> -    assertTypeEquals(
> -        registry.createUnionType(recordType, otherRecordType),
> -        recordType.getLeastSupertype(otherRecordType));
> +    JSType leastSupertype = recordType.getLeastSupertype(subRecordType);
> +    assertTypeEquals(leastSupertype, OBJECT_TYPE);
>    }
>  
>    public void testRecordTypeLeastSuperType4() {
> @@ -4886,12 +4888,6 @@ public class JSTypeTest extends BaseJSTypeTestCase {
>  
>      builder = new RecordTypeBuilder(registry);
>      builder.addProperty("a", STRING_TYPE, null);
> -    builder.addProperty("c", STRING_TYPE, null);
> -    JSType acType = builder.build();
> -    JSType abOrAcType = registry.createUnionType(abType, acType);
> -
> -    builder = new RecordTypeBuilder(registry);
> -    builder.addProperty("a", STRING_TYPE, null);
>      builder.addProperty("b", STRING_TYPE, null);
>      builder.addProperty("c", NUMBER_TYPE, null);
>      JSType abcType = builder.build();
> @@ -4901,7 +4897,6 @@ public class JSTypeTest extends BaseJSTypeTestCase {
>          registry.getNativeType(JSTypeNative.OBJECT_PROTOTYPE),
>          registry.getNativeType(JSTypeNative.OBJECT_TYPE),
>          aType,
> -        abOrAcType,
>          abType,
>          abcType,
>          registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE),
> diff --git a/test/com/google/javascript/rhino/jstype/RecordTypeTest.java b/test/com/google/javascript/rhino/jstype/RecordTypeTest.java
> index 48405323..d11199f0 100644
> --- a/test/com/google/javascript/rhino/jstype/RecordTypeTest.java
> +++ b/test/com/google/javascript/rhino/jstype/RecordTypeTest.java
> @@ -72,35 +72,4 @@ public class RecordTypeTest extends BaseJSTypeTestCase {
>      assertEquals("{a1: number, a2: number, a3: number, a4: number, ...}",
>          record.toString());
>    }
> -
> -  public void testSupAndInf() {
> -    JSType recordA = new RecordTypeBuilder(registry)
> -        .addProperty("a", NUMBER_TYPE, null)
> -        .addProperty("b", NUMBER_TYPE, null)
> -        .build();
> -    JSType recordC = new RecordTypeBuilder(registry)
> -        .addProperty("b", NUMBER_TYPE, null)
> -        .addProperty("c", NUMBER_TYPE, null)
> -        .build();
> -    ProxyObjectType proxyRecordA = new ProxyObjectType(registry, recordA);
> -    ProxyObjectType proxyRecordC = new ProxyObjectType(registry, recordC);
> -
> -    JSType aInfC = new RecordTypeBuilder(registry)
> -        .addProperty("a", NUMBER_TYPE, null)
> -        .addProperty("b", NUMBER_TYPE, null)
> -        .addProperty("c", NUMBER_TYPE, null)
> -        .build();
> -
> -    JSType aSupC = registry.createUnionType(recordA, recordC);
> -
> -    Asserts.assertTypeEquals(
> -        aInfC, recordA.getGreatestSubtype(recordC));
> -    Asserts.assertTypeEquals(
> -        aSupC, recordA.getLeastSupertype(recordC));
> -
> -    Asserts.assertTypeEquals(
> -        aInfC, proxyRecordA.getGreatestSubtype(proxyRecordC));
> -    Asserts.assertTypeEquals(
> -        aSupC, proxyRecordA.getLeastSupertype(proxyRecordC));
> -  }
>  }
