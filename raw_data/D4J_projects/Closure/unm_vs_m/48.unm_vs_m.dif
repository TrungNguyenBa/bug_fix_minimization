2c2
< index 09aba12..3fb4813 100644
---
> index 09aba12d..b29ff9c6 100644
5c5,70
< @@ -1518,14 +1518,11 @@ final class TypedScopeCreator implements ScopeCreator {
---
> @@ -89,8 +89,6 @@ import javax.annotation.Nullable;
>   *
>   * When building scope information, also declares relevant information
>   * about types in the type registry.
> - *
> - * @author nicksantos@google.com (Nick Santos)
>   */
>  final class TypedScopeCreator implements ScopeCreator {
>    /**
> @@ -1196,22 +1194,14 @@ final class TypedScopeCreator implements ScopeCreator {
>       * Check if the given node is a property of a name in the global scope.
>       */
>      private boolean isQnameRootedInGlobalScope(Node n) {
> -      Scope scope = getQnameRootScope(n);
> -      return scope != null && scope.isGlobal();
> -    }
> -
> -    /**
> -     * Return the scope for the name of the given node.
> -     */
> -    private Scope getQnameRootScope(Node n) {
>        Node root = NodeUtil.getRootOfQualifiedName(n);
>        if (root.isName()) {
>          Var var = scope.getVar(root.getString());
>          if (var != null) {
> -          return var.getScope();
> +          return var.isGlobal();
>          }
>        }
> -      return null;
> +      return false;
>      }
>  
>      /**
> @@ -1484,30 +1474,6 @@ final class TypedScopeCreator implements ScopeCreator {
>          return;
>        }
>  
> -      // NOTE(nicksantos): Determining whether a property is declared or not
> -      // is really really obnoxious.
> -      //
> -      // The problem is that there are two (equally valid) coding styles:
> -      //
> -      // (function() {
> -      //   /* The authoritative definition of goog.bar. */
> -      //   goog.bar = function() {};
> -      // })();
> -      //
> -      // function f() {
> -      //   goog.bar();
> -      //   /* Reset goog.bar to a no-op. */
> -      //   goog.bar = function() {};
> -      // }
> -      //
> -      // In a dynamic language with first-class functions, it's very difficult
> -      // to know which one the user intended without looking at lots of
> -      // contextual information (the second example demonstrates a small case
> -      // of this, but there are some really pathological cases as well).
> -      //
> -      // The current algorithm checks if either the declaration has
> -      // jsdoc type information, or @const with a known type,
> -      // or a function literal with a name we haven't seen before.
>        boolean inferred = true;
>        if (info != null) {
>          // Determining declaration for #1 + #3 + #4
> @@ -1518,14 +1484,11 @@ final class TypedScopeCreator implements ScopeCreator {
23a89,124
> @@ -1546,7 +1509,8 @@ final class TypedScopeCreator implements ScopeCreator {
>          // If the property is already declared, the error will be
>          // caught when we try to declare it in the current scope.
>          defineSlot(n, parent, valueType, inferred);
> -      } else if (rhsValue != null && rhsValue.isTrue()) {
> +      } else if (rhsValue != null &&
> +          rhsValue.isTrue()) {
>          // We declare these for delegate proxy method properties.
>          FunctionType ownerType =
>              JSType.toMaybeFunctionType(getObjectSlot(ownerName));
> diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
> index cba4cbf9..0849c4de 100644
> --- a/test/com/google/javascript/jscomp/TypeCheckTest.java
> +++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
> @@ -5439,21 +5439,6 @@ public class TypeCheckTest extends CompilerTypeTestCase {
>          "Bar.prototype.__proto__ = Foo.prototype;");
>    }
>  
> -  public void testIssue586() throws Exception {
> -    testTypes(
> -        "/** @constructor */" +
> -        "var MyClass = function() {};" +
> -        "/** @param {boolean} success */" +
> -        "MyClass.prototype.fn = function(success) {};" +
> -        "MyClass.prototype.test = function() {" +
> -        "  this.fn();" +
> -        "  this.fn = function() {};" +
> -        "};",
> -        "Function MyClass.prototype.fn: called with 0 argument(s). " +
> -        "Function requires at least 1 argument(s) " +
> -        "and no more than 1 argument(s).");
> -  }
> -
>    /**
>     * Tests that the || operator is type checked correctly, that is of
>     * the type of the first argument or of the second argument. See
