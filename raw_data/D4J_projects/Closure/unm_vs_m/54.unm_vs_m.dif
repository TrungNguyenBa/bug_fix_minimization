2c2
< index 5bccc06..8654ae6 100644
---
> index 5bccc06d..dc7b2b08 100644
5,8c5,46
< @@ -1410,13 +1410,7 @@ final class TypedScopeCreator implements ScopeCreator {
<            // then they are responsible for making sure that the object literal's
<            // implicit prototype is set up appropriately. We just obey
<            // the @extends tag.
---
> @@ -1378,6 +1378,24 @@ final class TypedScopeCreator implements ScopeCreator {
>        String propName = n.getLastChild().getString();
>        Preconditions.checkArgument(qName != null && ownerName != null);
>  
> +      // Function prototypes are special.
> +      // It's a common JS idiom to do:
> +      // F.prototype = { ... };
> +      // So if F does not have an explicitly declared super type,
> +      // allow F.prototype to be redefined arbitrarily.
> +      if ("prototype".equals(propName)) {
> +        Var qVar = scope.getVar(qName);
> +        if (qVar != null) {
> +          if (!qVar.isTypeInferred()) {
> +            // Just ignore assigns to declared prototypes.
> +            return;
> +          }
> +          if (qVar.getScope() == scope) {
> +            scope.undeclare(qVar);
> +          }
> +        }
> +      }
> +
>        // Precedence of type information on GETPROPs:
>        // 1) @type annnotation / @enum annotation
>        // 2) ASSIGN to FUNCTION literal
> @@ -1397,38 +1415,6 @@ final class TypedScopeCreator implements ScopeCreator {
>          // Determining type for #5
>          valueType = rhsValue.getJSType();
>        }
> -      // Function prototypes are special.
> -      // It's a common JS idiom to do:
> -      // F.prototype = { ... };
> -      // So if F does not have an explicitly declared super type,
> -      // allow F.prototype to be redefined arbitrarily.
> -      if ("prototype".equals(propName)) {
> -        Var qVar = scope.getVar(qName);
> -        if (qVar != null) {
> -          // If the programmer has declared that F inherits from Super,
> -          // and they assign F.prototype to an object literal,
> -          // then they are responsible for making sure that the object literal's
> -          // implicit prototype is set up appropriately. We just obey
> -          // the @extends tag.
16,19c54,68
< +          if (!qVar.isTypeInferred()) {
<              // If the programmer has declared that F inherits from Super,
<              // and they assign F.prototype to some arbitrary expression,
<              // there's not much we can do. We just ignore the expression,
---
> -            // If the programmer has declared that F inherits from Super,
> -            // and they assign F.prototype to some arbitrary expression,
> -            // there's not much we can do. We just ignore the expression,
> -            // and hope they've annotated their code in a way to tell us
> -            // what props are going to be on that prototype.
> -            return;
> -          }
> -          if (qVar.getScope() == scope) {
> -            scope.undeclare(qVar);
> -          }
> -        }
> -      }
>  
>        if (valueType == null) {
>          if (parent.getType() == Token.EXPR_RESULT) {
21c70
< index a87be07..b65d8b1 100644
---
> index a87be07f..0499e5ec 100644
32c81
< @@ -362,18 +363,14 @@ public class FunctionType extends PrototypeObjectType {
---
> @@ -362,19 +363,11 @@ public class FunctionType extends PrototypeObjectType {
37a87
> -
39d88
<  
45,46c94,95
<        // Disassociating the old prototype makes this easier to debug--
<        // we don't have to worry about two prototypes running around.
---
> -      // Disassociating the old prototype makes this easier to debug--
> -      // we don't have to worry about two prototypes running around.
49c98
<  
---
> -
51a101,237
>        if (superClass != null) {
> diff --git a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java
> index 4938193d..e07dcbf6 100644
> --- a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java
> +++ b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java
> @@ -1300,26 +1300,6 @@ public class JSTypeRegistry implements Serializable {
>    }
>  
>    /**
> -   * Set the implicit prototype if it's possible to do so.
> -   * @return True if we were able to set the implicit prototype successfully,
> -   *     false if it was not possible to do so for some reason. There are
> -   *     a few different reasons why this could fail: for example, numbers
> -   *     can't be implicit prototypes, and we don't want to change the implicit
> -   *     prototype if other classes have already subclassed this one.
> -   */
> -  public boolean resetImplicitPrototype(
> -      JSType type, ObjectType newImplicitProto) {
> -    if (type instanceof PrototypeObjectType) {
> -      PrototypeObjectType poType = (PrototypeObjectType) type;
> -      if (!poType.hasCachedValues()) {
> -        poType.setImplicitPrototype(newImplicitProto);
> -        return true;
> -      }
> -    }
> -    return false;
> -  }
> -
> -  /**
>     * Create an anonymous object type for a native type.
>     */
>    ObjectType createNativeAnonymousObjectType() {
> diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java
> index 2faffbd1..3af33366 100644
> --- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java
> +++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java
> @@ -587,7 +587,7 @@ class PrototypeObjectType extends ObjectType {
>    }
>  
>    void setOwnerFunction(FunctionType type) {
> -    Preconditions.checkState(ownerFunction == null || type == null);
> +    Preconditions.checkState(ownerFunction == null);
>      ownerFunction = type;
>    }
>  
> diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
> index 2d3be5d2..c18ecd7d 100644
> --- a/test/com/google/javascript/jscomp/TypeCheckTest.java
> +++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
> @@ -5260,72 +5260,6 @@ public class TypeCheckTest extends CompilerTypeTestCase {
>          "required: number");
>    }
>  
> -  public void testIssue537a() throws Exception {
> -    testTypes(
> -        "/** @constructor */ function Foo() {}" +
> -        "Foo.prototype = {method: function() {}};" +
> -        "/**\n" +
> -        " * @constructor\n" +
> -        " * @extends {Foo}\n" +
> -        " */\n" +
> -        "function Bar() {" +
> -        "  Foo.call(this);" +
> -        "  if (this.baz()) this.method(1);" +
> -        "}" +
> -        "Bar.prototype = {" +
> -        "  baz: function() {" +
> -        "    return true;" +
> -        "  }" +
> -        "};" +
> -        "Bar.prototype.__proto__ = Foo.prototype;",
> -        "Function Foo.prototype.method: called with 1 argument(s). " +
> -        "Function requires at least 0 argument(s) " +
> -        "and no more than 0 argument(s).");
> -  }
> -
> -  public void testIssue537b() throws Exception {
> -    testTypes(
> -        "/** @constructor */ function Foo() {}" +
> -        "Foo.prototype = {method: function() {}};" +
> -        "/**\n" +
> -        " * @constructor\n" +
> -        " * @extends {Foo}\n" +
> -        " */\n" +
> -        "function Bar() {" +
> -        "  Foo.call(this);" +
> -        "  if (this.baz(1)) this.method();" +
> -        "}" +
> -        "Bar.prototype = {" +
> -        "  baz: function() {" +
> -        "    return true;" +
> -        "  }" +
> -        "};" +
> -        "Bar.prototype.__proto__ = Foo.prototype;",
> -        "Function Bar.prototype.baz: called with 1 argument(s). " +
> -        "Function requires at least 0 argument(s) " +
> -        "and no more than 0 argument(s).");
> -  }
> -
> -  public void testIssue537c() throws Exception {
> -    testTypes(
> -        "/** @constructor */ function Foo() {}" +
> -        "/**\n" +
> -        " * @constructor\n" +
> -        " * @extends {Foo}\n" +
> -        " */\n" +
> -        "function Bar() {" +
> -        "  Foo.call(this);" +
> -        "  if (this.baz2()) alert(1);" +
> -        "}" +
> -        "Bar.prototype = {" +
> -        "  baz: function() {" +
> -        "    return true;" +
> -        "  }" +
> -        "};" +
> -        "Bar.prototype.__proto__ = Foo.prototype;",
> -        "Property baz2 never defined on Bar");
> -  }
> -
>    /**
>     * Tests that the || operator is type checked correctly, that is of
>     * the type of the first argument or of the second argument. See
> diff --git a/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java b/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java
> index 4fe01a07..048fc9eb 100644
> --- a/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java
> +++ b/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java
> @@ -372,9 +372,8 @@ public class TypedScopeCreatorTest extends CompilerTestCase {
>          RhinoErrorReporter.TYPE_PARSE_ERROR);
>      ObjectType x = (ObjectType) findNameType("x", globalScope);
>      assertEquals("Foo", x.toString());
> -    assertEquals("Foo.prototype", x.getImplicitPrototype().toString());
>      assertTrue(x.getImplicitPrototype().hasOwnProperty("bar"));
> -    assertEquals("?", x.getPropertyType("bar").toString());
> +    assertEquals("number", x.getPropertyType("bar").toString());
>      assertTrue(x.isPropertyTypeInferred("bar"));
>    }
>  
