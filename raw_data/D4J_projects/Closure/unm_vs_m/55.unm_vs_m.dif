2c2
< index 9d8ebc3..dbf0006 100644
---
> index 9d8ebc3e..0166c6e0 100644
5c5,6
< @@ -114,8 +114,7 @@ class FunctionRewriter implements CompilerPass {
---
> @@ -113,11 +113,6 @@ class FunctionRewriter implements CompilerPass {
>      return (root != null) ? root.removeFirstChild() : null;
8c9
<    private static boolean isReduceableFunctionExpression(Node n) {
---
> -  private static boolean isReduceableFunctionExpression(Node n) {
11c12,23
< +    return NodeUtil.isFunctionExpression(n);
---
> -  }
> -
>    /**
>     * Information needed to apply a reduction.
>     */
> @@ -305,7 +300,7 @@ class FunctionRewriter implements CompilerPass {
>  
>      @Override
>      public Node reduce(Node node) {
> -      if (!isReduceableFunctionExpression(node)) {
> +      if (!NodeUtil.isFunctionExpression(node)) {
>          return node;
14c26,80
<    /**
---
> @@ -365,7 +360,7 @@ class FunctionRewriter implements CompilerPass {
>  
>      @Override
>      public Node reduce(Node node) {
> -      if (!isReduceableFunctionExpression(node)) {
> +      if (!NodeUtil.isFunctionExpression(node)) {
>          return node;
>        }
>  
> @@ -419,7 +414,7 @@ class FunctionRewriter implements CompilerPass {
>  
>      @Override
>      public Node reduce(Node node) {
> -      if (!isReduceableFunctionExpression(node)) {
> +      if (!NodeUtil.isFunctionExpression(node)) {
>          return node;
>        }
>  
> @@ -481,7 +476,7 @@ class FunctionRewriter implements CompilerPass {
>  
>      @Override
>      public Node reduce(Node node) {
> -      if (!isReduceableFunctionExpression(node)) {
> +      if (!NodeUtil.isFunctionExpression(node)) {
>          return node;
>        }
>  
> diff --git a/test/com/google/javascript/jscomp/FunctionRewriterTest.java b/test/com/google/javascript/jscomp/FunctionRewriterTest.java
> index 77a0b2a7..b62c6fa0 100644
> --- a/test/com/google/javascript/jscomp/FunctionRewriterTest.java
> +++ b/test/com/google/javascript/jscomp/FunctionRewriterTest.java
> @@ -162,23 +162,6 @@ public class FunctionRewriterTest extends CompilerTestCase {
>      checkCompilesToSame("a.prototype.foo = function(a) {return a + 1}", 10);
>    }
>  
> -  public void testIssue538() {
> -    checkCompilesToSame(      "/** @constructor */\n" +
> -        "WebInspector.Setting = function() {}\n" +
> -        "WebInspector.Setting.prototype = {\n" +
> -        "    get name0(){return this._name;},\n" +
> -        "    get name1(){return this._name;},\n" +
> -        "    get name2(){return this._name;},\n" +
> -        "    get name3(){return this._name;},\n" +
> -        "    get name4(){return this._name;},\n" +
> -        "    get name5(){return this._name;},\n" +
> -        "    get name6(){return this._name;},\n" +
> -        "    get name7(){return this._name;},\n" +
> -        "    get name8(){return this._name;},\n" +
> -        "    get name9(){return this._name;},\n" +
> -        "}", 1);
> -  }
> -
>    private void checkCompilesTo(String src,
>                                 String expectedHdr,
>                                 String expectedBody,
