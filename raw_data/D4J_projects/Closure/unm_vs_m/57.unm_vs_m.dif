2c2
< index b5a3c1b..c507c92 100644
---
> index b5a3c1b2..f9987784 100644
5c5,7
< @@ -194,7 +194,7 @@ public class ClosureCodingConvention extends DefaultCodingConvention {
---
> @@ -192,11 +192,8 @@ public class ClosureCodingConvention extends DefaultCodingConvention {
>        Node callee = node.getFirstChild();
>        if (callee != null && callee.getType() == Token.GETPROP) {
7,8c9,10
<          if (functionName.equals(qualifiedName)) {
<            Node target = callee.getNext();
---
> -        if (functionName.equals(qualifiedName)) {
> -          Node target = callee.getNext();
10,11c12,15
< +          if (target != null) {
<              className = target.getString();
---
> -            className = target.getString();
> -          }
> +        if ((functionName).equals(qualifiedName)) {
> +          className = callee.getNext().getString();
13a18,53
>      }
> diff --git a/test/com/google/javascript/jscomp/ClosureCodingConventionTest.java b/test/com/google/javascript/jscomp/ClosureCodingConventionTest.java
> index e7f60f75..9704d8e0 100644
> --- a/test/com/google/javascript/jscomp/ClosureCodingConventionTest.java
> +++ b/test/com/google/javascript/jscomp/ClosureCodingConventionTest.java
> @@ -191,13 +191,6 @@ public class ClosureCodingConventionTest extends TestCase {
>      assertFunctionBind("Function.prototype.bind.call(obj, p1)");
>    }
>  
> -  public void testRequire() {
> -    assertRequire("goog.require('foo')");
> -    assertNotRequire("goog.require(foo)");
> -    assertNotRequire("goog.require()");
> -    assertNotRequire("foo()");
> -  }
> -
>    private void assertFunctionBind(String code) {
>      Node n = parseTestCode(code);
>      assertNotNull(conv.describeFunctionBind(n.getFirstChild()));
> @@ -208,16 +201,6 @@ public class ClosureCodingConventionTest extends TestCase {
>      assertNull(conv.describeFunctionBind(n.getFirstChild()));
>    }
>  
> -  private void assertRequire(String code) {
> -    Node n = parseTestCode(code);
> -    assertNotNull(conv.extractClassNameIfRequire(n.getFirstChild(), n));
> -  }
> -
> -  private void assertNotRequire(String code) {
> -    Node n = parseTestCode(code);
> -    assertNull(conv.extractClassNameIfRequire(n.getFirstChild(), n));
> -  }
> -
>    private void assertNotObjectLiteralCast(String code) {
>      Node n = parseTestCode(code);
>      assertNull(conv.getObjectLiteralCast(null, n.getFirstChild()));
