0a1,19
> diff --git a/build/lib/classes/org/mozilla/javascript/resources/Messages.properties b/build/lib/classes/org/mozilla/javascript/resources/Messages.properties
> index 31996091..08219cf6 100644
> --- a/build/lib/classes/org/mozilla/javascript/resources/Messages.properties
> +++ b/build/lib/classes/org/mozilla/javascript/resources/Messages.properties
> @@ -40,7 +40,7 @@
>  
>  # This is replaced during jar assembly from property string
>  # and should not be translated
> -implementation.version = Rhino 1.7 release 3 PRERELEASE 2011 06 28
> +implementation.version = Rhino 1.7 release 3 PRERELEASE 2011 06 27
>  
>  #
>  # To add JavaScript error messages for a particular locale, create a
> diff --git a/build/lib/rhino.jar b/build/lib/rhino.jar
> index f9154683..a5a719ae 100644
> Binary files a/build/lib/rhino.jar and b/build/lib/rhino.jar differ
> diff --git a/build/lib/rhino1_7R3pre/js.jar b/build/lib/rhino1_7R3pre/js.jar
> index f551981d..60d1e9f4 100644
> Binary files a/build/lib/rhino1_7R3pre/js.jar and b/build/lib/rhino1_7R3pre/js.jar differ
2c21
< index 420dbc0..5a4f884 100644
---
> index 420dbc07..f529b7d0 100644
5,7c24,29
< @@ -95,7 +95,7 @@ public class LightweightMessageFormatter extends AbstractMessageFormatter {
<        // charno == sourceExpert.length() means something is missing
<        // at the end of the line
---
> @@ -92,10 +92,8 @@ public class LightweightMessageFormatter extends AbstractMessageFormatter {
>        int charno = error.getCharno();
>  
>        // padding equal to the excerpt and arrow at the end
> -      // charno == sourceExpert.length() means something is missing
> -      // at the end of the line
13a36,64
> diff --git a/test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java b/test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java
> index 6cc204fe..0c432a10 100644
> --- a/test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java
> +++ b/test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java
> @@ -84,24 +84,6 @@ public class LightweightMessageFormatterTest extends TestCase {
>          "\t\t    ^\n", formatter.formatError(error));
>    }
>  
> -  public void testFormatErrorSpaceEndOfLine1() throws Exception {
> -    JSError error = JSError.make("javascript/complex.js",
> -        1, 10, FOO_TYPE);
> -    LightweightMessageFormatter formatter = formatter("assert (1;");
> -    assertEquals("javascript/complex.js:1: ERROR - error description here\n" +
> -        "assert (1;\n" +
> -        "          ^\n", formatter.formatError(error));
> -  }
> -
> -  public void testFormatErrorSpaceEndOfLine2() throws Exception {
> -    JSError error = JSError.make("javascript/complex.js",
> -        6, 7, FOO_TYPE);
> -    LightweightMessageFormatter formatter = formatter("if (foo");
> -    assertEquals("javascript/complex.js:6: ERROR - error description here\n" +
> -        "if (foo\n" +
> -        "       ^\n", formatter.formatError(error));
> -  }
> -
>    private LightweightMessageFormatter formatter(String string) {
>      return new LightweightMessageFormatter(source(string));
>    }
