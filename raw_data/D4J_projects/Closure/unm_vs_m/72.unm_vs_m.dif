2c2
< index 3fee1a9..64764c0 100644
---
> index 3fee1a9e..3e0fb1ec 100644
5c5,15
< @@ -149,8 +149,6 @@ class FunctionToBlockMutator {
---
> @@ -140,30 +140,12 @@ class FunctionToBlockMutator {
>     * @param fnNode A mutable instance of the function to be inlined.
>     */
>    private void makeLocalNamesUnique(Node fnNode, boolean isCallInLoop) {
> -    Supplier<String> idSupplier = compiler.getUniqueNameIdSupplier();
> -    // Make variable names unique to this instance.
>      NodeTraversal.traverse(
>          compiler, fnNode, new MakeDeclaredNamesUnique(
>              new InlineRenamer(
> -                idSupplier,
> +                compiler.getUniqueNameIdSupplier(),
8c18
<      // Make label names unique to this instance.
---
> -    // Make label names unique to this instance.
10a21,33
> -  }
> -
> -  static class LabelNameSupplier implements Supplier<String> {
> -    final Supplier<String> idSupplier;
> -
> -    LabelNameSupplier(Supplier<String> idSupplier) {
> -      this.idSupplier = idSupplier;
> -    }
> -
> -    @Override
> -    public String get() {
> -        return "JSCompiler_inline_label_" + idSupplier.get();
> -    }
13c36
<    static class LabelNameSupplier implements Supplier<String> {
---
>    /**
15c38
< index 28e52ee..a2f53cf 100644
---
> index 28e52ee4..01ad5362 100644
18c41,101
< @@ -212,7 +212,7 @@ final class RenameLabels implements CompilerPass {
---
> @@ -17,7 +17,6 @@
>  package com.google.javascript.jscomp;
>  
>  import com.google.common.base.Preconditions;
> -import com.google.common.base.Supplier;
>  import com.google.common.collect.Lists;
>  import com.google.javascript.jscomp.NodeTraversal.ScopedCallback;
>  import com.google.javascript.rhino.Node;
> @@ -70,31 +69,9 @@ import java.util.Map;
>   */
>  final class RenameLabels implements CompilerPass {
>    private final AbstractCompiler compiler;
> -  private final Supplier<String> nameSupplier;
> -  private final boolean removeUnused;
>  
>    RenameLabels(AbstractCompiler compiler) {
> -    this(compiler, new DefaultNameSupplier(), true);
> -  }
> -
> -  RenameLabels(
> -      AbstractCompiler compiler,
> -      Supplier<String> supplier,
> -      boolean removeUnused) {
>      this.compiler = compiler;
> -    this.nameSupplier = supplier;
> -    this.removeUnused = removeUnused;
> -  }
> -
> -  static class DefaultNameSupplier implements Supplier<String> {
> -    // NameGenerator is used to create safe label names.
> -    final NameGenerator nameGenerator =
> -        new NameGenerator(new HashSet<String>(), "", null);
> -
> -    @Override
> -    public String get() {
> -      return nameGenerator.generateNextName();
> -    }
>    }
>  
>    /**
> @@ -111,6 +88,10 @@ final class RenameLabels implements CompilerPass {
>      // inner scope, so a new namespace is created each time a scope is entered.
>      final Deque<LabelNamespace> namespaceStack = Lists.newLinkedList();
>  
> +    // NameGenerator is used to create safe label names.
> +    final NameGenerator nameGenerator =
> +        new NameGenerator(new HashSet<String>(), "", null);
> +
>      // The list of generated names. Typically, the first name will be "a",
>      // the second "b", etc.
>      final ArrayList<String> names = new ArrayList<String>();
> @@ -148,7 +129,7 @@ final class RenameLabels implements CompilerPass {
>  
>          // Create a new name, if needed, for this depth.
>          if (names.size() < currentDepth) {
> -          names.add(nameSupplier.get());
> +          names.add(nameGenerator.generateNextName());
>          }
>  
>          String newName = getNameForId(currentDepth);
> @@ -212,7 +193,7 @@ final class RenameLabels implements CompilerPass {
26a110,140
> diff --git a/test/com/google/javascript/jscomp/InlineFunctionsTest.java b/test/com/google/javascript/jscomp/InlineFunctionsTest.java
> index 2811bc05..d9a413f3 100644
> --- a/test/com/google/javascript/jscomp/InlineFunctionsTest.java
> +++ b/test/com/google/javascript/jscomp/InlineFunctionsTest.java
> @@ -383,13 +383,6 @@ public class InlineFunctionsTest extends CompilerTestCase {
>          "foo();");
>    }
>  
> -  public void testInlineFunctions31() {
> -    // Don't introduce a duplicate label in the same scope
> -    test("function foo(){ lab:{4;} }" +
> -        "lab:{foo();}",
> -        "lab:{{JSCompiler_inline_label_0:{4}}}");
> -  }
> -
>    public void testMixedModeInlining1() {
>      // Base line tests, direct inlining
>      test("function foo(){return 1}" +
> diff --git a/test/com/google/javascript/jscomp/RenameLabelsTest.java b/test/com/google/javascript/jscomp/RenameLabelsTest.java
> index 55281135..ccfa8e21 100644
> --- a/test/com/google/javascript/jscomp/RenameLabelsTest.java
> +++ b/test/com/google/javascript/jscomp/RenameLabelsTest.java
> @@ -85,8 +85,4 @@ public class RenameLabelsTest extends CompilerTestCase {
>           "a(); while (1) break;");
>    }
>  
> -  public void testRenameReused() {
> -    test("foo:{break foo}; foo:{break foo}", "a:{break a};a:{break a}");
> -  }
> -
>  }
