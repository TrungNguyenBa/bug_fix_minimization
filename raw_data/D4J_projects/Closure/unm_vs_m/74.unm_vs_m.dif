2c2
< index 9d2f97a..a61bb6c 100644
---
> index 9d2f97a5..4295d9c3 100644
5c5
< @@ -904,8 +904,8 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {
---
> @@ -904,9 +904,8 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {
11,13c11,13
< +    int lhType = left.getType();
< +    int rhType = right.getType();
<      switch (lhType) {
---
> -    switch (lhType) {
> +
> +    switch (left.getType()) {
16c16,42
< @@ -1071,19 +1071,6 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {
---
>            return n;
> @@ -924,6 +923,7 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {
>            result = compareToUndefined(left, op);
>            break;
>          }
> +        int rhType = right.getType();
>          if (rhType != Token.TRUE &&
>              rhType != Token.FALSE &&
>              rhType != Token.NULL) {
> @@ -932,12 +932,12 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {
>          switch (op) {
>            case Token.SHEQ:
>            case Token.EQ:
> -            result = lhType == rhType;
> +            result = left.getType() == right.getType();
>              break;
>  
>            case Token.SHNE:
>            case Token.NE:
> -            result = lhType != rhType;
> +            result = left.getType() != right.getType();
>              break;
>  
>            case Token.GE:
> @@ -1069,23 +1069,6 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {
>    }
>  
18,19c44,45
<     * @return Translate NOT expressions into TRUE or FALSE when possible.
<     */
---
> -   * @return Translate NOT expressions into TRUE or FALSE when possible.
> -   */
33,34c59,60
<  
<    /**
---
> -
> -  /**
35a62,139
>     * result could not be determined.
>     */
> diff --git a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
> index ad698ebf..78bd30a6 100644
> --- a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
> +++ b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
> @@ -616,7 +616,7 @@ public class PeepholeFoldConstantsTest extends CompilerTestCase {
>      fold("x = -1 >= 9", "x = false");
>  
>      fold("x = true == true", "x = true");
> -    fold("x = false == false", "x = true");
> +    fold("x = true == true", "x = true");
>      fold("x = false == null", "x = false");
>      fold("x = false == true", "x = false");
>      fold("x = true == null", "x = false");
> @@ -666,7 +666,7 @@ public class PeepholeFoldConstantsTest extends CompilerTestCase {
>      fold("x = y === y", "x = y===y");
>  
>      fold("x = true === true", "x = true");
> -    fold("x = false === false", "x = true");
> +    fold("x = true === true", "x = true");
>      fold("x = false === null", "x = false");
>      fold("x = false === true", "x = false");
>      fold("x = true === null", "x = false");
> @@ -696,32 +696,6 @@ public class PeepholeFoldConstantsTest extends CompilerTestCase {
>      fold("true === null", "false");
>    }
>  
> -  public void testFoldComparison3() {
> -    fold("x = !1 == !0", "x = false");
> -
> -    fold("x = !0 == !0", "x = true");
> -    fold("x = !1 == !1", "x = true");
> -    fold("x = !1 == null", "x = false");
> -    fold("x = !1 == !0", "x = false");
> -    fold("x = !0 == null", "x = false");
> -
> -    fold("!0 == !0", "true");
> -    fold("!1 == null", "false");
> -    fold("!1 == !0", "false");
> -    fold("!0 == null", "false");
> -
> -    fold("x = !0 === !0", "x = true");
> -    fold("x = !1 === !1", "x = true");
> -    fold("x = !1 === null", "x = false");
> -    fold("x = !1 === !0", "x = false");
> -    fold("x = !0 === null", "x = false");
> -
> -    fold("!0 === !0", "true");
> -    fold("!1 === null", "false");
> -    fold("!1 === !0", "false");
> -    fold("!0 === null", "false");
> -  }
> -
>    public void testFoldGetElem() {
>      fold("x = [,10][0]", "x = void 0");
>      fold("x = [10, 20][0]", "x = 10");
> @@ -1072,8 +1046,6 @@ public class PeepholeFoldConstantsTest extends CompilerTestCase {
>            "void 0",
>            "true",
>            "false",
> -          "!0",
> -          "!1",
>            "0",
>            "1",
>            "''",
> @@ -1083,9 +1055,9 @@ public class PeepholeFoldConstantsTest extends CompilerTestCase {
>            "NaN",
>            "Infinity"
>            // TODO(nicksantos): Add more literals
> -          // "-Infinity",
> +          //-Infinity
>            //"({})",
> -          // "[]"
> +          //"[]",
>            //"[0]",
>            //"Object",
>            //"(function() {})"
