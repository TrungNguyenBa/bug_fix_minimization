2c2
< index c97e091..7a882de 100644
---
> index c97e091d..2094ae20 100644
5c5
< @@ -310,10 +310,7 @@ public final class NodeUtil {
---
> @@ -310,11 +310,6 @@ public final class NodeUtil {
10c10
<        // vertical tab is not always whitespace
---
> -      // vertical tab is not always whitespace
13c13
<  
---
> -
16,17c16,37
< @@ -375,7 +372,7 @@ public final class NodeUtil {
<    static TernaryValue isStrWhiteSpaceChar(int c) {
---
>      if (s.length() == 0) {
> @@ -358,12 +353,10 @@ public final class NodeUtil {
>    static String trimJsWhiteSpace(String s) {
>      int start = 0;
>      int end = s.length();
> -    while (end > 0
> -        && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE) {
> +    while (end > 0 && isStrWhiteSpaceChar(s.charAt(end-1))) {
>        end--;
>      }
> -    while (start < end
> -        && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE) {
> +    while (start < end && isStrWhiteSpaceChar(s.charAt(start))) {
>        start++;
>      }
>      return s.substring(start, end);
> @@ -372,23 +365,21 @@ public final class NodeUtil {
>    /**
>     * Copied from Rhino's ScriptRuntime
>     */
> -  static TernaryValue isStrWhiteSpaceChar(int c) {
> +  static boolean isStrWhiteSpaceChar(int c) {
19c39
<        case '\u000B': // <VT>
---
> -      case '\u000B': // <VT>
21d40
< +        return TernaryValue.TRUE;
24a44,74
>        case '\t': // <TAB>
>        case '\u00A0': // <NBSP>
>        case '\u000C': // <FF>
> +      case '\u000B': // <VT>
>        case '\u2028': // <LS>
>        case '\u2029': // <PS>
>        case '\uFEFF': // <BOM>
> -        return TernaryValue.TRUE;
> +        return true;
>        default:
> -        return (Character.getType(c) == Character.SPACE_SEPARATOR)
> -            ? TernaryValue.TRUE : TernaryValue.FALSE;
> +        return Character.getType(c) == Character.SPACE_SEPARATOR;
>      }
>    }
>  
> diff --git a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
> index 05a2d6a5..43e3a890 100644
> --- a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
> +++ b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
> @@ -988,10 +988,6 @@ public class PeepholeFoldConstantsTest extends CompilerTestCase {
>      testSame("(![foo()])");
>    }
>  
> -  public void testIEString() {
> -    testSame("!+'\\v1'");
> -  }
> -
>    private static final List<String> LITERAL_OPERANDS =
>        ImmutableList.of(
>            "null",
