2c2
< index 1afb7a8..c5ef4b0 100644
---
> index 1afb7a80..0df495dc 100644
5c5,16
< @@ -708,12 +708,14 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {
---
> @@ -32,6 +32,10 @@ import java.util.Locale;
>   */
>  class PeepholeFoldConstants extends AbstractPeepholeOptimization {
>  
> +  static final DiagnosticType DIVIDE_BY_0_ERROR = DiagnosticType.error(
> +      "JSC_DIVIDE_BY_0_ERROR",
> +      "Divide by 0");
> +
>    static final DiagnosticType INVALID_GETELEM_INDEX_ERROR =
>        DiagnosticType.error(
>            "JSC_INVALID_GETELEM_INDEX_ERROR",
> @@ -708,12 +712,14 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {
9c20
< +          error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right);
---
> +          error(DIVIDE_BY_0_ERROR, right);
16c27
< +          error(DiagnosticType.error("JSC_DIVIDE_BY_0_ERROR", "Divide by 0"), right);
---
> +          error(DIVIDE_BY_0_ERROR, right);
19a31,48
> diff --git a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
> index 848acbd5..7919be50 100644
> --- a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
> +++ b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
> @@ -555,11 +555,11 @@ public class PeepholeFoldConstantsTest extends CompilerTestCase {
>      fold("x = 2.25 * 3", "x = 6.75");
>      fold("z = x * y", "z = x * y");
>      fold("x = y * 5", "x = y * 5");
> -    fold("x = 1 / 0", "x = 1 / 0");
> +    fold("x = 1 / 0", "", PeepholeFoldConstants.DIVIDE_BY_0_ERROR);
>      fold("x = 3 % 2", "x = 1");
>      fold("x = 3 % -2", "x = 1");
>      fold("x = -1 % 3", "x = -1");
> -    fold("x = 1 % 0", "x = 1 % 0");
> +    fold("x = 1 % 0", "", PeepholeFoldConstants.DIVIDE_BY_0_ERROR);
>    }
>  
>    public void testFoldArithmetic2() {
