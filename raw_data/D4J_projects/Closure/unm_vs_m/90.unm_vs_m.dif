2c2
< index 3394fa6..99c9fce 100644
---
> index 3394fa62..2c836832 100644
5c5
< @@ -181,7 +181,7 @@ final class FunctionTypeBuilder {
---
> @@ -181,8 +181,7 @@ final class FunctionTypeBuilder {
10,11c10,11
< +      if (!type.isSubtype(
<                typeRegistry.getNativeType(OBJECT_TYPE))) {
---
> -              typeRegistry.getNativeType(OBJECT_TYPE))) {
> +      if (!type.isSubtype(typeRegistry.getNativeType(OBJECT_TYPE))) {
13a14
>        }
15c16
< index de1d1c2..3f0d245 100644
---
> index de1d1c23..cf2d3e86 100644
18,20c19,31
< @@ -877,9 +877,6 @@ public class FunctionType extends PrototypeObjectType {
<      // mean "nullable Foo". For certain tags (like @extends) we de-nullify
<      // the name for them.
---
> @@ -867,19 +867,8 @@ public class FunctionType extends PrototypeObjectType {
>  
>      // Warning about typeOfThis if it doesn't resolve to an ObjectType
>      // is handled further upstream.
> -    //
>      // TODO(nicksantos): Handle this correctly if we have a UnionType.
> -    //
> -    // TODO(nicksantos): In ES3, the runtime coerces "null" to the global
> -    // activation object. In ES5, it leaves it as null. Just punt on this
> -    // issue for now by coercing out null. This is complicated by the
> -    // fact that when most people write @this {Foo}, they really don't
> -    // mean "nullable Foo". For certain tags (like @extends) we de-nullify
> -    // the name for them.
27a39,82
> diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
> index 6b2baea8..cc8ecaf6 100644
> --- a/test/com/google/javascript/jscomp/TypeCheckTest.java
> +++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
> @@ -2624,9 +2624,9 @@ public class TypeCheckTest extends CompilerTypeTestCase {
>    public void testBackwardsTypedefUse3() throws Exception {
>      testTypes(
>          "/** @this {MyTypedef} */ function f() {}" +
> -        "/** @typedef {(Date|string)} */ var MyTypedef;",
> +        "/** @typedef {(Date|Array)} */ var MyTypedef;",
>          "@this type of a function must be an object\n" +
> -        "Actual type: (Date|null|string)");
> +        "Actual type: (Array|Date|null)");
>    }
>  
>    public void testBackwardsTypedefUse4() throws Exception {
> @@ -2664,27 +2664,6 @@ public class TypeCheckTest extends CompilerTypeTestCase {
>          "/** @typedef {Object} */ goog.MyTypedef;");
>    }
>  
> -  public void testBackwardsTypedefUse8() throws Exception {
> -    // Tehnically, this isn't quite right, because the JS runtime
> -    // will coerce null -> the global object. But we'll punt on that for now.
> -    testTypes(
> -        "/** @param {!Array} x */ function g(x) {}" +
> -        "/** @this {goog.MyTypedef} */ function f() { g(this); }" +
> -        "var goog = {};" +
> -        "/** @typedef {(Array|null|undefined)} */ goog.MyTypedef;");
> -  }
> -
> -  public void testBackwardsTypedefUse9() throws Exception {
> -    testTypes(
> -        "/** @param {!Array} x */ function g(x) {}" +
> -        "/** @this {goog.MyTypedef} */ function f() { g(this); }" +
> -        "var goog = {};" +
> -        "/** @typedef {(Error|null|undefined)} */ goog.MyTypedef;",
> -        "actual parameter 1 of g does not match formal parameter\n" +
> -        "found   : Error\n" +
> -        "required: Array");
> -  }
> -
>    public void testBackwardsConstructor1() throws Exception {
>      testTypes(
>          "function f() { (new Foo(true)); }" +
