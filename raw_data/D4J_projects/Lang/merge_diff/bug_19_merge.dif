diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java
index 3d4c2383..ffd969f3 100644
--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java
+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java
@@ -20,11 +20,9 @@ import java.io.IOException;
 import java.io.Writer;
 
 /**
- * Translate XML numeric entities of the form &#[xX]?\d+;? to 
+ * Translate XML numeric entities of the form &#[xX]?\d+; to 
  * the specific codepoint.
  * 
- * Note that the semi-colon is optional.
- * 
  * @since 3.0
  * @version $Id$
  */
@@ -35,9 +33,7 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {
      */
     @Override
     public int translate(CharSequence input, int index, Writer out) throws IOException {
-        int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {
+        if(input.charAt(index) == '&' && index < (input.length() - 1) && input.charAt(index + 1) == '#') {
             int start = index + 2;
             boolean isHex = false;
 
@@ -45,19 +41,10 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {
             if(firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
-
-                // Check there's more than just an x after the &#
-                if(start == seqEnd) {
-                    return 0;
-                }
             }
 
             int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') ||
-                                    (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||
-                                    (input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )
-            {
+            while(input.charAt(end) != ';') {
                 end++;
             }
 
@@ -69,7 +56,6 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
             } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
                 return 0;
             }
 
@@ -80,10 +66,7 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {
             } else {
                 out.write(entityValue);
             }
-
-            boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);
+            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
         }
         return 0;
     }
diff --git a/src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java b/src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java
index 6cfa772c..9e2d2496 100644
--- a/src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java
+++ b/src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java
@@ -36,20 +36,11 @@ public class NumericEntityUnescaperTest extends TestCase {
 
     public void testOutOfBounds() {
         NumericEntityUnescaper neu = new NumericEntityUnescaper();
-
-        assertEquals("Failed to ignore when last character is &", "Test &", neu.translate("Test &"));
-        assertEquals("Failed to ignore when last character is &", "Test &#", neu.translate("Test &#"));
-        assertEquals("Failed to ignore when last character is &", "Test &#x", neu.translate("Test &#x"));
-        assertEquals("Failed to ignore when last character is &", "Test &#X", neu.translate("Test &#X"));
-    }
-
-    public void testUnfinishedEntity() {
-        NumericEntityUnescaper neu = new NumericEntityUnescaper();
-        String input = "Test &#x30 not test";
-        String expected = "Test \u0030 not test";
+        String input = "Test &";
+        String expected = input;
 
         String result = neu.translate(input);
-        assertEquals("Failed to support unfinished entities (i.e. missing semi-colon", expected, result);
+        assertEquals("Failed to ignore when last character is &", expected, result);
     }
 
 }
