diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java
index 4aac02d1..e60c4497 100644
--- a/src/main/java/org/apache/commons/lang3/StringUtils.java
+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java
@@ -1438,27 +1438,15 @@ public class StringUtils {
      * @since 2.4
      */
     public static boolean containsAny(CharSequence cs, char[] searchChars) {
-		if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
+        if (cs == null || cs.length() == 0 || searchChars == null || searchChars.length == 0) {
             return false;
         }
-		int csLength = cs.length();
-		int searchLength = searchChars.length;
-		int csLastIndex = csLength - 1;
-		int searchLastIndex = searchLength - 1;
-		for (int i = 0; i < csLength; i++) {
+        for (int i = 0; i < cs.length(); i++) {
             char ch = cs.charAt(i);
-			for (int j = 0; j < searchLength; j++) {
+            for (int j = 0; j < searchChars.length; j++) {
                 if (searchChars[j] == ch) {
-					if (i < csLastIndex && j < searchLastIndex && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {
-						// ch is a supplementary character
-						if (searchChars[j + 1] == cs.charAt(i + 1)) {
                     return true;
                 }
-					} else {
-						// ch is in the Basic Multilingual Plane
-						return true;
-					}
-				}
             }
         }
         return false;
diff --git a/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java b/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
index 234a4557..0aa13a59 100644
--- a/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
+++ b/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
@@ -34,18 +34,6 @@ public class StringUtilsEqualsIndexOfTest extends TestCase {
     private static final String FOOBAR = "foobar";
     private static final String[] FOOBAR_SUB_ARRAY = new String[] {"ob", "ba"};
 
-    /**
-	 * Supplementary character U+20000
-	 * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/
-	 */
-	private static final String CharU20000 = "\uD840\uDC00";
-
-	/**
-	 * Supplementary character U+20001
-	 * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/
-	 */
-	private static final String CharU20001 = "\uD840\uDC01";
-	
     public StringUtilsEqualsIndexOfTest(String name) {
         super(name);
     }
@@ -655,45 +643,4 @@ public class StringUtilsEqualsIndexOfTest extends TestCase {
         assertEquals(true, StringUtils.containsNone(str3, chars3));
     }
 
-	/**
-	 * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/
-	 */
-	public void testContainsStringWithSupplementaryChars() {
-		assertEquals(true, StringUtils.contains(CharU20000 + CharU20001, CharU20000));
-		assertEquals(true, StringUtils.contains(CharU20000 + CharU20001, CharU20001));
-		assertEquals(true, StringUtils.contains(CharU20000, CharU20000));
-		assertEquals(false, StringUtils.contains(CharU20000, CharU20001));
-	}
-
-	/**
-	 * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/
-	 */
-	public void testContainsAnyStringWithSupplementaryChars() {
-		assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));
-		assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));
-		assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000));
-		// Sanity check:
-		assertEquals(-1, CharU20000.indexOf(CharU20001));
-		assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));
-		assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));
-		// Test:
-		assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));
-		assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));
-	}
-	
-	/**
-	 * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/
-	 */
-	public void testContainsAnyCharArrayWithSupplementaryChars() {
-		assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));
-		assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));
-		assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));
-		// Sanity check:
-		assertEquals(-1, CharU20000.indexOf(CharU20001));
-		assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));
-		assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));
-		// Test:
-		assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));
-		assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));
-	}
 }
