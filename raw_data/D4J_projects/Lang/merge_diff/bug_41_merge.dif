diff --git a/src/java/org/apache/commons/lang/ClassUtils.java b/src/java/org/apache/commons/lang/ClassUtils.java
index 478b3777..ebfd25a6 100644
--- a/src/java/org/apache/commons/lang/ClassUtils.java
+++ b/src/java/org/apache/commons/lang/ClassUtils.java
@@ -188,24 +188,6 @@ public class ClassUtils {
             return StringUtils.EMPTY;
         }
 
-        StringBuffer arrayPrefix = new StringBuffer();
-
-        // Handle array encoding
-        if (className.startsWith("[")) {
-            while (className.charAt(0) == '[') {
-                className = className.substring(1);
-                arrayPrefix.append("[]");
-            }
-            // Strip Object type encoding
-            if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
-                className = className.substring(1, className.length() - 1);
-            }
-        }
-
-        if (reverseAbbreviationMap.containsKey(className)) {
-            className = reverseAbbreviationMap.get(className);
-        }
-
         int lastDotIdx = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);
         int innerIdx = className.indexOf(
                 INNER_CLASS_SEPARATOR_CHAR, lastDotIdx == -1 ? 0 : lastDotIdx + 1);
@@ -213,7 +195,7 @@ public class ClassUtils {
         if (innerIdx != -1) {
             out = out.replace(INNER_CLASS_SEPARATOR_CHAR, PACKAGE_SEPARATOR_CHAR);
         }
-        return out + arrayPrefix;
+        return out;
     }
 
     // Package name
@@ -242,7 +224,7 @@ public class ClassUtils {
         if (cls == null) {
             return StringUtils.EMPTY;
         }
-        return getPackageName(cls.getName());
+        return cls.getPackage().getName();
     }
 
     /**
@@ -255,19 +237,9 @@ public class ClassUtils {
      * @return the package name or an empty string
      */
     public static String getPackageName(String className) {
-        if (className == null || className.length() == 0) {
+        if (className == null) {
             return StringUtils.EMPTY;
         }
-
-        // Strip array encoding
-        while (className.charAt(0) == '[') {
-            className = className.substring(1);
-        }
-        // Strip Object type encoding
-        if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
-            className = className.substring(1);
-        }
-
         int i = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);
         if (i == -1) {
             return StringUtils.EMPTY;
diff --git a/src/test/org/apache/commons/lang/ClassUtilsTest.java b/src/test/org/apache/commons/lang/ClassUtilsTest.java
index 896d542e..48986d6f 100644
--- a/src/test/org/apache/commons/lang/ClassUtilsTest.java
+++ b/src/test/org/apache/commons/lang/ClassUtilsTest.java
@@ -92,35 +92,6 @@ public class ClassUtilsTest extends TestCase {
         assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class));
         assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class));
         assertEquals("", ClassUtils.getShortClassName((Class) null));
-
-        // LANG-535
-        assertEquals("String[]", ClassUtils.getShortClassName(String[].class));
-        assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class));
-
-        // Primitives
-        assertEquals("boolean", ClassUtils.getShortClassName(boolean.class));
-        assertEquals("byte", ClassUtils.getShortClassName(byte.class));
-        assertEquals("char", ClassUtils.getShortClassName(char.class));
-        assertEquals("short", ClassUtils.getShortClassName(short.class));
-        assertEquals("int", ClassUtils.getShortClassName(int.class));
-        assertEquals("long", ClassUtils.getShortClassName(long.class));
-        assertEquals("float", ClassUtils.getShortClassName(float.class));
-        assertEquals("double", ClassUtils.getShortClassName(double.class));
-
-        // Primitive Arrays
-        assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class));
-        assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class));
-        assertEquals("char[]", ClassUtils.getShortClassName(char[].class));
-        assertEquals("short[]", ClassUtils.getShortClassName(short[].class));
-        assertEquals("int[]", ClassUtils.getShortClassName(int[].class));
-        assertEquals("long[]", ClassUtils.getShortClassName(long[].class));
-        assertEquals("float[]", ClassUtils.getShortClassName(float[].class));
-        assertEquals("double[]", ClassUtils.getShortClassName(double[].class));
-
-        // Arrays of arrays of ...
-        assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class));
-        assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class));
-        assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class));
     }
     
     public void test_getShortClassName_String() {
@@ -141,24 +112,6 @@ public class ClassUtilsTest extends TestCase {
         assertEquals("java.lang", ClassUtils.getPackageName(String.class));
         assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class));
         assertEquals("", ClassUtils.getPackageName((Class)null));
-
-        // LANG-535
-        assertEquals("java.lang", ClassUtils.getPackageName(String[].class));
-
-        // Primitive Arrays
-        assertEquals("", ClassUtils.getPackageName(boolean[].class));
-        assertEquals("", ClassUtils.getPackageName(byte[].class));
-        assertEquals("", ClassUtils.getPackageName(char[].class));
-        assertEquals("", ClassUtils.getPackageName(short[].class));
-        assertEquals("", ClassUtils.getPackageName(int[].class));
-        assertEquals("", ClassUtils.getPackageName(long[].class));
-        assertEquals("", ClassUtils.getPackageName(float[].class));
-        assertEquals("", ClassUtils.getPackageName(double[].class));
-
-        // Arrays of arrays of ...
-        assertEquals("java.lang", ClassUtils.getPackageName(String[][].class));
-        assertEquals("java.lang", ClassUtils.getPackageName(String[][][].class));
-        assertEquals("java.lang", ClassUtils.getPackageName(String[][][][].class));
     }
     
     public void test_getPackageName_String() {
