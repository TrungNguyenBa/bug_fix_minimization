diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index d0c5d36f..47345b56 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -28,7 +28,6 @@
     <action issue="LANG-828" type="fix">FastDateParser does not handle non-Gregorian calendars properly</action>
     <action issue="LANG-826" type="fix">FastDateParser does not handle non-ASCII digits correctly</action>
     <action issue="LANG-825" type="add">Create StrBuilder APIs similar to String.format(String, Object...)</action>
-    <action issue="LANG-818" type="fix">FastDateFormat's "z" pattern does not respect timezone of Calendar instances passed to format()</action>
     <action issue="LANG-817" type="fix">Add org.apache.commons.lang3.SystemUtils.IS_OS_WINDOWS_8</action>
     <action issue="LANG-813" type="fix">StringUtils.equalsIgnoreCase doesn't check string reference equality</action>
     <action issue="LANG-810" type="fix">StringUtils.join() endIndex, bugged for loop</action>
diff --git a/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java b/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java
index c952309a..cc1af9df 100644
--- a/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java
+++ b/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java
@@ -1093,8 +1093,7 @@ public class FastDatePrinter implements DatePrinter, Serializable {
      * <p>Inner class to output a time zone name.</p>
      */
     private static class TimeZoneNameRule implements Rule {
-        private final Locale mLocale;
-        private final int mStyle;
+        private final TimeZone mTimeZone;
         private final String mStandard;
         private final String mDaylight;
 
@@ -1106,8 +1105,7 @@ public class FastDatePrinter implements DatePrinter, Serializable {
          * @param style the style
          */
         TimeZoneNameRule(TimeZone timeZone, Locale locale, int style) {
-            mLocale = locale;
-            mStyle = style;
+            mTimeZone = timeZone;
 
             mStandard = getTimeZoneDisplay(timeZone, false, style, locale);
             mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);
@@ -1118,9 +1116,6 @@ public class FastDatePrinter implements DatePrinter, Serializable {
          */
         @Override
         public int estimateLength() {
-            // We have no access to the Calendar object that will be passed to
-            // appendTo so base estimate on the TimeZone passed to the
-            // constructor
             return Math.max(mStandard.length(), mDaylight.length());
         }
 
@@ -1129,12 +1124,10 @@ public class FastDatePrinter implements DatePrinter, Serializable {
          */
         @Override
         public void appendTo(StringBuffer buffer, Calendar calendar) {
-            TimeZone zone = calendar.getTimeZone();
-            if (zone.useDaylightTime()
-                    && calendar.get(Calendar.DST_OFFSET) != 0) {
-                buffer.append(getTimeZoneDisplay(zone, true, mStyle, mLocale));
+            if (mTimeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0) {
+                buffer.append(mDaylight);
             } else {
-                buffer.append(getTimeZoneDisplay(zone, false, mStyle, mLocale));
+                buffer.append(mStandard);
             }
         }
     }
diff --git a/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java b/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java
index bcea1a03..85ac8a98 100644
--- a/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java
+++ b/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java
@@ -16,7 +16,6 @@
  */
 package org.apache.commons.lang3.time;
 
-import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
@@ -261,28 +260,4 @@ public class FastDatePrinterTest {
         DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK);
         assertEquals(NEW_YORK, printer.getTimeZone());
     }
-    
-    @Test
-    public void testCalendarTimezoneRespected() {
-        String[] availableZones = TimeZone.getAvailableIDs();
-        TimeZone currentZone = TimeZone.getDefault();
-        
-        TimeZone anotherZone = null;
-        for (String zone : availableZones) {
-            if (!zone.equals(currentZone.getID())) {
-                anotherZone = TimeZone.getTimeZone(zone);
-            }
-        }
-        
-        assertNotNull("Cannot find another timezone", anotherZone);
-        
-        final String pattern = "h:mma z";
-        final Calendar cal = Calendar.getInstance(anotherZone);
-        
-        SimpleDateFormat sdf = new SimpleDateFormat(pattern);
-        sdf.setTimeZone(anotherZone);
-        String expectedValue = sdf.format(cal.getTime());
-        String actualValue = FastDateFormat.getInstance(pattern).format(cal);
-        assertEquals(expectedValue, actualValue);
-    }
 }
