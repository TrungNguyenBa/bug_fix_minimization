0a1,14
> diff --git a/pom.xml b/pom.xml
> index 1069ff23..87eb3e44 100644
> --- a/pom.xml
> +++ b/pom.xml
> @@ -395,9 +395,6 @@
>        <name>Masato Tezuka</name>
>      </contributor>
>      <contributor>
> -      <name>Daniel Trebbien</name>
> -    </contributor>
> -    <contributor>
>        <name>Jeff Varszegi</name>
>      </contributor>
>      <contributor>
2c16
< index 4733b7e..535a3f2 100644
---
> index 4733b7e9..ff6e35cf 100644
5,8c19,50
< @@ -785,10 +785,7 @@ public class StringUtils {
<          if (cs1 == null || cs2 == null) {
<              return false;
<          }
---
> @@ -758,8 +758,7 @@ public class StringUtils {
>      // Equals
>      //-----------------------------------------------------------------------
>      /**
> -     * <p>Compares two CharSequences, returning {@code true} if they represent
> -     * equal sequences of characters.</p>
> +     * <p>Compares two CharSequences, returning {@code true} if they are equal.</p>
>       *
>       * <p>{@code null}s are handled without exceptions. Two {@code null}
>       * references are considered to be equal. The comparison is case sensitive.</p>
> @@ -772,28 +771,20 @@ public class StringUtils {
>       * StringUtils.equals("abc", "ABC") = false
>       * </pre>
>       *
> -     * @see java.lang.CharSequence#equals(Object)
> -     * @param cs1  the first CharSequence, may be {@code null}
> -     * @param cs2  the second CharSequence, may be {@code null}
> -     * @return {@code true} if the CharSequences are equal (case-sensitive), or both {@code null}
> +     * @see java.lang.String#equals(Object)
> +     * @param cs1  the first CharSequence, may be null
> +     * @param cs2  the second CharSequence, may be null
> +     * @return {@code true} if the CharSequences are equal, case sensitive, or
> +     *  both {@code null}
>       * @since 3.0 Changed signature from equals(String, String) to equals(CharSequence, CharSequence)
>       */
>      public static boolean equals(CharSequence cs1, CharSequence cs2) {
> -        if (cs1 == cs2) {
> -            return true;
> -        }
> -        if (cs1 == null || cs2 == null) {
> -            return false;
> -        }
10c52
<              return cs1.equals(cs2);
---
> -            return cs1.equals(cs2);
12a55
> +        return cs1 == null ? cs2 == null : cs1.equals(cs2);
15a59,161
> -     * <p>Compares two CharSequences, returning {@code true} if they represent
> -     * equal sequences of characters, ignoring case.</p>
> +     * <p>Compares two CharSequences, returning {@code true} if they are equal ignoring
> +     * the case.</p>
>       *
>       * <p>{@code null}s are handled without exceptions. Two {@code null}
>       * references are considered equal. Comparison is case insensitive.</p>
> diff --git a/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java b/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
> index 63fe774b..334188db 100644
> --- a/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
> +++ b/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
> @@ -19,8 +19,6 @@ package org.apache.commons.lang3;
>  import java.util.Locale;
>  
>  import junit.framework.TestCase;
> -import org.hamcrest.core.IsNot;
> -import static org.junit.Assert.assertThat;
>  
>  /**
>   * Unit tests {@link org.apache.commons.lang3.StringUtils} - Substring methods
> @@ -440,75 +438,14 @@ public class StringUtilsEqualsIndexOfTest extends TestCase {
>          assertTrue( StringUtils.containsWhitespace("\n") );
>      }
>  
> -    // The purpose of this class is to test StringUtils#equals(CharSequence, CharSequence)
> -    // with a CharSequence implementation whose equals(Object) override requires that the
> -    // other object be an instance of CustomCharSequence, even though, as char sequences,
> -    // `seq` may equal the other object.
> -    private static class CustomCharSequence implements CharSequence {
> -        private CharSequence seq;
> -
> -        public CustomCharSequence(CharSequence seq) {
> -            this.seq = seq;
> -        }
> -
> -        public char charAt(int index) {
> -            return seq.charAt(index);
> -        }
> -
> -        public int length() {
> -            return seq.length();
> -        }
> -
> -        public CharSequence subSequence(int start, int end) {
> -            return new CustomCharSequence(seq.subSequence(start, end));
> -        }
> -
> -        @Override
> -        public boolean equals(Object obj) {
> -            if (obj == null || !(obj instanceof CustomCharSequence)) {
> -                return false;
> -            }
> -            CustomCharSequence other = (CustomCharSequence) obj;
> -            return seq.equals(other.seq);
> -        }
> -
> -        public String toString() {
> -            return seq.toString();
> -        }
> -    }
> -
> -    public void testCustomCharSequence() {
> -        assertThat((CharSequence) new CustomCharSequence(FOO), IsNot.<CharSequence>not(FOO));
> -        assertThat((CharSequence) FOO, IsNot.<CharSequence>not(new CustomCharSequence(FOO)));
> -        assertEquals(new CustomCharSequence(FOO), new CustomCharSequence(FOO));
> -    }
> -
>      public void testEquals() {
> -        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;
> -        assertTrue(StringUtils.equals(null, null));
> -        assertTrue(StringUtils.equals(fooCs, fooCs));
> -        assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));
> -        assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));
> -        assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));
> -        assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));
> -        assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));
> -        assertFalse(StringUtils.equals(fooCs, barCs));
> -        assertFalse(StringUtils.equals(fooCs, null));
> -        assertFalse(StringUtils.equals(null, fooCs));
> -        assertFalse(StringUtils.equals(fooCs, foobarCs));
> -        assertFalse(StringUtils.equals(foobarCs, fooCs));
> -    }
> -
> -    public void testEqualsOnStrings() {
> -        assertTrue(StringUtils.equals(null, null));
> -        assertTrue(StringUtils.equals(FOO, FOO));
> -        assertTrue(StringUtils.equals(FOO, new String(new char[] { 'f', 'o', 'o' })));
> -        assertFalse(StringUtils.equals(FOO, new String(new char[] { 'f', 'O', 'O' })));
> -        assertFalse(StringUtils.equals(FOO, BAR));
> -        assertFalse(StringUtils.equals(FOO, null));
> -        assertFalse(StringUtils.equals(null, FOO));
> -        assertFalse(StringUtils.equals(FOO, FOOBAR));
> -        assertFalse(StringUtils.equals(FOOBAR, FOO));
> +        assertEquals(true, StringUtils.equals(null, null));
> +        assertEquals(true, StringUtils.equals(FOO, FOO));
> +        assertEquals(true, StringUtils.equals(FOO, new String(new char[] { 'f', 'o', 'o' })));
> +        assertEquals(false, StringUtils.equals(FOO, new String(new char[] { 'f', 'O', 'O' })));
> +        assertEquals(false, StringUtils.equals(FOO, BAR));
> +        assertEquals(false, StringUtils.equals(FOO, null));
> +        assertEquals(false, StringUtils.equals(null, FOO));
>      }
>  
>      public void testEqualsIgnoreCase() {
