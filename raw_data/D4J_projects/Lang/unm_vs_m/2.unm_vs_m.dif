0a1,12
> diff --git a/src/changes/changes.xml b/src/changes/changes.xml
> index bf6b3fec..01867e70 100644
> --- a/src/changes/changes.xml
> +++ b/src/changes/changes.xml
> @@ -22,7 +22,6 @@
>    <body>
>  
>    <release version="3.2" date="TBA" description="Next release">
> -    <action issue="LANG-879" type="fix">LocaleUtils test fails with new Locale "ja_JP_JP_#u-ca-japanese" of JDK7</action>
>      <action issue="LANG-836" type="fix" due-to="Arnaud Brunet">StrSubstitutor does not support StringBuilder or CharSequence</action>
>      <action issue="LANG-693" type="fix" due-to="Calvin Echols">Method createNumber from NumberUtils doesn't work for floating point numbers other than Float</action>
>      <action issue="LANG-887" type="fix">FastDateFormat does not use the locale specific cache correctly</action>
2c14
< index fab00c5..8a1203a 100644
---
> index fab00c5b..8a1203a0 100644
14a27,72
> diff --git a/src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java b/src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java
> index e021dce9..f2d47c59 100644
> --- a/src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java
> +++ b/src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java
> @@ -542,41 +542,4 @@ public class LocaleUtilsTest  {
>          }
>      }
>  
> -    @Test
> -    public void testParseAllLocales() {
> -        Locale[] locales = Locale.getAvailableLocales();
> -        int failures = 0;
> -        for (Locale l : locales) {
> -            // Check if it's possible to recreate the Locale using just the standard constructor
> -            Locale locale = new Locale(l.getLanguage(), l.getCountry(), l.getVariant());
> -            if (l.equals(locale)) { // it is possible for LocaleUtils.toLocale to handle these Locales
> -                String str = l.toString();
> -                // Look for the script/extension suffix
> -                int suff = str.indexOf("_#");
> -                if (suff == - 1) {
> -                    suff = str.indexOf("#");
> -                }
> -                if (suff >= 0) { // we have a suffix
> -                    try {
> -                        LocaleUtils.toLocale(str); // shouuld cause IAE
> -                        System.out.println("Should not have parsed: " + str);
> -                        failures++;
> -                        continue; // try next Locale
> -                    } catch (IllegalArgumentException iae) {
> -                        // expected; try without suffix
> -                        str = str.substring(0, suff);
> -                    }
> -                }
> -                Locale loc = LocaleUtils.toLocale(str);
> -                if (!l.equals(loc)) {
> -                    System.out.println("Failed to parse: " + str);
> -                    failures++;
> -                }                    
> -            }
> -        }
> -        if (failures > 0) {
> -            fail("Failed "+failures+" test(s)");
> -        }
> -    }
> -
>  }
