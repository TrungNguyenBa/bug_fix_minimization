2c2
< index 711852e..3c2cf3f 100644
---
> index 711852ec..6b8c2e45 100644
5c5,12
< @@ -3295,7 +3295,7 @@ public class StringUtils {
---
> @@ -3290,12 +3290,13 @@ public class StringUtils {
>          if (array == null) {
>              return null;
>          }
> -        int noOfItems = (endIndex - startIndex);
> -        if (noOfItems <= 0) {
> +        int bufSize = (endIndex - startIndex);
> +        if (bufSize <= 0) {
10c17,18
< +        StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1);
---
> +        bufSize *= ((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1);
> +        StringBuilder buf = new StringBuilder(bufSize);
14c22,29
< @@ -3380,7 +3380,7 @@ public class StringUtils {
---
> @@ -3375,12 +3377,15 @@ public class StringUtils {
>  
>          // endIndex - startIndex > 0:   Len = NofStrings *(len(firstString) + len(separator))
>          //           (Assuming that all Strings are roughly equally long)
> -        int noOfItems = (endIndex - startIndex);
> -        if (noOfItems <= 0) {
> +        int bufSize = (endIndex - startIndex);
> +        if (bufSize <= 0) {
19c34,37
< +        StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + separator.length());
---
> +        bufSize *= ((array[startIndex] == null ? 16 : array[startIndex].toString().length())
> +                        + separator.length());
> +
> +        StringBuilder buf = new StringBuilder(bufSize);
22a41,75
> diff --git a/src/test/java/org/apache/commons/lang3/StringUtilsTest.java b/src/test/java/org/apache/commons/lang3/StringUtilsTest.java
> index a49311b9..aaa02d5e 100644
> --- a/src/test/java/org/apache/commons/lang3/StringUtilsTest.java
> +++ b/src/test/java/org/apache/commons/lang3/StringUtilsTest.java
> @@ -67,14 +67,6 @@ public class StringUtilsTest extends TestCase {
>      private static final String[] ARRAY_LIST = { "foo", "bar", "baz" };
>      private static final String[] EMPTY_ARRAY_LIST = {};
>      private static final String[] NULL_ARRAY_LIST = {null};
> -    private static final Object[] NULL_TO_STRING_LIST = {
> -    	new Object(){
> -    		@Override
> -    		public String toString() {
> -    			return null;
> -    		}
> -    	}
> -    };
>      private static final String[] MIXED_ARRAY_LIST = {null, "", "foo"};
>      private static final Object[] MIXED_TYPE_LIST = {"foo", Long.valueOf(2L)};
>  
> @@ -190,7 +182,6 @@ public class StringUtilsTest extends TestCase {
>  
>          assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST));
>          assertEquals("", StringUtils.join(NULL_ARRAY_LIST));
> -        assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST));
>          assertEquals("abc", StringUtils.join(new String[] {"a", "b", "c"}));
>          assertEquals("a", StringUtils.join(new String[] {null, "a", ""}));
>          assertEquals("foo", StringUtils.join(MIXED_ARRAY_LIST));
> @@ -206,7 +197,6 @@ public class StringUtilsTest extends TestCase {
>  
>          assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));
>          assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));
> -        assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));
>          assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));
>          assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));
>          assertEquals("", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));
