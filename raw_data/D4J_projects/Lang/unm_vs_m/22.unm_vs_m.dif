2c2
< index bf15a49..b36a156 100644
---
> index bf15a494..15272e59 100644
5c5,6
< @@ -580,14 +580,8 @@ public final class Fraction extends Number implements Comparable<Fraction> {
---
> @@ -579,15 +579,8 @@ public final class Fraction extends Number implements Comparable<Fraction> {
>       * @return the greatest common divisor, never zero
8c9
<          // From Commons Math:
---
> -        // From Commons Math:
15c16
<          //if either operand is abs 1, return 1:
---
> -        //if either operand is abs 1, return 1:
16a18
> +        //if either op. is abs 0 or 1, return 1:
20a23,50
> diff --git a/src/test/java/org/apache/commons/lang3/math/FractionTest.java b/src/test/java/org/apache/commons/lang3/math/FractionTest.java
> index 8e21e7cc..3116f4e7 100644
> --- a/src/test/java/org/apache/commons/lang3/math/FractionTest.java
> +++ b/src/test/java/org/apache/commons/lang3/math/FractionTest.java
> @@ -330,11 +330,6 @@ public class FractionTest extends TestCase {
>              f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  
>              fail("Expecting ArithmeticException");
>          } catch (ArithmeticException ex) {}      
> -
> -        // LANG-662
> -        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
> -        assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());
> -        assertEquals(1, f.getDenominator());
>      }
>  
>      public void testFactory_double() {
> @@ -648,11 +643,6 @@ public class FractionTest extends TestCase {
>          assertEquals(0, result.getNumerator());
>          assertEquals(1, result.getDenominator());
>          assertSame(result, Fraction.ZERO);
> -
> -        f = Fraction.getFraction(Integer.MIN_VALUE, 2);
> -        result = f.reduce();
> -        assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());
> -        assertEquals(1, result.getDenominator());
>      }
>      
>      public void testInvert() {
