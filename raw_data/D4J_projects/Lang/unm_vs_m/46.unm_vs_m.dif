2c2
< index d4f98ec..7b22e21 100644
---
> index d4f98ecf..c30c6637 100644
41,42c41,45
< @@ -151,13 +151,13 @@ public class StringEscapeUtils {
<       * @param escapeForwardSlash TODO
---
> @@ -148,16 +148,15 @@ public class StringEscapeUtils {
>       * 
>       * @param str String to escape values in, may be null
>       * @param escapeSingleQuotes escapes single quotes if <code>true</code>
> -     * @param escapeForwardSlash TODO
57,58c60,64
< @@ -175,8 +175,7 @@ public class StringEscapeUtils {
<       * @param escapeForwardSlash TODO
---
> @@ -172,11 +171,9 @@ public class StringEscapeUtils {
>       * @param out write to receieve the escaped string
>       * @param str String to escape values in, may be null
>       * @param escapeSingleQuote escapes single quotes if <code>true</code>
> -     * @param escapeForwardSlash TODO
67c73,78
< @@ -242,9 +241,7 @@ public class StringEscapeUtils {
---
> @@ -197,23 +194,23 @@ public class StringEscapeUtils {
>                  out.write("\\u00" + hex(ch));
>              } else if (ch < 32) {
>                  switch (ch) {
> -                    case '\b' :
> +                    case '\b':
68a80
>                          out.write('b');
70c82,123
<                      case '/' :
---
> -                    case '\n' :
> +                    case '\n':
>                          out.write('\\');
>                          out.write('n');
>                          break;
> -                    case '\t' :
> +                    case '\t':
>                          out.write('\\');
>                          out.write('t');
>                          break;
> -                    case '\f' :
> +                    case '\f':
>                          out.write('\\');
>                          out.write('f');
>                          break;
> -                    case '\r' :
> +                    case '\r':
>                          out.write('\\');
>                          out.write('r');
>                          break;
> @@ -227,24 +224,22 @@ public class StringEscapeUtils {
>                  }
>              } else {
>                  switch (ch) {
> -                    case '\'' :
> +                    case '\'':
>                          if (escapeSingleQuote) {
>                            out.write('\\');
>                          }
>                          out.write('\'');
>                          break;
> -                    case '"' :
> +                    case '"':
>                          out.write('\\');
>                          out.write('"');
>                          break;
> -                    case '\\' :
> +                    case '\\':
>                          out.write('\\');
>                          out.write('\\');
>                          break;
> -                    case '/' :
71a125
> +                    case '/':
76a131,157
> diff --git a/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java b/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java
> index e993ae68..b0b38f97 100644
> --- a/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java
> +++ b/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java
> @@ -97,22 +97,6 @@ public class StringEscapeUtilsTest extends TestCase {
>                  "\uABCD\u1234\u012C");
>      }
>  
> -    /**
> -     * https://issues.apache.org/jira/browse/LANG-421
> -     */
> -    public void testEscapeJavaWithSlash() {
> -        final String input = "String with a slash (/) in it";
> -
> -        final String expected = input;
> -        final String actual = StringEscapeUtils.escapeJava(input);
> -
> -        /**
> -         * In 2.4 StringEscapeUtils.escapeJava(String) escapes '/' characters, which are not a valid character to escape
> -         * in a Java string.
> -         */
> -        assertEquals(expected, actual);
> -    }
> -    
>      private void assertEscapeJava(String escaped, String original) throws IOException {
>          assertEscapeJava(null, escaped, original);
>      }
