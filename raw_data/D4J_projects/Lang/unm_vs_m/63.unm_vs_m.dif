2c2
< index 3a9d9f6..127b927 100644
---
> index 3a9d9f68..f777d489 100644
5c5
< @@ -303,20 +303,25 @@ public class DurationFormatUtils {
---
> @@ -303,21 +303,23 @@ public class DurationFormatUtils {
11,16c11,16
< +            days += 31;
<  //days += 31; // TODO: Need tests to show this is bad and the new code is good.
<  // HEN: It's a tricky subject. Jan 15th to March 10th. If I count days-first it is 
<  // 1 month and 26 days, but if I count month-first then it is 1 month and 23 days.
<  // Also it's contextual - if asked for no M in the format then I should probably 
<  // be doing no calculating here.
---
> -//days += 31; // TODO: Need tests to show this is bad and the new code is good.
> -// HEN: It's a tricky subject. Jan 15th to March 10th. If I count days-first it is 
> -// 1 month and 26 days, but if I count month-first then it is 1 month and 23 days.
> -// Also it's contextual - if asked for no M in the format then I should probably 
> -// be doing no calculating here.
> +            days += 31; // such overshooting is taken care of later on
23a24,25
>  
> +        // take estimates off of end to see if we can equal start, when it overshoots recalculate
31c33
<  
---
> +
34,35c36,37
< @@ -424,6 +429,18 @@ public class DurationFormatUtils {
<          }
---
>          // number of months and get the real count and not just 0->11.
> @@ -425,6 +427,29 @@ public class DurationFormatUtils {
37a40,50
>  
> +    /**
> +     * Reduces by difference, then if it overshot, calculates the overshot amount and 
> +     * fixes and returns the amount to change by.
> +     *
> +     * @param start Start of period being formatted
> +     * @param end End of period being formatted
> +     * @param field Field to reduce, as per constants in {@link java.util.Calendar}
> +     * @param difference amount to reduce by
> +     * @return int reduced value
> +     */
50c63
<  
---
> +
52a66,100
>      static final Object d = "d";
> diff --git a/src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java b/src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java
> index 1deeb0e8..3397b5ae 100644
> --- a/src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java
> +++ b/src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java
> @@ -411,29 +411,6 @@ public class DurationFormatUtilsTest extends TestCase {
>          assertEquals( "0000/00/30 16:00:00 000", DurationFormatUtils.formatPeriod(cal1.getTime().getTime(), cal2.getTime().getTime(), "yyyy/MM/dd HH:mm:ss SSS") );
>      }
>  
> -    // https://issues.apache.org/jira/browse/LANG-281
> -    public void testJiraLang281() {
> -        Calendar cal = Calendar.getInstance();
> -        cal.set(Calendar.MONTH, Calendar.DECEMBER);
> -        cal.set(Calendar.DAY_OF_MONTH, 31);
> -        cal.set(Calendar.YEAR, 2005);
> -        cal.set(Calendar.HOUR_OF_DAY, 0);
> -        cal.set(Calendar.MINUTE, 0);
> -        cal.set(Calendar.SECOND, 0);
> -        cal.set(Calendar.MILLISECOND, 0);
> -
> -        Calendar cal2 = Calendar.getInstance();
> -        cal2.set(Calendar.MONTH, Calendar.OCTOBER);
> -        cal2.set(Calendar.DAY_OF_MONTH, 6);
> -        cal2.set(Calendar.YEAR, 2006);
> -        cal2.set(Calendar.HOUR_OF_DAY, 0);
> -        cal2.set(Calendar.MINUTE, 0);
> -        cal2.set(Calendar.SECOND, 0);
> -        cal2.set(Calendar.MILLISECOND, 0);
> -        String result = DurationFormatUtils.formatPeriod(cal.getTime().getTime(), cal2.getTime().getTime(), "MM");
> -        assertEquals("09", result);
> -    }
> -
>      private void assertArrayEquals(DurationFormatUtils.Token[] obj1, DurationFormatUtils.Token[] obj2) {
>          assertEquals("Arrays are unequal length. ", obj1.length, obj2.length);
>          for (int i = 0; i < obj1.length; i++) {
