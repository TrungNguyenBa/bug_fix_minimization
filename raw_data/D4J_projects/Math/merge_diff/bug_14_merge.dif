diff --git a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java
index aa3299aea..789bc256d 100644
--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java
+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java
@@ -18,7 +18,7 @@ package org.apache.commons.math3.optim.nonlinear.vector;
 
 import org.apache.commons.math3.optim.OptimizationData;
 import org.apache.commons.math3.linear.RealMatrix;
-import org.apache.commons.math3.linear.DiagonalMatrix;
+import org.apache.commons.math3.linear.MatrixUtils;
 import org.apache.commons.math3.linear.NonSquareMatrixException;
 
 /**
@@ -40,7 +40,10 @@ public class Weight implements OptimizationData {
      */
     public Weight(double[] weight) {
         final int dim = weight.length;
-        weightMatrix = new DiagonalMatrix(weight);
+        weightMatrix = MatrixUtils.createRealMatrix(dim, dim);
+        for (int i = 0; i < dim; i++) {
+            weightMatrix.setEntry(i, i, weight[i]);
+        }
     }
 
     /**
diff --git a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java
index ef5294324..b7bb6f575 100644
--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java
@@ -20,7 +20,6 @@ import org.apache.commons.math3.exception.DimensionMismatchException;
 import org.apache.commons.math3.exception.TooManyEvaluationsException;
 import org.apache.commons.math3.linear.ArrayRealVector;
 import org.apache.commons.math3.linear.RealMatrix;
-import org.apache.commons.math3.linear.DiagonalMatrix;
 import org.apache.commons.math3.linear.DecompositionSolver;
 import org.apache.commons.math3.linear.MatrixUtils;
 import org.apache.commons.math3.linear.QRDecomposition;
@@ -264,16 +263,7 @@ public abstract class AbstractLeastSquaresOptimizer
      * @return the square-root of the weight matrix.
      */
     private RealMatrix squareRoot(RealMatrix m) {
-        if (m instanceof DiagonalMatrix) {
-            final int dim = m.getRowDimension();
-            final RealMatrix sqrtM = new DiagonalMatrix(dim);
-            for (int i = 0; i < dim; i++) {
-                sqrtM.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i)));
-            }
-            return sqrtM;
-        } else {
         final EigenDecomposition dec = new EigenDecomposition(m);
         return dec.getSquareRoot();
     }
-    }
 }
diff --git a/src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java b/src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java
index 73603cdb9..b695ee63e 100644
--- a/src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java
+++ b/src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java
@@ -220,33 +220,6 @@ public class PolynomialFitterTest {
         checkUnsolvableProblem(new GaussNewtonOptimizer(true, new SimpleVectorValueChecker(1e-15, 1e-15)), false);
     }
 
-    @Test
-    public void testLargeSample() {
-        Random randomizer = new Random(0x5551480dca5b369bl);
-        double maxError = 0;
-        for (int degree = 0; degree < 10; ++degree) {
-            PolynomialFunction p = buildRandomPolynomial(degree, randomizer);
-
-            PolynomialFitter fitter = new PolynomialFitter(new LevenbergMarquardtOptimizer());
-            for (int i = 0; i < 40000; ++i) {
-                double x = -1.0 + i / 20000.0;
-                fitter.addObservedPoint(1.0, x,
-                                        p.value(x) + 0.1 * randomizer.nextGaussian());
-            }
-
-            final double[] init = new double[degree + 1];
-            PolynomialFunction fitted = new PolynomialFunction(fitter.fit(init));
-
-            for (double x = -1.0; x < 1.0; x += 0.01) {
-                double error = FastMath.abs(p.value(x) - fitted.value(x)) /
-                              (1.0 + FastMath.abs(p.value(x)));
-                maxError = FastMath.max(maxError, error);
-                Assert.assertTrue(FastMath.abs(error) < 0.01);
-            }
-        }
-        Assert.assertTrue(maxError > 0.001);
-    }
-
     private void checkUnsolvableProblem(MultivariateVectorOptimizer optimizer,
                                         boolean solvable) {
         Random randomizer = new Random(1248788532l);
