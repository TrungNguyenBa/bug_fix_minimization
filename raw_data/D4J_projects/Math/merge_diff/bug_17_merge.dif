diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index b6f8c5405..64fb6fdb3 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -52,9 +52,6 @@ If the output is not quite correct, check for invisible trailing spaces!
   <body>
     <release version="3.1" date="TBD" description="
 ">
-      <action dev="tn" type="fix" issue="MATH-778" due-to="SÃ©bastien Brisard">
-        Allow unlimited input values for "Dfp#multiply(int)".
-      </action>
       <action dev="luc" type="fix" issue="MATH-641" due-to="Curtis Jensen">
         Added distance to point to 2D Line and Segment.
       </action>
diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java
index 3a9198271..d278a3128 100644
--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java
+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java
@@ -1595,24 +1595,12 @@ public class Dfp implements FieldElement<Dfp> {
 
     }
 
-    /** Multiply this by a single digit x.
-     * @param x multiplicand
-     * @return product of this and x
-     */
-    public Dfp multiply(final int x) {
-        if (x >= 0 && x < RADIX) {
-            return multiplyFast(x);
-        } else {
-            return multiply(newInstance(x));
-        }
-    }
-
     /** Multiply this by a single digit 0&lt;=x&lt;radix.
-     * There are speed advantages in this special case.
+     * There are speed advantages in this special case
      * @param x multiplicand
      * @return product of this and x
      */
-    private Dfp multiplyFast(final int x) {
+    public Dfp multiply(final int x) {
         Dfp result = newInstance(this);
 
         /* handle special cases */
