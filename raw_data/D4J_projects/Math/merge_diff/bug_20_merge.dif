diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 7bf77019e..4f23f92f1 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -52,10 +52,6 @@ If the output is not quite correct, check for invisible trailing spaces!
   <body>
     <release version="3.1" date="TBD" description="
 ">
-      <action dev="erans" type="fix" issue="MATH-864" due-to="Frank Hess">
-        "CMAESOptimizer": Solution was not constrained to lie within the
-        provided boundaries.
-      </action>
       <action dev="erans" type="add" issue="MATH-863" due-to="Julien Anxionnat">
         New "Quaternion" class (package "o.a.c.m.complex").
       </action>
diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
index b54cb3744..d01cd158c 100644
--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
@@ -24,11 +24,9 @@ import java.util.List;
 import org.apache.commons.math3.analysis.MultivariateFunction;
 import org.apache.commons.math3.exception.DimensionMismatchException;
 import org.apache.commons.math3.exception.MathUnsupportedOperationException;
-import org.apache.commons.math3.exception.MathIllegalStateException;
 import org.apache.commons.math3.exception.NotPositiveException;
 import org.apache.commons.math3.exception.OutOfRangeException;
 import org.apache.commons.math3.exception.TooManyEvaluationsException;
-import org.apache.commons.math3.exception.util.LocalizedFormats;
 import org.apache.commons.math3.linear.Array2DRowRealMatrix;
 import org.apache.commons.math3.linear.EigenDecomposition;
 import org.apache.commons.math3.linear.MatrixUtils;
@@ -416,7 +414,7 @@ public class CMAESOptimizer
                     bestValue = bestFitness;
                     lastResult = optimum;
                     optimum = new PointValuePair(
-                            fitfun.repairAndDecode(bestArx.getColumn(0)),
+                            fitfun.decode(bestArx.getColumn(0)),
                             isMinimize ? bestFitness : -bestFitness);
                     if (getConvergenceChecker() != null && lastResult != null) {
                         if (getConvergenceChecker().converged(iterations, optimum, lastResult)) {
@@ -915,16 +913,6 @@ public class CMAESOptimizer
 
         /**
          * @param x Normalized objective variables.
-         * @return the original objective variables, possibly repaired.
-         */
-        public double[] repairAndDecode(final double[] x) {
-            return boundaries != null && isRepairMode ?
-                decode(repair(x)) :
-                decode(x);
-        }
-
-        /**
-         * @param x Normalized objective variables.
          * @return the original objective variables.
          */
         public double[] decode(final double[] x) {
diff --git a/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java b/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java
index 38818798c..19a30bc6f 100644
--- a/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java
+++ b/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java
@@ -372,27 +372,6 @@ public class CMAESOptimizerTest {
                 1e-10, 1e-4, 1000000, expected);
      }
 
-    @Test
-    public void testMath864() {
-        final CMAESOptimizer optimizer = new CMAESOptimizer();
-        final MultivariateFunction fitnessFunction = new MultivariateFunction() {
-                @Override
-                public double value(double[] parameters) {
-                    final double target = 1;
-                    final double error = target - parameters[0];
-                    return error * error;
-                }
-            };
-
-        final double[] start = { 0 };
-        final double[] lower = { -1e6 };
-        final double[] upper = { 0.5 };
-        final double[] result = optimizer.optimize(10000, fitnessFunction, GoalType.MINIMIZE,
-                                                   start, lower, upper).getPoint();
-        Assert.assertTrue("Out of bounds (" + result[0] + " > " + upper[0] + ")",
-                          result[0] <= upper[0]);
-    }
-
     /**
      * @param func Function to optimize.
      * @param startPoint Starting point.
