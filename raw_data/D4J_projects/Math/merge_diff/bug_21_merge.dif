diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 046450552..ec44dd50f 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -52,9 +52,6 @@ If the output is not quite correct, check for invisible trailing spaces!
   <body>
     <release version="3.1" date="TBD" description="
 ">
-      <action dev="lus" type="fix" issue="MATH-789">
-          Fixed an error in rectangular Cholesky decomposition.
-      </action>
       <action dev="psteitz" type="update" issue="MATH-859">
         Clarified definition of isSupportXxxBoundInclusive in RealDistribution
         interface, made code consistent with the definition, and deprecated
diff --git a/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java b/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java
index aba7b9806..38584d420 100644
--- a/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java
+++ b/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java
@@ -62,10 +62,11 @@ public class RectangularCholeskyDecomposition {
     public RectangularCholeskyDecomposition(RealMatrix matrix, double small)
         throws NonPositiveDefiniteMatrixException {
 
-        final int order = matrix.getRowDimension();
-        final double[][] c = matrix.getData();
-        final double[][] b = new double[order][order];
+        int order = matrix.getRowDimension();
+        double[][] c = matrix.getData();
+        double[][] b = new double[order][order];
 
+        int[] swap  = new int[order];
         int[] index = new int[order];
         for (int i = 0; i < order; ++i) {
             index[i] = i;
@@ -75,24 +76,21 @@ public class RectangularCholeskyDecomposition {
         for (boolean loop = true; loop;) {
 
             // find maximal diagonal element
-            int swapR = r;
+            swap[r] = r;
             for (int i = r + 1; i < order; ++i) {
                 int ii  = index[i];
-                int isr = index[swapR];
-                if (c[ii][ii] > c[isr][isr]) {
-                    swapR = i;
+                int isi = index[swap[i]];
+                if (c[ii][ii] > c[isi][isi]) {
+                    swap[r] = i;
                 }
             }
 
 
             // swap elements
-            if (swapR != r) {
-                final int tmpIndex    = index[r];
-                index[r]              = index[swapR];
-                index[swapR]          = tmpIndex;
-                final double[] tmpRow = b[r];
-                b[r]                  = b[swapR];
-                b[swapR]              = tmpRow;
+            if (swap[r] != r) {
+                int tmp = index[r];
+                index[r] = index[swap[r]];
+                index[swap[r]] = tmp;
             }
 
             // check diagonal element
@@ -120,18 +118,17 @@ public class RectangularCholeskyDecomposition {
             } else {
 
                 // transform the matrix
-                final double sqrt = FastMath.sqrt(c[ir][ir]);
+                double sqrt = FastMath.sqrt(c[ir][ir]);
                 b[r][r] = sqrt;
-                final double inverse  = 1 / sqrt;
-                final double inverse2 = 1 / c[ir][ir];
+                double inverse = 1 / sqrt;
                 for (int i = r + 1; i < order; ++i) {
-                    final int ii = index[i];
-                    final double e = inverse * c[ii][ir];
+                    int ii = index[i];
+                    double e = inverse * c[ii][ir];
                     b[i][r] = e;
-                    c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;
+                    c[ii][ii] -= e * e;
                     for (int j = r + 1; j < i; ++j) {
-                        final int ij = index[j];
-                        final double f = c[ii][ij] - e * b[j][r];
+                        int ij = index[j];
+                        double f = c[ii][ij] - e * b[j][r];
                         c[ii][ij] = f;
                         c[ij][ii] = f;
                     }
