diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index af7b93876..d60da4bae 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -52,9 +52,6 @@ If the output is not quite correct, check for invisible trailing spaces!
   <body>
     <release version="3.1" date="TBD" description="
 ">
-      <action dev="tn" type="fix" issue="MATH-781" due-to="Scheiber ErnÅ‘">
-        Use epsilon instead of ulp in floating-point comparison when dropping columns after phase 1 in SimplexSolver.
-      </action>
       <action dev="luc" type="fix" issue="MATH-721">
         Added a workaround for an OpenJDK issue on sparc solaris with too small constants.
       </action>
@@ -182,7 +179,7 @@ counterpart in either Math or StrictMath (cf. MATH-740).
         Broke up bloated "MathUtils" class into "MathArrays", "Precision",
         "ArithmeticUtils" classes.
       </action>
-      <action dev="psteitz" type="fix" issue="MATH-704" due-to="Thomas Neidhart">
+      <action dev="psteitz" type="fix" issue="MATH-704" due-to="Thomas Niedhart">
         Fixed array indexing error in Variance evaluate method for
         computing the weighted variance of an array segment.
       </action>
diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java
index 327b2ae65..9a6993a55 100644
--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java
+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java
@@ -335,7 +335,7 @@ class SimplexTableau implements Serializable {
         // positive cost non-artificial variables
         for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
             final double entry = tableau.getEntry(0, i);
-            if (Precision.compareTo(entry, 0d, epsilon) > 0) {
+            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
                 columnsToDrop.add(i);
             }
         }
diff --git a/src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java b/src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java
index ae4d706b3..4b1a4b5c9 100644
--- a/src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java
+++ b/src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java
@@ -30,25 +30,6 @@ import org.junit.Test;
 public class SimplexSolverTest {
 
     @Test
-    public void testMath781() {
-        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 2, 6, 7 }, 0);
-
-        ArrayList<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
-        constraints.add(new LinearConstraint(new double[] { 1, 2, 1 }, Relationship.LEQ, 2));
-        constraints.add(new LinearConstraint(new double[] { -1, 1, 1 }, Relationship.LEQ, -1));
-        constraints.add(new LinearConstraint(new double[] { 2, -3, 1 }, Relationship.LEQ, -1));
-
-        double epsilon = 1e-6;
-        SimplexSolver solver = new SimplexSolver();
-        PointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);
-
-        Assert.assertTrue(Precision.compareTo(solution.getPoint()[0], 0.0d, epsilon) > 0);
-        Assert.assertTrue(Precision.compareTo(solution.getPoint()[1], 0.0d, epsilon) > 0);
-        Assert.assertTrue(Precision.compareTo(solution.getPoint()[2], 0.0d, epsilon) < 0);
-        Assert.assertEquals(2.0d, solution.getValue(), epsilon);
-    }
-
-    @Test
     public void testMath713NegativeVariable() {
         LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {1.0, 1.0}, 0.0d);
         ArrayList<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
