diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java
index 59dc4617b..93dd3bbdd 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java
@@ -232,16 +232,10 @@ public class BracketingNthOrderBrentSolver
             double targetY;
             if (agingA >= MAXIMAL_AGING) {
                 // we keep updating the high bracket, try to compensate this
-                final int p = agingA - MAXIMAL_AGING;
-                final double weightA = (1 << p) - 1;
-                final double weightB = p + 1;
-                targetY = (weightA * yA - weightB * REDUCTION_FACTOR * yB) / (weightA + weightB);
+                targetY = -REDUCTION_FACTOR * yB;
             } else if (agingB >= MAXIMAL_AGING) {
                 // we keep updating the low bracket, try to compensate this
-                final int p = agingB - MAXIMAL_AGING;
-                final double weightA = p + 1;
-                final double weightB = (1 << p) - 1;
-                targetY = (weightB * yB - weightA * REDUCTION_FACTOR * yA) / (weightA + weightB);
+                targetY = -REDUCTION_FACTOR * yA;
             } else {
                 // bracketing is balanced, try to find the root itself
                 targetY = 0;
diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
index 40adb29cb..d6a1857d3 100644
--- a/src/site/xdoc/changes.xml
+++ b/src/site/xdoc/changes.xml
@@ -52,9 +52,6 @@ The <action> type attribute can be add,update,fix,remove.
     If the output is not quite correct, check for invisible trailing spaces!
      -->
     <release version="3.0" date="TBD" description="TBD">
-      <action dev="luc" type="fix" issue="MATH-716">
-        Fixed bracketing interval balancing in BracketingNthOrderBrentSolver.
-      </action>
       <action dev="erans" type="fix" issue="MATH-690">
         Removed unused or duplicate utility methods from "MathUtils".
         Math functions with "double" arguments were moved to class "FastMath".
diff --git a/src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java b/src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java
index 13bd8f496..3324b7992 100644
--- a/src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java
+++ b/src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java
@@ -41,7 +41,7 @@ public final class BracketingNthOrderBrentSolverTest extends BaseSecantSolverAbs
     /** {@inheritDoc} */
     @Override
     protected int[] getQuinticEvalCounts() {
-        return new int[] {1, 3, 8, 1, 9, 4, 8, 1, 12, 1, 16};
+        return new int[] {1, 3, 8, 1, 9, 4, 8, 1, 12, 1, 14};
     }
 
     @Test(expected=NumberIsTooSmallException.class)
@@ -82,21 +82,6 @@ public final class BracketingNthOrderBrentSolverTest extends BaseSecantSolverAbs
     }
 
     @Test
-    public void testIssue716() {
-        BracketingNthOrderBrentSolver solver =
-                new BracketingNthOrderBrentSolver(1.0e-12, 1.0e-10, 1.0e-22, 5);
-        UnivariateFunction sharpTurn = new UnivariateFunction() {
-            public double value(double x) {
-                return (2 * x + 1) / (1.0e9 * (x + 1));
-            }
-        };
-        double result = solver.solve(100, sharpTurn, -0.9999999, 30, 15, AllowedSolution.RIGHT_SIDE);
-        Assert.assertEquals(0, sharpTurn.value(result), solver.getFunctionValueAccuracy());
-        Assert.assertTrue(sharpTurn.value(result) >= 0);
-        Assert.assertEquals(-0.5, result, 1.0e-10);
-    }
-
-    @Test
     public void testFasterThanNewton() {
         // the following test functions come from Beny Neta's paper:
         // "Several New Methods for solving Equations"
