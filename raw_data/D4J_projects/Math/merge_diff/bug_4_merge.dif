diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 1b0155445..a50812f4b 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -51,9 +51,6 @@ If the output is not quite correct, check for invisible trailing spaces!
   </properties>
   <body>
     <release version="x.y" date="TBD" description="TBD">
-      <action dev="luc" type="fix" issue="MATH-988" due-to="Andreas Huber">
-        Fixed NullPointerException in 2D and 3D sub-line intersections.
-      </action>
       <action dev="psteitz" type="update" issue="MATH-987" due-to="Ajo Fod">
         Added append method to SimpleRegression, making this class map/reducible.
       </action>
diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java
index aad7b65a5..a146cb661 100644
--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java
+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java
@@ -111,9 +111,6 @@ public class SubLine {
 
         // compute the intersection on infinite line
         Vector3D v1D = line.intersection(subLine.line);
-        if (v1D == null) {
-            return null;
-        }
 
         // check location of point with respect to first sub-line
         Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));
diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java
index ea9e96a49..a9d621a44 100644
--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java
+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java
@@ -115,9 +115,6 @@ public class SubLine extends AbstractSubHyperplane<Euclidean2D, Euclidean1D> {
 
         // compute the intersection on infinite line
         Vector2D v2D = line1.intersection(line2);
-        if (v2D == null) {
-            return null;
-        }
 
         // check location of point with respect to first sub-line
         Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
