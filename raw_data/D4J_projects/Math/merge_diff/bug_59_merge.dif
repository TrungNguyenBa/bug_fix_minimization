diff --git a/src/main/java/org/apache/commons/math/util/FastMath.java b/src/main/java/org/apache/commons/math/util/FastMath.java
index 4f7d447df..8cba4d484 100644
--- a/src/main/java/org/apache/commons/math/util/FastMath.java
+++ b/src/main/java/org/apache/commons/math/util/FastMath.java
@@ -3479,7 +3479,7 @@ public class FastMath {
      * @return b if a is lesser or equal to b, a otherwise
      */
     public static float max(final float a, final float b) {
-        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : a);
+        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);
     }
 
     /** Compute the maximum of two values
diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
index 3356fb05c..1c8453ef7 100644
--- a/src/site/xdoc/changes.xml
+++ b/src/site/xdoc/changes.xml
@@ -52,10 +52,6 @@ The <action> type attribute can be add,update,fix,remove.
     If the output is not quite correct, check for invisible trailing spaces!
      -->
     <release version="3.0" date="TBD" description="TBD">
-      <action dev="sebb" type="fix" issue="MATH-82">
-        FastMath.max(50.0f, -50.0f) => -50.0f; should be +50.0f
-        Fixed FastMath.max(float, float) so it returns correct value.
-      </action>
       <action dev="erans" type="fix" issue="MATH-458">
         Removed "MathException" from the "throws" clause of the "interpolate" method
         of the interpolators interfaces (package "analysis.interpolation").
diff --git a/src/test/java/org/apache/commons/math/util/FastMathTest.java b/src/test/java/org/apache/commons/math/util/FastMathTest.java
index ec3aff1f0..3a60dd8b7 100644
--- a/src/test/java/org/apache/commons/math/util/FastMathTest.java
+++ b/src/test/java/org/apache/commons/math/util/FastMathTest.java
@@ -76,18 +76,18 @@ public class FastMathTest {
 
     @Test
     public void testMinMaxFloat() {
-        float[][] pairs = {
-            { -50.0f, 50.0f },
-            {  Float.POSITIVE_INFINITY, 1.0f },
-            {  Float.NEGATIVE_INFINITY, 1.0f },
-            {  Float.NaN, 1.0f },
-            {  Float.POSITIVE_INFINITY, 0.0f },
-            {  Float.NEGATIVE_INFINITY, 0.0f },
-            {  Float.NaN, 0.0f },
+        double[][] pairs = {
+            { -50.0, 50.0 },
+            {  Float.POSITIVE_INFINITY, 1.0 },
+            {  Float.NEGATIVE_INFINITY, 1.0 },
+            {  Float.NaN, 1.0 },
+            {  Float.POSITIVE_INFINITY, 0.0 },
+            {  Float.NEGATIVE_INFINITY, 0.0 },
+            {  Float.NaN, 0.0 },
             {  Float.NaN, Float.NEGATIVE_INFINITY },
             {  Float.NaN, Float.POSITIVE_INFINITY }
         };
-        for (float[] pair : pairs) {
+        for (double[] pair : pairs) {
             Assert.assertEquals("min(" + pair[0] + ", " + pair[1] + ")",
                                 Math.min(pair[0], pair[1]),
                                 FastMath.min(pair[0], pair[1]),
