diff --git a/src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java b/src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java
index d20eb53c5..6aca50999 100644
--- a/src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java
+++ b/src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java
@@ -40,6 +41,18 @@ public interface PoissonDistribution extends IntegerDistribution {
     double getMean();
 
     /**
+     * Set the mean for the distribution.
+     * The parameter value must be positive; otherwise an
+     * <code>IllegalArgument</code> is thrown.
+     *
+     * @param p the mean
+     * @throws IllegalArgumentException if p &le; 0
+     * @deprecated as of v2.1
+     */
+    @Deprecated
+    void setMean(double p);
+
+    /**
      * Calculates the Poisson distribution function using a normal approximation.
      *
      * @param x the upper bound, inclusive
diff --git a/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java
index 0a8123390..64f792b60 100644
--- a/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java
+++ b/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java
@@ -19,7 +19,7 @@ package org.apache.commons.math.distribution;
 import java.io.Serializable;
 
 import org.apache.commons.math.MathException;
-import org.apache.commons.math.exception.NotStrictlyPositiveException;
+import org.apache.commons.math.MathRuntimeException;
 import org.apache.commons.math.exception.util.LocalizedFormats;
 import org.apache.commons.math.special.Gamma;
 import org.apache.commons.math.util.MathUtils;
@@ -77,7 +77,7 @@ public class PoissonDistributionImpl extends AbstractIntegerDistribution
      * @throws IllegalArgumentException if p &le; 0
      */
     public PoissonDistributionImpl(double p) {
-        this(p, DEFAULT_EPSILON, DEFAULT_MAX_ITERATIONS);
+        this(p, new NormalDistributionImpl());
     }
 
     /**
@@ -90,11 +90,7 @@ public class PoissonDistributionImpl extends AbstractIntegerDistribution
      * @since 2.1
      */
     public PoissonDistributionImpl(double p, double epsilon, int maxIterations) {
-        if (p <= 0) {
-            throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);
-        }
-        mean = p;
-        normal = new NormalDistributionImpl(p, FastMath.sqrt(p));
+        setMean(p);
         this.epsilon = epsilon;
         this.maxIterations = maxIterations;
     }
@@ -107,7 +103,8 @@ public class PoissonDistributionImpl extends AbstractIntegerDistribution
      * @since 2.1
      */
     public PoissonDistributionImpl(double p, double epsilon) {
-        this(p, epsilon, DEFAULT_MAX_ITERATIONS);
+        setMean(p);
+        this.epsilon = epsilon;
     }
 
     /**
@@ -118,7 +115,26 @@ public class PoissonDistributionImpl extends AbstractIntegerDistribution
      * @since 2.1
      */
     public PoissonDistributionImpl(double p, int maxIterations) {
-        this(p, DEFAULT_EPSILON, maxIterations);
+        setMean(p);
+        this.maxIterations = maxIterations;
+    }
+
+
+    /**
+     * Create a new Poisson distribution with the given the mean. The mean value
+     * must be positive; otherwise an <code>IllegalArgument</code> is thrown.
+     *
+     * @param p the Poisson mean
+     * @param z a normal distribution used to compute normal approximations.
+     * @throws IllegalArgumentException if p &le; 0
+     * @since 1.2
+     * @deprecated as of 2.1 (to avoid possibly inconsistent state, the
+     * "NormalDistribution" will be instantiated internally)
+     */
+    @Deprecated
+    public PoissonDistributionImpl(double p, NormalDistribution z) {
+        super();
+        setNormalAndMeanInternal(z, p);
     }
 
     /**
@@ -131,6 +147,38 @@ public class PoissonDistributionImpl extends AbstractIntegerDistribution
     }
 
     /**
+     * Set the Poisson mean for the distribution. The mean value must be
+     * positive; otherwise an <code>IllegalArgument</code> is thrown.
+     *
+     * @param p the Poisson mean value
+     * @throws IllegalArgumentException if p &le; 0
+     * @deprecated as of 2.1 (class will become immutable in 3.0)
+     */
+    @Deprecated
+    public void setMean(double p) {
+        setNormalAndMeanInternal(normal, p);
+    }
+    /**
+     * Set the Poisson mean for the distribution. The mean value must be
+     * positive; otherwise an <code>IllegalArgument</code> is thrown.
+     *
+     * @param z the new distribution
+     * @param p the Poisson mean value
+     * @throws IllegalArgumentException if p &le; 0
+     */
+    private void setNormalAndMeanInternal(NormalDistribution z,
+                                          double p) {
+        if (p <= 0) {
+            throw MathRuntimeException.createIllegalArgumentException(
+                    LocalizedFormats.NOT_POSITIVE_POISSON_MEAN, p);
+        }
+        mean = p;
+        normal = z;
+        normal.setMean(p);
+        normal.setStandardDeviation(FastMath.sqrt(p));
+    }
+
+    /**
      * The probability mass function P(X = x) for a Poisson distribution.
      *
      * @param x the value at which the probability density function is
@@ -238,4 +286,18 @@ public class PoissonDistributionImpl extends AbstractIntegerDistribution
     protected int getDomainUpperBound(double p) {
         return Integer.MAX_VALUE;
     }
+
+    /**
+     * Modify the normal distribution used to compute normal approximations. The
+     * caller is responsible for insuring the normal distribution has the proper
+     * parameter settings.
+     *
+     * @param value the new distribution
+     * @since 1.2
+     * @deprecated as of 2.1 (class will become immutable in 3.0)
+     */
+    @Deprecated
+    public void setNormal(NormalDistribution value) {
+        setNormalAndMeanInternal(value, mean);
+    }
 }
diff --git a/src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java b/src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java
index a02d1bb19..06f455e1b 100644
--- a/src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java
+++ b/src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java
@@ -18,7 +18,6 @@ package org.apache.commons.math.distribution;
 
 import org.apache.commons.math.MathException;
 import org.apache.commons.math.util.FastMath;
-import org.apache.commons.math.exception.NotStrictlyPositiveException;
 
 /**
  * <code>PoissonDistributionTest</code>
@@ -117,8 +116,7 @@ public class PoissonDistributionTest extends IntegerDistributionAbstractTest {
         double result = dist.normalApproximateProbability(110)
                 - dist.normalApproximateProbability(89);
         assertEquals(0.706281887248, result, 1E-10);
-
-        dist = new PoissonDistributionImpl(10000);
+        dist.setMean(10000);
         result = dist.normalApproximateProbability(10200)
         - dist.normalApproximateProbability(9899);
         assertEquals(0.820070051552, result, 1E-10);
@@ -135,22 +133,22 @@ public class PoissonDistributionTest extends IntegerDistributionAbstractTest {
     }
 
     public void testMean() {
-        PoissonDistribution dist;
+        PoissonDistribution dist = new PoissonDistributionImpl(DEFAULT_TEST_POISSON_PARAMETER);
         try {
-            dist = new PoissonDistributionImpl(-1);
-            fail("negative mean: NotStrictlyPositiveException expected");
-        } catch(NotStrictlyPositiveException ex) {
-            // Expected.
+            dist.setMean(-1);
+            fail("negative mean.  IllegalArgumentException expected");
+        } catch(IllegalArgumentException ex) {
         }
 
-        dist = new PoissonDistributionImpl(10.0);
+        dist.setMean(10.0);
         assertEquals(10.0, dist.getMean(), 0.0);
     }
 
     public void testLargeMeanCumulativeProbability() {
+        PoissonDistribution dist = new PoissonDistributionImpl(1.0);
         double mean = 1.0;
         while (mean <= 10000000.0) {
-            PoissonDistribution dist = new PoissonDistributionImpl(mean);
+            dist.setMean(mean);
 
             double x = mean * 2.0;
             double dx = x / 10.0;
@@ -179,13 +177,13 @@ public class PoissonDistributionTest extends IntegerDistributionAbstractTest {
      * JIRA: MATH-282
      */
     public void testCumulativeProbabilitySpecial() throws Exception {
-        PoissonDistribution dist;
-        dist = new PoissonDistributionImpl(9120);
+        PoissonDistribution dist = new PoissonDistributionImpl(1.0);
+        dist.setMean(9120);
         checkProbability(dist, 9075);
         checkProbability(dist, 9102);
-        dist = new PoissonDistributionImpl(5058);
+        dist.setMean(5058);
         checkProbability(dist, 5044);
-        dist = new PoissonDistributionImpl(6986);
+        dist.setMean(6986);
         checkProbability(dist, 6950);
     }
 
@@ -198,9 +196,10 @@ public class PoissonDistributionTest extends IntegerDistributionAbstractTest {
     }
 
     public void testLargeMeanInverseCumulativeProbability() throws Exception {
+        PoissonDistribution dist = new PoissonDistributionImpl(1.0);
         double mean = 1.0;
         while (mean <= 100000.0) { // Extended test value: 1E7.  Reduced to limit run time.
-            PoissonDistribution dist = new PoissonDistributionImpl(mean);
+            dist.setMean(mean);
             double p = 0.1;
             double dp = p;
             while (p < .99) {
