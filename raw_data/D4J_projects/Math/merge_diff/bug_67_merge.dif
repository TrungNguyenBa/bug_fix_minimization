diff --git a/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java b/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java
index 26fd5e0ac..10bc9e66c 100644
--- a/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java
@@ -89,12 +89,12 @@ public class MultiStartUnivariateRealOptimizer implements UnivariateRealOptimize
 
     /** {@inheritDoc} */
     public double getFunctionValue() {
-        return optimaValues[0];
+        return optimizer.getFunctionValue();
     }
 
     /** {@inheritDoc} */
     public double getResult() {
-        return optima[0];
+        return optimizer.getResult();
     }
 
     /** {@inheritDoc} */
diff --git a/src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java b/src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java
index 07d8c4f98..bf406ab6b 100644
--- a/src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java
+++ b/src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java
@@ -36,7 +36,7 @@ public interface UnivariateRealOptimizer extends ConvergingAlgorithm {
     void setMaxEvaluations(int maxEvaluations);
 
     /** Get the maximal number of functions evaluations.
-     * @return the maximal number of functions evaluations.
+     * @return maximal number of functions evaluations
      */
     int getMaxEvaluations();
 
@@ -46,7 +46,7 @@ public interface UnivariateRealOptimizer extends ConvergingAlgorithm {
      * {@link #optimize(UnivariateRealFunction, GoalType, double, double) optimize}
      * method. It is 0 if the method has not been called yet.
      * </p>
-     * @return the number of evaluations of the objective function.
+     * @return number of evaluations of the objective function
      */
     int getEvaluations();
 
@@ -57,16 +57,16 @@ public interface UnivariateRealOptimizer extends ConvergingAlgorithm {
      * </p>
      * @param f the function to optimize.
      * @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}
-     * or {@link GoalType#MINIMIZE}.
+     * or {@link GoalType#MINIMIZE}
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
-     * @return a value where the function is optimum.
+     * @return a value where the function is optimum
      * @throws ConvergenceException if the maximum iteration count is exceeded
      * or the optimizer detects convergence problems otherwise.
      * @throws FunctionEvaluationException if an error occurs evaluating the
-     * function.
+     * function
      * @throws IllegalArgumentException if min > max or the endpoints do not
-     * satisfy the requirements specified by the optimizer.
+     * satisfy the requirements specified by the optimizer
      */
     double optimize(UnivariateRealFunction f, GoalType goalType,
                     double min, double max)
@@ -79,17 +79,17 @@ public interface UnivariateRealOptimizer extends ConvergingAlgorithm {
      * </p>
      * @param f the function to optimize.
      * @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}
-     * or {@link GoalType#MINIMIZE}.
+     * or {@link GoalType#MINIMIZE}
      * @param min the lower bound for the interval.
      * @param max the upper bound for the interval.
-     * @param startValue the start value to use.
-     * @return a value where the function is optimum.
+     * @param startValue the start value to use
+     * @return a value where the function is optimum
      * @throws ConvergenceException if the maximum iteration count is exceeded
      * or the optimizer detects convergence problems otherwise.
      * @throws FunctionEvaluationException if an error occurs evaluating the
-     * function.
+     * function
      * @throws IllegalArgumentException if min > max or the arguments do not
-     * satisfy the requirements specified by the optimizer.
+     * satisfy the requirements specified by the optimizer
      */
     double optimize(UnivariateRealFunction f, GoalType goalType,
                     double min, double max, double startValue)
@@ -98,7 +98,7 @@ public interface UnivariateRealOptimizer extends ConvergingAlgorithm {
     /**
      * Get the result of the last run of the optimizer.
      *
-     * @return the optimum.
+     * @return the last result.
      * @throws IllegalStateException if there is no result available, either
      * because no result was yet computed or the last attempt failed.
      */
@@ -107,7 +107,7 @@ public interface UnivariateRealOptimizer extends ConvergingAlgorithm {
     /**
      * Get the result of the last run of the optimizer.
      *
-     * @return the value of the function at the optimum.
+     * @return the value of the function at the last result.
      * @throws IllegalStateException if there is no result available, either
      * because no result was yet computed or the last attempt failed.
      */
diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
index 07be4a457..67c460e38 100644
--- a/src/site/xdoc/changes.xml
+++ b/src/site/xdoc/changes.xml
@@ -52,9 +52,6 @@ The <action> type attribute can be add,update,fix,remove.
     If the output is not quite correct, check for invisible trailing spaces!
      -->
     <release version="2.2" date="TBD" description="TBD">
-      <action dev="erans" type="fix" issue="MATH-393">
-        Fixed inconsistency in return values in "MultiStartUnivariateRealOptimizer".
-      </action>
       <action dev="erans" type="update" issue="MATH-389">
         Refactoring of some classes in package "optimization.general" to remove
         code duplication and to allow the implementation of optimization algorithms
diff --git a/src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java b/src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java
index e066703b6..22a5293fe 100644
--- a/src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java
+++ b/src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java
@@ -83,8 +83,8 @@ public class MultiStartUnivariateRealOptimizerTest {
         }
 
         assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);
-        assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);
-        assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);
+        assertEquals(-0.27194301946870, minimizer.getResult(), 1.0e-13);
+        assertEquals(-0.04433426940878, minimizer.getFunctionValue(), 1.0e-13);
 
         double[] optima = minimizer.getOptima();
         double[] optimaValues = minimizer.getOptimaValues();
