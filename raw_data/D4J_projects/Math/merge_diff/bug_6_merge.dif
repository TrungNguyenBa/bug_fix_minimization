diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index 689fa6868..43c776634 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -55,9 +55,6 @@ This is a minor release: It combines bug fixes and new features.
   Changes to existing features were made in a backwards-compatible
   way such as to allow drop-in replacement of the v3.1[.1] JAR file.
 ">
-      <action dev="erans" type="fix" issue="MATH-949">
-        Increment iteration counter in optimization algorithms.
-      </action>
       <action dev="luc" type="add" issue="MATH-811" >
         Added a way to trigger only increasing or decreasing events in ODE integration.
       </action>
diff --git a/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java b/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java
index 927e17f5b..75c9757ae 100644
--- a/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java
@@ -48,7 +48,7 @@ public abstract class BaseOptimizer<PAIR> {
         this.checker = checker;
 
         evaluations = new Incrementor(0, new MaxEvalCallback());
-        iterations = new Incrementor(Integer.MAX_VALUE, new MaxIterCallback());
+        iterations = new Incrementor(0, new MaxIterCallback());
     }
 
     /**
diff --git a/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java b/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java
index bd12b54fc..e010781af 100644
--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java
@@ -211,15 +211,16 @@ public class NonLinearConjugateGradientOptimizer
         }
 
         PointValuePair current = null;
+        int iter = 0;
         int maxEval = getMaxEvaluations();
         while (true) {
-            incrementIterationCount();
+            ++iter;
 
             final double objective = computeObjectiveValue(point);
             PointValuePair previous = current;
             current = new PointValuePair(point, objective);
             if (previous != null) {
-                if (checker.converged(getIterations(), previous, current)) {
+                if (checker.converged(iter, previous, current)) {
                     // We have found an optimum.
                     return current;
                 }
@@ -273,7 +274,7 @@ public class NonLinearConjugateGradientOptimizer
             steepestDescent = newSteepestDescent;
 
             // Compute conjugate search direction.
-            if (getIterations() % n == 0 ||
+            if (iter % n == 0 ||
                 beta < 0) {
                 // Break conjugation: reset search direction.
                 searchDirection = steepestDescent.clone();
diff --git a/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java
index fed67b119..c7216f9e0 100644
--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java
@@ -385,8 +385,6 @@ public class CMAESOptimizer
 
         generationLoop:
         for (iterations = 1; iterations <= maxIterations; iterations++) {
-            incrementIterationCount();
-
             // Generate and evaluate lambda offspring
             final RealMatrix arz = randn1(dimension, lambda);
             final RealMatrix arx = zeros(dimension, lambda);
diff --git a/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java b/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java
index afe8d2f5d..9572820b2 100644
--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java
@@ -188,8 +188,9 @@ public class PowellOptimizer
         double[] x = guess;
         double fVal = computeObjectiveValue(x);
         double[] x1 = x.clone();
+        int iter = 0;
         while (true) {
-            incrementIterationCount();
+            ++iter;
 
             double fX = fVal;
             double fX2 = 0;
@@ -223,7 +224,7 @@ public class PowellOptimizer
             final PointValuePair current = new PointValuePair(x, fVal);
             if (!stop) { // User-defined stopping criteria.
                 if (checker != null) {
-                    stop = checker.converged(getIterations(), previous, current);
+                    stop = checker.converged(iter, previous, current);
                 }
             }
             if (stop) {
diff --git a/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java b/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java
index 0dd644e22..3d16aa8a7 100644
--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java
@@ -155,7 +155,7 @@ public class SimplexOptimizer extends MultivariateOptimizer {
         int iteration = 0;
         final ConvergenceChecker<PointValuePair> checker = getConvergenceChecker();
         while (true) {
-            if (getIterations() > 0) {
+            if (iteration > 0) {
                 boolean converged = true;
                 for (int i = 0; i < simplex.getSize(); i++) {
                     PointValuePair prev = previous[i];
@@ -171,8 +171,7 @@ public class SimplexOptimizer extends MultivariateOptimizer {
             // We still need to search.
             previous = simplex.getPoints();
             simplex.iterate(evalFunc, comparator);
-
-            incrementIterationCount();
+            ++iteration;
         }
     }
 
diff --git a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java
index 844ed2208..a2834f227 100644
--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java
@@ -103,8 +103,9 @@ public class GaussNewtonOptimizer extends AbstractLeastSquaresOptimizer {
 
         // iterate until convergence is reached
         PointVectorValuePair current = null;
+        int iter = 0;
         for (boolean converged = false; !converged;) {
-            incrementIterationCount();
+            ++iter;
 
             // evaluate the objective function and its jacobian
             PointVectorValuePair previous = current;
@@ -156,7 +157,7 @@ public class GaussNewtonOptimizer extends AbstractLeastSquaresOptimizer {
 
             // Check convergence.
             if (previous != null) {
-                converged = checker.converged(getIterations(), previous, current);
+                converged = checker.converged(iter, previous, current);
                 if (converged) {
                     setCost(computeCost(currentResiduals));
                     return current;
diff --git a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java
index 4016131e1..ca2d1381b 100644
--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java
@@ -319,10 +319,10 @@ public class LevenbergMarquardtOptimizer
         // Outer loop.
         lmPar = 0;
         boolean firstIteration = true;
+        int iter = 0;
         final ConvergenceChecker<PointVectorValuePair> checker = getConvergenceChecker();
         while (true) {
-            incrementIterationCount();
-
+            ++iter;
             final PointVectorValuePair previous = current;
 
             // QR decomposition of the jacobian matrix
@@ -486,7 +486,7 @@ public class LevenbergMarquardtOptimizer
                     // tests for convergence.
                     if (checker != null) {
                         // we use the vectorial convergence checker
-                        if (checker.converged(getIterations(), previous, current)) {
+                        if (checker.converged(iter, previous, current)) {
                             setCost(currentCost);
                             return current;
                         }
diff --git a/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java b/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java
index aec59bcf4..6be5da4e3 100644
--- a/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java
+++ b/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java
@@ -136,9 +136,6 @@ public class NonLinearConjugateGradientOptimizerTest {
                                  new InitialGuess(new double[] { 0 }));
         Assert.assertEquals(1.5, optimum.getPoint()[0], 1.0e-10);
         Assert.assertEquals(0.0, optimum.getValue(), 1.0e-10);
-
-        // Check that the number of iterations is updated (MATH-949).
-        Assert.assertTrue(optimizer.getIterations() > 0);
     }
 
     @Test
diff --git a/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java b/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
index 0b4cd6a97..f7a548f08 100644
--- a/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
+++ b/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
@@ -510,8 +510,6 @@ public class CMAESOptimizerTest {
         for (int i = 0; i < dim; i++) {
             Assert.assertEquals(expected.getPoint()[i], result.getPoint()[i], pointTol);
         }
-
-        Assert.assertTrue(optim.getIterations() > 0);
     }
 
     private static double[] point(int n, double value) {
diff --git a/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizerTest.java b/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizerTest.java
index 708f77b94..c76c7c944 100644
--- a/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizerTest.java
+++ b/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizerTest.java
@@ -262,7 +262,5 @@ public class PowellOptimizerTest {
             Assert.assertEquals("found[" + i + "]=" + point[i] + " value=" + result.getValue(),
                                 optimum[i], point[i], pointTol);
         }
-
-        Assert.assertTrue(optim.getIterations() > 0);
     }
 }
diff --git a/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java b/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java
index 931c226da..c9e9009c6 100644
--- a/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java
+++ b/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java
@@ -61,9 +61,6 @@ public class SimplexOptimizerMultiDirectionalTest {
         Assert.assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 8e-13);
         Assert.assertTrue(optimizer.getEvaluations() > 120);
         Assert.assertTrue(optimizer.getEvaluations() < 150);
-
-        // Check that the number of iterations is updated (MATH-949).
-        Assert.assertTrue(optimizer.getIterations() > 0);
     }
 
     @Test
@@ -82,9 +79,6 @@ public class SimplexOptimizerMultiDirectionalTest {
         Assert.assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 2e-12);
         Assert.assertTrue(optimizer.getEvaluations() > 120);
         Assert.assertTrue(optimizer.getEvaluations() < 150);
-
-        // Check that the number of iterations is updated (MATH-949).
-        Assert.assertTrue(optimizer.getIterations() > 0);
     }
 
     @Test
@@ -103,9 +97,6 @@ public class SimplexOptimizerMultiDirectionalTest {
         Assert.assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 2e-14);
         Assert.assertTrue(optimizer.getEvaluations() > 120);
         Assert.assertTrue(optimizer.getEvaluations() < 150);
-
-        // Check that the number of iterations is updated (MATH-949).
-        Assert.assertTrue(optimizer.getIterations() > 0);
     }
 
     @Test
@@ -124,9 +115,6 @@ public class SimplexOptimizerMultiDirectionalTest {
         Assert.assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 2e-12);
         Assert.assertTrue(optimizer.getEvaluations() > 180);
         Assert.assertTrue(optimizer.getEvaluations() < 220);
-
-        // Check that the number of iterations is updated (MATH-949).
-        Assert.assertTrue(optimizer.getIterations() > 0);
     }
 
     @Test
diff --git a/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java b/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java
index d51025d7e..fdc187a62 100644
--- a/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java
+++ b/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java
@@ -66,9 +66,6 @@ public class SimplexOptimizerNelderMeadTest {
         Assert.assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 6e-12);
         Assert.assertTrue(optimizer.getEvaluations() > 60);
         Assert.assertTrue(optimizer.getEvaluations() < 90);
-
-        // Check that the number of iterations is updated (MATH-949).
-        Assert.assertTrue(optimizer.getIterations() > 0);
     }
 
     @Test
@@ -87,9 +84,6 @@ public class SimplexOptimizerNelderMeadTest {
         Assert.assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 1e-11);
         Assert.assertTrue(optimizer.getEvaluations() > 60);
         Assert.assertTrue(optimizer.getEvaluations() < 90);
-
-        // Check that the number of iterations is updated (MATH-949).
-        Assert.assertTrue(optimizer.getIterations() > 0);
     }
 
     @Test
@@ -108,9 +102,6 @@ public class SimplexOptimizerNelderMeadTest {
         Assert.assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 3e-12);
         Assert.assertTrue(optimizer.getEvaluations() > 60);
         Assert.assertTrue(optimizer.getEvaluations() < 90);
-
-        // Check that the number of iterations is updated (MATH-949).
-        Assert.assertTrue(optimizer.getIterations() > 0);
     }
 
     @Test
@@ -129,9 +120,6 @@ public class SimplexOptimizerNelderMeadTest {
         Assert.assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 7e-12);
         Assert.assertTrue(optimizer.getEvaluations() > 60);
         Assert.assertTrue(optimizer.getEvaluations() < 90);
-
-        // Check that the number of iterations is updated (MATH-949).
-        Assert.assertTrue(optimizer.getIterations() > 0);
     }
 
     @Test
diff --git a/src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java b/src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java
index 942b472f2..cc86ae0f4 100644
--- a/src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java
+++ b/src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizerAbstractTest.java
@@ -106,32 +106,6 @@ public abstract class AbstractLeastSquaresOptimizerAbstractTest {
     public abstract AbstractLeastSquaresOptimizer createOptimizer();
 
     @Test
-    public void testGetIterations() {
-        AbstractLeastSquaresOptimizer optim = createOptimizer();
-        optim.optimize(new MaxEval(100), new Target(new double[] { 1 }),
-                       new Weight(new double[] { 1 }),
-                       new InitialGuess(new double[] { 3 }),
-                       new ModelFunction(new MultivariateVectorFunction() {
-                               @Override
-                               public double[] value(double[] point) {
-                                   return new double[] {
-                                       FastMath.pow(point[0], 4)
-                                   };
-                               }
-                           }),
-                       new ModelFunctionJacobian(new MultivariateMatrixFunction() {
-                               @Override
-                               public double[][] value(double[] point) {
-                                   return new double[][] {
-                                       { 0.25 * FastMath.pow(point[0], 3) }
-                                   };
-                               }
-                           }));
-
-        Assert.assertTrue(optim.getIterations() > 0);
-    }
-
-    @Test
     public void testTrivial() {
         LinearProblem problem
             = new LinearProblem(new double[][] { { 2 } }, new double[] { 3 });
