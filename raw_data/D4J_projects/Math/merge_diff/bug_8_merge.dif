diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index c1c6e5d9b..45e409db5 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -55,9 +55,6 @@ This is a minor release: It combines bug fixes and new features.
   Changes to existing features were made in a backwards-compatible
   way such as to allow drop-in replacement of the v3.1[.1] JAR file.
 ">
-      <action dev="luc" type="fix" issue="MATH-942" due-to="Piotr Wydrych" >
-        Fixed creation of generic array.
-      </action>
       <action dev="luc" type="add" issue="MATH-914" >
         Check bounds in multi-start vector optimizers.
       </action>
diff --git a/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java
index 879eb2a29..8c08dbe36 100644
--- a/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java
@@ -16,9 +16,9 @@
  */
 package org.apache.commons.math3.distribution;
 
+import java.lang.reflect.Array;
 import java.util.ArrayList;
 import java.util.List;
-
 import org.apache.commons.math3.exception.MathArithmeticException;
 import org.apache.commons.math3.exception.MathIllegalArgumentException;
 import org.apache.commons.math3.exception.NotPositiveException;
@@ -178,13 +178,13 @@ public class DiscreteDistribution<T> {
      * @throws NotStrictlyPositiveException if {@code sampleSize} is not
      * positive.
      */
-    public Object[] sample(int sampleSize) throws NotStrictlyPositiveException {
+    public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
         if (sampleSize <= 0) {
             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                     sampleSize);
         }
-
-        final Object[] out = new Object[sampleSize];
+        @SuppressWarnings("unchecked")
+        final T[]out = (T[]) Array.newInstance(singletons.get(0).getClass(), sampleSize);
 
         for (int i = 0; i < sampleSize; i++) {
             out[i] = sample();
diff --git a/src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java b/src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java
index cd639f6a8..1a7ef5302 100644
--- a/src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java
+++ b/src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java
@@ -16,15 +16,11 @@
  */
 package org.apache.commons.math3.distribution;
 
-import java.util.ArrayList;
-import java.util.List;
-
 import org.apache.commons.math3.exception.DimensionMismatchException;
 import org.apache.commons.math3.exception.MathArithmeticException;
 import org.apache.commons.math3.exception.MathIllegalArgumentException;
 import org.apache.commons.math3.exception.NotPositiveException;
 import org.apache.commons.math3.util.FastMath;
-import org.apache.commons.math3.util.Pair;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -203,13 +199,4 @@ public class DiscreteRealDistributionTest {
         Assert.assertEquals(testDistribution.getNumericalVariance(),
                 sumOfSquares / n - FastMath.pow(sum / n, 2), 1e-2);
     }
-
-    @Test
-    public void testIssue942() {
-        List<Pair<Object,Double>> list = new ArrayList<Pair<Object, Double>>();
-        list.add(new Pair<Object, Double>(new Object() {}, new Double(0)));
-        list.add(new Pair<Object, Double>(new Object() {}, new Double(1)));
-        Assert.assertEquals(1, new DiscreteDistribution<Object>(list).sample(1).length);
-    }
-
 }
