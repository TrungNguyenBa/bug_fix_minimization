diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java
index 57f64a974..01a9ee513 100644
--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java
+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java
@@ -26,7 +26,7 @@ import org.apache.commons.math.MaxIterationsExceededException;
  * <p>
  * The function should be continuous but not necessarily smooth.</p>
  *  
- * @version $Revision:670469 $ $Date:2008-06-23 10:01:38 +0200 (lun., 23 juin 2008) $
+ * @version $Revision$ $Date$
  */
 public class BrentSolver extends UnivariateRealSolverImpl {
     
@@ -128,41 +128,20 @@ public class BrentSolver extends UnivariateRealSolverImpl {
         clearResult();
         verifyInterval(min, max);
         
-        double ret = Double.NaN;
-        
         double yMin = f.value(min);
         double yMax = f.value(max);
         
         // Verify bracketing
-        double sign = yMin * yMax;
-        if (sign > 0) {
-            // check if either value is close to a zero
-            if (Math.abs(yMin) <= functionValueAccuracy) {
-                setResult(min, 0);
-                ret = min;
-            } else if (Math.abs(yMax) <= functionValueAccuracy) {
-                setResult(max, 0);
-                ret = max;
-            } else {
-                // neither value is close to zero and min and max do not bracket root.
+        if (yMin * yMax >= 0) {
             throw new IllegalArgumentException
             ("Function values at endpoints do not have different signs." +
                     "  Endpoints: [" + min + "," + max + "]" + 
                     "  Values: [" + yMin + "," + yMax + "]");       
         }
-        } else if (sign < 0){
+
         // solve using only the first endpoint as initial guess
-            ret = solve(min, yMin, max, yMax, min, yMin);
-        } else {
-            // either min or max is a root
-            if (yMin == 0.0) {
-                ret = min;
-            } else {
-                ret = max;
-            }
-        }
+        return solve(min, yMin, max, yMax, min, yMin);
 
-        return ret;
     }
         
     /**
diff --git a/src/java/org/apache/commons/math/transform/FastCosineTransformer.java b/src/java/org/apache/commons/math/transform/FastCosineTransformer.java
index b14afd099..a9e3f63f1 100644
--- a/src/java/org/apache/commons/math/transform/FastCosineTransformer.java
+++ b/src/java/org/apache/commons/math/transform/FastCosineTransformer.java
@@ -34,7 +34,7 @@ import org.apache.commons.math.MathException;
  * power of 2 plus one. Users should especially pay attention to the
  * function transformation on how this affects the sampling.</p>
  *
- * @version $Revision:670469 $ $Date:2008-06-23 10:01:38 +0200 (lun., 23 juin 2008) $
+ * @version $Revision$ $Date$
  * @since 1.2
  */
 public class FastCosineTransformer implements Serializable {
@@ -53,7 +53,7 @@ public class FastCosineTransformer implements Serializable {
      * Transform the given real data set.
      * <p>
      * The formula is $ F_n = (1/2) [f_0 + (-1)^n f_N] +
-     *                        \Sigma_{k=1}^{N-1} f_k \cos(\pi nk/N) $
+     *                        \Sigma_{k=0}^{N-1} f_k \cos(\pi nk/N) $
      * </p>
      * 
      * @param f the real data array to be transformed
@@ -71,7 +71,7 @@ public class FastCosineTransformer implements Serializable {
      * Transform the given real function, sampled on the given interval.
      * <p>
      * The formula is $ F_n = (1/2) [f_0 + (-1)^n f_N] +
-     *                        \Sigma_{k=1}^{N-1} f_k \cos(\pi nk/N) $
+     *                        \Sigma_{k=0}^{N-1} f_k \cos(\pi nk/N) $
      * </p>
      * 
      * @param f the function to be sampled and transformed
@@ -94,7 +94,7 @@ public class FastCosineTransformer implements Serializable {
      * Transform the given real data set.
      * <p>
      * The formula is $ F_n = \sqrt{1/2N} [f_0 + (-1)^n f_N] +
-     *                        \sqrt{2/N} \Sigma_{k=1}^{N-1} f_k \cos(\pi nk/N) $
+     *                        \sqrt{2/N} \Sigma_{k=0}^{N-1} f_k \cos(\pi nk/N) $
      * </p>
      * 
      * @param f the real data array to be transformed
@@ -113,7 +113,7 @@ public class FastCosineTransformer implements Serializable {
      * Transform the given real function, sampled on the given interval.
      * <p>
      * The formula is $ F_n = \sqrt{1/2N} [f_0 + (-1)^n f_N] +
-     *                        \sqrt{2/N} \Sigma_{k=1}^{N-1} f_k \cos(\pi nk/N) $
+     *                        \sqrt{2/N} \Sigma_{k=0}^{N-1} f_k \cos(\pi nk/N) $
      *
      * </p>
      * 
@@ -138,7 +138,7 @@ public class FastCosineTransformer implements Serializable {
      * Inversely transform the given real data set.
      * <p>
      * The formula is $ f_k = (1/N) [F_0 + (-1)^k F_N] +
-     *                        (2/N) \Sigma_{n=1}^{N-1} F_n \cos(\pi nk/N) $
+     *                        (2/N) \Sigma_{n=0}^{N-1} F_n \cos(\pi nk/N) $
      * </p>
      * 
      * @param f the real data array to be inversely transformed
@@ -157,7 +157,7 @@ public class FastCosineTransformer implements Serializable {
      * Inversely transform the given real function, sampled on the given interval.
      * <p>
      * The formula is $ f_k = (1/N) [F_0 + (-1)^k F_N] +
-     *                        (2/N) \Sigma_{n=1}^{N-1} F_n \cos(\pi nk/N) $
+     *                        (2/N) \Sigma_{n=0}^{N-1} F_n \cos(\pi nk/N) $
      * </p>
      * 
      * @param f the function to be sampled and inversely transformed
@@ -181,7 +181,7 @@ public class FastCosineTransformer implements Serializable {
      * Inversely transform the given real data set.
      * <p>
      * The formula is $ f_k = \sqrt{1/2N} [F_0 + (-1)^k F_N] +
-     *                        \sqrt{2/N} \Sigma_{n=1}^{N-1} F_n \cos(\pi nk/N) $
+     *                        \sqrt{2/N} \Sigma_{n=0}^{N-1} F_n \cos(\pi nk/N) $
      * </p>
      * 
      * @param f the real data array to be inversely transformed
@@ -199,7 +199,7 @@ public class FastCosineTransformer implements Serializable {
      * Inversely transform the given real function, sampled on the given interval.
      * <p>
      * The formula is $ f_k = \sqrt{1/2N} [F_0 + (-1)^k F_N] +
-     *                        \sqrt{2/N} \Sigma_{n=1}^{N-1} F_n \cos(\pi nk/N) $
+     *                        \sqrt{2/N} \Sigma_{n=0}^{N-1} F_n \cos(\pi nk/N) $
      * </p>
      * 
      * @param f the function to be sampled and inversely transformed
diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
index d765cd86b..e0ba4274c 100644
--- a/src/site/xdoc/changes.xml
+++ b/src/site/xdoc/changes.xml
@@ -105,9 +105,6 @@ The <action> type attribute can be add,update,fix,remove.
       </action>
     </release>
     <release version="1.3-SNAPSHOT" date="TBD" description="TBD">
-      <action dev="luc" type="fix" issue="MATH-205" due-to="Roman Werpachowski">
-        Fixed formula in fast cosine transformer javadoc comments.
-      </action>
       <action dev="brentworden" type="fix" issue="MATH-193" due-to="Michael Heuer and Sebb">
         Javadoc and style fixes.
       </action>
@@ -126,9 +123,6 @@ The <action> type attribute can be add,update,fix,remove.
       <action dev="brentworden" type="fix" issue="MATH-201" due-to="Peter Wyngaard">
         Fixed truncation error in t-test classes for large t values.
       </action>
-      <action dev="brentworden" type="fix" issue="MATH-204" due-to="Mick">
-        Added root checks for the endpoints.
-      </action>
     </release>
     <release version="1.2" date="2008-02-24"
     description="This release combines bug fixes and new features. Most notable
