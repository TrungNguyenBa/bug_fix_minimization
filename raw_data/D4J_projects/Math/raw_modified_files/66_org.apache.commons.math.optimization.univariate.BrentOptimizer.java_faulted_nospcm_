package org.apache.commons.math.optimization.univariate;
import org.apache.commons.math.FunctionEvaluationException;
import org.apache.commons.math.MaxIterationsExceededException;
import org.apache.commons.math.exception.NotStrictlyPositiveException;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.optimization.GoalType;
public class BrentOptimizer extends AbstractUnivariateRealOptimizer {
private static final double GOLDEN_SECTION = 0.5 * (3 - Math.sqrt(5));
public BrentOptimizer() {
super(100, 1E-10);
}
public double optimize(final UnivariateRealFunction f, final GoalType goalType,
final double min, final double max, final double startValue)
throws MaxIterationsExceededException, FunctionEvaluationException {
clearResult();
return localMin(f, goalType, min, startValue, max,
getRelativeAccuracy(), getAbsoluteAccuracy());
}
public double optimize(final UnivariateRealFunction f, final GoalType goalType,
final double min, final double max)
throws MaxIterationsExceededException, FunctionEvaluationException {
return optimize(f, goalType, min, max, min + GOLDEN_SECTION * (max - min));
}
private double localMin(UnivariateRealFunction f,
GoalType goalType,
double lo, double mid, double hi,
double eps, double t)
throws MaxIterationsExceededException, FunctionEvaluationException {
if (eps <= 0) {
throw new NotStrictlyPositiveException(eps);
}
if (t <= 0) {
throw new NotStrictlyPositiveException(t);
}
double a, b;
if (lo < hi) {
a = lo;
b = hi;
} else {
a = hi;
b = lo;
}
double x = mid;
double v = x;
double w = x;
double e = 0;
double fx = computeObjectiveValue(f, x);
if (goalType == GoalType.MAXIMIZE) {
fx = -fx;
}
double fv = fx;
double fw = fx;
int count = 0;
while (count < maximalIterationCount) {
double m = 0.5 * (a + b);
final double tol1 = eps * Math.abs(x) + t;
final double tol2 = 2 * tol1;
if (Math.abs(x - m) > tol2 - 0.5 * (b - a)) {
double p = 0;
double q = 0;
double r = 0;
double d = 0;
double u = 0;
if (Math.abs(e) > tol1) {
r = (x - w) * (fx - fv);
q = (x - v) * (fx - fw);
p = (x - v) * q - (x - w) * r;
q = 2 * (q - r);
if (q > 0) {
p = -p;
} else {
q = -q;
}
r = e;
e = d;
if (p > q * (a - x)
&& p < q * (b - x)
&& Math.abs(p) < Math.abs(0.5 * q * r)) {
d = p / q;
u = x + d;
if (u - a < tol2
|| b - u < tol2) {
if (x <= m) {
d = tol1;
} else {
d = -tol1;
}
}
} else {
if (x < m) {
e = b - x;
} else {
e = a - x;
}
d = GOLDEN_SECTION * e;
}
} else {
if (x < m) {
e = b - x;
} else {
e = a - x;
}
d = GOLDEN_SECTION * e;
}
if (Math.abs(d) < tol1) {
if (d >= 0) {
u = x + tol1;
} else {
u = x - tol1;
}
} else {
u = x + d;
}
double fu = computeObjectiveValue(f, u);
if (goalType == GoalType.MAXIMIZE) {
fu = -fu;
}
if (fu <= fx) {
if (u < x) {
b = x;
} else {
a = x;
}
v = w;
fv = fw;
w = x;
fw = fx;
x = u;
fx = fu;
} else {
if (u < x) {
a = u;
} else {
b = u;
}
if (fu <= fw
|| w == x) {
v = w;
fv = fw;
w = u;
fw = fu;
} else if (fu <= fv
|| v == x
|| v == w) {
v = u;
fv = fu;
}
}
} else {
setResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);
return x;
}
++count;
}
throw new MaxIterationsExceededException(maximalIterationCount);
}
protected double doOptimize() {
throw new UnsupportedOperationException();
}
}
