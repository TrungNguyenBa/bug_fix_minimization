package org.apache.commons.math.complex;
import java.io.Serializable;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Locale;
public class ComplexFormat extends Format implements Serializable {
private static final long serialVersionUID = -6337346779577272306L;
private static final String DEFAULT_IMAGINARY_CHARACTER = "i";
private String imaginaryCharacter;
private NumberFormat imaginaryFormat;
private NumberFormat realFormat;
public ComplexFormat() {
this(DEFAULT_IMAGINARY_CHARACTER, getDefaultNumberFormat());
}
public ComplexFormat(NumberFormat format) {
this(DEFAULT_IMAGINARY_CHARACTER, format);
}
public ComplexFormat(NumberFormat realFormat,
NumberFormat imaginaryFormat) {
this(DEFAULT_IMAGINARY_CHARACTER, realFormat, imaginaryFormat);
}
public ComplexFormat(String imaginaryCharacter) {
this(imaginaryCharacter, getDefaultNumberFormat());
}
public ComplexFormat(String imaginaryCharacter, NumberFormat format) {
this(imaginaryCharacter, format, (NumberFormat)format.clone());
}
public ComplexFormat(String imaginaryCharacter, NumberFormat realFormat,
NumberFormat imaginaryFormat) {
super();
setImaginaryCharacter(imaginaryCharacter);
setImaginaryFormat(imaginaryFormat);
setRealFormat(realFormat);
}
public static String formatComplex( Complex c ) {
return getInstance().format( c );
}
public StringBuffer format(Complex complex, StringBuffer toAppendTo,
FieldPosition pos) {
pos.setBeginIndex(0);
pos.setEndIndex(0);
double re = complex.getReal();
formatDouble(re, getRealFormat(), toAppendTo, pos);
double im = complex.getImaginary();
if (im < 0.0) {
toAppendTo.append(" - ");
formatDouble(-im, getImaginaryFormat(), toAppendTo, pos);
toAppendTo.append(getImaginaryCharacter());
} else if (im > 0.0 || Double.isNaN(im)) {
toAppendTo.append(" + ");
formatDouble(im, getImaginaryFormat(), toAppendTo, pos);
toAppendTo.append(getImaginaryCharacter());
}
return toAppendTo;
}
public StringBuffer format(Object obj, StringBuffer toAppendTo,
FieldPosition pos) {
StringBuffer ret = null;
if (obj instanceof Complex) {
ret = format( (Complex)obj, toAppendTo, pos);
} else if (obj instanceof Number) {
ret = format( new Complex(((Number)obj).doubleValue(), 0.0),
toAppendTo, pos);
} else {
throw new IllegalArgumentException(
"Cannot format given Object as a Date");
}
return ret;
}
private StringBuffer formatDouble(double value, NumberFormat format,
StringBuffer toAppendTo, FieldPosition pos) {
if( Double.isNaN(value) || Double.isInfinite(value) ) {
toAppendTo.append('(');
toAppendTo.append(value);
toAppendTo.append(')');
} else {
format.format(value, toAppendTo, pos);
}
return toAppendTo;
}
public static Locale[] getAvailableLocales() {
return NumberFormat.getAvailableLocales();
}
private static NumberFormat getDefaultNumberFormat() {
return getDefaultNumberFormat(Locale.getDefault());
}
private static NumberFormat getDefaultNumberFormat(Locale locale) {
NumberFormat nf = NumberFormat.getInstance(locale);
nf.setMaximumFractionDigits(2);
return nf;
}
public String getImaginaryCharacter() {
return imaginaryCharacter;
}
public NumberFormat getImaginaryFormat() {
return imaginaryFormat;
}
public static ComplexFormat getInstance() {
return getInstance(Locale.getDefault());
}
public static ComplexFormat getInstance(Locale locale) {
NumberFormat f = getDefaultNumberFormat(locale);
return new ComplexFormat(f);
}
public NumberFormat getRealFormat() {
return realFormat;
}
public Complex parse(String source) throws ParseException {
ParsePosition parsePosition = new ParsePosition(0);
Complex result = parse(source, parsePosition);
if (parsePosition.getIndex() == 0) {
throw new ParseException("Unparseable complex number: \"" + source +
"\"", parsePosition.getErrorIndex());
}
return result;
}
public Complex parse(String source, ParsePosition pos) {
int initialIndex = pos.getIndex();
parseAndIgnoreWhitespace(source, pos);
Number re = parseNumber(source, getRealFormat(), pos);
if (re == null) {
pos.setIndex(initialIndex);
return null;
}
int startIndex = pos.getIndex();
char c = parseNextCharacter(source, pos);
int sign = 0;
switch (c) {
case 0 :
return new Complex(re.doubleValue(), 0.0);
case '-' :
sign = -1;
break;
case '+' :
sign = 1;
break;
default :
pos.setIndex(initialIndex);
pos.setErrorIndex(startIndex);
return null;
}
parseAndIgnoreWhitespace(source, pos);
Number im = parseNumber(source, getRealFormat(), pos);
if (im == null) {
pos.setIndex(initialIndex);
return null;
}
int n = getImaginaryCharacter().length();
startIndex = pos.getIndex();
int endIndex = startIndex + n;
if ((startIndex >= source.length()) ||
(endIndex > source.length()) ||
source.substring(startIndex, endIndex).compareTo(
getImaginaryCharacter()) != 0) {
pos.setIndex(initialIndex);
pos.setErrorIndex(startIndex);
return null;
}
pos.setIndex(endIndex);
return new Complex(re.doubleValue(), im.doubleValue() * sign);
}
private void parseAndIgnoreWhitespace(String source, ParsePosition pos) {
parseNextCharacter(source, pos);
pos.setIndex(pos.getIndex() - 1);
}
private char parseNextCharacter(String source, ParsePosition pos) {
int index = pos.getIndex();
int n = source.length();
char ret = 0;
if (index < n) {
char c;
do {
c = source.charAt(index++);
} while (Character.isWhitespace(c) && index < n);
pos.setIndex(index);
if (index < n) {
ret = c;
}
}
return ret;
}
private Number parseNumber(String source, double value, ParsePosition pos) {
Number ret = null;
StringBuffer sb = new StringBuffer();
sb.append('(');
sb.append(value);
sb.append(')');
int n = sb.length();
int startIndex = pos.getIndex();
int endIndex = startIndex + n;
if (endIndex < source.length()) {
if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {
ret = new Double(value);
pos.setIndex(endIndex);
}
}
return ret;
}
private Number parseNumber(String source, NumberFormat format, ParsePosition pos) {
int startIndex = pos.getIndex();
Number number = format.parse(source, pos);
int endIndex = pos.getIndex();
if (startIndex == endIndex) {
double[] special = {Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY};
for (int i = 0; i < special.length; ++i) {
number = parseNumber(source, special[i], pos);
if (number != null) {
break;
}
}
}
return number;
}
public Object parseObject(String source, ParsePosition pos) {
return parse(source, pos);
}
public void setImaginaryCharacter(String imaginaryCharacter) {
if (imaginaryCharacter == null || imaginaryCharacter.length() == 0) {
throw new IllegalArgumentException(
"imaginaryCharacter must be a non-empty string.");
}
this.imaginaryCharacter = imaginaryCharacter;
}
public void setImaginaryFormat(NumberFormat imaginaryFormat) {
if (imaginaryFormat == null) {
throw new IllegalArgumentException(
"imaginaryFormat can not be null.");
}
this.imaginaryFormat = imaginaryFormat;
}
public void setRealFormat(NumberFormat realFormat) {
if (realFormat == null) {
throw new IllegalArgumentException(
"realFormat can not be null.");
}
this.realFormat = realFormat;
}
}
