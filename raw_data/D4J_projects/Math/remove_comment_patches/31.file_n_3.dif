22,45c22,41
< final double small = 1e-50;
< double hPrev = getA(0, x);
< if (Precision.equals(hPrev, 0.0, small)) {
< hPrev = small;
< }
< int n = 1;
< double dPrev = 0.0;
< double cPrev = hPrev;
< double hN = hPrev;
< while (n < maxIterations) {
< final double a = getA(n, x);
< final double b = getB(n, x);
< double dN = a + b * dPrev;
< if (Precision.equals(dN, 0.0, small)) {
< dN = small;
< }
< double cN = a + b / cPrev;
< if (Precision.equals(cN, 0.0, small)) {
< cN = small;
< }
< dN = 1 / dN;
< final double deltaN = cN * dN;
< hN = hPrev * deltaN;
< if (Double.isInfinite(hN)) {
---
> double p0 = 1.0;
> double p1 = getA(0, x);
> double q0 = 0.0;
> double q1 = 1.0;
> double c = p1 / q1;
> int n = 0;
> double relativeError = Double.MAX_VALUE;
> while (n < maxIterations && relativeError > epsilon) {
> ++n;
> double a = getA(n, x);
> double b = getB(n, x);
> double p2 = a * p1 + b * p0;
> double q2 = a * q1 + b * q0;
> boolean infinite = false;
> if (Double.isInfinite(p2) || Double.isInfinite(q2)) {
> double scaleFactor = 1d;
> double lastScaleFactor = 1d;
> final int maxPower = 5;
> final double scale = FastMath.max(a,b);
> if (scale <= 0) {
49,51c45,54
< if (Double.isNaN(hN)) {
< throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
< x);
---
> infinite = true;
> for (int i = 0; i < maxPower; i++) {
> lastScaleFactor = scaleFactor;
> scaleFactor *= scale;
> if (a != 0.0 && a > b) {
> p2 = p1 / lastScaleFactor + (b / scaleFactor * p0);
> q2 = q1 / lastScaleFactor + (b / scaleFactor * q0);
> } else if (b != 0) {
> p2 = (a / scaleFactor * p1) + p0 / lastScaleFactor;
> q2 = (a / scaleFactor * q1) + q0 / lastScaleFactor;
53c56,57
< if (FastMath.abs(deltaN - 1.0) < epsilon) {
---
> infinite = Double.isInfinite(p2) || Double.isInfinite(q2);
> if (!infinite) {
56,59c60,76
< dPrev = dN;
< cPrev = cN;
< hPrev = hN;
< n++;
---
> }
> }
> if (infinite) {
> throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
> x);
> }
> double r = p2 / q2;
> if (Double.isNaN(r)) {
> throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
> x);
> }
> relativeError = FastMath.abs(r / c - 1.0);
> c = p2 / q2;
> p0 = p1;
> p1 = p2;
> q0 = q1;
> q1 = q2;
65c82
< return hN;
---
> return c;
