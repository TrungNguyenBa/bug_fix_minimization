package org.apache.commons.math.transform;
import java.io.Serializable;
import org.apache.commons.math.analysis.*;
import org.apache.commons.math.complex.*;
import org.apache.commons.math.MathException;
public class FastCosineTransformer implements Serializable {
static final long serialVersionUID = -7673941545134707766L;
public FastCosineTransformer() {
super();
}
public double[] transform(double f[]) throws MathException,
IllegalArgumentException {
return fct(f);
}
public double[] transform(
UnivariateRealFunction f, double min, double max, int n)
throws MathException, IllegalArgumentException {
double data[] = FastFourierTransformer.sample(f, min, max, n);
return fct(data);
}
public double[] transform2(double f[]) throws MathException,
IllegalArgumentException {
double scaling_coefficient = Math.sqrt(2.0 / (f.length-1));
return FastFourierTransformer.scaleArray(fct(f), scaling_coefficient);
}
public double[] transform2(
UnivariateRealFunction f, double min, double max, int n)
throws MathException, IllegalArgumentException {
double data[] = FastFourierTransformer.sample(f, min, max, n);
double scaling_coefficient = Math.sqrt(2.0 / (n-1));
return FastFourierTransformer.scaleArray(fct(data), scaling_coefficient);
}
public double[] inversetransform(double f[]) throws MathException,
IllegalArgumentException {
double scaling_coefficient = 2.0 / (f.length - 1);
return FastFourierTransformer.scaleArray(fct(f), scaling_coefficient);
}
public double[] inversetransform(
UnivariateRealFunction f, double min, double max, int n)
throws MathException, IllegalArgumentException {
double data[] = FastFourierTransformer.sample(f, min, max, n);
double scaling_coefficient = 2.0 / (n - 1);
return FastFourierTransformer.scaleArray(fct(data), scaling_coefficient);
}
public double[] inversetransform2(double f[]) throws MathException,
IllegalArgumentException {
return transform2(f);
}
public double[] inversetransform2(
UnivariateRealFunction f, double min, double max, int n)
throws MathException, IllegalArgumentException {
return transform2(f, min, max, n);
}
protected double[] fct(double f[]) throws MathException,
IllegalArgumentException {
double A, B, C, F1, x[], F[] = new double[f.length];
int N = f.length - 1;
if (!FastFourierTransformer.isPowerOf2(N)) {
throw new IllegalArgumentException
("Number of samples not power of 2 plus one: " + f.length);
}
if (N == 1) {
F[0] = 0.5 * (f[0] + f[1]);
F[1] = 0.5 * (f[0] - f[1]);
return F;
}
x = new double[N];
x[0] = 0.5 * (f[0] + f[N]);
x[N >> 1] = f[N >> 1];
F1 = 0.5 * (f[0] - f[N]);
for (int i = 1; i < (N >> 1); i++) {
A = 0.5 * (f[i] + f[N-i]);
B = Math.sin(i * Math.PI / N) * (f[i] - f[N-i]);
C = Math.cos(i * Math.PI / N) * (f[i] - f[N-i]);
x[i] = A - B;
x[N-i] = A + B;
F1 += C;
}
FastFourierTransformer transformer = new FastFourierTransformer();
Complex y[] = transformer.transform(x);
F[0] = y[0].getReal();
F[1] = F1;
for (int i = 1; i < (N >> 1); i++) {
F[2*i] = y[i].getReal();
F[2*i+1] = F[2*i-1] - y[i].getImaginary();
}
F[N] = y[N >> 1].getReal();
return F;
}
}
