0a1,14
> diff --git a/src/changes/changes.xml b/src/changes/changes.xml
> index fb58f546a..a61254cfa 100644
> --- a/src/changes/changes.xml
> +++ b/src/changes/changes.xml
> @@ -55,9 +55,6 @@ This is a minor release: It combines bug fixes and new features.
>    Changes to existing features were made in a backwards-compatible
>    way such as to allow drop-in replacement of the v3.1[.1] JAR file.
>  ">
> -      <action dev="erans" type="fix" issue="MATH-929" due-to="Piotr Wydrych">
> -        Fixed truncated value in "MultivariateNormalDistribution".
> -      </action>
>        <action dev="erans" type="fix" issue="MATH-927" due-to="Dennis Hendriks">
>          Made "BitStreamGenerator" implement the "Serializable" interface.
>        </action>
2c16
< index fd18c28..1570681 100644
---
> index fd18c281b..15706811b 100644
13a28,64
> diff --git a/src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java b/src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java
> index 96666187a..756c009c6 100644
> --- a/src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java
> +++ b/src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java
> @@ -20,7 +20,6 @@ package org.apache.commons.math3.distribution;
>  import org.apache.commons.math3.stat.correlation.Covariance;
>  import org.apache.commons.math3.linear.RealMatrix;
>  
> -import java.util.Random;
>  import org.junit.After;
>  import org.junit.Assert;
>  import org.junit.Before;
> @@ -131,24 +130,4 @@ public class MultivariateNormalDistributionTest {
>              Assert.assertEquals(correctDensities[i], densities[i], 1e-16);
>          }
>      }
> -
> -    /**
> -     * Test the accuracy of the distribution when calculating densities.
> -     */
> -    @Test
> -    public void testUnivariateDistribution() {
> -        final double[] mu = { -1.5 };
> -        final double[][] sigma = { { 1 } };
> - 
> -        final MultivariateNormalDistribution multi = new MultivariateNormalDistribution(mu, sigma);
> -
> -        final NormalDistribution uni = new NormalDistribution(mu[0], sigma[0][0]);
> -        final Random rng = new Random();
> -        final int numCases = 100;
> -        final double tol = Math.ulp(1d);
> -        for (int i = 0; i < numCases; i++) {
> -            final double v = rng.nextDouble() * 10 - 5;
> -            Assert.assertEquals(uni.density(v), multi.density(new double[] { v }), tol);
> -        }
> -    }
>  }
