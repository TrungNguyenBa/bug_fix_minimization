2c2
< index fab295b..4d166c2 100644
---
> index fab295bfb..a621d7b8a 100644
5c5
< @@ -16,7 +16,6 @@
---
> @@ -16,26 +16,21 @@
10c10
<  
---
> -
13c13,17
< @@ -27,10 +26,8 @@ import org.apache.commons.math3.util.FastMath;
---
>  
>  /** Base class for random number generators that generates bits streams.
> - *
> +
>   * @version $Id$
14a19
> +
16c21
<  public abstract class BitsStreamGenerator
---
> -public abstract class BitsStreamGenerator
19,20c24
< +    implements RandomGenerator {
<      /** Serializable version identifier */
---
> -    /** Serializable version identifier */
21a26,27
> +public abstract class BitsStreamGenerator implements RandomGenerator {
> +
24a31,102
> -    /**
> -     * Creates a new random number generator.
> +    /** Creates a new random number generator.
>       */
>      public BitsStreamGenerator() {
>          nextGaussian = Double.NaN;
> diff --git a/src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java b/src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java
> index e25923396..c693b1404 100644
> --- a/src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java
> +++ b/src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java
> @@ -19,11 +19,6 @@ package org.apache.commons.math3.distribution;
>  
>  import java.util.ArrayList;
>  import java.util.Collections;
> -import java.io.ByteArrayInputStream;
> -import java.io.ByteArrayOutputStream;
> -import java.io.IOException;
> -import java.io.ObjectInputStream;
> -import java.io.ObjectOutputStream;
>  
>  import org.apache.commons.math3.TestUtils;
>  import org.apache.commons.math3.util.FastMath;
> @@ -376,24 +371,6 @@ public abstract class RealDistributionAbstractTest {
>           
>      }
>  
> -    @Test
> -    public void testDistributionClone()
> -        throws IOException,
> -               ClassNotFoundException {
> -        // Construct a distribution and initialize its internal random
> -        // generator, using a fixed seed for deterministic results.
> -        distribution.reseedRandomGenerator(123);
> -        distribution.sample();
> -
> -        // Clone the distribution.
> -        final RealDistribution cloned = deepClone();
> -
> -        // Make sure they still produce the same samples.
> -        final double s1 = distribution.sample();
> -        final double s2 = cloned.sample();
> -        Assert.assertEquals(s1, s2, 0d);
> -    }
> -
>      //------------------ Getters / Setters for test instance data -----------
>      /**
>       * @return Returns the cumulativeTestPoints.
> @@ -487,24 +464,4 @@ public abstract class RealDistributionAbstractTest {
>          this.tolerance = tolerance;
>      }
>  
> -    /**
> -     * Serialization and deserialization loop of the {@link #distribution}.
> -     */
> -    private RealDistribution deepClone()
> -        throws IOException,
> -               ClassNotFoundException {
> -        // Serialize to byte array.
> -        final ByteArrayOutputStream bOut = new ByteArrayOutputStream();
> -        final ObjectOutputStream oOut = new ObjectOutputStream(bOut);
> -        oOut.writeObject(distribution);
> -        final byte[] data = bOut.toByteArray();
> -
> -        // Deserialize from byte array.
> -        final ByteArrayInputStream bIn = new ByteArrayInputStream(data);
> -        final ObjectInputStream oIn = new ObjectInputStream(bIn);
> -        final Object clone = oIn.readObject();
> -        oIn.close();
> -
> -        return (RealDistribution) clone;
> -    }
>  }
