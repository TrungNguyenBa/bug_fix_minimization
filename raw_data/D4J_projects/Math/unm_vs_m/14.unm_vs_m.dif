2c2
< index aa3299a..b8225ad 100644
---
> index aa3299aea..789bc256d 100644
4a5,13
> @@ -18,7 +18,7 @@ package org.apache.commons.math3.optim.nonlinear.vector;
>  
>  import org.apache.commons.math3.optim.OptimizationData;
>  import org.apache.commons.math3.linear.RealMatrix;
> -import org.apache.commons.math3.linear.DiagonalMatrix;
> +import org.apache.commons.math3.linear.MatrixUtils;
>  import org.apache.commons.math3.linear.NonSquareMatrixException;
>  
>  /**
10c19
< +        weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);
---
> +        weightMatrix = MatrixUtils.createRealMatrix(dim, dim);
18c27
< index ef52943..d12ebea 100644
---
> index ef5294324..b7bb6f575 100644
21c30,38
< @@ -264,16 +264,7 @@ public abstract class AbstractLeastSquaresOptimizer
---
> @@ -20,7 +20,6 @@ import org.apache.commons.math3.exception.DimensionMismatchException;
>  import org.apache.commons.math3.exception.TooManyEvaluationsException;
>  import org.apache.commons.math3.linear.ArrayRealVector;
>  import org.apache.commons.math3.linear.RealMatrix;
> -import org.apache.commons.math3.linear.DiagonalMatrix;
>  import org.apache.commons.math3.linear.DecompositionSolver;
>  import org.apache.commons.math3.linear.MatrixUtils;
>  import org.apache.commons.math3.linear.QRDecomposition;
> @@ -264,16 +263,7 @@ public abstract class AbstractLeastSquaresOptimizer
34a52
>      }
36a55,60
> diff --git a/src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java b/src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java
> index 73603cdb9..b695ee63e 100644
> --- a/src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java
> +++ b/src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java
> @@ -220,33 +220,6 @@ public class PolynomialFitterTest {
>          checkUnsolvableProblem(new GaussNewtonOptimizer(true, new SimpleVectorValueChecker(1e-15, 1e-15)), false);
37a62,92
>  
> -    @Test
> -    public void testLargeSample() {
> -        Random randomizer = new Random(0x5551480dca5b369bl);
> -        double maxError = 0;
> -        for (int degree = 0; degree < 10; ++degree) {
> -            PolynomialFunction p = buildRandomPolynomial(degree, randomizer);
> -
> -            PolynomialFitter fitter = new PolynomialFitter(new LevenbergMarquardtOptimizer());
> -            for (int i = 0; i < 40000; ++i) {
> -                double x = -1.0 + i / 20000.0;
> -                fitter.addObservedPoint(1.0, x,
> -                                        p.value(x) + 0.1 * randomizer.nextGaussian());
> -            }
> -
> -            final double[] init = new double[degree + 1];
> -            PolynomialFunction fitted = new PolynomialFunction(fitter.fit(init));
> -
> -            for (double x = -1.0; x < 1.0; x += 0.01) {
> -                double error = FastMath.abs(p.value(x) - fitted.value(x)) /
> -                              (1.0 + FastMath.abs(p.value(x)));
> -                maxError = FastMath.max(maxError, error);
> -                Assert.assertTrue(FastMath.abs(error) < 0.01);
> -            }
> -        }
> -        Assert.assertTrue(maxError > 0.001);
> -    }
> -
>      private void checkUnsolvableProblem(MultivariateVectorOptimizer optimizer,
>                                          boolean solvable) {
>          Random randomizer = new Random(1248788532l);
