2c2
< index 866c8fd..bc754a5 100644
---
> index 866c8fdf8..f6a4f2820 100644
23c23,24
< @@ -987,14 +987,12 @@ public class CMAESOptimizer
---
> @@ -986,15 +986,11 @@ public class CMAESOptimizer
>              if (boundaries == null) {
26c27
<  
---
> -
29c30
<  
---
> -
39a41,64
> diff --git a/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java b/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java
> index 4ebd1b0c3..9d43909c2 100644
> --- a/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java
> +++ b/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java
> @@ -350,8 +350,8 @@ public class CMAESOptimizerTest {
>  
>      @Test
>      public void testConstrainedRosen() {
> -        double[] startPoint = point(DIM, 0.7);
> -        double[] insigma = point(DIM, 0.1);
> +        double[] startPoint = point(DIM, 0.1);
> +        double[] insigma = point(DIM, 1);
>          double[][] boundaries = boundaries(DIM, -1, 2);
>          PointValuePair expected =
>              new PointValuePair(point(DIM,1.0),0.0);
> @@ -427,7 +427,7 @@ public class CMAESOptimizerTest {
>      /**
>       * Cf. MATH-867
>       */
> -    @Test
> +    @Ignore@Test
>      public void testFitAccuracyDependsOnBoundary() {
>          final CMAESOptimizer optimizer = new CMAESOptimizer();
>          final MultivariateFunction fitnessFunction = new MultivariateFunction() {
