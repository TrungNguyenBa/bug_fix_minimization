2c2
< index 25f2f50..5136a14 100644
---
> index 25f2f5049..cff5bfd33 100644
5c5,32
< @@ -148,7 +148,6 @@ public class BrentOptimizer extends BaseAbstractUnivariateOptimizer {
---
> @@ -24,19 +24,13 @@ import org.apache.commons.math3.optimization.ConvergenceChecker;
>  import org.apache.commons.math3.optimization.GoalType;
>  
>  /**
> - * For a function defined on some interval {@code (lo, hi)}, this class
> - * finds an approximation {@code x} to the point at which the function
> - * attains its minimum.
> - * It implements Richard Brent's algorithm (from his book "Algorithms for
> + * Implements Richard Brent's algorithm (from his book "Algorithms for
>   * Minimization without Derivatives", p. 79) for finding minima of real
> - * univariate functions.
> - * <br/>
> - * This code is an adaptation, partly based on the Python code from SciPy
> - * (module "optimize.py" v0.5); the original algorithm is also modified
> - * <ul>
> - *  <li>to use an initial guess provided by the user,</li>
> - *  <li>to ensure that the best point encountered is the one returned.</li>
> - * </ul>
> + * univariate functions. This implementation is an adaptation partly
> + * based on the Python code from SciPy (module "optimize.py" v0.5).
> + * If the function is defined on some interval {@code (lo, hi)}, then
> + * this method finds an approximation {@code x} to the point at which
> + * the function attains its minimum.
>   *
>   * @version $Id$
>   * @since 2.0
> @@ -147,8 +141,6 @@ public class BrentOptimizer extends BaseAbstractUnivariateOptimizer {
>          UnivariatePointValuePair previous = null;
8c35
<          // Best point encountered so far (which is the initial guess).
---
> -        // Best point encountered so far (which is the initial guess).
13c40
< @@ -232,15 +231,10 @@ public class BrentOptimizer extends BaseAbstractUnivariateOptimizer {
---
> @@ -232,15 +224,10 @@ public class BrentOptimizer extends BaseAbstractUnivariateOptimizer {
30c57
< @@ -277,10 +271,9 @@ public class BrentOptimizer extends BaseAbstractUnivariateOptimizer {
---
> @@ -277,11 +264,7 @@ public class BrentOptimizer extends BaseAbstractUnivariateOptimizer {
35,37c62,63
< +                return
<                              best(current,
<                                   previous,
---
> -                            best(current,
> -                                 previous,
39c65,66
<                              isMinim);
---
> -                            isMinim);
> +                return best(current, previous, isMinim);
41a69,150
>          }
> @@ -295,8 +278,7 @@ public class BrentOptimizer extends BaseAbstractUnivariateOptimizer {
>       * @param isMinim {@code true} if the selected point must be the one with
>       * the lowest value.
>       * @return the best point, or {@code null} if {@code a} and {@code b} are
> -     * both {@code null}. When {@code a} and {@code b} have the same function
> -     * value, {@code a} is returned.
> +     * both {@code null}.
>       */
>      private UnivariatePointValuePair best(UnivariatePointValuePair a,
>                                            UnivariatePointValuePair b,
> @@ -309,9 +291,9 @@ public class BrentOptimizer extends BaseAbstractUnivariateOptimizer {
>          }
>  
>          if (isMinim) {
> -            return a.getValue() <= b.getValue() ? a : b;
> +            return a.getValue() < b.getValue() ? a : b;
>          } else {
> -            return a.getValue() >= b.getValue() ? a : b;
> +            return a.getValue() > b.getValue() ? a : b;
>          }
>      }
>  }
> diff --git a/src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java b/src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java
> index 55b62cac3..2151c48d2 100644
> --- a/src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java
> +++ b/src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java
> @@ -185,43 +185,6 @@ public final class BrentOptimizerTest {
>      }
>  
>      /**
> -     * Contrived example showing that prior to the resolution of MATH-855
> -     * (second revision), the algorithm would not return the best point if
> -     * it happened to be the initial guess.
> -     */
> -    @Test
> -    public void testKeepInitIfBest() {
> -        final double minSin = 3 * Math.PI / 2;
> -        final double offset = 1e-8;
> -        final double delta = 1e-7;
> -        final UnivariateFunction f1 = new Sin();
> -        final UnivariateFunction f2 = new StepFunction(new double[] { minSin, minSin + offset, minSin + 2 * offset},
> -                                                       new double[] { 0, -1, 0 });
> -        final UnivariateFunction f = FunctionUtils.add(f1, f2);
> -        // A slightly less stringent tolerance would make the test pass
> -        // even with the previous implementation.
> -        final double relTol = 1e-8;
> -        final UnivariateOptimizer optimizer = new BrentOptimizer(relTol, 1e-100);
> -        final double init = minSin + 1.5 * offset;
> -        final UnivariatePointValuePair result
> -            = optimizer.optimize(200, f, GoalType.MINIMIZE,
> -                                 minSin - 6.789 * delta,
> -                                 minSin + 9.876 * delta,
> -                                 init);
> -        final int numEval = optimizer.getEvaluations();
> -
> -        final double sol = result.getPoint();
> -        final double expected = init;
> -
> -//         System.out.println("numEval=" + numEval);
> -//         System.out.println("min=" + init + " f=" + f.value(init));
> -//         System.out.println("sol=" + sol + " f=" + f.value(sol));
> -//         System.out.println("exp=" + expected + " f=" + f.value(expected));
> -
> -        Assert.assertTrue("Best point not reported", f.value(sol) <= f.value(expected));
> -    }
> -
> -    /**
>       * Contrived example showing that prior to the resolution of MATH-855,
>       * the algorithm, by always returning the last evaluated point, would
>       * sometimes not report the best point it had found.
> @@ -237,9 +200,7 @@ public final class BrentOptimizerTest {
>          final UnivariateFunction f = FunctionUtils.add(f1, f2);
>          final UnivariateOptimizer optimizer = new BrentOptimizer(1e-8, 1e-100);
>          final UnivariatePointValuePair result
> -            = optimizer.optimize(200, f, GoalType.MINIMIZE,
> -                                 minSin - 6.789 * delta,
> -                                 minSin + 9.876 * delta);
> +            = optimizer.optimize(200, f, GoalType.MINIMIZE, minSin - 6.789 * delta, minSin + 9.876 * delta);
>          final int numEval = optimizer.getEvaluations();
>  
>          final double sol = result.getPoint();
