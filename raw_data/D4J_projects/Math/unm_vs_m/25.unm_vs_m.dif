0a1,28
> diff --git a/src/changes/changes.xml b/src/changes/changes.xml
> index 234086c5d..ee30a686f 100644
> --- a/src/changes/changes.xml
> +++ b/src/changes/changes.xml
> @@ -52,10 +52,6 @@ If the output is not quite correct, check for invisible trailing spaces!
>    <body>
>      <release version="3.1" date="TBD" description="
>  ">
> -      <action dev="erans" type="fix" issue="MATH-844">
> -        Generate an exception for rare ill-conditioned cases in "HarmonicFitter"
> -        guessing procedure (package "o.a.c.m.optimization.fitting").
> -      </action>
>        <action dev="erans" type="add" issue="MATH-815" due-to="Jared Becksfort">
>          New interface for multivariate distributions.
>          Added multivariate normal distribution.
> diff --git a/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java b/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java
> index 04edd0b46..1ca563575 100644
> --- a/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java
> +++ b/src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java
> @@ -344,7 +344,7 @@ public enum LocalizedFormats implements Localizable {
>      WRONG_BLOCK_LENGTH("wrong array shape (block length = {0}, expected {1})"),
>      WRONG_NUMBER_OF_POINTS("{0} points are required, got only {1}"),
>      NUMBER_OF_POINTS("number of points ({0})"), /* keep */
> -    ZERO_DENOMINATOR("denominator must be different from 0"), /* keep */
> +    ZERO_DENOMINATOR("denominator must be different from 0"),
>      ZERO_DENOMINATOR_IN_FRACTION("zero denominator in fraction {0}/{1}"),
>      ZERO_FRACTION_TO_DIVIDE_BY("the fraction to divide by must not be zero: {0}/{1}"),
>      ZERO_NORM("zero norm"),
2c30
< index c7af9ae..1da2c45 100644
---
> index c7af9ae56..ebb36d310 100644
5c33,50
< @@ -320,11 +320,8 @@ public class HarmonicFitter extends CurveFitter<HarmonicOscillator.Parametric> {
---
> @@ -21,7 +21,6 @@ import org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOpt
>  import org.apache.commons.math3.analysis.function.HarmonicOscillator;
>  import org.apache.commons.math3.exception.ZeroException;
>  import org.apache.commons.math3.exception.NumberIsTooSmallException;
> -import org.apache.commons.math3.exception.MathIllegalStateException;
>  import org.apache.commons.math3.exception.util.LocalizedFormats;
>  import org.apache.commons.math3.util.FastMath;
>  
> @@ -251,8 +250,6 @@ public class HarmonicFitter extends CurveFitter<HarmonicOscillator.Parametric> {
>           * has been called previously.
>           *
>           * @throws ZeroException if the abscissa range is zero.
> -         * @throws MathIllegalStateException when the guessing procedure cannot
> -         * produce sensible results.
>           */
>          private void guessAOmega() {
>              // initialize the sums for the linear model between the two integrals
> @@ -320,12 +317,6 @@ public class HarmonicFitter extends CurveFitter<HarmonicOscillator.Parametric> {
10,11c55,56
<                      // In some ill-conditioned cases (cf. MATH-844), the guesser
<                      // procedure cannot produce sensible results.
---
> -                    // In some ill-conditioned cases (cf. MATH-844), the guesser
> -                    // procedure cannot produce sensible results.
14c59
<  
---
> -
16a62,103
>              }
> diff --git a/src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java b/src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java
> index 5bbad9f37..910ba1ba6 100644
> --- a/src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java
> +++ b/src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java
> @@ -22,7 +22,6 @@ import java.util.Random;
>  import org.apache.commons.math3.analysis.function.HarmonicOscillator;
>  import org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer;
>  import org.apache.commons.math3.exception.NumberIsTooSmallException;
> -import org.apache.commons.math3.exception.MathIllegalStateException;
>  import org.apache.commons.math3.util.FastMath;
>  import org.apache.commons.math3.util.MathUtils;
>  
> @@ -177,28 +176,4 @@ public class HarmonicFitterTest {
>          Assert.assertEquals(w, fitted[1], 3.5e-3);
>          Assert.assertEquals(p, MathUtils.normalizeAngle(fitted[2], p), 1.5e-2);
>      }
> -
> -    @Test(expected=MathIllegalStateException.class)
> -    public void testMath844() {
> -        final double[] y = { 0, 1, 2, 3, 2, 1,
> -                             0, -1, -2, -3, -2, -1,
> -                             0, 1, 2, 3, 2, 1,
> -                             0, -1, -2, -3, -2, -1,
> -                             0, 1, 2, 3, 2, 1, 0 };
> -        final int len = y.length;
> -        final WeightedObservedPoint[] points = new WeightedObservedPoint[len];
> -        for (int i = 0; i < len; i++) {
> -            points[i] = new WeightedObservedPoint(1, i, y[i]);
> -        }
> -
> -        final HarmonicFitter.ParameterGuesser guesser
> -            = new HarmonicFitter.ParameterGuesser(points);
> -
> -        // The guesser fails because the function is far from an harmonic
> -        // function: It is a triangular periodic function with amplitude 3
> -        // and period 12, and all sample points are taken at integer abscissae
> -        // so function values all belong to the integer subset {-3, -2, -1, 0,
> -        // 1, 2, 3}.
> -        guesser.guess();
> -    }
>  }
