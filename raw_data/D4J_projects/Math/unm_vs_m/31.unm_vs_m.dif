0a1,15
> diff --git a/src/changes/changes.xml b/src/changes/changes.xml
> index c81dff348..a3c40fe96 100644
> --- a/src/changes/changes.xml
> +++ b/src/changes/changes.xml
> @@ -52,10 +52,6 @@ If the output is not quite correct, check for invisible trailing spaces!
>    <body>
>      <release version="3.1" date="TBD" description="
>  ">
> -      <action dev="tn" type="fix" issue="MATH-718" >
> -        Use modified Lentz-Thompson algorithm for continued fraction evaluation to avoid
> -        underflows.
> -      </action>
>        <action dev="luc" type="fix" issue="MATH-780" >
>          Fixed a wrong assumption on BSP tree attributes when boundary collapses to a too
>          small polygon at a non-leaf node.
2c17
< index 253f3c5..b881bb2 100644
---
> index 253f3c59e..35fe9160b 100644
5,8c20,57
< @@ -131,6 +131,8 @@ public abstract class ContinuedFraction {
<  
<          int n = 1;
<          double dPrev = 0.0;
---
> @@ -101,18 +101,19 @@ public abstract class ContinuedFraction {
>       * </p>
>       *
>       * <p>
> -     * The implementation of this method is based on the modified Lentz algorithm as described
> -     * on page 18 ff. in:
> +     * The implementation of this method is based on equations 14-17 of:
>       * <ul>
>       * <li>
> -     *   I. J. Thompson,  A. R. Barnett. "Coulomb and Bessel Functions of Complex Arguments and Order."
> -     *   <a target="_blank" href="http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf">
> -     *   http://www.fresco.org.uk/papers/Thompson-JCP64p490.pdf</a>
> +     *   Eric W. Weisstein. "Continued Fraction." From MathWorld--A Wolfram Web
> +     *   Resource. <a target="_blank"
> +     *   href="http://mathworld.wolfram.com/ContinuedFraction.html">
> +     *   http://mathworld.wolfram.com/ContinuedFraction.html</a>
>       * </li>
>       * </ul>
> -     * Note: the implementation uses the terms a<sub>i</sub> and b<sub>i</sub> as defined in
> -     * <a href="http://mathworld.wolfram.com/ContinuedFraction.html">Continued Fraction / MathWorld</a>.
> -     * </p>
> +     * The recurrence relationship defined in those equations can result in
> +     * very large intermediate results which can result in numerical overflow.
> +     * As a means to combat these overflow conditions, the intermediate results
> +     * are scaled whenever they threaten to become numerically unstable.</p>
>       *
>       * @param x the evaluation point.
>       * @param epsilon maximum error allowed.
> @@ -121,53 +122,72 @@ public abstract class ContinuedFraction {
>       * @throws ConvergenceException if the algorithm fails to converge.
>       */
>      public double evaluate(double x, double epsilon, int maxIterations) {
> -        final double small = 1e-50;
> -        double hPrev = getA(0, x);
> -
> -        // use the value of small as epsilon criteria for zero checks
> -        if (Precision.equals(hPrev, 0.0, small)) {
> -            hPrev = small;
9a59,60
> +        double p1 = getA(0, x);
> +        double q0 = 0.0;
11,27c62,77
<          double cPrev = hPrev;
<          double hN = hPrev;
<  
< @@ -138,18 +140,34 @@ public abstract class ContinuedFraction {
<              final double a = getA(n, x);
<              final double b = getB(n, x);
<  
< -            double dN = a + b * dPrev;
< -            if (Precision.equals(dN, 0.0, small)) {
< -                dN = small;
< -            }
< -            double cN = a + b / cPrev;
< -            if (Precision.equals(cN, 0.0, small)) {
< -                cN = small;
< +            double cN = a * hPrev + b * p0;
< +            double q2 = a * q1 + b * dPrev;
< +            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {
---
> +        double c = p1 / q1;
> +        int n = 0;
> +        double relativeError = Double.MAX_VALUE;
> +        while (n < maxIterations && relativeError > epsilon) {
> +            ++n;
> +            double a = getA(n, x);
> +            double b = getB(n, x);
> +            double p2 = a * p1 + b * p0;
> +            double q2 = a * q1 + b * q0;
> +            boolean infinite = false;
> +            if (Double.isInfinite(p2) || Double.isInfinite(q2)) {
> +                /*
> +                 * Need to scale. Try successive powers of the larger of a or b
> +                 * up to 5th power. Throw ConvergenceException if one or both
> +                 * of p2, q2 still overflow.
> +                 */
33c83,84
< +                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);
---
> +                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
> +                                                   x);
34a86
> +                infinite = true;
39,40c91,92
< +                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);
< +                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);
---
> +                        p2 = p1 / lastScaleFactor + (b / scaleFactor * p0);
> +                        q2 = q1 / lastScaleFactor + (b / scaleFactor * q0);
42,43c94,95
< +                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;
< +                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;
---
> +                        p2 = (a / scaleFactor * p1) + p0 / lastScaleFactor;
> +                        q2 = (a / scaleFactor * q1) + q0 / lastScaleFactor;
45c97,98
< +                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {
---
> +                    infinite = Double.isInfinite(p2) || Double.isInfinite(q2);
> +                    if (!infinite) {
47,48c100,117
< +                    }
< +                }
---
>                      }
> -
> -        int n = 1;
> -        double dPrev = 0.0;
> -        double cPrev = hPrev;
> -        double hN = hPrev;
> -
> -        while (n < maxIterations) {
> -            final double a = getA(n, x);
> -            final double b = getB(n, x);
> -
> -            double dN = a + b * dPrev;
> -            if (Precision.equals(dN, 0.0, small)) {
> -                dN = small;
>                  }
> -            double cN = a + b / cPrev;
> -            if (Precision.equals(cN, 0.0, small)) {
> -                cN = small;
54,57c123,126
< +            final double deltaN = cN / q2 / cPrev;
< +            hN = cPrev * deltaN;
<  
<              if (Double.isInfinite(hN)) {
---
> -
> -            if (Double.isInfinite(hN)) {
> +            if (infinite) {
> +               // Scaling failed
59,60c128
< @@ -164,9 +182,11 @@ public abstract class ContinuedFraction {
<                  break;
---
>                                                x);
62c130,142
<  
---
> -            if (Double.isNaN(hN)) {
> +
> +            double r = p2 / q2;
> +
> +            if (Double.isNaN(r)) {
>                  throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
>                                                 x);
>              }
> -
> -            if (FastMath.abs(deltaN - 1.0) < epsilon) {
> -                break;
> -            }
> -
66,69c146,153
< +            dPrev = q1;
< +            cPrev = cN / q2;
< +            p0 = hPrev;
< +            hPrev = cN;
---
> -            n++;
> +            relativeError = FastMath.abs(r / c - 1.0);
> +
> +            // prepare for next iteration
> +            c = p2 / q2;
> +            p0 = p1;
> +            p1 = p2;
> +            q0 = q1;
71d154
<              n++;
73a157,211
>          if (n >= maxIterations) {
> @@ -175,7 +195,6 @@ public abstract class ContinuedFraction {
>                                                  maxIterations, x);
>          }
>  
> -        return hN;
> +        return c;
>      }
> -
>  }
> diff --git a/src/test/java/org/apache/commons/math3/distribution/BinomialDistributionTest.java b/src/test/java/org/apache/commons/math3/distribution/BinomialDistributionTest.java
> index 0844d6094..188efd13a 100644
> --- a/src/test/java/org/apache/commons/math3/distribution/BinomialDistributionTest.java
> +++ b/src/test/java/org/apache/commons/math3/distribution/BinomialDistributionTest.java
> @@ -129,17 +129,4 @@ public class BinomialDistributionTest extends IntegerDistributionAbstractTest {
>          Assert.assertEquals(dist.getNumericalVariance(), 30d * 0.3d * (1d - 0.3d), tol);
>      }
>  
> -    @Test
> -    public void testMath718() {
> -        // for large trials the evaluation of ContinuedFraction was inaccurate
> -        // do a sweep over several large trials to test if the current implementation is
> -        // numerically stable.
> -
> -        for (int trials = 500000; trials < 20000000; trials += 100000) {
> -            BinomialDistribution dist = new BinomialDistribution(trials, 0.5);
> -            int p = dist.inverseCumulativeProbability(0.5);
> -            Assert.assertEquals(trials / 2, p);
> -        }
> -
> -    }
>  }
> diff --git a/src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java b/src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java
> index 82b345ca8..ce7350248 100644
> --- a/src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java
> +++ b/src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java
> @@ -142,18 +142,4 @@ public class FDistributionTest extends RealDistributionAbstractTest {
>          Assert.assertEquals(dist.getNumericalMean(), 5d / (5d - 2d), tol);
>          Assert.assertEquals(dist.getNumericalVariance(), (2d * 5d * 5d * 4d) / 9d, tol);
>      }
> -
> -    @Test
> -    public void testMath785() {
> -        // this test was failing due to inaccurate results from ContinuedFraction.
> -
> -        try {
> -            double prob = 0.01;
> -            FDistribution f = new FDistribution(200000, 200000);
> -            double result = f.inverseCumulativeProbability(prob);
> -            Assert.assertTrue(result < 1.0);
> -        } catch (Exception e) {
> -            Assert.fail("Failing to calculate inverse cumulative probability");
> -        }
> -    }
>  }
