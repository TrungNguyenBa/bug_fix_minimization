0a1,17
> diff --git a/src/changes/changes.xml b/src/changes/changes.xml
> index 521b432a3..5aa9b2d42 100644
> --- a/src/changes/changes.xml
> +++ b/src/changes/changes.xml
> @@ -52,12 +52,6 @@ If the output is not quite correct, check for invisible trailing spaces!
>    <body>
>      <release version="3.1" date="TBD" description="
>  ">
> -      <action dev="tn" type="fix" issue="MATH-779" due-to="Reid Hochstedler">
> -        Fixed ListPopulation#iterator to return an unmodifiable iterator.
> -      </action>
> -      <action dev="tn" type="fix" issue="MATH-775" due-to="Reid Hochstedler">
> -        Cleanup of ListPopulation to consistently enforce the population limit.
> -      </action>
>        <action dev="tn" type="fix" issue="MATH-776" due-to="Reid Hochstedler">
>          Use same range check in constructor for ElitisticListPopulation as in corresponding setter.
>        </action>
2c19
< index 3f3919c..1eb0053 100644
---
> index 3f3919cb6..8fe3ffe71 100644
5c22,29
< @@ -206,6 +206,6 @@ public abstract class ListPopulation implements Population {
---
> @@ -200,12 +200,11 @@ public abstract class ListPopulation implements Population {
>      }
>  
>      /**
> -     * Returns an iterator over the unmodifiable list of chromosomes.
> -     * <p>Any call to {@link Iterator#remove()} will result in a {@link UnsupportedOperationException}.</p>
> +     * Chromosome list iterator
>       *
12a37,78
> diff --git a/src/test/java/org/apache/commons/math3/genetics/ListPopulationTest.java b/src/test/java/org/apache/commons/math3/genetics/ListPopulationTest.java
> index 9234492c4..77178ccfc 100644
> --- a/src/test/java/org/apache/commons/math3/genetics/ListPopulationTest.java
> +++ b/src/test/java/org/apache/commons/math3/genetics/ListPopulationTest.java
> @@ -18,7 +18,6 @@ package org.apache.commons.math3.genetics;
>  
>  
>  import java.util.ArrayList;
> -import java.util.Iterator;
>  
>  import org.apache.commons.math3.exception.NotPositiveException;
>  import org.apache.commons.math3.exception.NumberIsTooLargeException;
> @@ -164,29 +163,6 @@ public class ListPopulationTest {
>          }
>      }
>      
> -    @Test(expected = UnsupportedOperationException.class)
> -    public void testIterator() {
> -        final ArrayList<Chromosome> chromosomes = new ArrayList<Chromosome>();
> -        chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));
> -        chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));
> -        chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));
> -
> -        final ListPopulation population = new ListPopulation(10) {
> -            public Population nextGeneration() {
> -                // not important
> -                return null;
> -            }
> -        };
> -
> -        population.addChromosomes(chromosomes);
> -
> -        final Iterator<Chromosome> iter = population.iterator();
> -        while (iter.hasNext()) {
> -            iter.next();
> -            iter.remove();
> -        }
> -    }
> -    
>      @Test(expected=NumberIsTooSmallException.class)
>      public void testSetPopulationLimitTooSmall() {
>          final ArrayList<Chromosome> chromosomes = new ArrayList<Chromosome> ();
