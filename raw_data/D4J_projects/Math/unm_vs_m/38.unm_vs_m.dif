2c2
< index ba3fe26..592a2e8 100644
---
> index ba3fe26cb..e31b15621 100644
5c5
< @@ -1657,10 +1657,10 @@ public class BOBYQAOptimizer
---
> @@ -1657,12 +1657,10 @@ public class BOBYQAOptimizer
14,17c14,17
< +                final int iptMinus1 = ipt;
< +                final int jptMinus1 = jpt;
<                  interpolationPoints.setEntry(nfm, iptMinus1, interpolationPoints.getEntry(ipt, iptMinus1));
<                  interpolationPoints.setEntry(nfm, jptMinus1, interpolationPoints.getEntry(jpt, jptMinus1));
---
> -                interpolationPoints.setEntry(nfm, iptMinus1, interpolationPoints.getEntry(ipt, iptMinus1));
> -                interpolationPoints.setEntry(nfm, jptMinus1, interpolationPoints.getEntry(jpt, jptMinus1));
> +                interpolationPoints.setEntry(nfm, ipt, interpolationPoints.getEntry(ipt, ipt));
> +                interpolationPoints.setEntry(nfm, jpt, interpolationPoints.getEntry(jpt, jpt));
19c19,21
< @@ -1749,7 +1749,7 @@ public class BOBYQAOptimizer
---
>  
>              // Calculate the next value of F. The least function value so far and
> @@ -1749,7 +1747,7 @@ public class BOBYQAOptimizer
27a30,161
> @@ -2464,19 +2462,19 @@ public class BOBYQAOptimizer
>      private static void printMethod() {
>          //        System.out.println(caller(2));
>      }
> +}
>  
> -    /**
> +/**
>   * Marker for code paths that are not explored with the current unit tests.
>   * If the path becomes explored, it should just be removed from the code.
>   */
> -    private static class PathIsExploredException extends RuntimeException {
> +class PathIsExploredException extends RuntimeException {
>      private static final long serialVersionUID = 745350979634801853L;
>  
>      private static final String PATH_IS_EXPLORED
>          = "If this exception is thrown, just remove it from the code";
>  
>      PathIsExploredException() {
> -            super(PATH_IS_EXPLORED + " " + BOBYQAOptimizer.caller(3));
> -        }
> +        super(PATH_IS_EXPLORED);
>      }
>  }
> diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
> index 75d47dfc7..97db5b991 100644
> --- a/src/site/xdoc/changes.xml
> +++ b/src/site/xdoc/changes.xml
> @@ -52,9 +52,6 @@ The <action> type attribute can be add,update,fix,remove.
>      If the output is not quite correct, check for invisible trailing spaces!
>       -->
>      <release version="3.0" date="TBD" description="TBD">
> -      <action dev="erans" type="fix" issue="MATH-728" due-to="Bruce A. Johnson">
> -        Fixed "offset by one" bug in "BOBYQAOptimizer".
> -      </action>
>        <action dev="luc" type="fix" issue="MATH-727">
>          Check first step size in embedded Runge-Kutta integrators, and truncate it if needed.
>        </action>
> diff --git a/src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java b/src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java
> index fe64f9e37..7eb774213 100644
> --- a/src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java
> +++ b/src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java
> @@ -231,30 +231,6 @@ public class BOBYQAOptimizerTest {
>                  1e-13, 1e-6, 2000, expected);
>      }
>  
> -    // See MATH-728
> -    @Test
> -    public void testConstrainedRosenWithMoreInterpolationPoints() {
> -        final double[] startPoint = point(DIM, 0.1);
> -        final double[][] boundaries = boundaries(DIM, -1, 2);
> -        final RealPointValuePair expected = new RealPointValuePair(point(DIM, 1.0), 0.0);
> -
> -        // This should have been 78 because in the code the hard limit is
> -        // said to be
> -        //   ((DIM + 1) * (DIM + 2)) / 2 - (2 * DIM + 1)
> -        // i.e. 78 in this case, but the test fails for 48, 59, 62, 63, 64,
> -        // 65, 66, ...
> -        final int maxAdditionalPoints = 47;
> -
> -        for (int num = 1; num <= maxAdditionalPoints; num++) {
> -            doTest(new Rosen(), startPoint, boundaries,
> -                   GoalType.MINIMIZE,
> -                   1e-12, 1e-6, 2000,
> -                   num,
> -                   expected,
> -                   "num=" + num);
> -        }
> -    }
> -
>      /**
>       * @param func Function to optimize.
>       * @param startPoint Starting point.
> @@ -273,40 +249,6 @@ public class BOBYQAOptimizerTest {
>              double pointTol,
>              int maxEvaluations,
>              RealPointValuePair expected) {
> -        doTest(func,
> -               startPoint,
> -               boundaries,
> -               goal,
> -               fTol,
> -               pointTol,
> -               maxEvaluations,
> -               0,
> -               expected,
> -               "");
> -    }
> -
> -    /**
> -     * @param func Function to optimize.
> -     * @param startPoint Starting point.
> -     * @param boundaries Upper / lower point limit.
> -     * @param goal Minimization or maximization.
> -     * @param fTol Tolerance relative error on the objective function.
> -     * @param pointTol Tolerance for checking that the optimum is correct.
> -     * @param maxEvaluations Maximum number of evaluations.
> -     * @param additionalInterpolationPoints Number of interpolation to used
> -     * in addition to the default (2 * dim + 1).
> -     * @param expected Expected point / value.
> -     */
> -    private void doTest(MultivariateFunction func,
> -                        double[] startPoint,
> -                        double[][] boundaries,
> -                        GoalType goal,
> -                        double fTol,
> -                        double pointTol,
> -                        int maxEvaluations,
> -                        int additionalInterpolationPoints,
> -                        RealPointValuePair expected,
> -                        String assertMsg) {
>  
>          System.out.println(func.getClass().getName() + " BEGIN"); // XXX
>  
> @@ -316,14 +258,14 @@ public class BOBYQAOptimizerTest {
>  //        RealPointValuePair result = optim.optimize(100000, func, goal, startPoint);
>          final double[] lB = boundaries == null ? null : boundaries[0];
>          final double[] uB = boundaries == null ? null : boundaries[1];
> -        final int numIterpolationPoints = 2 * dim + 1 + additionalInterpolationPoints;
> -        BOBYQAOptimizer optim = new BOBYQAOptimizer(numIterpolationPoints);
> +        BOBYQAOptimizer optim = new BOBYQAOptimizer(2 * dim + 1);
>          RealPointValuePair result = optim.optimize(maxEvaluations, func, goal, startPoint, lB, uB);
>  //        System.out.println(func.getClass().getName() + " = " 
>  //              + optim.getEvaluations() + " f(");
>  //        for (double x: result.getPoint())  System.out.print(x + " ");
>  //        System.out.println(") = " +  result.getValue());
> -        Assert.assertEquals(assertMsg, expected.getValue(), result.getValue(), fTol);
> +        Assert.assertEquals(expected.getValue(),
> +                result.getValue(), fTol);
>          for (int i = 0; i < dim; i++) {
>              Assert.assertEquals(expected.getPoint()[i],
>                      result.getPoint()[i], pointTol);
