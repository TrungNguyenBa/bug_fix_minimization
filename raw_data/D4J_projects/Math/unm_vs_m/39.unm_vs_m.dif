2c2
< index d2bbf67..13ced27 100644
---
> index d2bbf6725..13ced27d7 100644
20a21,108
> diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
> index 97db5b991..e1e126028 100644
> --- a/src/site/xdoc/changes.xml
> +++ b/src/site/xdoc/changes.xml
> @@ -52,9 +52,6 @@ The <action> type attribute can be add,update,fix,remove.
>      If the output is not quite correct, check for invisible trailing spaces!
>       -->
>      <release version="3.0" date="TBD" description="TBD">
> -      <action dev="luc" type="fix" issue="MATH-727">
> -        Check first step size in embedded Runge-Kutta integrators, and truncate it if needed.
> -      </action>
>        <action dev="psteitz" type="fix" issue="MATH-723">
>          Modified setSeed methods in Bitstream generators (MersenneTwister and Well
>          generators) to clear the cache of normal deviates used by nextGaussian.
> diff --git a/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java b/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java
> index f62299863..7d5e9b736 100644
> --- a/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java
> +++ b/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java
> @@ -177,32 +177,6 @@ public class DormandPrince853IntegratorTest {
>    }
>  
>    @Test
> -  public void testTooLargeFirstStep() {
> -
> -      AdaptiveStepsizeIntegrator integ =
> -              new DormandPrince853Integrator(0, Double.POSITIVE_INFINITY, Double.NaN, Double.NaN);
> -      final double start = 0.0;
> -      final double end   = 0.001;
> -      FirstOrderDifferentialEquations equations = new FirstOrderDifferentialEquations() {
> -
> -          public int getDimension() {
> -              return 1;
> -          }
> -
> -          public void computeDerivatives(double t, double[] y, double[] yDot) {
> -              Assert.assertTrue(t >= FastMath.nextAfter(start, Double.NEGATIVE_INFINITY));
> -              Assert.assertTrue(t <= FastMath.nextAfter(end,   Double.POSITIVE_INFINITY));
> -              yDot[0] = -100.0 * y[0];
> -          }
> -
> -      };
> -
> -      integ.setStepSizeControl(0, 1.0, 1.0e-6, 1.0e-8);
> -      integ.integrate(equations, start, new double[] { 1.0 }, end, new double[1]);
> -
> -  }
> -
> -  @Test
>    public void testBackward()
>        {
>  
> diff --git a/src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java b/src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java
> index f516b2b9d..0be4a0c5c 100644
> --- a/src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java
> +++ b/src/test/java/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegratorTest.java
> @@ -256,32 +256,6 @@ public class GraggBulirschStoerIntegratorTest {
>    }
>  
>    @Test
> -  public void testTooLargeFirstStep() {
> -
> -      AdaptiveStepsizeIntegrator integ =
> -              new GraggBulirschStoerIntegrator(0, Double.POSITIVE_INFINITY, Double.NaN, Double.NaN);
> -      final double start = 0.0;
> -      final double end   = 0.001;
> -      FirstOrderDifferentialEquations equations = new FirstOrderDifferentialEquations() {
> -
> -          public int getDimension() {
> -              return 1;
> -          }
> -
> -          public void computeDerivatives(double t, double[] y, double[] yDot) {
> -              Assert.assertTrue(t >= FastMath.nextAfter(start, Double.NEGATIVE_INFINITY));
> -              Assert.assertTrue(t <= FastMath.nextAfter(end,   Double.POSITIVE_INFINITY));
> -              yDot[0] = -100.0 * y[0];
> -          }
> -
> -      };
> -
> -      integ.setStepSizeControl(0, 1.0, 1.0e-6, 1.0e-8);
> -      integ.integrate(equations, start, new double[] { 1.0 }, end, new double[1]);
> -
> -  }
> -
> -  @Test
>    public void testUnstableDerivative() {
>      final StepProblem stepProblem = new StepProblem(0.0, 1.0, 2.0);
>      FirstOrderIntegrator integ =
