2c2
< index d96c916..02c22b5 100644
---
> index d96c9167b..fd8943203 100644
5c5
< @@ -407,12 +407,10 @@ class SimplexTableau implements Serializable {
---
> @@ -407,12 +407,7 @@ class SimplexTableau implements Serializable {
10,12c10,12
<                // if the basic row is found to be the objective function row
<                // set the coefficient to 0 -> this case handles unconstrained 
<                // variables that are still part of the objective function
---
> -              // if the basic row is found to be the objective function row
> -              // set the coefficient to 0 -> this case handles unconstrained 
> -              // variables that are still part of the objective function
18a19,58
> diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
> index 1d2e38b07..b8e3a1d09 100644
> --- a/src/site/xdoc/changes.xml
> +++ b/src/site/xdoc/changes.xml
> @@ -52,10 +52,6 @@ The <action> type attribute can be add,update,fix,remove.
>      If the output is not quite correct, check for invisible trailing spaces!
>       -->
>      <release version="3.0" date="TBD" description="TBD">
> -      <action dev="luc" type="fix" issue="MATH-713" due-to="Thomas Neidhart">
> -        Fixed case of unconstrained variables that still occur in the objective function
> -        in simplex solver.
> -      </action>
>        <action dev="luc" type="add" issue="MATH-710" due-to="Eldar Agalarov">
>          The fast cryptographically secure pseudorandom number generator ISAAC has been added.
>        </action>
> diff --git a/src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java b/src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java
> index 46afe77ed..169d07d23 100644
> --- a/src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java
> +++ b/src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java
> @@ -30,20 +30,6 @@ import org.junit.Test;
>  public class SimplexSolverTest {
>  
>      @Test
> -    public void testMath713NegativeVariable() {
> -        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {1.0, 1.0}, 0.0d);
> -        ArrayList<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
> -        constraints.add(new LinearConstraint(new double[] {1, 0}, Relationship.EQ, 1));
> -
> -        double epsilon = 1e-6;
> -        SimplexSolver solver = new SimplexSolver();
> -        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);
> -
> -        Assert.assertTrue(Precision.compareTo(solution.getPoint()[0], 0.0d, epsilon) >= 0);
> -        Assert.assertTrue(Precision.compareTo(solution.getPoint()[1], 0.0d, epsilon) >= 0);
> -    }
> -
> -    @Test
>      public void testMath434NegativeVariable() {
>          LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {0.0, 0.0, 1.0}, 0.0d);
>          ArrayList<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
