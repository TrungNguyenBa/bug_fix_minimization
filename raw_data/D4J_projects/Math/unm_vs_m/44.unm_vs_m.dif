2c2
< index 8f315e3..544124f 100644
---
> index 8f315e334..2d878b15f 100644
5c5,13
< @@ -277,6 +277,7 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {
---
> @@ -40,6 +40,7 @@ import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;
>  import org.apache.commons.math.ode.sampling.StepHandler;
>  import org.apache.commons.math.util.FastMath;
>  import org.apache.commons.math.util.Incrementor;
> +import org.apache.commons.math.util.MathUtils;
>  import org.apache.commons.math.util.Precision;
>  
>  /**
> @@ -277,6 +278,7 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {
13c21
< @@ -330,9 +331,6 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {
---
> @@ -330,9 +332,6 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {
23c31
< @@ -342,9 +340,6 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {
---
> @@ -342,9 +341,6 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {
32a41,132
> diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
> index 1e770fe69..bf13163d4 100644
> --- a/src/site/xdoc/changes.xml
> +++ b/src/site/xdoc/changes.xml
> @@ -52,9 +52,6 @@ The <action> type attribute can be add,update,fix,remove.
>      If the output is not quite correct, check for invisible trailing spaces!
>       -->
>      <release version="3.0" date="TBD" description="TBD">
> -      <action dev="luc" type="fix" issue="MATH-695">
> -        Fixed an event resetting issue in ODE.
> -      </action>
>        <action dev="erans" type="update" issue="MATH-696">
>          Default implementation for "addToEntry" and "multiplyEntry" in
>          "AbstractRealMatrix".
> diff --git a/src/test/java/org/apache/commons/math/ode/events/EventStateTest.java b/src/test/java/org/apache/commons/math/ode/events/EventStateTest.java
> index 722584b8f..07178e52b 100644
> --- a/src/test/java/org/apache/commons/math/ode/events/EventStateTest.java
> +++ b/src/test/java/org/apache/commons/math/ode/events/EventStateTest.java
> @@ -19,8 +19,6 @@ package org.apache.commons.math.ode.events;
>  
>  
>  import org.apache.commons.math.analysis.solvers.BrentSolver;
> -import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
> -import org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator;
>  import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;
>  import org.apache.commons.math.ode.sampling.DummyStepInterpolator;
>  import org.junit.Assert;
> @@ -75,64 +73,4 @@ public class EventStateTest {
>  
>      }
>  
> -    // Jira: MATH-695
> -    @Test
> -    public void testIssue695() {
> -
> -        FirstOrderDifferentialEquations equation = new FirstOrderDifferentialEquations() {
> -            
> -            public int getDimension() {
> -                return 1;
> -            }
> -            
> -            public void computeDerivatives(double t, double[] y, double[] yDot) {
> -                yDot[0] = 1.0;
> -            }
> -        };
> -
> -        DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.001, 1000, 1.0e-14, 1.0e-14);
> -        integrator.addEventHandler(new ResettingEvent(10.99), 0.1, 1.0e-9, 1000);
> -        integrator.addEventHandler(new ResettingEvent(11.01), 0.1, 1.0e-9, 1000);
> -        integrator.setInitialStepSize(3.0);
> -
> -        double target = 30.0;
> -        double[] y = new double[1];
> -        double tEnd = integrator.integrate(equation, 0.0, y, target, y);
> -        Assert.assertEquals(target, tEnd, 1.0e-10);
> -        Assert.assertEquals(32.0, y[0], 1.0e-10);
> -
> -    }
> -
> -    private static class ResettingEvent implements EventHandler {
> -
> -        private static double lastTriggerTime = Double.NEGATIVE_INFINITY;
> -        private final double tEvent;
> -
> -        public ResettingEvent(final double tEvent) {
> -            this.tEvent = tEvent;
> -        }
> -
> -        public double g(double t, double[] y) {
> -            // the bug corresponding to issue 695 causes the g function
> -            // to be called at obsolete times t despite an event
> -            // occurring later has already been triggered.
> -            // When this occurs, the following assertion is violated
> -            Assert.assertTrue("going backard in time! (" + t + " < " + lastTriggerTime + ")",
> -                              t >= lastTriggerTime);
> -            return t - tEvent;
> -        }
> -
> -        public Action eventOccurred(double t, double[] y, boolean increasing) {
> -            // remember in a class variable when the event was triggered
> -            lastTriggerTime = t;
> -            return Action.RESET_STATE;
> -        }
> -
> -        public void resetState(double t, double[] y) {
> -            y[0] += 1.0;
> -        }
> -
> -    };
> -
> -
>  }
