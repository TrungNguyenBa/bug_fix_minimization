2c2
< index 137765c..bebfead 100644
---
> index 137765c85..ac31e4b1b 100644
5c5,6
< @@ -79,7 +79,6 @@ public class Complex implements FieldElement<Complex>, Serializable  {
---
> @@ -78,8 +78,6 @@ public class Complex implements FieldElement<Complex>, Serializable  {
>      private final transient boolean isNaN;
8c9
<      /** Record whether this complex number is zero. */
---
> -    /** Record whether this complex number is zero. */
13c14
< @@ -103,7 +102,6 @@ public class Complex implements FieldElement<Complex>, Serializable  {
---
> @@ -103,7 +101,6 @@ public class Complex implements FieldElement<Complex>, Serializable  {
21c22,34
< @@ -255,8 +253,8 @@ public class Complex implements FieldElement<Complex>, Serializable  {
---
> @@ -225,10 +222,7 @@ public class Complex implements FieldElement<Complex>, Serializable  {
>       *  <li>If either {@code this} or {@code divisor} has a {@code NaN} value
>       *   in either part, {@link #NaN} is returned.
>       *  </li>
> -     *  <li>If {@code this} and {@code divisor} are both {@link #ZERO},
> -     *   {@link #NaN} is returned.
> -     *  </li>
> -     *  <li>If {@code divisor} equals {@link #ZERO}, {@link #INF} is returned.
> +     *  <li>If {@code divisor} equals {@link #ZERO}, {@link #NaN} is returned.
>       *  </li>
>       *  <li>If {@code this} and {@code divisor} are both infinite,
>       *   {@link #NaN} is returned.
> @@ -255,17 +249,16 @@ public class Complex implements FieldElement<Complex>, Serializable  {
27c40,42
< +        if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) {
---
> +        final double c = divisor.getReal();
> +        final double d = divisor.getImaginary();
> +        if (c == 0.0 && d == 0.0) {
32c47,56
< @@ -292,7 +290,7 @@ public class Complex implements FieldElement<Complex>, Serializable  {
---
>              return ZERO;
>          }
>  
> -        final double c = divisor.getReal();
> -        final double d = divisor.getImaginary();
> -
>          if (FastMath.abs(c) < FastMath.abs(d)) {
>              double q = c / d;
>              double denominator = c * q + d;
> @@ -292,7 +285,7 @@ public class Complex implements FieldElement<Complex>, Serializable  {
40a65,109
> diff --git a/src/test/java/org/apache/commons/math/complex/ComplexTest.java b/src/test/java/org/apache/commons/math/complex/ComplexTest.java
> index a002b0bc2..4bc85b8f7 100644
> --- a/src/test/java/org/apache/commons/math/complex/ComplexTest.java
> +++ b/src/test/java/org/apache/commons/math/complex/ComplexTest.java
> @@ -229,13 +229,6 @@ public class ComplexTest {
>      public void testDivideZero() {
>          Complex x = new Complex(3.0, 4.0);
>          Complex z = x.divide(Complex.ZERO);
> -        Assert.assertEquals(z, Complex.INF);
> -    }
> -
> -    @Test
> -    public void testDivideZeroZero() {
> -        Complex x = new Complex(0.0, 0.0);
> -        Complex z = x.divide(Complex.ZERO);
>          Assert.assertEquals(z, Complex.NaN);
>      }
>  
> @@ -356,7 +349,7 @@ public class ComplexTest {
>  
>      @Test
>      public void testScalarMultiplyInf() {
> -        Complex x = new Complex(1, 1);
> +        Complex x = new Complex(1,1);
>          double yDouble = Double.POSITIVE_INFINITY;
>          Complex yComplex = new Complex(yDouble);
>          Assert.assertEquals(x.multiply(yComplex), x.multiply(yDouble));
> @@ -572,16 +565,9 @@ public class ComplexTest {
>      }
>  
>      @Test
> -    public void testAtanI() {
> -        for (int i = -10; i < 10; i++) {
> -            System.out.println(new Complex(0, 1 - 0.1 * i).atan());
> -        }
> -        Assert.assertTrue(Complex.I.atan().isInfinite());
> -    }
> -
> -    @Test
>      public void testAtanNaN() {
>          Assert.assertTrue(Complex.NaN.atan().isNaN());
> +        Assert.assertTrue(Complex.I.atan().isNaN());
>      }
>  
>      @Test
