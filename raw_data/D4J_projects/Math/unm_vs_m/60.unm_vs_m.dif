2c2
< index 0d7ce7d..0e124d8 100644
---
> index 0d7ce7da3..456555bf3 100644
5c5,17
< @@ -123,11 +123,18 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution
---
> @@ -114,20 +114,26 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution
>  
>      /**
>       * For this distribution, {@code X}, this method returns {@code P(X < x)}.
> -     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,
> -     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.
>       *
>       * @param x Value at which the CDF is evaluated.
>       * @return CDF evaluated at {@code x}.
> -     * @throws MathException if the algorithm fails to converge
> +     * @throws MathException if the algorithm fails to converge; unless
> +     * {@code x} is more than 20 standard deviations from the mean, in which
> +     * case the convergence exception is caught and 0 or 1 is returned.
8c20
<          final double dev = x - mean;
---
> -        final double dev = x - mean;
11a24
> -        return 0.5 * (1.0 + Erf.erf((dev) /
13c26
<          return 0.5 * (1.0 + Erf.erf((dev) /
---
> +            return 0.5 * (1.0 + Erf.erf((x - mean) /
26a40,94
> diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
> index 0c4519b03..339854ddd 100644
> --- a/src/site/xdoc/changes.xml
> +++ b/src/site/xdoc/changes.xml
> @@ -118,13 +118,6 @@ The <action> type attribute can be add,update,fix,remove.
>        </action>
>      </release>
>      <release version="2.2" date="TBD" description="TBD">
> -      <action dev="psteitz" type="fix" issue="MATH-414">
> -        Modified NormalDistributionImpl.cumulativeProbability to return 0 or 1,
> -        respectively for values more than 40 standard deviations from the mean.
> -        For these values, the actual probability is indistinguishable from 0 or 1
> -        as a double.  Top coding improves performance for extreme values and prevents
> -        convergence exceptions.
> -      </action>
>        <action dev="psteitz" type="update" issue="MATH-420">
>          Added toString() override to StatisticalSummaryValues.
>        </action>
> diff --git a/src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java b/src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java
> index f8ebebf68..e9ffe5c1e 100644
> --- a/src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java
> +++ b/src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java
> @@ -152,16 +152,14 @@ public class NormalDistributionTest extends ContinuousDistributionAbstractTest
>  
>      /**
>       * Check to make sure top-coding of extreme values works correctly.
> -     * Verifies fixes for JIRA MATH-167, MATH-414
> +     * Verifies fix for JIRA MATH-167
>       */
>      public void testExtremeValues() throws Exception {
>          NormalDistribution distribution = new NormalDistributionImpl(0, 1);
> -        for (int i = 0; i < 100; i++) { // make sure no convergence exception
> +        for (int i = 0; i < 100; i+=5) { // make sure no convergence exception
>              double lowerTail = distribution.cumulativeProbability(-i);
>              double upperTail = distribution.cumulativeProbability(i);
> -            if (i < 9) { // make sure not top-coded 
> -                // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned
> -                // TODO: once MATH-364 is resolved, replace 9 with 30
> +            if (i < 10) { // make sure not top-coded
>                  assertTrue(lowerTail > 0.0d);
>                  assertTrue(upperTail < 1.0d);
>              }
> @@ -170,12 +168,6 @@ public class NormalDistributionTest extends ContinuousDistributionAbstractTest
>                  assertTrue(upperTail > 0.99999);
>              }
>          }
> -        
> -        assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);
> -        assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);
> -        assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);
> -        assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);
> -        
>     }
>  
>      public void testMath280() throws MathException {
