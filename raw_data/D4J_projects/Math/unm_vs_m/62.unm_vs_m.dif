2c2
< index 952e565..1200544 100644
---
> index 952e56569..aa14ce6c1 100644
5c5
< @@ -143,7 +143,7 @@ public class MultiStartUnivariateRealOptimizer<FUNC extends UnivariateRealFuncti
---
> @@ -143,22 +143,18 @@ public class MultiStartUnivariateRealOptimizer<FUNC extends UnivariateRealFuncti
10,11c10,18
< +        return optimize(f, goal, min, max, 0);
<      }
---
> -    }
>  
> -    /** {@inheritDoc} */
> -    public UnivariateRealPointValuePair optimize(final FUNC f, final GoalType goal,
> -                                                 final double min, final double max,
> -                                                 final double startValue)
> -        throws FunctionEvaluationException {
>          optima = new UnivariateRealPointValuePair[starts];
>          totalEvaluations = 0;
13,14d19
<      /** {@inheritDoc} */
< @@ -157,8 +157,9 @@ public class MultiStartUnivariateRealOptimizer<FUNC extends UnivariateRealFuncti
22c27,29
< +                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));
---
> +                optima[i] = optimizer.optimize(f, goal,
> +                                               FastMath.min(bound1, bound2),
> +                                               FastMath.max(bound1, bound2));
25a33,82
> @@ -181,6 +177,16 @@ public class MultiStartUnivariateRealOptimizer<FUNC extends UnivariateRealFuncti
>          return optima[0];
>      }
>  
> +    /** {@inheritDoc} */
> +    public UnivariateRealPointValuePair optimize(final FUNC f, final GoalType goalType,
> +                                                 final double min, final double max,
> +                                                 final double startValue)
> +            throws FunctionEvaluationException {
> +        // XXX Main code should be here, using "startValue" for the first start.
> +        // XXX This method should set "startValue" to min + 0.5 * (max - min)
> +        return optimize(f, goalType, min, max);
> +    }
> +
>      /**
>       * Sort the optima from best to worst, followed by {@code null} elements.
>       *
> diff --git a/src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java b/src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java
> index f1e0fd859..a688df91b 100644
> --- a/src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java
> +++ b/src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java
> @@ -50,8 +50,8 @@ public class MultiStartUnivariateRealOptimizerTest {
>              assertEquals(-1.0, f.value(optima[i].getPoint()), 1.0e-10);
>              assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1.0e-10);
>          }
> -        assertTrue(optimizer.getEvaluations() > 200);
> -        assertTrue(optimizer.getEvaluations() < 300);
> +        assertTrue(optimizer.getEvaluations() > 150);
> +        assertTrue(optimizer.getEvaluations() < 250);
>      }
>  
>      @Test
> @@ -68,14 +68,14 @@ public class MultiStartUnivariateRealOptimizerTest {
>  
>          UnivariateRealPointValuePair optimum
>              = optimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);
> -        assertEquals(-0.2719561293, optimum.getPoint(), 1e-9);
> +        assertEquals(-0.2719561271, optimum.getPoint(), 1e-9);
>          assertEquals(-0.0443342695, optimum.getValue(), 1e-9);
>  
>          UnivariateRealPointValuePair[] optima = optimizer.getOptima();
>          for (int i = 0; i < optima.length; ++i) {
>              assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1e-9);
>          }
> -        assertTrue(optimizer.getEvaluations() >= 50);
> -        assertTrue(optimizer.getEvaluations() <= 100);
> +        assertTrue(optimizer.getEvaluations() >= 110);
> +        assertTrue(optimizer.getEvaluations() <= 150);
>      }
>  }
