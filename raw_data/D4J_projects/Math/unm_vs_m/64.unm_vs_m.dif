0a1,18
> diff --git a/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java
> index c4b19855a..152c30c3a 100644
> --- a/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java
> +++ b/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java
> @@ -247,7 +247,12 @@ public abstract class AbstractLeastSquaresOptimizer implements DifferentiableMul
>       * @return chi-square value
>       */
>      public double getChiSquare() {
> -        return cost*cost;
> +        double chiSquare = 0;
> +        for (int i = 0; i < rows; ++i) {
> +            final double residual = residuals[i];
> +            chiSquare += residual * residual * residualsWeights[i];
> +        }
> +        return chiSquare;
>      }
>  
>      /**
2c20
< index b41456e..5091493 100644
---
> index b41456eff..4cf4ee006 100644
14c32
< @@ -269,9 +267,6 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {
---
> @@ -269,9 +267,7 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {
20a39
> +
24c43
< @@ -280,7 +275,7 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {
---
> @@ -280,7 +276,8 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {
29a49
> +
33c53
< @@ -318,7 +313,7 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {
---
> @@ -318,7 +315,7 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {
42c62
< @@ -326,8 +321,6 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {
---
> @@ -326,8 +323,6 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {
51c71
< @@ -348,12 +341,9 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {
---
> @@ -348,12 +343,9 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {
65c85
< @@ -372,6 +362,7 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {
---
> @@ -372,6 +365,7 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {
73c93
< @@ -427,15 +418,9 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {
---
> @@ -427,15 +421,6 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {
78,79c98,99
<  
<                      // tests for convergence.
---
> -
> -                    // tests for convergence.
81c101
<                      // we use the vectorial convergence checker
---
> -                    // we use the vectorial convergence checker
89c109
< @@ -446,9 +431,6 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {
---
> @@ -446,11 +431,16 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {
97,103c117,121
<                  if (checker==null) {
<                  	if (((Math.abs(actRed) <= costRelativeTolerance) &&
< @@ -457,6 +439,10 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {
<                         (delta <= parRelativeTolerance * xNorm)) {
<                         return current;
<                     }
< +                } else {
---
> -                if (checker==null) {
> +
> +                // tests for convergence.
> +                if (checker != null) {
> +                    // we use the vectorial convergence checker
106a125,160
> +                } else {
> +                    // we use the Levenberg-Marquardt specific convergence parameters
>                      if (((Math.abs(actRed) <= costRelativeTolerance) &&
>                           (preRed <= costRelativeTolerance) &&
>                           (ratio <= 2.0)) ||
> diff --git a/src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java b/src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java
> index 620df2d4b..59467b224 100644
> --- a/src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java
> +++ b/src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java
> @@ -152,14 +152,14 @@ public class MinpackTest extends TestCase {
>      minpackTest(new FreudensteinRothFunction(new double[] { 5.0, -20.0 },
>                                               12432.833948863, 6.9988751744895,
>                                               new double[] {
> -                                                11.41300466147456,
> -                                                -0.896796038685959
> +                                               11.4121122022341,
> +                                               -0.8968550851268697
>                                               }), false);
>      minpackTest(new FreudensteinRothFunction(new double[] { 50.0, -200.0 },
>                                               11426454.595762, 6.99887517242903,
>                                               new double[] {
> -                                                 11.412781785788564,
> -                                                 -0.8968051074920405
> +                                               11.412069435091231,
> +                                               -0.8968582807605691
>                                               }), false);
>    }
>  
> @@ -325,8 +325,7 @@ public class MinpackTest extends TestCase {
>      minpackTest(new JennrichSampsonFunction(10, new double[] { 0.3, 0.4 },
>                                              64.5856498144943, 11.1517793413499,
>                                              new double[] {
> - //                                            0.2578330049, 0.257829976764542
> -                                               0.2578199266368004, 0.25782997676455244
> +                                             0.2578330049, 0.257829976764542
>                                              }), false);
108,109c162
<                  // tests for termination and stringent tolerances
<                  // (2.2204e-16 is the machine epsilon for IEEE754)
---
>  
