0a1,34
> diff --git a/src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java b/src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java
> index 0c4eabeda..883578b64 100644
> --- a/src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java
> +++ b/src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java
> @@ -139,14 +139,14 @@ public abstract class ConvergingAlgorithmImpl implements ConvergingAlgorithm {
>      /**
>       * Increment the iterations counter by 1.
>       *
> -     * @throws MaxIterationsExceededException if the maximal number
> +     * @throws OptimizationException if the maximal number
>       * of iterations is exceeded.
>       * @since 2.2
>       */
>      protected void incrementIterationsCounter()
> -        throws MaxIterationsExceededException {
> +        throws ConvergenceException {
>          if (++iterationCount > maximalIterationCount) {
> -            throw new MaxIterationsExceededException(maximalIterationCount);
> +            throw new ConvergenceException(new MaxIterationsExceededException(maximalIterationCount));
>          }
>      }
>  }
> diff --git a/src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java b/src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java
> index c6eeb53d0..d312243bc 100644
> --- a/src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java
> +++ b/src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java
> @@ -260,6 +260,5 @@ public abstract class AbstractUnivariateRealOptimizer
>       *
>       * @return the optimum.
>       */
> -    protected abstract double doOptimize()
> -        throws MaxIterationsExceededException, FunctionEvaluationException;
> +    protected abstract double doOptimize();
>  }
2c36
< index 46c4afa..9265415 100644
---
> index 46c4afae0..62f2fcb6a 100644
5c39
< @@ -41,10 +41,10 @@ public class BrentOptimizer extends AbstractUnivariateRealOptimizer {
---
> @@ -41,37 +41,39 @@ public class BrentOptimizer extends AbstractUnivariateRealOptimizer {
10,11c44
< +        setMaxEvaluations(Integer.MAX_VALUE);
<          setMaximalIterationCount(100);
---
> -        setMaximalIterationCount(100);
14,15c47
< +        setAbsoluteAccuracy(1E-10);
< +        setRelativeAccuracy(1.0e-14);
---
> +        super(100, 1E-10);
18,21c50,58
<      /**
< @@ -54,10 +54,17 @@ public class BrentOptimizer extends AbstractUnivariateRealOptimizer {
<       */
<      protected double doOptimize()
---
> -    /**
> -     * Perform the optimization.
> -     *
> -     * @return the optimum.
> -     */
> -    protected double doOptimize()
> +    /** {@inheritDoc} */
> +    public double optimize(final UnivariateRealFunction f, final GoalType goalType,
> +                           final double min, final double max, final double startValue)
23,27c60
< +        throw new UnsupportedOperationException();
< +    }
< +    public double optimize(final UnivariateRealFunction f, final GoalType goalType, final double min, final double max, final double startValue) throws MaxIterationsExceededException, FunctionEvaluationException {
< +        clearResult();
<          return localMin(getGoalType() == GoalType.MINIMIZE,
---
> -        return localMin(getGoalType() == GoalType.MINIMIZE,
29c62,63
< +                        f, goalType, min, startValue, max,
---
> +        clearResult();
> +        return localMin(f, goalType, min, startValue, max,
32c66,70
< +    public double optimize(final UnivariateRealFunction f, final GoalType goalType, final double min, final double max) throws MaxIterationsExceededException, FunctionEvaluationException {
---
>  
> +    /** {@inheritDoc} */
> +    public double optimize(final UnivariateRealFunction f, final GoalType goalType,
> +                           final double min, final double max)
> +        throws MaxIterationsExceededException, FunctionEvaluationException {
35c73
<  
---
> +
37,38c75,103
<       * Find the minimum of the function within the interval {@code (lo, hi)}.
< @@ -84,6 +91,8 @@ public class BrentOptimizer extends AbstractUnivariateRealOptimizer {
---
> -     * Find the minimum of the function within the interval {@code (lo, hi)}.
> +     * Find the minimum of the function {@code f} within the interval {@code (a, b)}.
>       *
> -     * If the function is defined on the interval {@code (lo, hi)}, then
> -     * this method finds an approximation {@code x} to the point at which
> -     * the function attains its minimum.<br/>
> -     * {@code t} and {@code eps} define a tolerance {@code tol = eps |x| + t}
> -     * and the function is never evaluated at two points closer together than
> -     * {@code tol}. {@code eps} should be no smaller than <em>2 macheps</em> and
> -     * preferable not much less than <em>sqrt(macheps)</em>, where
> -     * <em>macheps</em> is the relative machine precision. {@code t} should be
> -     * positive.
> -     * @param isMinim {@code true} when minimizing the function.
> +     * If the function {@code f} is defined on the interval {@code (a, b)}, then
> +     * this method finds an approximation {@code x} to the point at which {@code f}
> +     * attains its minimum.<br/>
> +     * {@code t} and {@code eps} define a tolerance {@code tol = eps |x| + t} and
> +     * {@code f} is never evaluated at two points closer together than {@code tol}.
> +     * {@code eps} should be no smaller than <em>2 macheps</em> and preferable not
> +     * much less than <em>sqrt(macheps)</em>, where <em>macheps</em> is the relative
> +     * machine precision. {@code t} should be positive.
> +     * @param f the function to solve.
> +     * @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}
> +     * or {@link GoalType#MINIMIZE}.
>       * @param lo Lower bound of the interval.
>       * @param mid Point inside the interval {@code [lo, hi]}.
>       * @param hi Higher bound of the interval.
> @@ -83,7 +85,8 @@ public class BrentOptimizer extends AbstractUnivariateRealOptimizer {
>       * @throws FunctionEvaluationException if an error occurs evaluating
41,42c106,107
<      private double localMin(boolean isMinim,
< +                            UnivariateRealFunction f,
---
> -    private double localMin(boolean isMinim,
> +    private double localMin(UnivariateRealFunction f,
47c112,114
< @@ -107,14 +116,15 @@ public class BrentOptimizer extends AbstractUnivariateRealOptimizer {
---
> @@ -105,16 +108,16 @@ public class BrentOptimizer extends AbstractUnivariateRealOptimizer {
>          double x = mid;
>          double v = x;
49c116
<          double d = 0;
---
> -        double d = 0;
66c133,141
< @@ -187,8 +197,8 @@ public class BrentOptimizer extends AbstractUnivariateRealOptimizer {
---
> @@ -124,6 +127,7 @@ public class BrentOptimizer extends AbstractUnivariateRealOptimizer {
>                  double p = 0;
>                  double q = 0;
>                  double r = 0;
> +                double d = 0;
>                  double u = 0;
>  
>                  if (Math.abs(e) > tol1) { // Fit parabola.
> @@ -187,8 +191,8 @@ public class BrentOptimizer extends AbstractUnivariateRealOptimizer {
77c152
< @@ -225,10 +235,11 @@ public class BrentOptimizer extends AbstractUnivariateRealOptimizer {
---
> @@ -225,10 +229,16 @@ public class BrentOptimizer extends AbstractUnivariateRealOptimizer {
88a164,322
> +    }
> +
> +    /** Temporary workaround. */
> +    protected double doOptimize() {
> +        throw new UnsupportedOperationException();
>      }
>  }
> diff --git a/src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java b/src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java
> index a865bdafb..159588d1e 100644
> --- a/src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java
> +++ b/src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java
> @@ -48,8 +48,8 @@ public class MultiStartUnivariateRealOptimizerTest {
>              assertEquals(-1.0, f.value(optima[i]), 1.0e-10);
>              assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);
>          }
> -        assertTrue(minimizer.getEvaluations() > 150);
> -        assertTrue(minimizer.getEvaluations() < 250);
> +        assertTrue(minimizer.getEvaluations() > 1500);
> +        assertTrue(minimizer.getEvaluations() < 1700);
>      }
>  
>      @Test
> @@ -84,8 +84,8 @@ public class MultiStartUnivariateRealOptimizerTest {
>          }
>  
>          double result = minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);
> -        assertEquals(-0.2719561270319131, result, 1.0e-13);
> -        assertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13);
> +        assertEquals(-0.27195612525275803, result, 1.0e-13);
> +        assertEquals(-0.27195612525275803, minimizer.getResult(), 1.0e-13);
>          assertEquals(-0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13);
>  
>          double[] optima = minimizer.getOptima();
> @@ -93,9 +93,10 @@ public class MultiStartUnivariateRealOptimizerTest {
>          for (int i = 0; i < optima.length; ++i) {
>              assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);
>          }
> -        assertTrue(minimizer.getEvaluations()    >= 120);
> -        assertTrue(minimizer.getEvaluations()    <= 170);
> -        assertTrue(minimizer.getIterationCount() >= 120);
> -        assertTrue(minimizer.getIterationCount() <= 170);
> +
> +        assertTrue(minimizer.getEvaluations()    >= 300);
> +        assertTrue(minimizer.getEvaluations()    <= 420);
> +        assertTrue(minimizer.getIterationCount() >= 100);
> +        assertTrue(minimizer.getIterationCount() <= 140);
>      }
>  }
> diff --git a/src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java b/src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java
> index 176b9ad8b..9c73d21f0 100644
> --- a/src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java
> +++ b/src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java
> @@ -29,7 +29,6 @@ import org.apache.commons.math.analysis.SinFunction;
>  import org.apache.commons.math.analysis.UnivariateRealFunction;
>  import org.apache.commons.math.optimization.GoalType;
>  import org.apache.commons.math.optimization.UnivariateRealOptimizer;
> -import org.apache.commons.math.stat.descriptive.DescriptiveStatistics;
>  import org.junit.Test;
>  
>  /**
> @@ -51,13 +50,13 @@ public final class BrentOptimizerTest {
>          } catch (Exception e) {
>              fail("wrong exception caught");
>          }
> -        assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 10 * minimizer.getRelativeAccuracy());
> +        assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 70 * minimizer.getAbsoluteAccuracy());
>          assertTrue(minimizer.getIterationCount() <= 50);
> -        assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 10 * minimizer.getRelativeAccuracy());
> +        assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 70 * minimizer.getAbsoluteAccuracy());
>          assertTrue(minimizer.getIterationCount() <= 50);
>          assertTrue(minimizer.getEvaluations()    <= 100);
> -        assertTrue(minimizer.getEvaluations()    >=  15);
> -        minimizer.setMaxEvaluations(10);
> +        assertTrue(minimizer.getEvaluations()    >=  30);
> +        minimizer.setMaxEvaluations(50);
>          try {
>              minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);
>              fail("an exception should have been thrown");
> @@ -83,35 +82,35 @@ public final class BrentOptimizerTest {
>      }
>  
>      @Test
> -    public void testQuinticMinStatistics() throws MathException {
> +    public void testQuinticMinPythonComparison() throws MathException {
>          // The function has local minima at -0.27195613 and 0.82221643.
>          UnivariateRealFunction f = new QuinticFunction();
>          UnivariateRealOptimizer minimizer = new BrentOptimizer();
> -        minimizer.setRelativeAccuracy(1e-10);
> +        minimizer.setRelativeAccuracy(1e-12);
>          minimizer.setAbsoluteAccuracy(1e-11);
>  
> -        final DescriptiveStatistics[] stat = new DescriptiveStatistics[3];
> -        for (int i = 0; i < stat.length; i++) {
> -            stat[i] = new DescriptiveStatistics();
> -        }
> +        double result;
> +        int nIter, nEval;
>  
> -        final double min = -0.75;
> -        final double max = 0.25;
> -        final int nSamples = 200;
> -        final double delta = (max - min) / nSamples;
> -        for (int i = 0; i < nSamples; i++) {
> -            final double start = min + i * delta;
> -            stat[0].addValue(minimizer.optimize(f, GoalType.MINIMIZE, min, max, start));
> -            stat[1].addValue(minimizer.getIterationCount());
> -            stat[2].addValue(minimizer.getEvaluations());
> -        }
> +        result = minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2, -0.25);
> +        nIter = minimizer.getIterationCount();
> +        nEval = minimizer.getEvaluations();
> +        // XXX Python: -0.27195612805911351 (instead of -0.2719561279558559).
> +        assertEquals(-0.2719561279558559, result, 1e-12);
> +        // XXX Python: 15 (instead of 18).
> +        assertEquals(18, nEval);
> +        // XXX Python: 11 (instead of 17).
> +        assertEquals(17, nIter);
>  
> -        final double meanOptValue = stat[0].getMean();
> -        final double medianIter = stat[1].getPercentile(50);
> -        final double medianEval = stat[2].getPercentile(50);
> -        assertTrue(meanOptValue > -0.27195612812 && meanOptValue < -0.27195612811);
> -        assertEquals(medianIter, 17, Math.ulp(1d));
> -        assertEquals(medianEval, 18, Math.ulp(1d));
> +        result = minimizer.optimize(f, GoalType.MINIMIZE, 0.7, 0.9, 0.8);
> +        nIter = minimizer.getIterationCount();
> +        nEval = minimizer.getEvaluations();
> +        // XXX Python: 0.82221643488363705 (instead of 0.8222164326561908).
> +        assertEquals(0.8222164326561908, result, 1e-12);
> +        // XXX Python: 25 (instead of 43).
> +        assertEquals(43, nEval);
> +        // XXX Python: 21 (instead of 24).
> +        assertEquals(24, nIter);
>      }
>  
>      @Test
> @@ -121,7 +120,7 @@ public final class BrentOptimizerTest {
>          UnivariateRealFunction f = new QuinticFunction();
>          UnivariateRealOptimizer minimizer = new BrentOptimizer();
>          assertEquals(0.27195613, minimizer.optimize(f, GoalType.MAXIMIZE, 0.2, 0.3), 1.0e-8);
> -        minimizer.setMaximalIterationCount(5);
> +        minimizer.setMaximalIterationCount(20);
>          try {
>              minimizer.optimize(f, GoalType.MAXIMIZE, 0.2, 0.3);
>              fail("an exception should have been thrown");
> @@ -137,13 +136,11 @@ public final class BrentOptimizerTest {
>          UnivariateRealFunction f = new SinFunction();
>          UnivariateRealOptimizer solver = new BrentOptimizer();
>  
> -        solver.setRelativeAccuracy(1e-8);
> -
>          // endpoint is minimum
>          double result = solver.optimize(f, GoalType.MINIMIZE, 3 * Math.PI / 2, 5);
> -        assertEquals(3 * Math.PI / 2, result, 10 * solver.getRelativeAccuracy());
> +        assertEquals(3 * Math.PI / 2, result, 70 * solver.getAbsoluteAccuracy());
>  
>          result = solver.optimize(f, GoalType.MINIMIZE, 4, 3 * Math.PI / 2);
> -        assertEquals(3 * Math.PI / 2, result, 10 * solver.getRelativeAccuracy());
> +        assertEquals(3 * Math.PI / 2, result, 80 * solver.getAbsoluteAccuracy());
