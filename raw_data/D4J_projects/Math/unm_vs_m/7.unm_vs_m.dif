0a1,14
> diff --git a/src/changes/changes.xml b/src/changes/changes.xml
> index 1c5daf33d..632bd52d0 100644
> --- a/src/changes/changes.xml
> +++ b/src/changes/changes.xml
> @@ -55,9 +55,6 @@ This is a minor release: It combines bug fixes and new features.
>    Changes to existing features were made in a backwards-compatible
>    way such as to allow drop-in replacement of the v3.1[.1] JAR file.
>  ">
> -      <action dev="luc" type="fix" issue="MATH-950" >
> -        Fixed missing update in ODE event handlers, when a RESET_STATE is triggered.
> -      </action>
>        <action dev="psteitz" type="update" issue="MATH-671">
>          Made EmpiricalDisribution smoothing kernel pluggable.
>        </action>
2c16
< index 6e0237f..f24f87c 100644
---
> index 6e0237f9f..00827db20 100644
5,6c19,21
< @@ -343,10 +343,8 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {
<                  final double[] eventY = interpolator.getInterpolatedState().clone();
---
> @@ -338,15 +338,11 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {
>                  interpolator.setSoftPreviousTime(previousT);
>                  interpolator.setSoftCurrentTime(eventT);
8c23,28
<                  // advance all event states to current time
---
> -                // get state at event time
> +                // trigger the event
>                  interpolator.setInterpolatedTime(eventT);
>                  final double[] eventY = interpolator.getInterpolatedState().clone();
> -
> -                // advance all event states to current time
18c38
< @@ -356,19 +354,22 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {
---
> @@ -356,19 +352,21 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {
32,33c52,53
< +                boolean needReset = currentEvent.reset(eventT, eventY);
<                  if (needReset) {
---
> -                if (needReset) {
> +                if (currentEvent.reset(eventT, eventY)) {
44a65,150
> @@ -385,7 +383,6 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {
>  
>              }
>  
> -            // last part of the step, after the last event
>              interpolator.setInterpolatedTime(currentT);
>              final double[] currentY = interpolator.getInterpolatedState();
>              for (final EventState state : eventsStates) {
> diff --git a/src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java b/src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java
> index fcba93c81..77b719732 100644
> --- a/src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java
> +++ b/src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java
> @@ -333,73 +333,6 @@ public class DormandPrince853IntegratorTest {
>      Assert.assertEquals(8.0, y[0], 1.0e-12);
>    }
>  
> -  @Test
> -  public void testEventsScheduling() {
> -
> -      FirstOrderDifferentialEquations sincos = new FirstOrderDifferentialEquations() {
> -
> -          public int getDimension() {
> -              return 2;
> -          }
> -
> -          public void computeDerivatives(double t, double[] y, double[] yDot) {
> -              yDot[0] =  y[1];
> -              yDot[1] = -y[0];
> -          }
> -
> -      };
> -
> -      SchedulingChecker sinChecker = new SchedulingChecker(0); // events at 0, PI, 2PI ...
> -      SchedulingChecker cosChecker = new SchedulingChecker(1); // events at PI/2, 3PI/2, 5PI/2 ...
> -
> -      FirstOrderIntegrator integ =
> -              new DormandPrince853Integrator(0.001, 1.0, 1.0e-12, 0.0);
> -      integ.addEventHandler(sinChecker, 0.01, 1.0e-7, 100);
> -      integ.addStepHandler(sinChecker);
> -      integ.addEventHandler(cosChecker, 0.01, 1.0e-7, 100);
> -      integ.addStepHandler(cosChecker);
> -      double   t0 = 0.5;
> -      double[] y0 = new double[] { FastMath.sin(t0), FastMath.cos(t0) };
> -      double   t  = 10.0;
> -      double[] y  = new double[2];
> -      integ.integrate(sincos, t0, y0, t, y);
> -
> -  }
> -
> -  private static class SchedulingChecker implements StepHandler, EventHandler {
> -
> -      int index;
> -      double tMin;
> -
> -      public SchedulingChecker(int index) {
> -          this.index = index;
> -      }
> -
> -      public void init(double t0, double[] y0, double t) {
> -          tMin = t0;
> -      }
> -
> -      public void handleStep(StepInterpolator interpolator, boolean isLast) {
> -          tMin = interpolator.getCurrentTime();
> -      }
> -
> -      public double g(double t, double[]  y) {
> -          // once a step has been handled by handleStep,
> -          // events checking should only refer to dates after the step
> -          Assert.assertTrue(t >= tMin);
> -          return y[index];
> -      }
> -
> -      public Action eventOccurred(double t, double[] y, boolean increasing) {
> -          return Action.RESET_STATE;
> -      }
> -
> -      public void resetState(double t, double[] y) {
> -          // in fact, we don't need to reset anything for the test
> -      }
> -
> -  }
> -
>    private static class KeplerHandler implements StepHandler {
>      public KeplerHandler(TestProblem3 pb) {
>        this.pb = pb;
