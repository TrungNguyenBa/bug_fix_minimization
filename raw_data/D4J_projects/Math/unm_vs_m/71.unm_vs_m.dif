0a1,42
> diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java
> index 6ee9bd56c..935bb8ba3 100644
> --- a/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java
> +++ b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsBashforthIntegrator.java
> @@ -271,15 +271,7 @@ public class AdamsBashforthIntegrator extends AdamsIntegrator {
>                      if (manager.evaluateStep(interpolatorTmp)) {
>                          final double dt = manager.getEventTime() - stepStart;
>                          if (Math.abs(dt) <= Math.ulp(stepStart)) {
> -                            // we cannot simply truncate the step, reject the current computation
> -                            // and let the loop compute another state with the truncated step.
> -                            // it is so small (much probably exactly 0 due to limited accuracy)
> -                            // that the code above would fail handling it.
> -                            // So we set up an artificial 0 size step by copying states
> -                            interpolator.storeTime(stepStart);
> -                            System.arraycopy(y, 0, yTmp, 0, y0.length);
> -                            hNew     = 0;
> -                            stepSize = 0;
> +                            // rejecting the step would lead to a too small next step, we accept it
>                              loop = false;
>                          } else {
>                              // reject the step to match exactly the next switch time
> diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java
> index e0e2f0d2c..27ade7b07 100644
> --- a/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java
> +++ b/src/main/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator.java
> @@ -289,15 +289,7 @@ public class AdamsMoultonIntegrator extends AdamsIntegrator {
>                      if (manager.evaluateStep(interpolatorTmp)) {
>                          final double dt = manager.getEventTime() - stepStart;
>                          if (Math.abs(dt) <= Math.ulp(stepStart)) {
> -                            // we cannot simply truncate the step, reject the current computation
> -                            // and let the loop compute another state with the truncated step.
> -                            // it is so small (much probably exactly 0 due to limited accuracy)
> -                            // that the code above would fail handling it.
> -                            // So we set up an artificial 0 size step by copying states
> -                            interpolator.storeTime(stepStart);
> -                            System.arraycopy(y, 0, yTmp, 0, y0.length);
> -                            hNew     = 0;
> -                            stepSize = 0;
> +                            // rejecting the step would lead to a too small next step, we accept it
>                              loop = false;
>                          } else {
>                              // reject the step to match exactly the next switch time
2c44
< index e03be9e..0840ac1 100644
---
> index e03be9ed0..34b3dc1ca 100644
5,8c47,55
< @@ -297,10 +297,6 @@ public abstract class EmbeddedRungeKuttaIntegrator
<                    // it is so small (much probably exactly 0 due to limited accuracy)
<                    // that the code above would fail handling it.
<                    // So we set up an artificial 0 size step by copying states
---
> @@ -292,15 +292,7 @@ public abstract class EmbeddedRungeKuttaIntegrator
>            if (manager.evaluateStep(interpolator)) {
>                final double dt = manager.getEventTime() - stepStart;
>                if (Math.abs(dt) <= Math.ulp(stepStart)) {
> -                  // we cannot simply truncate the step, reject the current computation
> -                  // and let the loop compute another state with the truncated step.
> -                  // it is so small (much probably exactly 0 due to limited accuracy)
> -                  // that the code above would fail handling it.
> -                  // So we set up an artificial 0 size step by copying states
12a60
> +                  // rejecting the step would lead to a too small next step, we accept it
17c65
< index b61b0b1..255b1f4 100644
---
> index b61b0b1a4..3227b9808 100644
20,23c68,76
< @@ -177,9 +177,6 @@ public abstract class RungeKuttaIntegrator extends AbstractIntegrator {
<                  // it is so small (much probably exactly 0 due to limited accuracy)
<                  // that the code above would fail handling it.
<                  // So we set up an artificial 0 size step by copying states
---
> @@ -172,14 +172,7 @@ public abstract class RungeKuttaIntegrator extends AbstractIntegrator {
>          if (manager.evaluateStep(interpolator)) {
>              final double dt = manager.getEventTime() - stepStart;
>              if (Math.abs(dt) <= Math.ulp(stepStart)) {
> -                // we cannot simply truncate the step, reject the current computation
> -                // and let the loop compute another state with the truncated step.
> -                // it is so small (much probably exactly 0 due to limited accuracy)
> -                // that the code above would fail handling it.
> -                // So we set up an artificial 0 size step by copying states
26a80
> +                // rejecting the step would lead to a too small next step, we accept it
29a84,238
> diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
> index c7701c57a..9e086a708 100644
> --- a/src/site/xdoc/changes.xml
> +++ b/src/site/xdoc/changes.xml
> @@ -90,11 +90,6 @@ The <action> type attribute can be add,update,fix,remove.
>          used to solve Boundary Value Problems (BVP). There are no implementations (yet)
>          of BVP solvers in the library.
>        </action>
> -      <action dev="luc" type="fix" issue="MATH-358" >
> -        Fixed an error in events handling in ODE solvers. In some rare cases, events
> -        occurring close to a step start were handled without truncating the step, making
> -        them appear as is they occurred close to the step end
> -      </action>
>        <action dev="luc" type="fix" >
>          Fixed a problem with getInterpolatedDerivatives returning zero derivatives when
>          an ODE step handler is configured to not use interpolation. It now returns a
> diff --git a/src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java b/src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java
> index dbfc006a8..246d9b265 100644
> --- a/src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java
> +++ b/src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java
> @@ -41,59 +41,6 @@ public class ClassicalRungeKuttaIntegratorTest
>      super(name);
>    }
>  
> -  public void testMissedEndEvent() throws IntegratorException, DerivativeException {
> -      final double   t0     = 1878250320.0000029;
> -      final double   tEvent = 1878250379.9999986;
> -      final double[] k      = { 1.0e-4, 1.0e-5, 1.0e-6 };
> -      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {
> -
> -          public int getDimension() {
> -              return k.length;
> -          }
> -
> -          public void computeDerivatives(double t, double[] y, double[] yDot) {
> -              for (int i = 0; i < y.length; ++i) {
> -                  yDot[i] = k[i] * y[i];
> -              }
> -          }
> -      };
> -
> -      ClassicalRungeKuttaIntegrator integrator = new ClassicalRungeKuttaIntegrator(60.0);
> -
> -      double[] y0   = new double[k.length];
> -      for (int i = 0; i < y0.length; ++i) {
> -          y0[i] = i + 1;
> -      }
> -      double[] y    = new double[k.length];
> -
> -      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);
> -      Assert.assertEquals(tEvent, finalT, 5.0e-6);
> -      for (int i = 0; i < y.length; ++i) {
> -          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);
> -      }
> -
> -      integrator.addEventHandler(new EventHandler() {
> -
> -          public void resetState(double t, double[] y) {
> -          }
> -
> -          public double g(double t, double[] y) {
> -              return t - tEvent;
> -          }
> -
> -          public int eventOccurred(double t, double[] y, boolean increasing) {
> -              Assert.assertEquals(tEvent, t, 5.0e-6);
> -              return CONTINUE;
> -          }
> -      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);
> -      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);
> -      Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);
> -      for (int i = 0; i < y.length; ++i) {
> -          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);
> -      }
> -
> -  }
> -
>    public void testSanityChecks() {
>      try  {
>        TestProblem1 pb = new TestProblem1();
> diff --git a/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java b/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java
> index 3ce842ac4..bb36cda31 100644
> --- a/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java
> +++ b/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java
> @@ -18,7 +18,6 @@
>  package org.apache.commons.math.ode.nonstiff;
>  
>  import org.apache.commons.math.ode.DerivativeException;
> -import org.apache.commons.math.ode.FirstOrderDifferentialEquations;
>  import org.apache.commons.math.ode.FirstOrderIntegrator;
>  import org.apache.commons.math.ode.IntegratorException;
>  import org.apache.commons.math.ode.TestProblem1;
> @@ -41,62 +40,6 @@ public class DormandPrince853IntegratorTest
>      super(name);
>    }
>  
> -  public void testMissedEndEvent() throws IntegratorException, DerivativeException {
> -      final double   t0     = 1878250320.0000029;
> -      final double   tEvent = 1878250379.9999986;
> -      final double[] k  = { 1.0e-4, 1.0e-5, 1.0e-6 };
> -      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {
> -
> -          public int getDimension() {
> -              return k.length;
> -          }
> -
> -          public void computeDerivatives(double t, double[] y, double[] yDot) {
> -              for (int i = 0; i < y.length; ++i) {
> -                  yDot[i] = k[i] * y[i];
> -              }
> -          }
> -      };
> -
> -      DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 100.0,
> -                                                                             1.0e-10, 1.0e-10);
> -
> -      double[] y0   = new double[k.length];
> -      for (int i = 0; i < y0.length; ++i) {
> -          y0[i] = i + 1;
> -      }
> -      double[] y    = new double[k.length];
> -
> -      integrator.setInitialStepSize(60.0);
> -      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);
> -      Assert.assertEquals(tEvent, finalT, 5.0e-6);
> -      for (int i = 0; i < y.length; ++i) {
> -          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);
> -      }
> -
> -      integrator.setInitialStepSize(60.0);
> -      integrator.addEventHandler(new EventHandler() {
> -
> -          public void resetState(double t, double[] y) {
> -          }
> -
> -          public double g(double t, double[] y) {
> -              return t - tEvent;
> -          }
> -
> -          public int eventOccurred(double t, double[] y, boolean increasing) {
> -              Assert.assertEquals(tEvent, t, 5.0e-6);
> -              return CONTINUE;
> -          }
> -      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);
> -      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);
> -      Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);
> -      for (int i = 0; i < y.length; ++i) {
> -          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);
> -      }
> -
> -  }
> -
>    public void testDimensionCheck() {
>      try  {
>        TestProblem1 pb = new TestProblem1();
