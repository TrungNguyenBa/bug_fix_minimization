0a1,45
> diff --git a/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java b/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java
> index ace4b8d21..cf103c066 100644
> --- a/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java
> +++ b/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java
> @@ -206,40 +206,6 @@ public abstract class AbstractRealVector implements RealVector {
>      }
>  
>      /** {@inheritDoc} */
> -    public double getNorm() {
> -        double sum = 0;
> -        Iterator<Entry> it = sparseIterator();
> -        Entry e;
> -        while (it.hasNext() && (e = it.next()) != null) {
> -            final double value = e.getValue();
> -            sum += value * value;
> -        }
> -        return Math.sqrt(sum);
> -    }
> -
> -    /** {@inheritDoc} */
> -    public double getL1Norm() {
> -        double norm = 0;
> -        Iterator<Entry> it = sparseIterator();
> -        Entry e;
> -        while (it.hasNext() && (e = it.next()) != null) {
> -            norm += Math.abs(e.getValue());
> -        }
> -        return norm;
> -    }
> -
> -    /** {@inheritDoc} */
> -    public double getLInfNorm() {
> -        double norm = 0;
> -        Iterator<Entry> it = sparseIterator();
> -        Entry e;
> -        while (it.hasNext() && (e = it.next()) != null) {
> -            norm = Math.max(norm, Math.abs(e.getValue()));
> -        }
> -        return norm;
> -    }
> -
> -    /** {@inheritDoc} */
>      public double getDistance(double[] v) throws IllegalArgumentException {
>          return getDistance(new ArrayRealVector(v,false));
>      }
2c47
< index 22d0a28..37c4417 100644
---
> index 22d0a280f..45c091921 100644
5c50,70
< @@ -718,7 +718,7 @@ public class ArrayRealVector extends AbstractRealVector implements Serializable
---
> @@ -694,7 +694,6 @@ public class ArrayRealVector extends AbstractRealVector implements Serializable
>      }
>  
>      /** {@inheritDoc} */
> -    @Override
>      public double getNorm() {
>          double sum = 0;
>          for (double a : data) {
> @@ -704,7 +703,6 @@ public class ArrayRealVector extends AbstractRealVector implements Serializable
>      }
>  
>      /** {@inheritDoc} */
> -    @Override
>      public double getL1Norm() {
>          double sum = 0;
>          for (double a : data) {
> @@ -714,11 +712,10 @@ public class ArrayRealVector extends AbstractRealVector implements Serializable
>      }
>  
>      /** {@inheritDoc} */
> -    @Override
15c80
< index eb5be1b..e025960 100644
---
> index eb5be1b68..febea7a87 100644
18c83
< @@ -495,6 +495,15 @@ public class OpenMapRealVector extends AbstractRealVector implements SparseRealV
---
> @@ -495,6 +495,17 @@ public class OpenMapRealVector extends AbstractRealVector implements SparseRealV
21a87,104
> +    /** {@inheritDoc} */
> +    public double getL1Norm() {
> +        double res = 0;
> +        Iterator iter = entries.iterator();
> +        while (iter.hasNext()) {
> +            iter.advance();
> +            res += Math.abs(iter.value());
> +        }
> +        return res;
> +    }
> +
>      /**
>       * Optimized method to compute LInfDistance.
>       * @param v The vector to compute from
> @@ -546,6 +557,28 @@ public class OpenMapRealVector extends AbstractRealVector implements SparseRealV
>      }
>  
>      /** {@inheritDoc} */
31,33c114,228
<      /**
<       * Optimized method to compute LInfDistance.
<       * @param v The vector to compute from
---
> +
> +    /** {@inheritDoc} */
> +    public double getNorm() {
> +        double res = 0;
> +        Iterator iter = entries.iterator();
> +        while (iter.hasNext()) {
> +            iter.advance();
> +            res += iter.value() * iter.value();
> +        }
> +        return Math.sqrt(res);
> +    }
> +
> +    /** {@inheritDoc} */
>      public boolean isInfinite() {
>          boolean infiniteFound = false;
>          Iterator iter = entries.iterator();
> diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
> index d5e90c349..ff44a55fb 100644
> --- a/src/site/xdoc/changes.xml
> +++ b/src/site/xdoc/changes.xml
> @@ -39,9 +39,6 @@ The <action> type attribute can be add,update,fix,remove.
>    </properties>
>    <body>
>      <release version="2.1" date="TBD" description="TBD">
> -      <action dev="luc" type="fix" issue="MATH-326" due-to="Jake Mannix">
> -        Fixed a wrong implementation of the Linf norm in vectors.
> -      </action>
>        <action dev="luc" type="fix" issue="MATH-324" due-to="Vincent Morand">
>          Fixed a convergence discrepancy with respect to theory in Gragg-Bulirsch-Stoer
>          integrator.
> diff --git a/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java b/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java
> index 171f23fce..1632316e5 100644
> --- a/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java
> +++ b/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java
> @@ -40,7 +40,6 @@ public class ArrayRealVectorTest extends TestCase {
>      protected double[] vec2 = {4d, 5d, 6d};
>      protected double[] vec3 = {7d, 8d, 9d};
>      protected double[] vec4 = {1d, 2d, 3d, 4d, 5d, 6d, 7d, 8d, 9d};
> -    protected double[] vec5 = { -4d, 0d, 3d, 1d, -6d, 3d};
>      protected double[] vec_null = {0d, 0d, 0d};
>      protected Double[] dvec1 = {1d, 2d, 3d, 4d, 5d, 6d, 7d, 8d, 9d};
>      protected double[][] mat1 = {{1d, 2d, 3d}, {4d, 5d, 6d},{ 7d, 8d, 9d}};
> @@ -1080,23 +1079,19 @@ public class ArrayRealVectorTest extends TestCase {
>      public void testBasicFunctions() {
>          ArrayRealVector v1 = new ArrayRealVector(vec1);
>          ArrayRealVector v2 = new ArrayRealVector(vec2);
> -        ArrayRealVector v5 = new ArrayRealVector(vec5);
>          ArrayRealVector v_null = new ArrayRealVector(vec_null);
>  
>          RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
>  
> -        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
> -        double d_getNorm = v5.getNorm();
> -        assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);
> +        //octave =  sqrt(sumsq(v1))
> +        double d_getNorm = v1.getNorm();
> +        assertEquals("compare values  ", 3.7416573867739413,d_getNorm);
>  
> -        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
> -        double d_getL1Norm = v5.getL1Norm();
> -        assertEquals("compare values  ", 17.0, d_getL1Norm);
> -
> -        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
> -        double d_getLInfNorm = v5.getLInfNorm();
> -        assertEquals("compare values  ", 6.0, d_getLInfNorm);
> +        double d_getL1Norm = v1.getL1Norm();
> +        assertEquals("compare values  ",6.0, d_getL1Norm);
>  
> +        double d_getLInfNorm = v1.getLInfNorm();
> +        assertEquals("compare values  ",6.0, d_getLInfNorm);
>  
>          //octave =  sqrt(sumsq(v1-v2))
>          double dist = v1.getDistance(v2);
> diff --git a/src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java b/src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java
> index 2becb695a..db27f968e 100644
> --- a/src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java
> +++ b/src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java
> @@ -40,7 +40,6 @@ public class SparseRealVectorTest extends TestCase {
>      protected double[] vec2 = {4d, 5d, 6d};
>      protected double[] vec3 = {7d, 8d, 9d};
>      protected double[] vec4 = {1d, 2d, 3d, 4d, 5d, 6d, 7d, 8d, 9d};
> -    protected double[] vec5 = { -4d, 0d, 3d, 1d, -6d, 3d};
>      protected double[] vec_null = {0d, 0d, 0d};
>      protected Double[] dvec1 = {1d, 2d, 3d, 4d, 5d, 6d, 7d, 8d, 9d};
>      protected double[][] mat1 = {{1d, 2d, 3d}, {4d, 5d, 6d},{ 7d, 8d, 9d}};
> @@ -950,22 +949,19 @@ public class SparseRealVectorTest extends TestCase {
>      public void testBasicFunctions() {
>          OpenMapRealVector v1 = new OpenMapRealVector(vec1);
>          OpenMapRealVector v2 = new OpenMapRealVector(vec2);
> -        OpenMapRealVector v5 = new OpenMapRealVector(vec5);
>          OpenMapRealVector v_null = new OpenMapRealVector(vec_null);
>  
>          SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);
>  
> -        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
> -        double d_getNorm = v5.getNorm();
> -        assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);
> +        //octave =  sqrt(sumsq(v1))
> +        double d_getNorm = v1.getNorm();
> +        assertEquals("compare values  ", 3.7416573867739413,d_getNorm);
>  
> -        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
> -        double d_getL1Norm = v5.getL1Norm();
> -        assertEquals("compare values  ", 17.0, d_getL1Norm);
> +        double d_getL1Norm = v1.getL1Norm();
> +        assertEquals("compare values  ",6.0, d_getL1Norm);
>  
> -        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
> -        double d_getLInfNorm = v5.getLInfNorm();
> -        assertEquals("compare values  ", 6.0, d_getLInfNorm);
> +        double d_getLInfNorm = v1.getLInfNorm();
> +        assertEquals("compare values  ",6.0, d_getLInfNorm);
>  
>          //octave =  sqrt(sumsq(v1-v2))
>          double dist = v1.getDistance(v2);
