2c2
< index ff09646..5006065 100644
---
> index ff09646bf..44f6742cd 100644
5c5,13
< @@ -188,7 +188,6 @@ public class EventState {
---
> @@ -19,7 +19,6 @@ package org.apache.commons.math.ode.events;
>  
>  import org.apache.commons.math.ConvergenceException;
>  import org.apache.commons.math.FunctionEvaluationException;
> -import org.apache.commons.math.MathRuntimeException;
>  import org.apache.commons.math.analysis.UnivariateRealFunction;
>  import org.apache.commons.math.analysis.solvers.BrentSolver;
>  import org.apache.commons.math.ode.DerivativeException;
> @@ -188,26 +187,6 @@ public class EventState {
10,16c18,24
<                          // this is a corner case:
<                          // - there was an event near ta,
<                          // - there is another event between ta and tb
< @@ -196,17 +195,7 @@ public class EventState {
<                          // this implies that the real sign of ga is the same as gb, so we need to slightly
<                          // shift ta to make sure ga and gb get opposite signs and the solver won't complain
<                          // about bracketing
---
> -                        // this is a corner case:
> -                        // - there was an event near ta,
> -                        // - there is another event between ta and tb
> -                        // - when ta was computed, convergence was reached on the "wrong side" of the interval
> -                        // this implies that the real sign of ga is the same as gb, so we need to slightly
> -                        // shift ta to make sure ga and gb get opposite signs and the solver won't complain
> -                        // about bracketing
24c32
<                              // this should never happen
---
> -                            // this should never happen
28c36
<                           
---
> -                         
30a39,150
>  
> @@ -226,9 +205,16 @@ public class EventState {
>                      final BrentSolver solver = new BrentSolver();
>                      solver.setAbsoluteAccuracy(convergence);
>                      solver.setMaximalIterationCount(maxIterationCount);
> -                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
> -                    if ((Math.abs(root - ta) <= convergence) &&
> -                         (Math.abs(root - previousEventTime) <= convergence)) {
> +                    double root;
> +                    try {
> +                        root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
> +                    } catch (IllegalArgumentException iae) {
> +                        // the interval did not really bracket a root
> +                        root = Double.NaN;
> +                    }
> +                    if (Double.isNaN(root) ||
> +                        ((Math.abs(root - ta) <= convergence) &&
> +                         (Math.abs(root - previousEventTime) <= convergence))) {
>                          // we have either found nothing or found (again ?) a past event, we simply ignore it
>                          ta = tb;
>                          ga = gb;
> diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
> index ca18f07c4..bd1f4d344 100644
> --- a/src/site/xdoc/changes.xml
> +++ b/src/site/xdoc/changes.xml
> @@ -39,9 +39,6 @@ The <action> type attribute can be add,update,fix,remove.
>    </properties>
>    <body>
>      <release version="2.1" date="TBD" description="TBD">
> -      <action dev="luc" type="fix" issue="MATH-322" >
> -        Fixed an error in handling very close events in ODE integration.
> -      </action>
>        <action dev="psteitz" type="fix" issue="MATH-305" due-to="Erik van Ingen">
>          Fixed an overflow error in MathUtils.distance that was causing KMeansPlusPlusClusterer
>          to fail with a NullPointerException when component distances between points
> diff --git a/src/test/java/org/apache/commons/math/ode/events/EventStateTest.java b/src/test/java/org/apache/commons/math/ode/events/EventStateTest.java
> deleted file mode 100644
> index 704497016..000000000
> --- a/src/test/java/org/apache/commons/math/ode/events/EventStateTest.java
> +++ /dev/null
> @@ -1,71 +0,0 @@
> -/*
> - * Licensed to the Apache Software Foundation (ASF) under one or more
> - * contributor license agreements.  See the NOTICE file distributed with
> - * this work for additional information regarding copyright ownership.
> - * The ASF licenses this file to You under the Apache License, Version 2.0
> - * (the "License"); you may not use this file except in compliance with
> - * the License.  You may obtain a copy of the License at
> - *
> - *      http://www.apache.org/licenses/LICENSE-2.0
> - *
> - * Unless required by applicable law or agreed to in writing, software
> - * distributed under the License is distributed on an "AS IS" BASIS,
> - * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
> - * See the License for the specific language governing permissions and
> - * limitations under the License.
> - */
> -
> -package org.apache.commons.math.ode.events;
> -
> -import junit.framework.Assert;
> -
> -import org.apache.commons.math.ConvergenceException;
> -import org.apache.commons.math.ode.DerivativeException;
> -import org.apache.commons.math.ode.sampling.AbstractStepInterpolator;
> -import org.apache.commons.math.ode.sampling.DummyStepInterpolator;
> -import org.junit.Test;
> -
> -public class EventStateTest {
> -
> -    // JIRA: MATH-322
> -    @Test
> -    public void closeEvents()
> -        throws EventException, ConvergenceException, DerivativeException {
> -
> -        final double r1  = 90.0;
> -        final double r2  = 135.0;
> -        final double gap = r2 - r1;
> -        EventHandler closeEventsGenerator = new EventHandler() {
> -            public void resetState(double t, double[] y) {
> -            }
> -            public double g(double t, double[] y) {
> -                return (t - r1) * (r2 - t);
> -            }
> -            public int eventOccurred(double t, double[] y, boolean increasing) {
> -                return CONTINUE;
> -            }
> -        };
> -
> -        final double tolerance = 0.1;
> -        EventState es = new EventState(closeEventsGenerator, 1.5 * gap, tolerance, 10);
> -
> -        double t0 = r1 - 0.5 * gap;
> -        es.reinitializeBegin(t0, new double[0]);
> -        AbstractStepInterpolator interpolator =
> -            new DummyStepInterpolator(new double[0], true);
> -        interpolator.storeTime(t0);
> -
> -        interpolator.shift();
> -        interpolator.storeTime(0.5 * (r1 + r2));
> -        Assert.assertTrue(es.evaluateStep(interpolator));
> -        Assert.assertEquals(r1, es.getEventTime(), tolerance);
> -        es.stepAccepted(es.getEventTime(), new double[0]);
> -
> -        interpolator.shift();
> -        interpolator.storeTime(r2 + 0.4 * gap);
> -        Assert.assertTrue(es.evaluateStep(interpolator));
> -        Assert.assertEquals(r2, es.getEventTime(), tolerance);
> -
> -    }
> -
> -}
