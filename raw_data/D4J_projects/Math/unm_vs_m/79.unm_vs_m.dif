2c2
< index ad77a56..46368dc 100644
---
> index ad77a56eb..46368dc9f 100644
16a17,63
> diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
> index bd1f4d344..3c94d22e9 100644
> --- a/src/site/xdoc/changes.xml
> +++ b/src/site/xdoc/changes.xml
> @@ -39,11 +39,6 @@ The <action> type attribute can be add,update,fix,remove.
>    </properties>
>    <body>
>      <release version="2.1" date="TBD" description="TBD">
> -      <action dev="psteitz" type="fix" issue="MATH-305" due-to="Erik van Ingen">
> -        Fixed an overflow error in MathUtils.distance that was causing KMeansPlusPlusClusterer
> -        to fail with a NullPointerException when component distances between points
> -        exceeded Integer.MAXVALUE.
> -      </action>
>        <action dev="psteitz" type="update" issue="MATH-315" due-to="Mikkel Meyer Andersen">
>          Added generationsEvolved property to GeneticAlgorithm to track the number of generations
>          evolved by the evolve() method before reaching the StoppingCondition.
> diff --git a/src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java b/src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java
> index dfe89adef..da1d8a93d 100644
> --- a/src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java
> +++ b/src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java
> @@ -94,26 +94,4 @@ public class KMeansPlusPlusClustererTest {
>  
>      }
>  
> -    /**
> -     * JIRA: MATH-305
> -     * 
> -     * Two points, one cluster, one iteration
> -     */
> -    @Test
> -    public void testPerformClusterAnalysisDegenerate() {
> -        KMeansPlusPlusClusterer<EuclideanIntegerPoint> transformer = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(
> -                new Random(1746432956321l));
> -        EuclideanIntegerPoint[] points = new EuclideanIntegerPoint[] {
> -                new EuclideanIntegerPoint(new int[] { 1959, 325100 }),
> -                new EuclideanIntegerPoint(new int[] { 1960, 373200 }), };
> -        List<Cluster<EuclideanIntegerPoint>> clusters = transformer.cluster(Arrays.asList(points), 1, 1);
> -        assertEquals(1, clusters.size());
> -        assertEquals(2, (clusters.get(0).getPoints().size()));
> -        EuclideanIntegerPoint pt1 = new EuclideanIntegerPoint(new int[] { 1959, 325100 });
> -        EuclideanIntegerPoint pt2 = new EuclideanIntegerPoint(new int[] { 1960, 373200 });
> -        assertTrue(clusters.get(0).getPoints().contains(pt1));
> -        assertTrue(clusters.get(0).getPoints().contains(pt2));
> -
> -    } 
> -
>  }
