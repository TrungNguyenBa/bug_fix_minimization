2c2
< index b387767..0cf01af 100644
---
> index b38776718..c228ad62d 100644
5c5,6
< @@ -289,7 +289,7 @@ class SimplexTableau implements Serializable {
---
> @@ -270,27 +270,8 @@ class SimplexTableau implements Serializable {
>       * @return the row that the variable is basic in.  null if the column is not basic
7c8,26
<      private Integer getBasicRow(final int col, boolean ignoreObjectiveRows) {
---
>      private Integer getBasicRow(final int col) {
> -        return getBasicRow(col, true);
> -    }
> -
> -    /**
> -     * Checks whether the given column is basic.
> -     * @param col index of the column to check
> -     * @return the row that the variable is basic in.  null if the column is not basic
> -     */
> -    private Integer getBasicRowForSolution(final int col) {
> -        return getBasicRow(col, false);
> -    }
> -    
> -    /**
> -     * Checks whether the given column is basic.
> -     * @param col index of the column to check
> -     * @return the row that the variable is basic in.  null if the column is not basic
> -     */
> -    private Integer getBasicRow(final int col, boolean ignoreObjectiveRows) {
10,11c29,30
< +        int start = getNumObjectiveFunctions();
<          for (int i = start; i < getHeight(); i++) {
---
> -        for (int i = start; i < getHeight(); i++) {
> +        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
14c33,34
< @@ -338,11 +338,11 @@ class SimplexTableau implements Serializable {
---
>              } else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
> @@ -338,11 +319,12 @@ class SimplexTableau implements Serializable {
19,20c39,42
< +      Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());
<        double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
---
> -      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
> +        Integer basicRow =
> +            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
> +        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
24c46
< +          Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
---
> +            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
27a50,101
> @@ -450,15 +432,6 @@ class SimplexTableau implements Serializable {
>      }
>  
>      /**
> -     * Returns the offset of the extra decision variable added when there is a
> -     * negative decision variable in the original problem.
> -     * @return the offset of x-
> -     */
> -    protected final int getNegativeDecisionVariableOffset() {
> -      return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();
> -    }
> -
> -    /**
>       * Get the number of decision variables.
>       * <p>
>       * If variables are not restricted to positive values, this will include 1
> diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
> index a48e1da07..504b8e79f 100644
> --- a/src/site/xdoc/changes.xml
> +++ b/src/site/xdoc/changes.xml
> @@ -39,10 +39,6 @@ The <action> type attribute can be add,update,fix,remove.
>    </properties>
>    <body>
>      <release version="2.1" date="TBD" description="TBD">
> -      <action dev="luc" type="fix" issue="MATH-286" due-to="Benjamin McCann">
> -        Fixed an error leading the simplex solver to compute the right solution
> -        but return another one
> -      </action>
>        <action dev="luc" type="fix" issue="MATH-283" due-to="Michael Nischt">
>          Prevent infinite loops in multi-directional direct optimization method when
>          the start point is exactly at the optimal point
> diff --git a/src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java b/src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java
> index 9d43a5405..3a082a7b0 100644
> --- a/src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java
> +++ b/src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java
> @@ -49,16 +49,6 @@ public class SimplexSolverTest {
>        }
>  
>      @Test
> -    public void testMath286() throws OptimizationException {
> -      LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 0.2, 0.3 }, 0 );
> -      Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
> -      constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.EQ, 23.0));
> -
> -      RealPointValuePair solution = new SimplexSolver().optimize(f, constraints, GoalType.MAXIMIZE, true);
> -      assertEquals(6.9, solution.getValue(), .0000001);
> -    }
> -    
> -    @Test
>      public void testSimplexSolver() throws OptimizationException {
>          LinearObjectiveFunction f =
>              new LinearObjectiveFunction(new double[] { 15, 10 }, 7);
