2c2
< index 67e372f..acd9222 100644
---
> index 67e372f20..39faa9ae3 100644
5c5
< @@ -111,6 +111,9 @@ public class CholeskyDecompositionImpl implements CholeskyDecomposition {
---
> @@ -111,6 +111,11 @@ public class CholeskyDecompositionImpl implements CholeskyDecomposition {
8a9
> +            // check diagonal element
11a13
> +
15,16c17,18
< @@ -131,9 +134,6 @@ public class CholeskyDecompositionImpl implements CholeskyDecomposition {
<              final double[] ltI = lTData[i];
---
> @@ -129,12 +134,6 @@ public class CholeskyDecompositionImpl implements CholeskyDecomposition {
>          for (int i = 0; i < order; ++i) {
18c20,22
<              // check diagonal element
---
>              final double[] ltI = lTData[i];
> -
> -            // check diagonal element
22c26
<  
---
> -
24a29,187
>  
> diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
> index a8669bc49..a1fe400a6 100644
> --- a/src/site/xdoc/changes.xml
> +++ b/src/site/xdoc/changes.xml
> @@ -39,9 +39,6 @@ The <action> type attribute can be add,update,fix,remove.
>    </properties>
>    <body>
>      <release version="2.0" date="TBD" description="TBD">
> -      <action dev="luc" type="fix" issue="MATH-274" >
> -        Fixed detection of not positive definite matrices in Cholesky decomposition
> -      </action>
>        <action dev="luc" type="fix" issue="MATH-273" due-to="Benjamin McCann">
>          Fixed a wrong check for basic variables
>        </action>
> diff --git a/src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java b/src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java
> index 6bb7d4f77..2d302bcba 100644
> --- a/src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java
> +++ b/src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java
> @@ -17,9 +17,6 @@
>  
>  package org.apache.commons.math.linear;
>  
> -import static org.junit.Assert.assertEquals;
> -import static org.junit.Assert.assertTrue;
> -
>  import org.apache.commons.math.MathException;
>  import org.apache.commons.math.linear.CholeskyDecomposition;
>  import org.apache.commons.math.linear.CholeskyDecompositionImpl;
> @@ -28,9 +25,12 @@ import org.apache.commons.math.linear.NonSquareMatrixException;
>  import org.apache.commons.math.linear.NotPositiveDefiniteMatrixException;
>  import org.apache.commons.math.linear.NotSymmetricMatrixException;
>  import org.apache.commons.math.linear.RealMatrix;
> -import org.junit.Test;
>  
> -public class CholeskyDecompositionImplTest {
> +import junit.framework.Test;
> +import junit.framework.TestCase;
> +import junit.framework.TestSuite;
> +
> +public class CholeskyDecompositionImplTest extends TestCase {
>  
>      private double[][] testData = new double[][] {
>              {  1,  2,   4,   7,  11 },
> @@ -40,8 +40,17 @@ public class CholeskyDecompositionImplTest {
>              { 11, 58, 182, 430, 855 }
>      };
>  
> +    public CholeskyDecompositionImplTest(String name) {
> +        super(name);
> +    }
> +
> +    public static Test suite() {
> +        TestSuite suite = new TestSuite(CholeskyDecompositionImplTest.class);
> +        suite.setName("CholeskyDecompositionImpl Tests");
> +        return suite;
> +    }
> +
>      /** test dimensions */
> -    @Test
>      public void testDimensions() throws MathException {
>          CholeskyDecomposition llt =
>              new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(testData));
> @@ -52,45 +61,47 @@ public class CholeskyDecompositionImplTest {
>      }
>  
>      /** test non-square matrix */
> -    @Test(expected = NonSquareMatrixException.class)
> -    public void testNonSquare() throws MathException {
> +    public void testNonSquare() {
> +        try {
>              new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(new double[3][2]));
> +        } catch (NonSquareMatrixException ime) {
> +            // expected behavior
> +        } catch (Exception e) {
> +            fail("wrong exception caught");
> +        }
>      }
>  
>      /** test non-symmetric matrix */
> -    @Test(expected = NotSymmetricMatrixException.class)
> -    public void testNotSymmetricMatrixException() throws MathException {
> +    public void testNotSymmetricMatrixException() {
> +        try {
>              double[][] changed = testData.clone();
>              changed[0][changed[0].length - 1] += 1.0e-5;
>              new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(changed));
> +        } catch (NotSymmetricMatrixException e) {
> +            // expected behavior
> +        } catch (Exception e) {
> +            fail("wrong exception caught");
> +        }
>      }
>  
>      /** test non positive definite matrix */
> -    @Test(expected = NotPositiveDefiniteMatrixException.class)
> -    public void testNotPositiveDefinite() throws MathException {
> -        CholeskyDecomposition cd = new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(new double[][] {
> +    public void testNotPositiveDefinite() {
> +        try {
> +            new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(new double[][] {
>                      { 14, 11, 13, 15, 24 },
>                      { 11, 34, 13, 8,  25 },
>                      { 13, 13, 14, 15, 21 },
>                      { 15, 8,  15, 18, 23 },
>                      { 24, 25, 21, 23, 45 }
>              }));
> -        System.out.println(cd.getL().multiply(cd.getLT()));
> +        } catch (NotPositiveDefiniteMatrixException e) {
> +            // expected behavior
> +        } catch (Exception e) {
> +            fail("wrong exception caught");
>          }
> -
> -    @Test(expected = NotPositiveDefiniteMatrixException.class)
> -    public void testMath274() throws MathException {
> -        new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(new double[][] {
> -                { 0.40434286, -0.09376327, 0.30328980, 0.04909388 },
> -                {-0.09376327,  0.10400408, 0.07137959, 0.04762857 },
> -                { 0.30328980,  0.07137959, 0.30458776, 0.04882449 },
> -                { 0.04909388,  0.04762857, 0.04882449, 0.07543265 }
> -            
> -        }));
>      }
>  
>      /** test A = LLT */
> -    @Test
>      public void testAEqualLLT() throws MathException {
>          RealMatrix matrix = MatrixUtils.createRealMatrix(testData);
>          CholeskyDecomposition llt = new CholeskyDecompositionImpl(matrix);
> @@ -101,19 +112,17 @@ public class CholeskyDecompositionImplTest {
>      }
>  
>      /** test that L is lower triangular */
> -    @Test
>      public void testLLowerTriangular() throws MathException {
>          RealMatrix matrix = MatrixUtils.createRealMatrix(testData);
>          RealMatrix l = new CholeskyDecompositionImpl(matrix).getL();
>          for (int i = 0; i < l.getRowDimension(); i++) {
>              for (int j = i + 1; j < l.getColumnDimension(); j++) {
> -                assertEquals(0.0, l.getEntry(i, j), 0.0);
> +                assertEquals(0.0, l.getEntry(i, j));
>              }
>          }
>      }
>  
>      /** test that LT is transpose of L */
> -    @Test
>      public void testLTTransposed() throws MathException {
>          RealMatrix matrix = MatrixUtils.createRealMatrix(testData);
>          CholeskyDecomposition llt = new CholeskyDecompositionImpl(matrix);
> @@ -124,7 +133,6 @@ public class CholeskyDecompositionImplTest {
>      }
>  
>      /** test matrices values */
> -    @Test
>      public void testMatricesValues() throws MathException {
>          RealMatrix lRef = MatrixUtils.createRealMatrix(new double[][] {
>                  {  1,  0,  0,  0,  0 },
