2c2
< index b0d114e..0ab790c 100644
---
> index b0d114eea..a6d7419cf 100644
5c5
< @@ -272,10 +272,12 @@ class SimplexTableau implements Serializable {
---
> @@ -272,12 +272,14 @@ class SimplexTableau implements Serializable {
16d15
< +                }
18a18
> +        }
19a20,58
>      }
>  
> diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
> index a1fe400a6..4f53d0cb4 100644
> --- a/src/site/xdoc/changes.xml
> +++ b/src/site/xdoc/changes.xml
> @@ -39,9 +39,6 @@ The <action> type attribute can be add,update,fix,remove.
>    </properties>
>    <body>
>      <release version="2.0" date="TBD" description="TBD">
> -      <action dev="luc" type="fix" issue="MATH-273" due-to="Benjamin McCann">
> -        Fixed a wrong check for basic variables
> -      </action>
>        <action dev="luc" type="fix" issue="MATH-272" due-to="Benjamin McCann">
>          Fixed a problem when setting some variables (several variables were set
>          instead of only one)
> diff --git a/src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java b/src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java
> index 954ad7ca0..806618577 100644
> --- a/src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java
> +++ b/src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java
> @@ -64,18 +64,6 @@ public class SimplexSolverTest {
>          assertEquals(57.0, solution.getValue(), 0.0);
>      }
>  
> -    @Test
> -    public void testSingleVariableAndConstraint() throws OptimizationException {
> -        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 3 }, 0);
> -        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
> -        constraints.add(new LinearConstraint(new double[] { 1 }, Relationship.LEQ, 10));
> -
> -        SimplexSolver solver = new SimplexSolver();
> -        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);
> -        assertEquals(10.0, solution.getPoint()[0], 0.0);
> -        assertEquals(30.0, solution.getValue(), 0.0);
> -    }
> -    
>      /**
>       * With no artificial variables needed (no equals and no greater than
>       * constraints) we can go straight to Phase 2.
