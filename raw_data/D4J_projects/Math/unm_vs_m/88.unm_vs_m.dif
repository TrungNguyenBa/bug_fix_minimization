2c2
< index a6d7419..3bcb17f 100644
---
> index a6d7419cf..ba577223d 100644
5,8c5,21
< @@ -326,18 +326,19 @@ class SimplexTableau implements Serializable {
<          Integer basicRow =
<              getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
<          double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
---
> @@ -23,9 +23,7 @@ import java.io.ObjectOutputStream;
>  import java.io.Serializable;
>  import java.util.ArrayList;
>  import java.util.Collection;
> -import java.util.HashSet;
>  import java.util.List;
> -import java.util.Set;
>  
>  import org.apache.commons.math.linear.MatrixUtils;
>  import org.apache.commons.math.linear.RealMatrix;
> @@ -323,27 +321,39 @@ class SimplexTableau implements Serializable {
>       */
>      protected RealPointValuePair getSolution() {
>          double[] coefficients = new double[getOriginalNumDecisionVariables()];
> -        Integer basicRow =
> -            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
> -        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
9a23
> +        double mostNegative = getDecisionVariableValue(getOriginalNumDecisionVariables());
11c25
<              basicRow = getBasicRow(getNumObjectiveFunctions() + i);
---
> -            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
13,14c27,28
<                  // if multiple variables can take a given value 
<                  // then we choose the first and set the rest equal to 0
---
> -                // if multiple variables can take a given value 
> -                // then we choose the first and set the rest equal to 0
19,24c33,59
<                      (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
<                      (restrictToNonNegative ? 0 : mostNegative);
< +            if (basicRow != null) {
< +                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
< +                    if (tableau.getEntry(basicRow, j) == 1) {
< +                         coefficients[i] = 0;
---
> -                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
> -                    (restrictToNonNegative ? 0 : mostNegative);
> -            }
> +                getDecisionVariableValue(i) - (restrictToNonNegative ? 0 : mostNegative); 
>          }
>          return new RealPointValuePair(coefficients, f.getValue(coefficients));
>      }
>  
>      /**
> +     * Get the value of the given decision variable.  This is not the actual
> +     * value as it is guaranteed to be >= 0 and thus must be corrected before
> +     * being returned to the user.
> +     * 
> +     * @param decisionVariable The index of the decision variable
> +     * @return The value of the given decision variable.
> +     */
> +    protected double getDecisionVariableValue(final int decisionVariable) {
> +      int col = getNumObjectiveFunctions() + decisionVariable;  
> +      Integer basicRow = getBasicRow(col);
> +      if (basicRow == null) {
> +          return 0;
> +      }
> +      // if there are multiple variables that can take the value on the RHS
> +      // then we'll give the first variable that value
> +      for (int i = getNumObjectiveFunctions(); i < col; i++) {
> +          if (tableau.getEntry(basicRow, i) == 1) {
> +              return 0;
26a62,139
> +      return getEntry(basicRow, getRhsOffset()); 
> +  }
> +
> +    /**
>       * Subtracts a multiple of one row from another.
>       * <p>
>       * After application of this operation, the following will hold:
> diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
> index 4f53d0cb4..fc02c1b83 100644
> --- a/src/site/xdoc/changes.xml
> +++ b/src/site/xdoc/changes.xml
> @@ -39,10 +39,6 @@ The <action> type attribute can be add,update,fix,remove.
>    </properties>
>    <body>
>      <release version="2.0" date="TBD" description="TBD">
> -      <action dev="luc" type="fix" issue="MATH-272" due-to="Benjamin McCann">
> -        Fixed a problem when setting some variables (several variables were set
> -        instead of only one)
> -      </action>
>        <action dev="luc" type="add" due-to="Gilles Sadowski">
>          Added a way to limit the number of functions evaluations in optimizers
>          (the number of iterations could already be limited)
> diff --git a/src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java b/src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java
> index 806618577..f658a9517 100644
> --- a/src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java
> +++ b/src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java
> @@ -17,38 +17,19 @@
>  
>  package org.apache.commons.math.optimization.linear;
>  
> -import static org.junit.Assert.assertEquals;
> -
>  import java.util.ArrayList;
>  import java.util.Collection;
>  
> +import junit.framework.TestCase;
> +
>  import org.apache.commons.math.linear.RealVector;
>  import org.apache.commons.math.linear.RealVectorImpl;
>  import org.apache.commons.math.optimization.GoalType;
>  import org.apache.commons.math.optimization.OptimizationException;
>  import org.apache.commons.math.optimization.RealPointValuePair;
> -import org.junit.Test;
> -
> -public class SimplexSolverTest {
>  
> -    @Test
> -    public void testMath272() throws OptimizationException {
> -        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 2, 2, 1 }, 0);
> -        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
> -        constraints.add(new LinearConstraint(new double[] { 1, 1, 0 }, Relationship.GEQ,  1));
> -        constraints.add(new LinearConstraint(new double[] { 1, 0, 1 }, Relationship.GEQ,  1));
> -        constraints.add(new LinearConstraint(new double[] { 0, 1, 0 }, Relationship.GEQ,  1));
> +public class SimplexSolverTest extends TestCase {
>  
> -        SimplexSolver solver = new SimplexSolver();
> -        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);
> -        
> -        assertEquals(0.0, solution.getPoint()[0], .0000001);
> -        assertEquals(1.0, solution.getPoint()[1], .0000001);
> -        assertEquals(1.0, solution.getPoint()[2], .0000001);
> -        assertEquals(3.0, solution.getValue(), .0000001);
> -      }
> -
> -    @Test
>      public void testSimplexSolver() throws OptimizationException {
>          LinearObjectiveFunction f =
>              new LinearObjectiveFunction(new double[] { 15, 10 }, 7);
> @@ -59,16 +40,15 @@ public class SimplexSolverTest {
>  
>          SimplexSolver solver = new SimplexSolver();
>          RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);
> -        assertEquals(2.0, solution.getPoint()[0], 0.0);
> -        assertEquals(2.0, solution.getPoint()[1], 0.0);
> -        assertEquals(57.0, solution.getValue(), 0.0);
> +        assertEquals(2.0, solution.getPoint()[0]);
> +        assertEquals(2.0, solution.getPoint()[1]);
> +        assertEquals(57.0, solution.getValue());
27a141,159
>  
>      /**
>       * With no artificial variables needed (no equals and no greater than
>       * constraints) we can go straight to Phase 2.
>       */
> -    @Test
>      public void testModelWithNoArtificialVars() throws OptimizationException {
>          LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 15, 10 }, 0);
>          Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
> @@ -78,12 +58,11 @@ public class SimplexSolverTest {
>  
>          SimplexSolver solver = new SimplexSolver();
>          RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);
> -        assertEquals(2.0, solution.getPoint()[0], 0.0);
> -        assertEquals(2.0, solution.getPoint()[1], 0.0);
> -        assertEquals(50.0, solution.getValue(), 0.0);
> +        assertEquals(2.0, solution.getPoint()[0]);
> +        assertEquals(2.0, solution.getPoint()[1]);
> +        assertEquals(50.0, solution.getValue());
29c161,268
<          return new RealPointValuePair(coefficients, f.getValue(coefficients));
---
>  
> -    @Test
>      public void testMinimization() throws OptimizationException {
>          LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { -2, 1 }, -5);
>          Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
> @@ -93,12 +72,11 @@ public class SimplexSolverTest {
>  
>          SimplexSolver solver = new SimplexSolver();
>          RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, false);
> -        assertEquals(4.0, solution.getPoint()[0], 0.0);
> -        assertEquals(0.0, solution.getPoint()[1], 0.0);
> -        assertEquals(-13.0, solution.getValue(), 0.0);
> +        assertEquals(4.0, solution.getPoint()[0]);
> +        assertEquals(0.0, solution.getPoint()[1]);
> +        assertEquals(-13.0, solution.getValue());
>      }
>  
> -    @Test
>      public void testSolutionWithNegativeDecisionVariable() throws OptimizationException {
>          LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { -2, 1 }, 0);
>          Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
> @@ -107,33 +85,44 @@ public class SimplexSolverTest {
>  
>          SimplexSolver solver = new SimplexSolver();
>          RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);
> -        assertEquals(-2.0, solution.getPoint()[0], 0.0);
> -        assertEquals(8.0, solution.getPoint()[1], 0.0);
> -        assertEquals(12.0, solution.getValue(), 0.0);
> +        assertEquals(-2.0, solution.getPoint()[0]);
> +        assertEquals(8.0, solution.getPoint()[1]);
> +        assertEquals(12.0, solution.getValue());
>      }
>  
> -    @Test(expected = NoFeasibleSolutionException.class)
> -    public void testInfeasibleSolution() throws OptimizationException {
> +    public void testInfeasibleSolution() {
>          LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 15 }, 0);
>          Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
>          constraints.add(new LinearConstraint(new double[] { 1 }, Relationship.LEQ, 1));
>          constraints.add(new LinearConstraint(new double[] { 1 }, Relationship.GEQ, 3));
>  
>          SimplexSolver solver = new SimplexSolver();
> +        try {
>              solver.optimize(f, constraints, GoalType.MAXIMIZE, false);
> +            fail("An exception should have been thrown.");
> +        } catch (NoFeasibleSolutionException e) {
> +            // expected;
> +        } catch (OptimizationException e) {
> +            fail("wrong exception caught");
> +        }
>      }
>  
> -    @Test(expected = UnboundedSolutionException.class)
> -    public void testUnboundedSolution() throws OptimizationException {
> +    public void testUnboundedSolution() {
>          LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 15, 10 }, 0);
>          Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
>          constraints.add(new LinearConstraint(new double[] { 1, 0 }, Relationship.EQ, 2));
>  
>          SimplexSolver solver = new SimplexSolver();
> +        try {
>              solver.optimize(f, constraints, GoalType.MAXIMIZE, false);
> +            fail("An exception should have been thrown.");
> +        } catch (UnboundedSolutionException e) {
> +            // expected;
> +        } catch (OptimizationException e) {
> +            fail("wrong exception caught");
> +        }
>      }
>  
> -    @Test
>      public void testRestrictVariablesToNonNegative() throws OptimizationException {
>          LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 409, 523, 70, 204, 339 }, 0);
>          Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
> @@ -153,7 +142,6 @@ public class SimplexSolverTest {
>          assertEquals(1438556.7491409, solution.getValue(), .0000001);
>      }
>  
> -    @Test
>      public void testEpsilon() throws OptimizationException {
>        LinearObjectiveFunction f =
>            new LinearObjectiveFunction(new double[] { 10, 5, 1 }, 0);
> @@ -164,13 +152,12 @@ public class SimplexSolverTest {
>  
>        SimplexSolver solver = new SimplexSolver();
>        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);
> -      assertEquals(1.0, solution.getPoint()[0], 0.0);
> -      assertEquals(1.0, solution.getPoint()[1], 0.0);
> -      assertEquals(0.0, solution.getPoint()[2], 0.0);
> -      assertEquals(15.0, solution.getValue(), 0.0);
> +      assertEquals(1.0, solution.getPoint()[0]);
> +      assertEquals(1.0, solution.getPoint()[1]);
> +      assertEquals(0.0, solution.getPoint()[2]);
> +      assertEquals(15.0, solution.getValue());
>    }
>      
> -    @Test
>      public void testTrivialModel() throws OptimizationException {
>          LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 1, 1 }, 0);
>          Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
> @@ -181,7 +168,6 @@ public class SimplexSolverTest {
>          assertEquals(0, solution.getValue(), .0000001);
>      }
>  
> -    @Test
>      public void testLargeModel() throws OptimizationException {
>          double[] objective = new double[] {
>                                             1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
