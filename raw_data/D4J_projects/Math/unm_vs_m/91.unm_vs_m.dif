2c2
< index d6d2f18..0706f8c 100644
---
> index d6d2f181f..fa396fbaa 100644
5c5
< @@ -256,8 +256,8 @@ public class Fraction extends Number implements Comparable<Fraction> {
---
> @@ -256,9 +256,20 @@ public class Fraction extends Number implements Comparable<Fraction> {
11,13c11,25
< +        double nOd = doubleValue();
< +        double dOn = object.doubleValue();
<          return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);
---
> -        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);
> +        int ret = 0;
> +        
> +        if (this != object) { 
> +            double first = doubleValue();
> +            double second = object.doubleValue();
> +            
> +            if (first < second) {
> +                ret = -1;
> +            } else if (first > second) {
> +                ret = 1;
> +            }
> +        }
> +        
> +        return ret;
15a28,63
>      /**
> diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
> index 6569346bf..5abf3b01d 100644
> --- a/src/site/xdoc/changes.xml
> +++ b/src/site/xdoc/changes.xml
> @@ -39,10 +39,6 @@ The <action> type attribute can be add,update,fix,remove.
>    </properties>
>    <body>
>      <release version="2.0" date="TBD" description="TBD">
> -      <action dev="luc" type="fix" issue="MATH-252">
> -        Fixed a comparison error when two different fractions evaluate to the
> -        same double due to limited precision.
> -      </action>
>        <action dev="luc" type="add" issue="MATH-251" due-to="Benjamin Croizet">
>          Added a BigFraction class that does not overflow when big numerators or
>          denominators are used.
> diff --git a/src/test/org/apache/commons/math/fraction/FractionTest.java b/src/test/org/apache/commons/math/fraction/FractionTest.java
> index 3644b0e23..7eb2bbdec 100644
> --- a/src/test/org/apache/commons/math/fraction/FractionTest.java
> +++ b/src/test/org/apache/commons/math/fraction/FractionTest.java
> @@ -169,15 +169,6 @@ public class FractionTest extends TestCase {
>          assertEquals(0, first.compareTo(third));
>          assertEquals(1, first.compareTo(second));
>          assertEquals(-1, second.compareTo(first));
> -
> -        // these two values are different approximations of PI
> -        // the first  one is approximately PI - 3.07e-18
> -        // the second one is approximately PI + 1.936e-17
> -        Fraction pi1 = new Fraction(1068966896, 340262731);
> -        Fraction pi2 = new Fraction( 411557987, 131002976);
> -        assertEquals(-1, pi1.compareTo(pi2));
> -        assertEquals( 1, pi2.compareTo(pi1));
> -        assertEquals(0.0, pi1.doubleValue() - pi2.doubleValue(), 1.0e-20);
>      }
>      
>      public void testDoubleValue() {
