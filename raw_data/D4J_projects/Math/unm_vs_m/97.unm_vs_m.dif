2c2
< index 57f64a9..766d87e 100644
---
> index 57f64a974..01a9ee513 100644
5c5,21
< @@ -135,31 +135,17 @@ public class BrentSolver extends UnivariateRealSolverImpl {
---
> @@ -26,7 +26,7 @@ import org.apache.commons.math.MaxIterationsExceededException;
>   * <p>
>   * The function should be continuous but not necessarily smooth.</p>
>   *  
> - * @version $Revision:670469 $ $Date:2008-06-23 10:01:38 +0200 (lun., 23 juin 2008) $
> + * @version $Revision$ $Date$
>   */
>  public class BrentSolver extends UnivariateRealSolverImpl {
>      
> @@ -128,41 +128,20 @@ public class BrentSolver extends UnivariateRealSolverImpl {
>          clearResult();
>          verifyInterval(min, max);
>          
> -        double ret = Double.NaN;
> -        
>          double yMin = f.value(min);
>          double yMax = f.value(max);
8c24
<          double sign = yMin * yMax;
---
> -        double sign = yMin * yMax;
10,11c26
< +        if (sign >= 0) {
<              // check if either value is close to a zero
---
> -            // check if either value is close to a zero
19c34,35
<                  // neither value is close to zero and min and max do not bracket root.
---
> -                // neither value is close to zero and min and max do not bracket root.
> +        if (yMin * yMax >= 0) {
24c40
< -            }
---
>          }
26c42
< +        } else {
---
> +
28c44
<              ret = solve(min, yMin, max, yMax, min, yMin);
---
> -            ret = solve(min, yMin, max, yMax, min, yMin);
30c46
<              // either min or max is a root
---
> -            // either min or max is a root
35a52,55
> -        }
> +        return solve(min, yMin, max, yMax, min, yMin);
>  
> -        return ret;
38c58,199
<          return ret;
---
>      /**
> diff --git a/src/java/org/apache/commons/math/transform/FastCosineTransformer.java b/src/java/org/apache/commons/math/transform/FastCosineTransformer.java
> index b14afd099..a9e3f63f1 100644
> --- a/src/java/org/apache/commons/math/transform/FastCosineTransformer.java
> +++ b/src/java/org/apache/commons/math/transform/FastCosineTransformer.java
> @@ -34,7 +34,7 @@ import org.apache.commons.math.MathException;
>   * power of 2 plus one. Users should especially pay attention to the
>   * function transformation on how this affects the sampling.</p>
>   *
> - * @version $Revision:670469 $ $Date:2008-06-23 10:01:38 +0200 (lun., 23 juin 2008) $
> + * @version $Revision$ $Date$
>   * @since 1.2
>   */
>  public class FastCosineTransformer implements Serializable {
> @@ -53,7 +53,7 @@ public class FastCosineTransformer implements Serializable {
>       * Transform the given real data set.
>       * <p>
>       * The formula is $ F_n = (1/2) [f_0 + (-1)^n f_N] +
> -     *                        \Sigma_{k=1}^{N-1} f_k \cos(\pi nk/N) $
> +     *                        \Sigma_{k=0}^{N-1} f_k \cos(\pi nk/N) $
>       * </p>
>       * 
>       * @param f the real data array to be transformed
> @@ -71,7 +71,7 @@ public class FastCosineTransformer implements Serializable {
>       * Transform the given real function, sampled on the given interval.
>       * <p>
>       * The formula is $ F_n = (1/2) [f_0 + (-1)^n f_N] +
> -     *                        \Sigma_{k=1}^{N-1} f_k \cos(\pi nk/N) $
> +     *                        \Sigma_{k=0}^{N-1} f_k \cos(\pi nk/N) $
>       * </p>
>       * 
>       * @param f the function to be sampled and transformed
> @@ -94,7 +94,7 @@ public class FastCosineTransformer implements Serializable {
>       * Transform the given real data set.
>       * <p>
>       * The formula is $ F_n = \sqrt{1/2N} [f_0 + (-1)^n f_N] +
> -     *                        \sqrt{2/N} \Sigma_{k=1}^{N-1} f_k \cos(\pi nk/N) $
> +     *                        \sqrt{2/N} \Sigma_{k=0}^{N-1} f_k \cos(\pi nk/N) $
>       * </p>
>       * 
>       * @param f the real data array to be transformed
> @@ -113,7 +113,7 @@ public class FastCosineTransformer implements Serializable {
>       * Transform the given real function, sampled on the given interval.
>       * <p>
>       * The formula is $ F_n = \sqrt{1/2N} [f_0 + (-1)^n f_N] +
> -     *                        \sqrt{2/N} \Sigma_{k=1}^{N-1} f_k \cos(\pi nk/N) $
> +     *                        \sqrt{2/N} \Sigma_{k=0}^{N-1} f_k \cos(\pi nk/N) $
>       *
>       * </p>
>       * 
> @@ -138,7 +138,7 @@ public class FastCosineTransformer implements Serializable {
>       * Inversely transform the given real data set.
>       * <p>
>       * The formula is $ f_k = (1/N) [F_0 + (-1)^k F_N] +
> -     *                        (2/N) \Sigma_{n=1}^{N-1} F_n \cos(\pi nk/N) $
> +     *                        (2/N) \Sigma_{n=0}^{N-1} F_n \cos(\pi nk/N) $
>       * </p>
>       * 
>       * @param f the real data array to be inversely transformed
> @@ -157,7 +157,7 @@ public class FastCosineTransformer implements Serializable {
>       * Inversely transform the given real function, sampled on the given interval.
>       * <p>
>       * The formula is $ f_k = (1/N) [F_0 + (-1)^k F_N] +
> -     *                        (2/N) \Sigma_{n=1}^{N-1} F_n \cos(\pi nk/N) $
> +     *                        (2/N) \Sigma_{n=0}^{N-1} F_n \cos(\pi nk/N) $
>       * </p>
>       * 
>       * @param f the function to be sampled and inversely transformed
> @@ -181,7 +181,7 @@ public class FastCosineTransformer implements Serializable {
>       * Inversely transform the given real data set.
>       * <p>
>       * The formula is $ f_k = \sqrt{1/2N} [F_0 + (-1)^k F_N] +
> -     *                        \sqrt{2/N} \Sigma_{n=1}^{N-1} F_n \cos(\pi nk/N) $
> +     *                        \sqrt{2/N} \Sigma_{n=0}^{N-1} F_n \cos(\pi nk/N) $
>       * </p>
>       * 
>       * @param f the real data array to be inversely transformed
> @@ -199,7 +199,7 @@ public class FastCosineTransformer implements Serializable {
>       * Inversely transform the given real function, sampled on the given interval.
>       * <p>
>       * The formula is $ f_k = \sqrt{1/2N} [F_0 + (-1)^k F_N] +
> -     *                        \sqrt{2/N} \Sigma_{n=1}^{N-1} F_n \cos(\pi nk/N) $
> +     *                        \sqrt{2/N} \Sigma_{n=0}^{N-1} F_n \cos(\pi nk/N) $
>       * </p>
>       * 
>       * @param f the function to be sampled and inversely transformed
> diff --git a/src/site/xdoc/changes.xml b/src/site/xdoc/changes.xml
> index d765cd86b..e0ba4274c 100644
> --- a/src/site/xdoc/changes.xml
> +++ b/src/site/xdoc/changes.xml
> @@ -105,9 +105,6 @@ The <action> type attribute can be add,update,fix,remove.
>        </action>
>      </release>
>      <release version="1.3-SNAPSHOT" date="TBD" description="TBD">
> -      <action dev="luc" type="fix" issue="MATH-205" due-to="Roman Werpachowski">
> -        Fixed formula in fast cosine transformer javadoc comments.
> -      </action>
>        <action dev="brentworden" type="fix" issue="MATH-193" due-to="Michael Heuer and Sebb">
>          Javadoc and style fixes.
>        </action>
> @@ -126,9 +123,6 @@ The <action> type attribute can be add,update,fix,remove.
>        <action dev="brentworden" type="fix" issue="MATH-201" due-to="Peter Wyngaard">
>          Fixed truncation error in t-test classes for large t values.
>        </action>
> -      <action dev="brentworden" type="fix" issue="MATH-204" due-to="Mick">
> -        Added root checks for the endpoints.
> -      </action>
>      </release>
>      <release version="1.2" date="2008-02-24"
>      description="This release combines bug fixes and new features. Most notable
> diff --git a/src/test/org/apache/commons/math/analysis/BrentSolverTest.java b/src/test/org/apache/commons/math/analysis/BrentSolverTest.java
> index 49c93aa0b..ea1ba6857 100644
> --- a/src/test/org/apache/commons/math/analysis/BrentSolverTest.java
> +++ b/src/test/org/apache/commons/math/analysis/BrentSolverTest.java
> @@ -31,7 +31,7 @@ import junit.framework.TestSuite;
>   * default absolute accuracy of 10E-8 for sinus and the quintic function around
>   * zero, and 5..10 iterations for the other zeros.
>   * 
> - * @version $Revision:670469 $ $Date:2008-06-23 10:01:38 +0200 (lun., 23 juin 2008) $ 
> + * @version $Revision$ $Date$ 
>   */
>  public final class BrentSolverTest extends TestCase {
>  
> @@ -268,18 +268,6 @@ public final class BrentSolverTest extends TestCase {
>          assertEquals(result, 1.0, 1E-6);
>      }
>      
> -    public void testRootEndpoints() throws Exception {
> -        UnivariateRealFunction f = new SinFunction();
> -        UnivariateRealSolver solver = new BrentSolver(f);
> -        
> -        // endpoint is root
> -        double result = solver.solve(Math.PI, 4);
> -        assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());
> -
> -        result = solver.solve(3, Math.PI);
> -        assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());
> -    }
> -    
>      public void testBadEndpoints() throws Exception {
>          UnivariateRealFunction f = new SinFunction();
>          UnivariateRealSolver solver = new BrentSolver(f);
