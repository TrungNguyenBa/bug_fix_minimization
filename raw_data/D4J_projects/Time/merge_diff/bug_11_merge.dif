diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index e5563f61..dba6a25e 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -43,9 +43,6 @@ None
 
 Bug fixes since 2.2
 -------------------
-- ZoneInfoCompiler and DateTimeZoneBuilder multi-threading [#18]
-  A thread local variable was previously only initialised in one thread causing NPE
-  https://github.com/JodaOrg/joda-time/issues/18
 
 
 Scala
diff --git a/pom.xml b/pom.xml
index 214c9439..31c07c66 100644
--- a/pom.xml
+++ b/pom.xml
@@ -57,10 +57,6 @@
       <url>https://github.com/mebigfatguy</url>
     </contributor>
     <contributor>
-      <name>Luc Claes</name>
-      <url>https://github.com/lucclaes</url>
-    </contributor>
-    <contributor>
       <name>Dan Cojocar</name>
       <url>https://github.com/dancojocar</url>
     </contributor>
diff --git a/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java b/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java
index 64da5ea5..6efe0716 100644
--- a/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java
+++ b/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java
@@ -65,11 +65,10 @@ public class ZoneInfoCompiler {
 
     static Chronology cLenientISO;
 
-    static ThreadLocal<Boolean> cVerbose = new ThreadLocal<Boolean>() {
-        protected Boolean initialValue() {
-            return Boolean.FALSE;
+    static ThreadLocal<Boolean> cVerbose = new ThreadLocal<Boolean>();
+    static {
+        cVerbose.set(Boolean.FALSE);
     }
-    };
 
     /**
      * Gets a flag indicating that verbose logging is required.
diff --git a/src/test/java/org/joda/time/tz/TestCompiler.java b/src/test/java/org/joda/time/tz/TestCompiler.java
index fc6cc865..eec41d57 100644
--- a/src/test/java/org/joda/time/tz/TestCompiler.java
+++ b/src/test/java/org/joda/time/tz/TestCompiler.java
@@ -84,30 +84,6 @@ public class TestCompiler extends TestCase {
         DateTimeZone.setDefault(originalDateTimeZone);
     }
 
-    //-----------------------------------------------------------------------
-    public void testDateTimeZoneBuilder() throws Exception {
-        // test multithreading, issue #18
-        getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ1", true);
-        final DateTimeZone[] zone = new DateTimeZone[1];
-        Thread t = new Thread(new Runnable() {
-            public void run() {
-                zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone("TestDTZ2", true);
-            }
-        });
-        t.start();
-        t.join();
-        assertNotNull(zone[0]);
-    }
-
-    private DateTimeZoneBuilder getTestDataTimeZoneBuilder() {
-         return new DateTimeZoneBuilder()
-             .addCutover(1601, 'w', 1, 1, 1, false, 7200000)
-             .setStandardOffset(3600000)
-             .addRecurringSavings("", 3600000, 1601, Integer.MAX_VALUE, 'w', 3, -1, 1, false, 7200000)
-             .addRecurringSavings("", 0, 1601, Integer.MAX_VALUE, 'w', 10, -1, 1, false, 10800000);
-    }    
-
-    //-----------------------------------------------------------------------
     public void testCompile() throws Exception {
         Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE);
         DateTimeZone tz = provider.getZone("America/Los_Angeles");
