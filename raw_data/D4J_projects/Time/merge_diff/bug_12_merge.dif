diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index e0794250..5a458c5f 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -61,10 +61,6 @@ Bug fixes since 2.1
   This used to fail before 1970 when the input had a milli-of-second field
   Fixed to not throw an exception
 
-- LocalDateTime.fromCalendarFields()/LocalDateTime.fromDateFields()
-  This used to fail before year 1 as the era was ignored
-  Fixed to return the correct year
-
 - MutableDateTime.setDate(ReadableInstant)  [163]
   Fixed to handle cross-time-zone issues properly rather than always using UTC
 
diff --git a/src/main/java/org/joda/time/LocalDate.java b/src/main/java/org/joda/time/LocalDate.java
index c86b9d73..7bb7a08c 100644
--- a/src/main/java/org/joda/time/LocalDate.java
+++ b/src/main/java/org/joda/time/LocalDate.java
@@ -21,7 +21,6 @@ import java.io.ObjectOutputStream;
 import java.io.Serializable;
 import java.util.Calendar;
 import java.util.Date;
-import java.util.GregorianCalendar;
 import java.util.HashSet;
 import java.util.Locale;
 import java.util.Set;
@@ -198,8 +197,8 @@ public final class LocalDate
      * will only pass in instances of <code>GregorianCalendar</code> however
      * this is not validated.
      *
-     * @param calendar  the Calendar to extract fields from, not null
-     * @return the created local date, not null
+     * @param calendar  the Calendar to extract fields from
+     * @return the created LocalDate
      * @throws IllegalArgumentException if the calendar is null
      * @throws IllegalArgumentException if the date is invalid for the ISO chronology
      */
@@ -207,10 +206,8 @@ public final class LocalDate
         if (calendar == null) {
             throw new IllegalArgumentException("The calendar must not be null");
         }
-        int era = calendar.get(Calendar.ERA);
-        int yearOfEra = calendar.get(Calendar.YEAR);
         return new LocalDate(
-            (era == GregorianCalendar.AD ? yearOfEra : 1 - yearOfEra),
+            calendar.get(Calendar.YEAR),
             calendar.get(Calendar.MONTH) + 1,
             calendar.get(Calendar.DAY_OF_MONTH)
         );
@@ -231,8 +228,8 @@ public final class LocalDate
      * <p>
      * This factory method always creates a LocalDate with ISO chronology.
      *
-     * @param date  the Date to extract fields from, not null
-     * @return the created local date, not null
+     * @param date  the Date to extract fields from
+     * @return the created LocalDate
      * @throws IllegalArgumentException if the calendar is null
      * @throws IllegalArgumentException if the date is invalid for the ISO chronology
      */
@@ -241,12 +238,6 @@ public final class LocalDate
         if (date == null) {
             throw new IllegalArgumentException("The date must not be null");
         }
-        if (date.getTime() < 0) {
-            // handle years in era BC
-            GregorianCalendar cal = new GregorianCalendar();
-            cal.setTime(date);
-            return fromCalendarFields(cal);
-        }
         return new LocalDate(
             date.getYear() + 1900,
             date.getMonth() + 1,
diff --git a/src/main/java/org/joda/time/LocalDateTime.java b/src/main/java/org/joda/time/LocalDateTime.java
index e75deca2..325192b3 100644
--- a/src/main/java/org/joda/time/LocalDateTime.java
+++ b/src/main/java/org/joda/time/LocalDateTime.java
@@ -21,7 +21,6 @@ import java.io.ObjectOutputStream;
 import java.io.Serializable;
 import java.util.Calendar;
 import java.util.Date;
-import java.util.GregorianCalendar;
 import java.util.Locale;
 import java.util.TimeZone;
 
@@ -187,8 +186,8 @@ public final class LocalDateTime
      * will only pass in instances of <code>GregorianCalendar</code> however
      * this is not validated.
      *
-     * @param calendar  the Calendar to extract fields from, not null
-     * @return the created local date-time, not null
+     * @param calendar  the Calendar to extract fields from
+     * @return the created LocalDateTime
      * @throws IllegalArgumentException if the calendar is null
      * @throws IllegalArgumentException if the date is invalid for the ISO chronology
      */
@@ -196,10 +195,8 @@ public final class LocalDateTime
         if (calendar == null) {
             throw new IllegalArgumentException("The calendar must not be null");
         }
-        int era = calendar.get(Calendar.ERA);
-        int yearOfEra = calendar.get(Calendar.YEAR);
         return new LocalDateTime(
-            (era == GregorianCalendar.AD ? yearOfEra : 1 - yearOfEra),
+            calendar.get(Calendar.YEAR),
             calendar.get(Calendar.MONTH) + 1,
             calendar.get(Calendar.DAY_OF_MONTH),
             calendar.get(Calendar.HOUR_OF_DAY),
@@ -224,8 +221,8 @@ public final class LocalDateTime
      * <p>
      * This factory method always creates a LocalDateTime with ISO chronology.
      *
-     * @param date  the Date to extract fields from, not null
-     * @return the created local date-time, not null
+     * @param date  the Date to extract fields from
+     * @return the created LocalDateTime
      * @throws IllegalArgumentException if the calendar is null
      * @throws IllegalArgumentException if the date is invalid for the ISO chronology
      */
@@ -234,12 +231,6 @@ public final class LocalDateTime
         if (date == null) {
             throw new IllegalArgumentException("The date must not be null");
         }
-        if (date.getTime() < 0) {
-            // handle years in era BC
-            GregorianCalendar cal = new GregorianCalendar();
-            cal.setTime(date);
-            return fromCalendarFields(cal);
-        }
         return new LocalDateTime(
             date.getYear() + 1900,
             date.getMonth() + 1,
diff --git a/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java b/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java
index e00ce5db..1dbb381a 100644
--- a/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java
+++ b/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java
@@ -102,30 +102,11 @@ public class TestLocalDateTime_Constructors extends TestCase {
     }
 
     //-----------------------------------------------------------------------
-    public void testFactory_fromCalendarFields() throws Exception {
+    public void testFactory_FromCalendarFields() throws Exception {
         GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);
         cal.set(Calendar.MILLISECOND, 7);
         LocalDateTime expected = new LocalDateTime(1970, 2, 3, 4, 5, 6, 7);
         assertEquals(expected, LocalDateTime.fromCalendarFields(cal));
-    }
-
-    public void testFactory_fromCalendarFields_beforeYearZero1() throws Exception {
-        GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);
-        cal.set(Calendar.ERA, GregorianCalendar.BC);
-        cal.set(Calendar.MILLISECOND, 7);
-        LocalDateTime expected = new LocalDateTime(0, 2, 3, 4, 5, 6, 7);
-        assertEquals(expected, LocalDateTime.fromCalendarFields(cal));
-    }
-
-    public void testFactory_fromCalendarFields_beforeYearZero3() throws Exception {
-        GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);
-        cal.set(Calendar.ERA, GregorianCalendar.BC);
-        cal.set(Calendar.MILLISECOND, 7);
-        LocalDateTime expected = new LocalDateTime(-2, 2, 3, 4, 5, 6, 7);
-        assertEquals(expected, LocalDateTime.fromCalendarFields(cal));
-    }
-
-    public void testFactory_fromCalendarFields_null() throws Exception {
         try {
             LocalDateTime.fromCalendarFields((Calendar) null);
             fail();
@@ -133,37 +114,22 @@ public class TestLocalDateTime_Constructors extends TestCase {
     }
 
     //-----------------------------------------------------------------------
-    public void testFactory_fromDateFields_after1970() throws Exception {
+    public void testFactory_FromDateFields_after1970() throws Exception {
         GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);
         cal.set(Calendar.MILLISECOND, 7);
         LocalDateTime expected = new LocalDateTime(1970, 2, 3, 4, 5 ,6, 7);
         assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));
+        try {
+            LocalDateTime.fromDateFields((Date) null);
+            fail();
+        } catch (IllegalArgumentException ex) {}
     }
 
-    public void testFactory_fromDateFields_before1970() throws Exception {
+    public void testFactory_FromDateFields_before1970() throws Exception {
         GregorianCalendar cal = new GregorianCalendar(1969, 1, 3, 4, 5, 6);
         cal.set(Calendar.MILLISECOND, 7);
         LocalDateTime expected = new LocalDateTime(1969, 2, 3, 4, 5 ,6, 7);
         assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));
-    }
-
-    public void testFactory_fromDateFields_beforeYearZero1() throws Exception {
-        GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);
-        cal.set(Calendar.ERA, GregorianCalendar.BC);
-        cal.set(Calendar.MILLISECOND, 7);
-        LocalDateTime expected = new LocalDateTime(0, 2, 3, 4, 5, 6, 7);
-        assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));
-    }
-
-    public void testFactory_fromDateFields_beforeYearZero3() throws Exception {
-        GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);
-        cal.set(Calendar.ERA, GregorianCalendar.BC);
-        cal.set(Calendar.MILLISECOND, 7);
-        LocalDateTime expected = new LocalDateTime(-2, 2, 3, 4, 5, 6, 7);
-        assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));
-    }
-
-    public void testFactory_fromDateFields_null() throws Exception {
         try {
             LocalDateTime.fromDateFields((Date) null);
             fail();
diff --git a/src/test/java/org/joda/time/TestLocalDate_Constructors.java b/src/test/java/org/joda/time/TestLocalDate_Constructors.java
index ee5fa9d4..acd703c9 100644
--- a/src/test/java/org/joda/time/TestLocalDate_Constructors.java
+++ b/src/test/java/org/joda/time/TestLocalDate_Constructors.java
@@ -94,30 +94,11 @@ public class TestLocalDate_Constructors extends TestCase {
     }
 
     //-----------------------------------------------------------------------
-    public void testFactory_fromCalendarFields() throws Exception {
+    public void testFactory_FromCalendarFields() throws Exception {
         GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);
         cal.set(Calendar.MILLISECOND, 7);
         LocalDate expected = new LocalDate(1970, 2, 3);
         assertEquals(expected, LocalDate.fromCalendarFields(cal));
-    }
-
-    public void testFactory_fromCalendarFields_beforeYearZero1() throws Exception {
-        GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);
-        cal.set(Calendar.ERA, GregorianCalendar.BC);
-        cal.set(Calendar.MILLISECOND, 7);
-        LocalDate expected = new LocalDate(0, 2, 3);
-        assertEquals(expected, LocalDate.fromCalendarFields(cal));
-    }
-
-    public void testFactory_fromCalendarFields_beforeYearZero3() throws Exception {
-        GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);
-        cal.set(Calendar.ERA, GregorianCalendar.BC);
-        cal.set(Calendar.MILLISECOND, 7);
-        LocalDate expected = new LocalDate(-2, 2, 3);
-        assertEquals(expected, LocalDate.fromCalendarFields(cal));
-    }
-
-    public void testFactory_fromCalendarFields_null() throws Exception {
         try {
             LocalDate.fromCalendarFields((Calendar) null);
             fail();
@@ -125,37 +106,11 @@ public class TestLocalDate_Constructors extends TestCase {
     }
 
     //-----------------------------------------------------------------------
-    public void testFactory_fromDateFields_after1970() throws Exception {
+    public void testFactory_FromDateFields() throws Exception {
         GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);
         cal.set(Calendar.MILLISECOND, 7);
         LocalDate expected = new LocalDate(1970, 2, 3);
         assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));
-    }
-
-    public void testFactory_fromDateFields_before1970() throws Exception {
-        GregorianCalendar cal = new GregorianCalendar(1969, 1, 3, 4, 5, 6);
-        cal.set(Calendar.MILLISECOND, 7);
-        LocalDate expected = new LocalDate(1969, 2, 3);
-        assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));
-    }
-
-    public void testFactory_fromDateFields_beforeYearZero1() throws Exception {
-        GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);
-        cal.set(Calendar.ERA, GregorianCalendar.BC);
-        cal.set(Calendar.MILLISECOND, 7);
-        LocalDate expected = new LocalDate(0, 2, 3);
-        assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));
-    }
-
-    public void testFactory_fromDateFields_beforeYearZero3() throws Exception {
-        GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);
-        cal.set(Calendar.ERA, GregorianCalendar.BC);
-        cal.set(Calendar.MILLISECOND, 7);
-        LocalDate expected = new LocalDate(-2, 2, 3);
-        assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));
-    }
-
-    public void testFactory_fromDateFields_null() throws Exception {
         try {
             LocalDate.fromDateFields((Date) null);
             fail();
@@ -428,7 +383,6 @@ public class TestLocalDate_Constructors extends TestCase {
         assertEquals(6, test.getDayOfMonth());
     }
 
-    @SuppressWarnings("deprecation")
     public void testConstructor_ObjectYearMonthDay() throws Throwable {
         YearMonthDay date = new YearMonthDay(1970, 4, 6, BUDDHIST_UTC);
         LocalDate test = new LocalDate(date);
