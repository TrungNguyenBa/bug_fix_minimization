diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 32653691..700e0f05 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -45,11 +45,6 @@ None
 
 Bug fixes since 2.1
 -------------------
-- MonthDay add/subtract [3528941]
-  Addition and subtraction in MonthDay was fixed.
-  It previously didn't work when the start value was 29th February.
-  
-
 - DateTimeFormatter.parseInto() [3522138]
   The v2.0 changes to handle parsing of month/day on their own (for Feb 29th) cause
   parseInto() to lose the year. This fix reverts behaviour to v1.x so that parseInto()
diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java
index 2892a2d7..42a32e7e 100644
--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java
+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java
@@ -206,12 +206,6 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {
         if (valueToAdd == 0) {
             return values;
         }
-        if (partial.size() > 0 && partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear()) && fieldIndex == 0) {
-            // month is largest field and being added to, such as month-day
-            int curMonth0 = partial.getValue(0) - 1;
-            int newMonth = ((curMonth0 + (valueToAdd % 12) + 12) % 12) + 1;
-            return set(partial, 0, values, newMonth);
-        }
         if (DateTimeUtils.isContiguous(partial)) {
             long instant = 0L;
             for (int i = 0, isize = partial.size(); i < isize; i++) {
diff --git a/src/test/java/org/joda/time/TestMonthDay_Basics.java b/src/test/java/org/joda/time/TestMonthDay_Basics.java
index 38f97a7f..65f30b86 100644
--- a/src/test/java/org/joda/time/TestMonthDay_Basics.java
+++ b/src/test/java/org/joda/time/TestMonthDay_Basics.java
@@ -448,34 +448,6 @@ public class TestMonthDay_Basics extends TestCase {
         assertEquals(expected, result);
     }
 
-    public void testPlusMonths_int_fromLeap() {
-        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());
-        MonthDay result = test.plusMonths(1);
-        MonthDay expected = new MonthDay(3, 29, ISOChronology.getInstance());
-        assertEquals(expected, result);
-    }
-
-    public void testPlusMonths_int_negativeFromLeap() {
-        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());
-        MonthDay result = test.plusMonths(-1);
-        MonthDay expected = new MonthDay(1, 29, ISOChronology.getInstance());
-        assertEquals(expected, result);
-    }
-
-    public void testPlusMonths_int_endOfMonthAdjust() {
-        MonthDay test = new MonthDay(3, 31, ISOChronology.getInstanceUTC());
-        MonthDay result = test.plusMonths(1);
-        MonthDay expected = new MonthDay(4, 30, ISOChronology.getInstance());
-        assertEquals(expected, result);
-    }
-
-    public void testPlusMonths_int_negativeEndOfMonthAdjust() {
-        MonthDay test = new MonthDay(3, 31, ISOChronology.getInstanceUTC());
-        MonthDay result = test.plusMonths(-1);
-        MonthDay expected = new MonthDay(2, 29, ISOChronology.getInstance());
-        assertEquals(expected, result);
-    }
-
     public void testPlusMonths_int_same() {
         MonthDay test = new MonthDay(6, 5, ISO_UTC);
         MonthDay result = test.plusMonths(0);
@@ -496,7 +468,6 @@ public class TestMonthDay_Basics extends TestCase {
         assertEquals(expected, result);
     }
 
-    //-------------------------------------------------------------------------
     public void testPlusDays_int() {
         MonthDay test = new MonthDay(5, 10, BuddhistChronology.getInstance());
         MonthDay result = test.plusDays(1);
@@ -504,20 +475,6 @@ public class TestMonthDay_Basics extends TestCase {
         assertEquals(expected, result);
     }
 
-    public void testPlusDays_int_fromLeap() {
-        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());
-        MonthDay result = test.plusDays(1);
-        MonthDay expected = new MonthDay(3, 1, ISOChronology.getInstance());
-        assertEquals(expected, result);
-    }
-
-    public void testPlusDays_int_negativeFromLeap() {
-        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());
-        MonthDay result = test.plusDays(-1);
-        MonthDay expected = new MonthDay(2, 28, ISOChronology.getInstance());
-        assertEquals(expected, result);
-    }
-
     public void testPlusDays_same() {
         MonthDay test = new MonthDay(5, 10, BuddhistChronology.getInstance());
         MonthDay result = test.plusDays(0);
@@ -542,34 +499,6 @@ public class TestMonthDay_Basics extends TestCase {
         assertEquals(expected, result);
     }
 
-    public void testMinusMonths_int_fromLeap() {
-        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());
-        MonthDay result = test.minusMonths(1);
-        MonthDay expected = new MonthDay(1, 29, ISOChronology.getInstance());
-        assertEquals(expected, result);
-    }
-
-    public void testMinusMonths_int_negativeFromLeap() {
-        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());
-        MonthDay result = test.minusMonths(-1);
-        MonthDay expected = new MonthDay(3, 29, ISOChronology.getInstance());
-        assertEquals(expected, result);
-    }
-
-    public void testMinusMonths_int_endOfMonthAdjust() {
-        MonthDay test = new MonthDay(3, 31, ISOChronology.getInstanceUTC());
-        MonthDay result = test.minusMonths(1);
-        MonthDay expected = new MonthDay(2, 29, ISOChronology.getInstance());
-        assertEquals(expected, result);
-    }
-
-    public void testMinusMonths_int_negativeEndOfMonthAdjust() {
-        MonthDay test = new MonthDay(3, 31, ISOChronology.getInstanceUTC());
-        MonthDay result = test.minusMonths(-1);
-        MonthDay expected = new MonthDay(4, 30, ISOChronology.getInstance());
-        assertEquals(expected, result);
-    }
-
     public void testMinusMonths_int_same() {
         MonthDay test = new MonthDay(6, 5, ISO_UTC);
         MonthDay result = test.minusMonths(0);
@@ -590,7 +519,6 @@ public class TestMonthDay_Basics extends TestCase {
         assertEquals(expected, result);
     }
 
-    //-------------------------------------------------------------------------
     public void testMinusDays_int() {
         MonthDay test = new MonthDay(5, 11, BuddhistChronology.getInstance());
         MonthDay result = test.minusDays(1);
@@ -598,20 +526,6 @@ public class TestMonthDay_Basics extends TestCase {
         assertEquals(expected, result);
     }
 
-    public void testMinusDays_int_fromLeap() {
-        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());
-        MonthDay result = test.minusDays(1);
-        MonthDay expected = new MonthDay(2, 28, ISOChronology.getInstance());
-        assertEquals(expected, result);
-    }
-
-    public void testMinusDays_int_negativeFromLeap() {
-        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());
-        MonthDay result = test.minusDays(-1);
-        MonthDay expected = new MonthDay(3, 1, ISOChronology.getInstance());
-        assertEquals(expected, result);
-    }
-
     public void testMinusDays_same() {
         MonthDay test = new MonthDay(5, 11, BuddhistChronology.getInstance());
         MonthDay result = test.minusDays(0);
