diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index d5157e34..e47e1dee 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -35,11 +35,9 @@ Data compatible - Yes, except
   - DateTimeZone data updated to version 2011h
 
 Semantic compatible - Yes, except
- -  Date-time for time-zones with DST based on an offset of 00:00 now pick summer time when ambiguous
+ Time-zone names now return correct results on JDK1.6 for non-English locales
 
- -  Time-zone names now return correct results on JDK1.6 for non-English locales
-
- - Interval/MutableInterval toString() now contains the time-zone offset
+ Interval/MutableInterval toString() now contains the time-zone offset
 
 
 Deprecations since 2.0
@@ -49,10 +47,6 @@ None
 
 Bug fixes since 2.0
 -------------------
-- Ambiguous date-time when in zone with offset of 00:00 [3424669]
-  A date-time constructor with an ambiguous time due to DST should choose summer time
-  but for a zone with an offset of 00:00 it chose winter time
-
 - Time-zone names [3412910]
   Names now returned in locales other than English
   The names may differ between JDK1.5 and 1.6 due to the underlying JDK data
diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java
index ec05941f..855cad05 100644
--- a/src/main/java/org/joda/time/DateTimeZone.java
+++ b/src/main/java/org/joda/time/DateTimeZone.java
@@ -897,7 +897,7 @@ public abstract class DateTimeZone implements Serializable {
                     return offsetLocal;
                 }
             }
-        } else if (offsetLocal >= 0) {
+        } else if (offsetLocal > 0) {
             long prev = previousTransition(instantAdjusted);
             if (prev < instantAdjusted) {
                 int offsetPrev = getOffset(prev);
diff --git a/src/test/java/org/joda/time/TestDateTimeZoneCutover.java b/src/test/java/org/joda/time/TestDateTimeZoneCutover.java
index a7a5175d..a62d6242 100644
--- a/src/test/java/org/joda/time/TestDateTimeZoneCutover.java
+++ b/src/test/java/org/joda/time/TestDateTimeZoneCutover.java
@@ -1246,35 +1246,14 @@ public class TestDateTimeZoneCutover extends TestCase {
 
     // ensure Summer time picked
     //-----------------------------------------------------------------------
-    public void testDateTimeCreation_athens() {
+    public void testDateTimeCreation_europe() {
         DateTimeZone zone = DateTimeZone.forID("Europe/Athens");
         DateTime base = new DateTime(2011, 10, 30, 3, 15, zone);
         assertEquals("2011-10-30T03:15:00.000+03:00", base.toString());
         assertEquals("2011-10-30T03:15:00.000+02:00", base.plusHours(1).toString());
     }
 
-    public void testDateTimeCreation_paris() {
-        DateTimeZone zone = DateTimeZone.forID("Europe/Paris");
-        DateTime base = new DateTime(2011, 10, 30, 2, 15, zone);
-        assertEquals("2011-10-30T02:15:00.000+02:00", base.toString());
-        assertEquals("2011-10-30T02:15:00.000+01:00", base.plusHours(1).toString());
-    }
-
-    public void testDateTimeCreation_london() {
-        DateTimeZone zone = DateTimeZone.forID("Europe/London");
-        DateTime base = new DateTime(2011, 10, 30, 1, 15, zone);
-        assertEquals("2011-10-30T01:15:00.000+01:00", base.toString());
-        assertEquals("2011-10-30T01:15:00.000Z", base.plusHours(1).toString());
-    }
-
-    public void testDateTimeCreation_newYork() {
-        DateTimeZone zone = DateTimeZone.forID("America/New_York");
-        DateTime base = new DateTime(2010, 11, 7, 1, 15, zone);
-        assertEquals("2010-11-07T01:15:00.000-04:00", base.toString());
-        assertEquals("2010-11-07T01:15:00.000-05:00", base.plusHours(1).toString());
-    }
-
-    public void testDateTimeCreation_losAngeles() {
+    public void testDateTimeCreation_us() {
         DateTimeZone zone = DateTimeZone.forID("America/Los_Angeles");
         DateTime base = new DateTime(2010, 11, 7, 1, 15, zone);
         assertEquals("2010-11-07T01:15:00.000-07:00", base.toString());
