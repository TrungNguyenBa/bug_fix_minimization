diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index c3ac535f..bd67101b 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -129,7 +129,7 @@ difficult options that generics offers.
 As mentioned above, erasure ensures that this source incompatibility is *not* a binary compatibility.
 
 Note that not all deprecated elements have been removed.
-Some methods and classes have been retained simply because the potential pain of binary incompatability
+Some methods and classes have been retained simply because the potential pain of binary compatability
 is greater than the gain of removing the deprecations.
 
 Serialization compatible - Yes
@@ -152,11 +152,6 @@ The old behaviour can be simulated by calling withDefautYear(1970) on the format
 Previously, calling various methods during a daylight savings overlap would change the offset.
 Now, most methods (such as withMillis/withSeconds/withMinutes/...) will retain the offset wherever possible.
 
-Previously, calling DateTimeZone.getOffsetFromLocal during a daylight savings overlap chose the
-earlier instant in the Western hemisphere and the later instant in the Eastern hemisphere.
-Now, it always returns the earlier instant (summer time) during an overlap.
-This affects the constructor of DateTime and other methods.
-
 
 Deprecations since 1.6
 ----------------------
@@ -180,11 +175,6 @@ Bug fixes since 1.6
 - DateTimeZone.convertLocalToUTC [2903029]
   Now handles date after last ever DST change
 
-- DateTimeZone.getOffsetFromLocal [2952991]
-  The behaviour during DST overlaps is now defined to always return the earlier instant
-  which is normally known as daylight or summer time. Previously, the result varied by hemisphere
-  This affects the constructor of DateTime and other methods
-
 - DateTimeZone.getDefault [3048468,3056104]
   Handle missing user.timezone system property on Android that resulted in stack overflow
 
diff --git a/JodaTime/src/main/java/org/joda/time/DateTimeZone.java b/JodaTime/src/main/java/org/joda/time/DateTimeZone.java
index 81f58729..23f70a5c 100644
--- a/JodaTime/src/main/java/org/joda/time/DateTimeZone.java
+++ b/JodaTime/src/main/java/org/joda/time/DateTimeZone.java
@@ -866,22 +866,18 @@ public abstract class DateTimeZone implements Serializable {
      * Input: 02:00  Output: 02:00<br />
      * Input: 02:30  Output: 02:30<br />
      * <p>
-     * During a DST overlap (where the local time is ambiguous) this method will return
-     * the earlier instant. The combination of these two rules is to always favour
-     * daylight (summer) time over standard (winter) time.
-     * <p>
-     * NOTE: Prior to v2.0, the DST overlap behaviour was not defined and varied by hemisphere.
-     * Prior to v1.5, the DST gap behaviour was also not defined.
+     * NOTE: The behaviour of this method changed in v1.5, with the emphasis
+     * on returning a consistent result later along the time-line (shown above).
      *
-     * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for
+     * @param instantLocal  the millisecond instant, relative to this time zone, to
+     * get the offset for
      * @return the millisecond offset to subtract from local time to get UTC time
      */
     public int getOffsetFromLocal(long instantLocal) {
         // get the offset at instantLocal (first estimate)
-        final int offsetLocal = getOffset(instantLocal);
+        int offsetLocal = getOffset(instantLocal);
         // adjust instantLocal using the estimate and recalc the offset
-        final long instantAdjusted = instantLocal - offsetLocal;
-        final int offsetAdjusted = getOffset(instantAdjusted);
+        int offsetAdjusted = getOffset(instantLocal - offsetLocal);
         // if the offsets differ, we must be near a DST boundary
         if (offsetLocal != offsetAdjusted) {
             // we need to ensure that time is always after the DST gap
@@ -890,21 +886,12 @@ public abstract class DateTimeZone implements Serializable {
                 // if we just return offsetAdjusted then the time is pushed
                 // back before the transition, whereas it should be
                 // on or after the transition
-                long nextLocal = nextTransition(instantAdjusted);
+                long nextLocal = nextTransition(instantLocal - offsetLocal);
                 long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);
                 if (nextLocal != nextAdjusted) {
                     return offsetLocal;
                 }
             }
-        } else if (offsetLocal > 0) {
-            long prev = previousTransition(instantAdjusted);
-            if (prev < instantAdjusted) {
-                int offsetPrev = getOffset(prev);
-                int diff = offsetPrev - offsetLocal;
-                if (instantAdjusted - prev <= diff) {
-                    return offsetPrev;
-                }
-            }
         }
         return offsetAdjusted;
     }
diff --git a/JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java b/JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java
index e1284576..1dae4b55 100644
--- a/JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java
+++ b/JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java
@@ -659,11 +659,6 @@ public class TestDateTimeZoneCutover extends TestCase {
         doTest_getOffsetFromLocal(11, 4, 8, 0, "2007-11-04T08:00:00.000-05:00", ZONE_NEW_YORK);
     }
 
-    public void test_DateTime_constructor_NewYork_Autumn() {
-        DateTime dt = new DateTime(2007, 11, 4, 1, 30, ZONE_NEW_YORK);
-        assertEquals("2007-11-04T01:30:00.000-04:00", dt.toString());
-    }
-
     public void test_DateTime_plusHour_NewYork_Autumn() {
         DateTime dt = new DateTime(2007, 11, 3, 18, 0, 0, 0, ZONE_NEW_YORK);
         assertEquals("2007-11-03T18:00:00.000-04:00", dt.toString());
@@ -886,41 +881,24 @@ public class TestDateTimeZoneCutover extends TestCase {
         assertEquals("2007-10-28T02:00:00.001+03:00", post.toString());
     }
 
-    public void test_getOffsetFromLocal_Moscow_Autumn() {
-        doTest_getOffsetFromLocal(10, 28, 0, 0, "2007-10-28T00:00:00.000+04:00", ZONE_MOSCOW);
-        doTest_getOffsetFromLocal(10, 28, 0,30, "2007-10-28T00:30:00.000+04:00", ZONE_MOSCOW);
-        doTest_getOffsetFromLocal(10, 28, 1, 0, "2007-10-28T01:00:00.000+04:00", ZONE_MOSCOW);
-        doTest_getOffsetFromLocal(10, 28, 1,30, "2007-10-28T01:30:00.000+04:00", ZONE_MOSCOW);
-        
-        doTest_getOffsetFromLocal(10, 28, 2, 0, "2007-10-28T02:00:00.000+04:00", ZONE_MOSCOW);
-        doTest_getOffsetFromLocal(10, 28, 2,30, "2007-10-28T02:30:00.000+04:00", ZONE_MOSCOW);
-        doTest_getOffsetFromLocal(10, 28, 2,30,59,999, "2007-10-28T02:30:59.999+04:00", ZONE_MOSCOW);
-        doTest_getOffsetFromLocal(10, 28, 2,59,59,998, "2007-10-28T02:59:59.998+04:00", ZONE_MOSCOW);
-        doTest_getOffsetFromLocal(10, 28, 2,59,59,999, "2007-10-28T02:59:59.999+04:00", ZONE_MOSCOW);
-        
-        doTest_getOffsetFromLocal(10, 28, 3, 0, "2007-10-28T03:00:00.000+03:00", ZONE_MOSCOW);
-        doTest_getOffsetFromLocal(10, 28, 3,30, "2007-10-28T03:30:00.000+03:00", ZONE_MOSCOW);
-        doTest_getOffsetFromLocal(10, 28, 4, 0, "2007-10-28T04:00:00.000+03:00", ZONE_MOSCOW);
-        doTest_getOffsetFromLocal(10, 28, 5, 0, "2007-10-28T05:00:00.000+03:00", ZONE_MOSCOW);
-        doTest_getOffsetFromLocal(10, 28, 6, 0, "2007-10-28T06:00:00.000+03:00", ZONE_MOSCOW);
-        doTest_getOffsetFromLocal(10, 28, 7, 0, "2007-10-28T07:00:00.000+03:00", ZONE_MOSCOW);
-        doTest_getOffsetFromLocal(10, 28, 8, 0, "2007-10-28T08:00:00.000+03:00", ZONE_MOSCOW);
-    }
-
-    public void test_getOffsetFromLocal_Moscow_Autumn_overlap_mins() {
-        for (int min = 0; min < 60; min++) {
-            if (min < 10) {
-                doTest_getOffsetFromLocal(10, 28, 2, min, "2007-10-28T02:0" + min + ":00.000+04:00", ZONE_MOSCOW);
-            } else {
-                doTest_getOffsetFromLocal(10, 28, 2, min, "2007-10-28T02:" + min + ":00.000+04:00", ZONE_MOSCOW);
-            }
-        }
-    }
-
-    public void test_DateTime_constructor_Moscow_Autumn() {
-        DateTime dt = new DateTime(2007, 10, 28, 2, 30, ZONE_MOSCOW);
-        assertEquals("2007-10-28T02:30:00.000+04:00", dt.toString());
-    }
+    // broken, and getOffsetFromLocal has no obvious way to determine which is correct
+//    public void test_getOffsetFromLocal_Moscow_Autumn() {
+//        doTest_getOffsetFromLocal(10, 28, 0, 0, "2007-10-28T00:00:00.000+04:00", ZONE_MOSCOW);
+//        doTest_getOffsetFromLocal(10, 28, 0,30, "2007-10-28T00:30:00.000+04:00", ZONE_MOSCOW);
+//        doTest_getOffsetFromLocal(10, 28, 1, 0, "2007-10-28T01:00:00.000+04:00", ZONE_MOSCOW);
+//        doTest_getOffsetFromLocal(10, 28, 1,30, "2007-10-28T01:30:00.000+04:00", ZONE_MOSCOW);
+//        
+//        doTest_getOffsetFromLocal(10, 28, 2, 0, "2007-10-28T02:00:00.000+04:00", ZONE_MOSCOW);
+//        doTest_getOffsetFromLocal(10, 28, 2,30, "2007-10-28T02:30:00.000+04:00", ZONE_MOSCOW);
+//        
+//        doTest_getOffsetFromLocal(10, 28, 3, 0, "2007-10-28T03:00:00.000+03:00", ZONE_MOSCOW);
+//        doTest_getOffsetFromLocal(10, 28, 3,30, "2007-10-28T03:30:00.000+03:00", ZONE_MOSCOW);
+//        doTest_getOffsetFromLocal(10, 28, 4, 0, "2007-10-28T04:00:00.000+03:00", ZONE_MOSCOW);
+//        doTest_getOffsetFromLocal(10, 28, 5, 0, "2007-10-28T05:00:00.000+03:00", ZONE_MOSCOW);
+//        doTest_getOffsetFromLocal(10, 28, 6, 0, "2007-10-28T06:00:00.000+03:00", ZONE_MOSCOW);
+//        doTest_getOffsetFromLocal(10, 28, 7, 0, "2007-10-28T07:00:00.000+03:00", ZONE_MOSCOW);
+//        doTest_getOffsetFromLocal(10, 28, 8, 0, "2007-10-28T08:00:00.000+03:00", ZONE_MOSCOW);
+//    }
 
     public void test_DateTime_plusHour_Moscow_Autumn() {
         DateTime dt = new DateTime(2007, 10, 27, 19, 0, 0, 0, ZONE_MOSCOW);
@@ -1213,20 +1191,16 @@ public class TestDateTimeZoneCutover extends TestCase {
     //-----------------------------------------------------------------------
     //-----------------------------------------------------------------------
     //-----------------------------------------------------------------------
-    private void doTest_getOffsetFromLocal(int month, int day, int hour, int min, String expected, DateTimeZone zone) {
-        doTest_getOffsetFromLocal(2007, month, day, hour, min, 0, 0, expected, zone);
-    }
-
-    private void doTest_getOffsetFromLocal(int month, int day, int hour, int min, int sec, int milli, String expected, DateTimeZone zone) {
-        doTest_getOffsetFromLocal(2007, month, day, hour, min, sec, milli, expected, zone);
-    }
-
-    private void doTest_getOffsetFromLocal(int year, int month, int day, int hour, int min, String expected, DateTimeZone zone) {
-        doTest_getOffsetFromLocal(year, month, day, hour, min, 0, 0, expected, zone);
+    private void doTest_getOffsetFromLocal(int month, int day, int hour, int min,
+                                           String expected, DateTimeZone zone)
+    {
+        doTest_getOffsetFromLocal(2007, month, day, hour, min, expected, zone);
     }
 
-    private void doTest_getOffsetFromLocal(int year, int month, int day, int hour, int min, int sec, int milli, String expected, DateTimeZone zone) {
-        DateTime dt = new DateTime(year, month, day, hour, min, sec, milli, DateTimeZone.UTC);
+    private void doTest_getOffsetFromLocal(int year, int month, int day, int hour, int min,
+                                           String expected, DateTimeZone zone)
+    {
+        DateTime dt = new DateTime(year, month, day, hour, min, 0, 0, DateTimeZone.UTC);
         int offset = zone.getOffsetFromLocal(dt.getMillis());
         DateTime res = new DateTime(dt.getMillis() - offset, zone);
         assertEquals(res.toString(), expected, res.toString());
