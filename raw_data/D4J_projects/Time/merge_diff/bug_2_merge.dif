diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 2a7f9b5e..0cad3156 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -53,7 +53,7 @@ Deprecations since 2.3
 
 Bug fixes since 2.3
 -------------------
-- DateTimeField.getDurationField() / DateTimeField.getRangeDurationField() [#92,#93]
+- DateTimeField.getDurationField() / DateTimeField.getRangeDurationField() [#92]
   Previously some of the complex cases were wrong, notably around centuries and eras
   For example, yearOfEra() returned a range of null when it should be eras()
   A slew of tests were added and a variety of bugs fixed
diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java
index 3b84fdc6..8e8e6034 100644
--- a/src/main/java/org/joda/time/Partial.java
+++ b/src/main/java/org/joda/time/Partial.java
@@ -215,14 +215,13 @@ public final class Partial
             DurationField loopUnitField = loopType.getDurationType().getField(iChronology);
             if (i > 0) {
                 int compare = lastUnitField.compareTo(loopUnitField);
-                if (compare < 0) {
+                if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {
                     throw new IllegalArgumentException("Types array must be in order largest-smallest: " +
                             types[i - 1].getName() + " < " + loopType.getName());
                 } else if (compare == 0) {
                     if (types[i - 1].getRangeDurationType() == null) {
                         if (loopType.getRangeDurationType() == null) {
-                            throw new IllegalArgumentException("Types array must not contain duplicate: " +
-                                            types[i - 1].getName() + " and " + loopType.getName());
+                            throw new IllegalArgumentException("Types array must not contain duplicate: " + loopType.getName());
                         }
                     } else {
                         if (loopType.getRangeDurationType() == null) {
@@ -236,8 +235,7 @@ public final class Partial
                                     types[i - 1].getName() + " < " + loopType.getName());
                         }
                         if (lastRangeField.compareTo(loopRangeField) == 0) {
-                            throw new IllegalArgumentException("Types array must not contain duplicate: " +
-                                            types[i - 1].getName() + " and " + loopType.getName());
+                            throw new IllegalArgumentException("Types array must not contain duplicate: " + loopType.getName());
                         }
                     }
                 }
@@ -446,9 +444,6 @@ public final class Partial
                         if (compare > 0) {
                             break;
                         } else if (compare == 0) {
-                            if (fieldType.getRangeDurationType() == null) {
-                                break;
-                            }
                             DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);
                             DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);
                             if (rangeField.compareTo(loopRangeField) > 0) {
diff --git a/src/main/java/org/joda/time/field/UnsupportedDurationField.java b/src/main/java/org/joda/time/field/UnsupportedDurationField.java
index 7e0ce57a..bf44e013 100644
--- a/src/main/java/org/joda/time/field/UnsupportedDurationField.java
+++ b/src/main/java/org/joda/time/field/UnsupportedDurationField.java
@@ -224,9 +224,6 @@ public final class UnsupportedDurationField extends DurationField implements Ser
      * @return zero always
      */
     public int compareTo(DurationField durationField) {
-        if (durationField.isSupported()) {
-            return 1;
-        }
         return 0;
     }
 
diff --git a/src/test/java/org/joda/time/TestPartial_Basics.java b/src/test/java/org/joda/time/TestPartial_Basics.java
index 5c154a38..ceaa1500 100644
--- a/src/test/java/org/joda/time/TestPartial_Basics.java
+++ b/src/test/java/org/joda/time/TestPartial_Basics.java
@@ -448,30 +448,6 @@ public class TestPartial_Basics extends TestCase {
         assertSame(test, result);
     }
 
-    public void testWith_baseHasNoRange() {
-        Partial test = new Partial(DateTimeFieldType.year(), 1);
-        Partial result = test.with(DateTimeFieldType.hourOfDay(), 10);
-        assertEquals(2, result.size());
-        assertEquals(0, result.indexOf(DateTimeFieldType.year()));
-        assertEquals(1, result.indexOf(DateTimeFieldType.hourOfDay()));
-    }
-
-    public void testWith_argHasNoRange() {
-        Partial test = new Partial(DateTimeFieldType.hourOfDay(), 1);
-        Partial result = test.with(DateTimeFieldType.year(), 10);
-        assertEquals(2, result.size());
-        assertEquals(0, result.indexOf(DateTimeFieldType.year()));
-        assertEquals(1, result.indexOf(DateTimeFieldType.hourOfDay()));
-    }
-
-    public void testWith_baseAndArgHaveNoRange() {
-        Partial test = new Partial(DateTimeFieldType.year(), 1);
-        Partial result = test.with(DateTimeFieldType.era(), 1);
-        assertEquals(2, result.size());
-        assertEquals(0, result.indexOf(DateTimeFieldType.era()));
-        assertEquals(1, result.indexOf(DateTimeFieldType.year()));
-    }
-
     //-----------------------------------------------------------------------
     public void testWithout1() {
         Partial test = createHourMinPartial();
