diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index 84f44dd6..5beb66f7 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -48,9 +48,6 @@ Deprecations since 2.3
 
 Bug fixes since 2.3
 -------------------
-- Period.normalizedStandard(PeriodType) [#79]
-  Fix handling of PeriodType when either years or months missing
-
 - Better Javadoc for parsing of numbers in format patterns [#60]
 
 - Remove uncaughtException calls [#59]
diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java
index 5ea67a7c..5b36bc50 100644
--- a/src/main/java/org/joda/time/Period.java
+++ b/src/main/java/org/joda/time/Period.java
@@ -1614,30 +1614,23 @@ public final class Period
      * @since 1.5
      */
     public Period normalizedStandard(PeriodType type) {
-        type = DateTimeUtils.getPeriodType(type);
         long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
         millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
         millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
         millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
         millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
         millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+        Period result = new Period(millis, DateTimeUtils.getPeriodType(type), ISOChronology.getInstanceUTC());
         int years = getYears();
         int months = getMonths();
         if (years != 0 || months != 0) {
-            long totalMonths = years * 12L + months;
-            if (type.isSupported(DurationFieldType.YEARS_TYPE)) {
-                int normalizedYears = FieldUtils.safeToInt(totalMonths / 12);
-                result = result.withYears(normalizedYears);
-                totalMonths = totalMonths - (normalizedYears * 12);
-            }
-            if (type.isSupported(DurationFieldType.MONTHS_TYPE)) {
-                int normalizedMonths = FieldUtils.safeToInt(totalMonths);
-                result = result.withMonths(normalizedMonths);
-                totalMonths = totalMonths - normalizedMonths;
-            }
-            if (totalMonths != 0) {
-                throw new UnsupportedOperationException("Unable to normalize as PeriodType is missing either years or months but period has a month/year amount: " + toString());
+            years = FieldUtils.safeAdd(years, months / 12);
+            months = months % 12;
+            if (years != 0) {
+                result = result.withYears(years);
+            }
+            if (months != 0) {
+                result = result.withMonths(months);
             }
         }
         return result;
diff --git a/src/test/java/org/joda/time/TestPeriod_Basics.java b/src/test/java/org/joda/time/TestPeriod_Basics.java
index 82030f80..f291c9bb 100644
--- a/src/test/java/org/joda/time/TestPeriod_Basics.java
+++ b/src/test/java/org/joda/time/TestPeriod_Basics.java
@@ -217,7 +217,6 @@ public class TestPeriod_Basics extends TestCase {
     }
     
     class MockPeriod extends BasePeriod {
-        private static final long serialVersionUID = 1L;
         public MockPeriod(long value) {
             super(value, null, null);
         }
@@ -1517,46 +1516,4 @@ public class TestPeriod_Basics extends TestCase {
         assertEquals(new Period(2, 3, 0, 37, 3, 0, 0, 0, PeriodType.yearMonthDayTime()), result);
     }
 
-    public void testNormalizedStandard_periodType_months1() {
-        Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0);
-        Period result = test.normalizedStandard(PeriodType.months());
-        assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test);
-        assertEquals(new Period(0, 27, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);
-    }
-
-    public void testNormalizedStandard_periodType_months2() {
-        Period test = new Period(-2, 15, 0, 0, 0, 0, 0, 0);
-        Period result = test.normalizedStandard(PeriodType.months());
-        assertEquals(new Period(-2, 15, 0, 0, 0, 0, 0, 0), test);
-        assertEquals(new Period(0, -9, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);
-    }
-
-    public void testNormalizedStandard_periodType_months3() {
-        Period test = new Period(0, 4, 0, 0, 0, 0, 0, 0);
-        Period result = test.normalizedStandard(PeriodType.months());
-        assertEquals(new Period(0, 4, 0, 0, 0, 0, 0, 0), test);
-        assertEquals(new Period(0, 4, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);
-    }
-
-    public void testNormalizedStandard_periodType_years() {
-        Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0);
-        try {
-            test.normalizedStandard(PeriodType.years());
-            fail();
-        } catch (UnsupportedOperationException ex) {
-            // expected
-        }
-    }
-
-    public void testNormalizedStandard_periodType_monthsWeeks() {
-        PeriodType type = PeriodType.forFields(new DurationFieldType[]{
-                        DurationFieldType.months(),
-                        DurationFieldType.weeks(),
-                        DurationFieldType.days()});
-        Period test = new Period(2, 4, 6, 0, 0, 0, 0, 0);
-        Period result = test.normalizedStandard(type);
-        assertEquals(new Period(2, 4, 6, 0, 0, 0, 0, 0), test);
-        assertEquals(new Period(0, 28, 6, 0, 0, 0, 0, 0, type), result);
-    }
-
 }
