diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java
index d1556f52..960fe479 100644
--- a/src/main/java/org/joda/time/chrono/GJChronology.java
+++ b/src/main/java/org/joda/time/chrono/GJChronology.java
@@ -27,7 +27,6 @@ import org.joda.time.DateTimeZone;
 import org.joda.time.DurationField;
 import org.joda.time.IllegalFieldValueException;
 import org.joda.time.Instant;
-import org.joda.time.LocalDate;
 import org.joda.time.ReadableInstant;
 import org.joda.time.ReadablePartial;
 import org.joda.time.field.BaseDateTimeField;
@@ -193,10 +192,6 @@ public final class GJChronology extends AssembledChronology {
             cutoverInstant = DEFAULT_CUTOVER;
         } else {
             cutoverInstant = gregorianCutover.toInstant();
-            LocalDate cutoverDate = new LocalDate(cutoverInstant.getMillis(), GregorianChronology.getInstance(zone));
-            if (cutoverDate.getYear() <= 0) {
-                throw new IllegalArgumentException("Cutover too early. Must be on or after 0001-01-01.");
-            }
         }
 
         GJChronology chrono;
@@ -980,17 +975,6 @@ public final class GJChronology extends AssembledChronology {
                 if (instant < iCutover) {
                     // Only adjust if gap fully crossed.
                     if (instant + iGapDuration < iCutover) {
-                        if (iConvertByWeekyear) {
-                            int wyear = iGregorianChronology.weekyear().get(instant);
-                            if (wyear <= 0) {
-                                instant = iGregorianChronology.weekyear().add(instant, -1);
-                            }
-                        } else {
-                            int year = iGregorianChronology.year().get(instant);
-                            if (year <= 0) {
-                                instant = iGregorianChronology.year().add(instant, -1);
-                            }
-                        }
                         instant = gregorianToJulian(instant);
                     }
                 }
@@ -999,7 +983,6 @@ public final class GJChronology extends AssembledChronology {
                 if (instant >= iCutover) {
                     // Only adjust if gap fully crossed.
                     if (instant - iGapDuration >= iCutover) {
-                        // no special handling for year zero as cutover always after year zero
                         instant = julianToGregorian(instant);
                     }
                 }
@@ -1013,17 +996,6 @@ public final class GJChronology extends AssembledChronology {
                 if (instant < iCutover) {
                     // Only adjust if gap fully crossed.
                     if (instant + iGapDuration < iCutover) {
-                        if (iConvertByWeekyear) {
-                            int wyear = iGregorianChronology.weekyear().get(instant);
-                            if (wyear <= 0) {
-                                instant = iGregorianChronology.weekyear().add(instant, -1);
-                            }
-                        } else {
-                            int year = iGregorianChronology.year().get(instant);
-                            if (year <= 0) {
-                                instant = iGregorianChronology.year().add(instant, -1);
-                            }
-                        }
                         instant = gregorianToJulian(instant);
                     }
                 }
@@ -1032,7 +1004,6 @@ public final class GJChronology extends AssembledChronology {
                 if (instant >= iCutover) {
                     // Only adjust if gap fully crossed.
                     if (instant - iGapDuration >= iCutover) {
-                        // no special handling for year zero as cutover always after year zero
                         instant = julianToGregorian(instant);
                     }
                 }
