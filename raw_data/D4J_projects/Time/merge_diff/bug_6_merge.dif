diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
index a440db56..a7b5ab78 100644
--- a/RELEASE-NOTES.txt
+++ b/RELEASE-NOTES.txt
@@ -55,10 +55,6 @@ Semantic compatible - Yes, except
  - BasicChronology now defines an equals method
    This which would affect you if you subclassed it (unlikely)
 
- - GJChronology now has a minimum cutover instant of 0001-01-01 (Gregorian)
-   Its unlikely you have it set earlier than this
-   If you did your code was broken anyway
-
 
 Deprecations since 2.2
 ----------------------
@@ -102,12 +98,6 @@ Bug fixes since 2.2
 
 - Better thread-safety in ISODateTimeFormat [#45]
 
-- Fix GJChronology.plus/minus across cutover and year zero [#28]
-  When subtracting a number of years from a date in the GJChronology there are two considerations
-  The cutover date might be crossed, and year zero might be crossed (there is no year zero in GJ)
-  Previously, each were handled separately, but not together. Now it is fixed
-  As part of this change, the minimum cutover instant was set to 0001-01-01 (Gregorian)
-
 
 Scala
 --------
diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java
index d1556f52..960fe479 100644
--- a/src/main/java/org/joda/time/chrono/GJChronology.java
+++ b/src/main/java/org/joda/time/chrono/GJChronology.java
@@ -27,7 +27,6 @@ import org.joda.time.DateTimeZone;
 import org.joda.time.DurationField;
 import org.joda.time.IllegalFieldValueException;
 import org.joda.time.Instant;
-import org.joda.time.LocalDate;
 import org.joda.time.ReadableInstant;
 import org.joda.time.ReadablePartial;
 import org.joda.time.field.BaseDateTimeField;
@@ -193,10 +192,6 @@ public final class GJChronology extends AssembledChronology {
             cutoverInstant = DEFAULT_CUTOVER;
         } else {
             cutoverInstant = gregorianCutover.toInstant();
-            LocalDate cutoverDate = new LocalDate(cutoverInstant.getMillis(), GregorianChronology.getInstance(zone));
-            if (cutoverDate.getYear() <= 0) {
-                throw new IllegalArgumentException("Cutover too early. Must be on or after 0001-01-01.");
-            }
         }
 
         GJChronology chrono;
@@ -980,17 +975,6 @@ public final class GJChronology extends AssembledChronology {
                 if (instant < iCutover) {
                     // Only adjust if gap fully crossed.
                     if (instant + iGapDuration < iCutover) {
-                        if (iConvertByWeekyear) {
-                            int wyear = iGregorianChronology.weekyear().get(instant);
-                            if (wyear <= 0) {
-                                instant = iGregorianChronology.weekyear().add(instant, -1);
-                            }
-                        } else {
-                            int year = iGregorianChronology.year().get(instant);
-                            if (year <= 0) {
-                                instant = iGregorianChronology.year().add(instant, -1);
-                            }
-                        }
                         instant = gregorianToJulian(instant);
                     }
                 }
@@ -999,7 +983,6 @@ public final class GJChronology extends AssembledChronology {
                 if (instant >= iCutover) {
                     // Only adjust if gap fully crossed.
                     if (instant - iGapDuration >= iCutover) {
-                        // no special handling for year zero as cutover always after year zero
                         instant = julianToGregorian(instant);
                     }
                 }
@@ -1013,17 +996,6 @@ public final class GJChronology extends AssembledChronology {
                 if (instant < iCutover) {
                     // Only adjust if gap fully crossed.
                     if (instant + iGapDuration < iCutover) {
-                        if (iConvertByWeekyear) {
-                            int wyear = iGregorianChronology.weekyear().get(instant);
-                            if (wyear <= 0) {
-                                instant = iGregorianChronology.weekyear().add(instant, -1);
-                            }
-                        } else {
-                            int year = iGregorianChronology.year().get(instant);
-                            if (year <= 0) {
-                                instant = iGregorianChronology.year().add(instant, -1);
-                            }
-                        }
                         instant = gregorianToJulian(instant);
                     }
                 }
@@ -1032,7 +1004,6 @@ public final class GJChronology extends AssembledChronology {
                 if (instant >= iCutover) {
                     // Only adjust if gap fully crossed.
                     if (instant - iGapDuration >= iCutover) {
-                        // no special handling for year zero as cutover always after year zero
                         instant = julianToGregorian(instant);
                     }
                 }
diff --git a/src/test/java/org/joda/time/chrono/TestAll.java b/src/test/java/org/joda/time/chrono/TestAll.java
index f1fcb393..0db38e54 100644
--- a/src/test/java/org/joda/time/chrono/TestAll.java
+++ b/src/test/java/org/joda/time/chrono/TestAll.java
@@ -47,7 +47,6 @@ public class TestAll extends TestCase {
         suite.addTest(TestJulianChronology.suite());
         suite.addTest(TestISOChronology.suite());
         suite.addTest(TestLenientChronology.suite());
-        suite.addTest(TestGJDate.suite());
         
         return suite;
     }
diff --git a/src/test/java/org/joda/time/chrono/TestGJDate.java b/src/test/java/org/joda/time/chrono/TestGJDate.java
deleted file mode 100644
index ba2a1fbc..00000000
--- a/src/test/java/org/joda/time/chrono/TestGJDate.java
+++ /dev/null
@@ -1,138 +0,0 @@
-/*
- *  Copyright 2001-2013 Stephen Colebourne
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.joda.time.chrono;
-
-import junit.framework.TestCase;
-import junit.framework.TestSuite;
-
-import org.joda.time.Chronology;
-import org.joda.time.DateTime;
-import org.joda.time.DateTimeZone;
-import org.joda.time.LocalDate;
-
-/**
- * Test.
- */
-public class TestGJDate extends TestCase {
-    public static void main(String[] args) {
-        junit.textui.TestRunner.run(suite());
-    }
-
-    public static TestSuite suite() {
-        return new TestSuite(TestGJDate.class);
-    }
-
-    public TestGJDate(String name) {
-        super(name);
-    }
-
-    protected void setUp() throws Exception {
-    }
-
-    protected void tearDown() throws Exception {
-    }
-
-    //-----------------------------------------------------------------------
-    private static final Chronology GJ_CHRONOLOGY = GJChronology.getInstanceUTC();
-
-    //-----------------------------------------------------------------------
-    public void test_plusYears_positiveToPositive() {
-        LocalDate date = new LocalDate(3, 6, 30, GJ_CHRONOLOGY);
-        LocalDate expected = new LocalDate(7, 6, 30, GJ_CHRONOLOGY);
-        assertEquals(expected, date.plusYears(4));
-    }
-
-    public void test_plusYears_positiveToZero() {
-        LocalDate date = new LocalDate(3, 6, 30, GJ_CHRONOLOGY);
-        LocalDate expected = new LocalDate(-1, 6, 30, GJ_CHRONOLOGY);
-        assertEquals(expected, date.plusYears(-3));
-    }
-
-    public void test_plusYears_positiveToNegative() {
-        LocalDate date = new LocalDate(3, 6, 30, GJ_CHRONOLOGY);
-        LocalDate expected = new LocalDate(-2, 6, 30, GJ_CHRONOLOGY);
-        assertEquals(expected, date.plusYears(-4));
-    }
-
-    //-----------------------------------------------------------------------
-    public void test_plusYears_negativeToNegative() {
-        LocalDate date = new LocalDate(-3, 6, 30, GJ_CHRONOLOGY);
-        LocalDate expected = new LocalDate(-1, 6, 30, GJ_CHRONOLOGY);
-        assertEquals(expected, date.plusYears(2));
-    }
-
-    public void test_plusYears_negativeToZero() {
-        LocalDate date = new LocalDate(-3, 6, 30, GJ_CHRONOLOGY);
-        LocalDate expected = new LocalDate(1, 6, 30, GJ_CHRONOLOGY);
-        assertEquals(expected, date.plusYears(3));
-    }
-
-    public void test_plusYears_negativeToPositive() {
-        LocalDate date = new LocalDate(-3, 6, 30, GJ_CHRONOLOGY);
-        LocalDate expected = new LocalDate(2, 6, 30, GJ_CHRONOLOGY);
-        assertEquals(expected, date.plusYears(4));
-    }
-
-    //-----------------------------------------------------------------------
-    public void test_plusYears_positiveToPositive_crossCutover() {
-        LocalDate date = new LocalDate(3, 6, 30, GJ_CHRONOLOGY);
-        LocalDate expected = new LocalDate(2007, 6, 30, GJ_CHRONOLOGY);
-        assertEquals(expected, date.plusYears(2004));
-    }
-
-    public void test_plusYears_positiveToZero_crossCutover() {
-        LocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY);
-        LocalDate expected = new LocalDate(-1, 6, 30, GJ_CHRONOLOGY);
-        assertEquals(expected, date.plusYears(-2003));
-    }
-
-    public void test_plusYears_positiveToNegative_crossCutover() {
-        LocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY);
-        LocalDate expected = new LocalDate(-2, 6, 30, GJ_CHRONOLOGY);
-        assertEquals(expected, date.plusYears(-2004));
-    }
-
-    public void test_plusYears_negativeToPositive_crossCutover() {
-        LocalDate date = new LocalDate(-3, 6, 30, GJ_CHRONOLOGY);
-        LocalDate expected = new LocalDate(2002, 6, 30, GJ_CHRONOLOGY);
-        assertEquals(expected, date.plusYears(2004));
-    }
-
-    //-----------------------------------------------------------------------
-    public void test_plusWeekyears_positiveToZero_crossCutover() {
-        LocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY);
-        LocalDate expected = new LocalDate(-1, 6, 30, GJ_CHRONOLOGY).withWeekOfWeekyear(date.getWeekOfWeekyear()).withDayOfWeek(date.getDayOfWeek());
-        assertEquals(expected, date.weekyear().addToCopy(-2003));
-    }
-
-    public void test_plusWeekyears_positiveToNegative_crossCutover() {
-        LocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY);
-        LocalDate expected = new LocalDate(-2, 6, 30, GJ_CHRONOLOGY).withWeekOfWeekyear(date.getWeekOfWeekyear()).withDayOfWeek(date.getDayOfWeek());
-        assertEquals(expected, date.weekyear().addToCopy(-2004));
-    }
-
-    //-----------------------------------------------------------------------
-    public void test_cutoverPreZero() {
-        DateTime cutover = new LocalDate(-2, 6, 30, ISOChronology.getInstanceUTC()).toDateTimeAtStartOfDay(DateTimeZone.UTC);
-        try {
-            GJChronology.getInstance(DateTimeZone.UTC, cutover);
-            fail();
-        } catch (IllegalArgumentException ex) {
-            // expected
-        }
-    }
-
-}
