diff --git a/JodaTime/RELEASE-NOTES.txt b/JodaTime/RELEASE-NOTES.txt
index c3ac535f..bd67101b 100644
--- a/JodaTime/RELEASE-NOTES.txt
+++ b/JodaTime/RELEASE-NOTES.txt
@@ -129,7 +129,7 @@ difficult options that generics offers.
 As mentioned above, erasure ensures that this source incompatibility is *not* a binary compatibility.
 
 Note that not all deprecated elements have been removed.
-Some methods and classes have been retained simply because the potential pain of binary incompatability
+Some methods and classes have been retained simply because the potential pain of binary compatability
 is greater than the gain of removing the deprecations.
 
 Serialization compatible - Yes
@@ -152,11 +152,6 @@ The old behaviour can be simulated by calling withDefautYear(1970) on the format
 Previously, calling various methods during a daylight savings overlap would change the offset.
 Now, most methods (such as withMillis/withSeconds/withMinutes/...) will retain the offset wherever possible.
 
-Previously, calling DateTimeZone.getOffsetFromLocal during a daylight savings overlap chose the
-earlier instant in the Western hemisphere and the later instant in the Eastern hemisphere.
-Now, it always returns the earlier instant (summer time) during an overlap.
-This affects the constructor of DateTime and other methods.
-
 
 Deprecations since 1.6
 ----------------------
@@ -180,11 +175,6 @@ Bug fixes since 1.6
 - DateTimeZone.convertLocalToUTC [2903029]
   Now handles date after last ever DST change
 
-- DateTimeZone.getOffsetFromLocal [2952991]
-  The behaviour during DST overlaps is now defined to always return the earlier instant
-  which is normally known as daylight or summer time. Previously, the result varied by hemisphere
-  This affects the constructor of DateTime and other methods
-
 - DateTimeZone.getDefault [3048468,3056104]
   Handle missing user.timezone system property on Android that resulted in stack overflow
 
