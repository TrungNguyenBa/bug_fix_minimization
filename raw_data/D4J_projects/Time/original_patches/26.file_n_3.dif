diff --git a/JodaTime/src/main/java/org/joda/time/DateTimeZone.java b/JodaTime/src/main/java/org/joda/time/DateTimeZone.java
index 23f70a5c..5dac4861 100644
--- a/JodaTime/src/main/java/org/joda/time/DateTimeZone.java
+++ b/JodaTime/src/main/java/org/joda/time/DateTimeZone.java
@@ -918,33 +918,6 @@ public abstract class DateTimeZone implements Serializable {
 
     /**
      * Converts a local instant to a standard UTC instant with the same
-     * local time attempting to use the same offset as the original.
-     * <p>
-     * This conversion is used after performing a calculation
-     * where the calculation was done using a simple local zone.
-     * Whenever possible, the same offset as the original offset will be used.
-     * This is most significant during a daylight savings overlap.
-     *
-     * @param instantLocal  the local instant to convert to UTC
-     * @param strict  whether the conversion should reject non-existent local times
-     * @param originalInstantUTC  the original instant that the calculation is based on
-     * @return the UTC instant with the same local time, 
-     * @throws ArithmeticException if the result overflows a long
-     * @throws IllegalArgumentException if the zone has no equivalent local time
-     * @since 2.0
-     */
-    public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
-        int offsetOriginal = getOffset(originalInstantUTC);
-        long instantUTC = instantLocal - offsetOriginal;
-        int offsetLocalFromOriginal = getOffset(instantUTC);
-        if (offsetLocalFromOriginal == offsetOriginal) {
-            return instantUTC;
-        }
-        return convertLocalToUTC(instantLocal, strict);
-    }
-
-    /**
-     * Converts a local instant to a standard UTC instant with the same
      * local time. This conversion is used after performing a calculation
      * where the calculation was done using a simple local zone.
      *
@@ -952,7 +925,7 @@ public abstract class DateTimeZone implements Serializable {
      * @param strict  whether the conversion should reject non-existent local times
      * @return the UTC instant with the same local time, 
      * @throws ArithmeticException if the result overflows a long
-     * @throws IllegalArgumentException if the zone has no equivalent local time
+     * @throws IllegalArgumentException if the zone has no eqivalent local time
      * @since 1.5
      */
     public long convertLocalToUTC(long instantLocal, boolean strict) {
