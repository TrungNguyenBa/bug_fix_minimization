0a1,15
> diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
> index e0794250..5a458c5f 100644
> --- a/RELEASE-NOTES.txt
> +++ b/RELEASE-NOTES.txt
> @@ -61,10 +61,6 @@ Bug fixes since 2.1
>    This used to fail before 1970 when the input had a milli-of-second field
>    Fixed to not throw an exception
>  
> -- LocalDateTime.fromCalendarFields()/LocalDateTime.fromDateFields()
> -  This used to fail before year 1 as the era was ignored
> -  Fixed to return the correct year
> -
>  - MutableDateTime.setDate(ReadableInstant)  [163]
>    Fixed to handle cross-time-zone issues properly rather than always using UTC
>  
2c17
< index c86b9d7..3868531 100644
---
> index c86b9d73..7bb7a08c 100644
5c20,39
< @@ -207,10 +207,9 @@ public final class LocalDate
---
> @@ -21,7 +21,6 @@ import java.io.ObjectOutputStream;
>  import java.io.Serializable;
>  import java.util.Calendar;
>  import java.util.Date;
> -import java.util.GregorianCalendar;
>  import java.util.HashSet;
>  import java.util.Locale;
>  import java.util.Set;
> @@ -198,8 +197,8 @@ public final class LocalDate
>       * will only pass in instances of <code>GregorianCalendar</code> however
>       * this is not validated.
>       *
> -     * @param calendar  the Calendar to extract fields from, not null
> -     * @return the created local date, not null
> +     * @param calendar  the Calendar to extract fields from
> +     * @return the created LocalDate
>       * @throws IllegalArgumentException if the calendar is null
>       * @throws IllegalArgumentException if the date is invalid for the ISO chronology
>       */
> @@ -207,10 +206,8 @@ public final class LocalDate
10c44
<          int yearOfEra = calendar.get(Calendar.YEAR);
---
> -        int yearOfEra = calendar.get(Calendar.YEAR);
13c47
< +            yearOfEra,
---
> +            calendar.get(Calendar.YEAR),
17c51,62
< @@ -241,12 +240,7 @@ public final class LocalDate
---
> @@ -231,8 +228,8 @@ public final class LocalDate
>       * <p>
>       * This factory method always creates a LocalDate with ISO chronology.
>       *
> -     * @param date  the Date to extract fields from, not null
> -     * @return the created local date, not null
> +     * @param date  the Date to extract fields from
> +     * @return the created LocalDate
>       * @throws IllegalArgumentException if the calendar is null
>       * @throws IllegalArgumentException if the date is invalid for the ISO chronology
>       */
> @@ -241,12 +238,6 @@ public final class LocalDate
22c67
<              // handle years in era BC
---
> -            // handle years in era BC
31c76
< index e75deca..f37db3e 100644
---
> index e75deca2..325192b3 100644
34c79,98
< @@ -196,10 +196,9 @@ public final class LocalDateTime
---
> @@ -21,7 +21,6 @@ import java.io.ObjectOutputStream;
>  import java.io.Serializable;
>  import java.util.Calendar;
>  import java.util.Date;
> -import java.util.GregorianCalendar;
>  import java.util.Locale;
>  import java.util.TimeZone;
>  
> @@ -187,8 +186,8 @@ public final class LocalDateTime
>       * will only pass in instances of <code>GregorianCalendar</code> however
>       * this is not validated.
>       *
> -     * @param calendar  the Calendar to extract fields from, not null
> -     * @return the created local date-time, not null
> +     * @param calendar  the Calendar to extract fields from
> +     * @return the created LocalDateTime
>       * @throws IllegalArgumentException if the calendar is null
>       * @throws IllegalArgumentException if the date is invalid for the ISO chronology
>       */
> @@ -196,10 +195,8 @@ public final class LocalDateTime
39c103
<          int yearOfEra = calendar.get(Calendar.YEAR);
---
> -        int yearOfEra = calendar.get(Calendar.YEAR);
42c106
< +            yearOfEra,
---
> +            calendar.get(Calendar.YEAR),
46c110,121
< @@ -234,12 +233,7 @@ public final class LocalDateTime
---
> @@ -224,8 +221,8 @@ public final class LocalDateTime
>       * <p>
>       * This factory method always creates a LocalDateTime with ISO chronology.
>       *
> -     * @param date  the Date to extract fields from, not null
> -     * @return the created local date-time, not null
> +     * @param date  the Date to extract fields from
> +     * @return the created LocalDateTime
>       * @throws IllegalArgumentException if the calendar is null
>       * @throws IllegalArgumentException if the date is invalid for the ISO chronology
>       */
> @@ -234,12 +231,6 @@ public final class LocalDateTime
51c126
<              // handle years in era BC
---
> -            // handle years in era BC
58a134,296
> diff --git a/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java b/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java
> index e00ce5db..1dbb381a 100644
> --- a/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java
> +++ b/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java
> @@ -102,30 +102,11 @@ public class TestLocalDateTime_Constructors extends TestCase {
>      }
>  
>      //-----------------------------------------------------------------------
> -    public void testFactory_fromCalendarFields() throws Exception {
> +    public void testFactory_FromCalendarFields() throws Exception {
>          GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);
>          cal.set(Calendar.MILLISECOND, 7);
>          LocalDateTime expected = new LocalDateTime(1970, 2, 3, 4, 5, 6, 7);
>          assertEquals(expected, LocalDateTime.fromCalendarFields(cal));
> -    }
> -
> -    public void testFactory_fromCalendarFields_beforeYearZero1() throws Exception {
> -        GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);
> -        cal.set(Calendar.ERA, GregorianCalendar.BC);
> -        cal.set(Calendar.MILLISECOND, 7);
> -        LocalDateTime expected = new LocalDateTime(0, 2, 3, 4, 5, 6, 7);
> -        assertEquals(expected, LocalDateTime.fromCalendarFields(cal));
> -    }
> -
> -    public void testFactory_fromCalendarFields_beforeYearZero3() throws Exception {
> -        GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);
> -        cal.set(Calendar.ERA, GregorianCalendar.BC);
> -        cal.set(Calendar.MILLISECOND, 7);
> -        LocalDateTime expected = new LocalDateTime(-2, 2, 3, 4, 5, 6, 7);
> -        assertEquals(expected, LocalDateTime.fromCalendarFields(cal));
> -    }
> -
> -    public void testFactory_fromCalendarFields_null() throws Exception {
>          try {
>              LocalDateTime.fromCalendarFields((Calendar) null);
>              fail();
> @@ -133,37 +114,22 @@ public class TestLocalDateTime_Constructors extends TestCase {
>      }
>  
>      //-----------------------------------------------------------------------
> -    public void testFactory_fromDateFields_after1970() throws Exception {
> +    public void testFactory_FromDateFields_after1970() throws Exception {
>          GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);
>          cal.set(Calendar.MILLISECOND, 7);
>          LocalDateTime expected = new LocalDateTime(1970, 2, 3, 4, 5 ,6, 7);
>          assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));
> +        try {
> +            LocalDateTime.fromDateFields((Date) null);
> +            fail();
> +        } catch (IllegalArgumentException ex) {}
>      }
>  
> -    public void testFactory_fromDateFields_before1970() throws Exception {
> +    public void testFactory_FromDateFields_before1970() throws Exception {
>          GregorianCalendar cal = new GregorianCalendar(1969, 1, 3, 4, 5, 6);
>          cal.set(Calendar.MILLISECOND, 7);
>          LocalDateTime expected = new LocalDateTime(1969, 2, 3, 4, 5 ,6, 7);
>          assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));
> -    }
> -
> -    public void testFactory_fromDateFields_beforeYearZero1() throws Exception {
> -        GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);
> -        cal.set(Calendar.ERA, GregorianCalendar.BC);
> -        cal.set(Calendar.MILLISECOND, 7);
> -        LocalDateTime expected = new LocalDateTime(0, 2, 3, 4, 5, 6, 7);
> -        assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));
> -    }
> -
> -    public void testFactory_fromDateFields_beforeYearZero3() throws Exception {
> -        GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);
> -        cal.set(Calendar.ERA, GregorianCalendar.BC);
> -        cal.set(Calendar.MILLISECOND, 7);
> -        LocalDateTime expected = new LocalDateTime(-2, 2, 3, 4, 5, 6, 7);
> -        assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));
> -    }
> -
> -    public void testFactory_fromDateFields_null() throws Exception {
>          try {
>              LocalDateTime.fromDateFields((Date) null);
>              fail();
> diff --git a/src/test/java/org/joda/time/TestLocalDate_Constructors.java b/src/test/java/org/joda/time/TestLocalDate_Constructors.java
> index ee5fa9d4..acd703c9 100644
> --- a/src/test/java/org/joda/time/TestLocalDate_Constructors.java
> +++ b/src/test/java/org/joda/time/TestLocalDate_Constructors.java
> @@ -94,30 +94,11 @@ public class TestLocalDate_Constructors extends TestCase {
>      }
>  
>      //-----------------------------------------------------------------------
> -    public void testFactory_fromCalendarFields() throws Exception {
> +    public void testFactory_FromCalendarFields() throws Exception {
>          GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);
>          cal.set(Calendar.MILLISECOND, 7);
>          LocalDate expected = new LocalDate(1970, 2, 3);
>          assertEquals(expected, LocalDate.fromCalendarFields(cal));
> -    }
> -
> -    public void testFactory_fromCalendarFields_beforeYearZero1() throws Exception {
> -        GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);
> -        cal.set(Calendar.ERA, GregorianCalendar.BC);
> -        cal.set(Calendar.MILLISECOND, 7);
> -        LocalDate expected = new LocalDate(0, 2, 3);
> -        assertEquals(expected, LocalDate.fromCalendarFields(cal));
> -    }
> -
> -    public void testFactory_fromCalendarFields_beforeYearZero3() throws Exception {
> -        GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);
> -        cal.set(Calendar.ERA, GregorianCalendar.BC);
> -        cal.set(Calendar.MILLISECOND, 7);
> -        LocalDate expected = new LocalDate(-2, 2, 3);
> -        assertEquals(expected, LocalDate.fromCalendarFields(cal));
> -    }
> -
> -    public void testFactory_fromCalendarFields_null() throws Exception {
>          try {
>              LocalDate.fromCalendarFields((Calendar) null);
>              fail();
> @@ -125,37 +106,11 @@ public class TestLocalDate_Constructors extends TestCase {
>      }
>  
>      //-----------------------------------------------------------------------
> -    public void testFactory_fromDateFields_after1970() throws Exception {
> +    public void testFactory_FromDateFields() throws Exception {
>          GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);
>          cal.set(Calendar.MILLISECOND, 7);
>          LocalDate expected = new LocalDate(1970, 2, 3);
>          assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));
> -    }
> -
> -    public void testFactory_fromDateFields_before1970() throws Exception {
> -        GregorianCalendar cal = new GregorianCalendar(1969, 1, 3, 4, 5, 6);
> -        cal.set(Calendar.MILLISECOND, 7);
> -        LocalDate expected = new LocalDate(1969, 2, 3);
> -        assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));
> -    }
> -
> -    public void testFactory_fromDateFields_beforeYearZero1() throws Exception {
> -        GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);
> -        cal.set(Calendar.ERA, GregorianCalendar.BC);
> -        cal.set(Calendar.MILLISECOND, 7);
> -        LocalDate expected = new LocalDate(0, 2, 3);
> -        assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));
> -    }
> -
> -    public void testFactory_fromDateFields_beforeYearZero3() throws Exception {
> -        GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);
> -        cal.set(Calendar.ERA, GregorianCalendar.BC);
> -        cal.set(Calendar.MILLISECOND, 7);
> -        LocalDate expected = new LocalDate(-2, 2, 3);
> -        assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));
> -    }
> -
> -    public void testFactory_fromDateFields_null() throws Exception {
>          try {
>              LocalDate.fromDateFields((Date) null);
>              fail();
> @@ -428,7 +383,6 @@ public class TestLocalDate_Constructors extends TestCase {
>          assertEquals(6, test.getDayOfMonth());
>      }
>  
> -    @SuppressWarnings("deprecation")
>      public void testConstructor_ObjectYearMonthDay() throws Throwable {
>          YearMonthDay date = new YearMonthDay(1970, 4, 6, BUDDHIST_UTC);
>          LocalDate test = new LocalDate(date);
