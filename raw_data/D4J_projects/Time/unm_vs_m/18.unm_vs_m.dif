0a1,14
> diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
> index 6062b399..76dfcfbb 100644
> --- a/RELEASE-NOTES.txt
> +++ b/RELEASE-NOTES.txt
> @@ -54,9 +54,6 @@ Bug fixes since 2.0
>    A date-time constructor with an ambiguous time due to DST should choose summer time
>    but for a zone with an offset of 00:00 it chose winter time
>  
> -- Fix GJChronology to allow some leap year dates in JulianChronology to be created [3446915]
> -  Creating February 29th in Julian leap years was not always possible
> -
>  - Time-zone names [3412910]
>    Names now returned in locales other than English
>    The names may differ between JDK1.5 and 1.6 due to the underlying JDK data
2c16
< index 0a19aa6..29e559d 100644
---
> index 0a19aa64..6131f14f 100644
5c19,20
< @@ -361,21 +361,9 @@ public final class GJChronology extends AssembledChronology {
---
> @@ -360,22 +360,9 @@ public final class GJChronology extends AssembledChronology {
>          }
8c23
<          long instant;
---
> -        long instant;
10c25,26
<              instant = iGregorianChronology.getDateTimeMillis
---
> -            instant = iGregorianChronology.getDateTimeMillis
> +        long instant = iGregorianChronology.getDateTimeMillis
26a43,78
> diff --git a/src/test/java/org/joda/time/chrono/TestGJChronology.java b/src/test/java/org/joda/time/chrono/TestGJChronology.java
> index 3cf49502..f517b9fa 100644
> --- a/src/test/java/org/joda/time/chrono/TestGJChronology.java
> +++ b/src/test/java/org/joda/time/chrono/TestGJChronology.java
> @@ -28,7 +28,6 @@ import org.joda.time.DateTimeUtils;
>  import org.joda.time.DateTimeZone;
>  import org.joda.time.DurationField;
>  import org.joda.time.DurationFieldType;
> -import org.joda.time.IllegalFieldValueException;
>  import org.joda.time.Instant;
>  import org.joda.time.Period;
>  import org.joda.time.TimeOfDay;
> @@ -490,23 +489,4 @@ public class TestGJChronology extends TestCase {
>          assertEquals("January", new YearMonthDay("2005-01-01", chrono).monthOfYear().getAsText());
>          assertEquals("Jan", new YearMonthDay("2005-01-01", chrono).monthOfYear().getAsShortText());
>      }
> -
> -    public void testLeapYearRulesConstruction() {
> -        // 1500 not leap in Gregorian, but is leap in Julian
> -        DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());
> -        assertEquals(dt.getYear(), 1500);
> -        assertEquals(dt.getMonthOfYear(), 2);
> -        assertEquals(dt.getDayOfMonth(), 29);
> -    }
> -
> -    public void testLeapYearRulesConstructionInvalid() {
> -        // 1500 not leap in Gregorian, but is leap in Julian
> -        try {
> -            new DateMidnight(1500, 2, 30, GJChronology.getInstanceUTC());
> -            fail();
> -        } catch (IllegalFieldValueException ex) {
> -            // good
> -        }
> -    }
> -
>  }
