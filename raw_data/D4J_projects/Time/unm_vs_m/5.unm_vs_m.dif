0a1,14
> diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
> index 84f44dd6..5beb66f7 100644
> --- a/RELEASE-NOTES.txt
> +++ b/RELEASE-NOTES.txt
> @@ -48,9 +48,6 @@ Deprecations since 2.3
>  
>  Bug fixes since 2.3
>  -------------------
> -- Period.normalizedStandard(PeriodType) [#79]
> -  Fix handling of PeriodType when either years or months missing
> -
>  - Better Javadoc for parsing of numbers in format patterns [#60]
>  
>  - Remove uncaughtException calls [#59]
2c16
< index 5ea67a7..f404793 100644
---
> index 5ea67a7c..5b36bc50 100644
5c19,31
< @@ -1625,19 +1625,13 @@ public final class Period
---
> @@ -1614,30 +1614,23 @@ public final class Period
>       * @since 1.5
>       */
>      public Period normalizedStandard(PeriodType type) {
> -        type = DateTimeUtils.getPeriodType(type);
>          long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
>          millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
>          millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
>          millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
>          millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
>          millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
> -        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
> +        Period result = new Period(millis, DateTimeUtils.getPeriodType(type), ISOChronology.getInstanceUTC());
14,18c40
< +            years = FieldUtils.safeAdd(years, months / 12);
< +            months = months % 12;
< +            if (years != 0) {
< +                result = result.withYears(years);
<              }
---
> -            }
25a48,52
> +            years = FieldUtils.safeAdd(years, months / 12);
> +            months = months % 12;
> +            if (years != 0) {
> +                result = result.withYears(years);
> +            }
30a58,116
> diff --git a/src/test/java/org/joda/time/TestPeriod_Basics.java b/src/test/java/org/joda/time/TestPeriod_Basics.java
> index 82030f80..f291c9bb 100644
> --- a/src/test/java/org/joda/time/TestPeriod_Basics.java
> +++ b/src/test/java/org/joda/time/TestPeriod_Basics.java
> @@ -217,7 +217,6 @@ public class TestPeriod_Basics extends TestCase {
>      }
>      
>      class MockPeriod extends BasePeriod {
> -        private static final long serialVersionUID = 1L;
>          public MockPeriod(long value) {
>              super(value, null, null);
>          }
> @@ -1517,46 +1516,4 @@ public class TestPeriod_Basics extends TestCase {
>          assertEquals(new Period(2, 3, 0, 37, 3, 0, 0, 0, PeriodType.yearMonthDayTime()), result);
>      }
>  
> -    public void testNormalizedStandard_periodType_months1() {
> -        Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0);
> -        Period result = test.normalizedStandard(PeriodType.months());
> -        assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test);
> -        assertEquals(new Period(0, 27, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);
> -    }
> -
> -    public void testNormalizedStandard_periodType_months2() {
> -        Period test = new Period(-2, 15, 0, 0, 0, 0, 0, 0);
> -        Period result = test.normalizedStandard(PeriodType.months());
> -        assertEquals(new Period(-2, 15, 0, 0, 0, 0, 0, 0), test);
> -        assertEquals(new Period(0, -9, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);
> -    }
> -
> -    public void testNormalizedStandard_periodType_months3() {
> -        Period test = new Period(0, 4, 0, 0, 0, 0, 0, 0);
> -        Period result = test.normalizedStandard(PeriodType.months());
> -        assertEquals(new Period(0, 4, 0, 0, 0, 0, 0, 0), test);
> -        assertEquals(new Period(0, 4, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);
> -    }
> -
> -    public void testNormalizedStandard_periodType_years() {
> -        Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0);
> -        try {
> -            test.normalizedStandard(PeriodType.years());
> -            fail();
> -        } catch (UnsupportedOperationException ex) {
> -            // expected
> -        }
> -    }
> -
> -    public void testNormalizedStandard_periodType_monthsWeeks() {
> -        PeriodType type = PeriodType.forFields(new DurationFieldType[]{
> -                        DurationFieldType.months(),
> -                        DurationFieldType.weeks(),
> -                        DurationFieldType.days()});
> -        Period test = new Period(2, 4, 6, 0, 0, 0, 0, 0);
> -        Period result = test.normalizedStandard(type);
> -        assertEquals(new Period(2, 4, 6, 0, 0, 0, 0, 0), test);
> -        assertEquals(new Period(0, 28, 6, 0, 0, 0, 0, 0, type), result);
> -    }
> -
>  }
