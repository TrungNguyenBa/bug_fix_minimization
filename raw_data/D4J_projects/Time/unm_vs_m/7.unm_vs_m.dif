0a1,16
> diff --git a/RELEASE-NOTES.txt b/RELEASE-NOTES.txt
> index a8e815c1..cacef1ff 100644
> --- a/RELEASE-NOTES.txt
> +++ b/RELEASE-NOTES.txt
> @@ -85,11 +85,6 @@ Bug fixes since 2.2
>    A backwards compatible change to the input handling has been made
>    forOffsetHoursMinutes(0, -15) now creates -00:15
>  
> -- DateTimeFormatter.parseInto [#21]
> -  Fix parseInto() where it obtains the default year for parsing from the ReadWritableInstant
> -  Previously, the wrong year could be obtained at the start or end of the year in non UTC zones
> -  Now obtains the year from the ReadWritableInstant using the chronology of the ReadWritableInstant
> -
>  
>  Scala
>  --------
2c18
< index 913d036..447674a 100644
---
> index 913d036e..553b035c 100644
5c21,39
< @@ -705,9 +705,9 @@ public class DateTimeFormatter {
---
> @@ -23,7 +23,6 @@ import org.joda.time.Chronology;
>  import org.joda.time.DateTime;
>  import org.joda.time.DateTimeUtils;
>  import org.joda.time.DateTimeZone;
> -import org.joda.time.Instant;
>  import org.joda.time.LocalDate;
>  import org.joda.time.LocalDateTime;
>  import org.joda.time.LocalTime;
> @@ -683,8 +682,7 @@ public class DateTimeFormatter {
>       * one's complement operator (~) on the return value.
>       * <p>
>       * This parse method ignores the {@link #getDefaultYear() default year} and
> -     * parses using the year from the supplied instant based on the chronology
> -     * and time-zone of the supplied instant.
> +     * parses using the year from the supplied instant as the default.
>       * <p>
>       * The parse will use the chronology of the instant.
>       *
> @@ -705,12 +703,11 @@ public class DateTimeFormatter {
12d45
< +        int defaultYear = chrono.year().get(instantLocal);
15c48,140
<              instantLocal, chrono, iLocale, iPivotYear, defaultYear);
---
> -            instantLocal, chrono, iLocale, iPivotYear, defaultYear);
> +            instantLocal, chrono, iLocale, iPivotYear, chrono.year().get(instantLocal));
>          int newPos = parser.parseInto(bucket, text, position);
>          instant.setMillis(bucket.computeMillis(false, text));
>          if (iOffsetParsed && bucket.getOffsetInteger() != null) {
> diff --git a/src/test/java/org/joda/time/format/TestDateTimeFormatter.java b/src/test/java/org/joda/time/format/TestDateTimeFormatter.java
> index 5d104df2..0152ce70 100644
> --- a/src/test/java/org/joda/time/format/TestDateTimeFormatter.java
> +++ b/src/test/java/org/joda/time/format/TestDateTimeFormatter.java
> @@ -905,62 +905,6 @@ public class TestDateTimeFormatter extends TestCase {
>          assertEquals(new MutableDateTime(2004, 2, 29, 12, 20, 30, 0, LONDON), result);
>      }
>  
> -    public void testParseInto_monthDay_feb29_startOfYear() {
> -        DateTimeFormatter f = DateTimeFormat.forPattern("M d").withLocale(Locale.UK);
> -        MutableDateTime result = new MutableDateTime(2004, 1, 1, 0, 0, 0, 0, LONDON);
> -        assertEquals(4, f.parseInto(result, "2 29", 0));
> -        assertEquals(new MutableDateTime(2004, 2, 29, 0, 0, 0, 0, LONDON), result);
> -    }
> -
> -    public void testParseInto_monthDay_feb29_OfYear() {
> -        DateTimeFormatter f = DateTimeFormat.forPattern("M d").withLocale(Locale.UK);
> -        MutableDateTime result = new MutableDateTime(2004, 12, 31, 23, 59, 59, 999, LONDON);
> -        assertEquals(4, f.parseInto(result, "2 29", 0));
> -        assertEquals(new MutableDateTime(2004, 2, 29, 23, 59, 59, 999, LONDON), result);
> -    }
> -
> -    public void testParseInto_monthDay_feb29_newYork() {
> -        DateTimeFormatter f = DateTimeFormat.forPattern("M d").withLocale(Locale.UK);
> -        MutableDateTime result = new MutableDateTime(2004, 1, 9, 12, 20, 30, 0, NEWYORK);
> -        assertEquals(4, f.parseInto(result, "2 29", 0));
> -        assertEquals(new MutableDateTime(2004, 2, 29, 12, 20, 30, 0, NEWYORK), result);
> -    }
> -
> -    public void testParseInto_monthDay_feb29_newYork_startOfYear() {
> -        DateTimeFormatter f = DateTimeFormat.forPattern("M d").withLocale(Locale.UK);
> -        MutableDateTime result = new MutableDateTime(2004, 1, 1, 0, 0, 0, 0, NEWYORK);
> -        assertEquals(4, f.parseInto(result, "2 29", 0));
> -        assertEquals(new MutableDateTime(2004, 2, 29, 0, 0, 0, 0, NEWYORK), result);
> -    }
> -
> -    public void testParseInto_monthDay_feb29_newYork_endOfYear() {
> -        DateTimeFormatter f = DateTimeFormat.forPattern("M d").withLocale(Locale.UK);
> -        MutableDateTime result = new MutableDateTime(2004, 12, 31, 23, 59, 59, 999, NEWYORK);
> -        assertEquals(4, f.parseInto(result, "2 29", 0));
> -        assertEquals(new MutableDateTime(2004, 2, 29, 23, 59, 59, 999, NEWYORK), result);
> -    }
> -
> -    public void testParseInto_monthDay_feb29_tokyo() {
> -        DateTimeFormatter f = DateTimeFormat.forPattern("M d").withLocale(Locale.UK);
> -        MutableDateTime result = new MutableDateTime(2004, 1, 9, 12, 20, 30, 0, TOKYO);
> -        assertEquals(4, f.parseInto(result, "2 29", 0));
> -        assertEquals(new MutableDateTime(2004, 2, 29, 12, 20, 30, 0, TOKYO), result);
> -    }
> -
> -    public void testParseInto_monthDay_feb29_tokyo_startOfYear() {
> -        DateTimeFormatter f = DateTimeFormat.forPattern("M d").withLocale(Locale.UK);
> -        MutableDateTime result = new MutableDateTime(2004, 1, 1, 0, 0, 0, 0, TOKYO);
> -        assertEquals(4, f.parseInto(result, "2 29", 0));
> -        assertEquals(new MutableDateTime(2004, 2, 29, 0, 0, 0, 0, TOKYO), result);
> -    }
> -
> -    public void testParseInto_monthDay_feb29_tokyo_endOfYear() {
> -        DateTimeFormatter f = DateTimeFormat.forPattern("M d").withLocale(Locale.UK);
> -        MutableDateTime result = new MutableDateTime(2004, 12, 31, 23, 59, 59, 999, TOKYO);
> -        assertEquals(4, f.parseInto(result, "2 29", 0));
> -        assertEquals(new MutableDateTime(2004, 2, 29, 23, 59, 59, 999, TOKYO), result);
> -    }
> -
>      public void testParseInto_monthDay_withDefaultYear_feb29() {
>          DateTimeFormatter f = DateTimeFormat.forPattern("M d").withDefaultYear(2012);
>          MutableDateTime result = new MutableDateTime(2004, 1, 9, 12, 20, 30, 0, LONDON);
> @@ -968,20 +912,6 @@ public class TestDateTimeFormatter extends TestCase {
>          assertEquals(new MutableDateTime(2004, 2, 29, 12, 20, 30, 0, LONDON), result);
>      }
>  
> -    public void testParseInto_monthDay_withDefaultYear_feb29_newYork() {
> -        DateTimeFormatter f = DateTimeFormat.forPattern("M d").withDefaultYear(2012);
> -        MutableDateTime result = new MutableDateTime(2004, 1, 9, 12, 20, 30, 0, NEWYORK);
> -        assertEquals(4, f.parseInto(result, "2 29", 0));
> -        assertEquals(new MutableDateTime(2004, 2, 29, 12, 20, 30, 0, NEWYORK), result);
> -    }
> -
> -    public void testParseInto_monthDay_withDefaultYear_feb29_newYork_endOfYear() {
> -        DateTimeFormatter f = DateTimeFormat.forPattern("M d").withDefaultYear(2012);
> -        MutableDateTime result = new MutableDateTime(2004, 12, 9, 12, 20, 30, 0, NEWYORK);
> -        assertEquals(4, f.parseInto(result, "2 29", 0));
> -        assertEquals(new MutableDateTime(2004, 2, 29, 12, 20, 30, 0, NEWYORK), result);
> -    }
> -
>      public void testParseMillis_fractionOfSecondLong() {
>          DateTimeFormatter f = new DateTimeFormatterBuilder()
>              .appendSecondOfDay(2).appendLiteral('.').appendFractionOfSecond(1, 9)
