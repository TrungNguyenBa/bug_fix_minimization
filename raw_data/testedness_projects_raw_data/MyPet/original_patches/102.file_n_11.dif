diff --git a/src/main/java/de/Keyle/MyPet/skill/skills/implementation/inventory/ItemStackNBTConverter.java b/src/main/java/de/Keyle/MyPet/skill/skills/implementation/inventory/ItemStackNBTConverter.java
index 80edbca0..7256d519 100644
--- a/src/main/java/de/Keyle/MyPet/skill/skills/implementation/inventory/ItemStackNBTConverter.java
+++ b/src/main/java/de/Keyle/MyPet/skill/skills/implementation/inventory/ItemStackNBTConverter.java
@@ -29,7 +29,7 @@ import java.util.List;
 import java.util.Set;
 
 public class ItemStackNBTConverter {
-    public static TagCompound itemStackToCompund(ItemStack itemStack) {
+    public static TagCompound ItemStackToCompund(ItemStack itemStack) {
         TagCompound compound = new TagCompound();
 
         compound.getCompoundData().put("id", new TagShort((short) Item.b(itemStack.getItem())));
@@ -37,27 +37,27 @@ public class ItemStackNBTConverter {
         compound.getCompoundData().put("Damage", new TagShort((short) itemStack.getData()));
 
         if (itemStack.tag != null) {
-            compound.getCompoundData().put("tag", vanillaCompoundToCompound(itemStack.tag));
+            compound.getCompoundData().put("tag", VanillaCompoundToCompound(itemStack.tag));
         }
         return compound;
     }
 
-    public static ItemStack compundToItemStack(TagCompound compound) {
+    public static ItemStack CompundToItemStack(TagCompound compound) {
         int id = compound.getAs("id", TagShort.class).getShortData();
         int count = compound.getAs("Count", TagByte.class).getByteData();
         int damage = compound.getAs("Damage", TagShort.class).getShortData();
 
         ItemStack itemstack = new ItemStack(Item.d(id), count, damage);
         if (compound.containsKeyAs("tag", TagCompound.class)) {
-            TagCompound compoundToConvert = compound.get("tag");
-            itemstack.tag = (NBTTagCompound) compoundToVanillaCompound(compoundToConvert);
+            TagCompound compoundToConvert = compound.getAs("tag", TagCompound.class);
+            itemstack.tag = (NBTTagCompound) CompoundToVanillaCompound(compoundToConvert);
         }
         return itemstack;
     }
 
     @SuppressWarnings("unchecked")
     @Nullable
-    public static NBTBase compoundToVanillaCompound(TagBase tag) {
+    public static NBTBase CompoundToVanillaCompound(TagBase tag) {
         switch (TagType.getTypeById(tag.getTagTypeId())) {
             case Int:
                 return new NBTTagInt(((TagInt) tag).getIntData());
@@ -81,14 +81,14 @@ public class ItemStackNBTConverter {
                 TagList TagList = (TagList) tag;
                 NBTTagList tagList = new NBTTagList();
                 for (TagBase tagInList : TagList.getReadOnlyList()) {
-                    tagList.add(compoundToVanillaCompound(tagInList));
+                    tagList.add(CompoundToVanillaCompound(tagInList));
                 }
                 return tagList;
             case Compound:
                 TagCompound TagCompound = (TagCompound) tag;
                 NBTTagCompound tagCompound = new NBTTagCompound();
                 for (String name : TagCompound.getCompoundData().keySet()) {
-                    tagCompound.set(name, compoundToVanillaCompound(TagCompound.getCompoundData().get(name)));
+                    tagCompound.set(name, CompoundToVanillaCompound(TagCompound.getCompoundData().get(name)));
                 }
                 return tagCompound;
             case End:
@@ -98,7 +98,7 @@ public class ItemStackNBTConverter {
     }
 
     @SuppressWarnings("unchecked")
-    public static TagBase vanillaCompoundToCompound(NBTBase vanillaTag) {
+    public static TagBase VanillaCompoundToCompound(NBTBase vanillaTag) {
         switch (vanillaTag.getTypeId()) {
             case 0:
                 return new TagEnd();
@@ -122,7 +122,7 @@ public class ItemStackNBTConverter {
                 NBTTagList tagList = (NBTTagList) vanillaTag;
                 List compoundList = new ArrayList();
                 for (int i = 0; i < tagList.size(); i++) {
-                    compoundList.add(vanillaCompoundToCompound(tagList.get(i)));
+                    compoundList.add(VanillaCompoundToCompound(tagList.get(i)));
                 }
                 return new TagList(compoundList);
             case 10:
@@ -130,7 +130,7 @@ public class ItemStackNBTConverter {
                 NBTTagCompound tagCompound = ((NBTTagCompound) vanillaTag);
                 Set<String> keys = tagCompound.c();
                 for (String tagName : keys) {
-                    compound.getCompoundData().put(tagName, vanillaCompoundToCompound(tagCompound.get(tagName)));
+                    compound.getCompoundData().put(tagName, VanillaCompoundToCompound(tagCompound.get(tagName)));
                 }
                 return compound;
             case 11:
