diff --git a/src/main/java/de/Keyle/MyPet/util/support/PvPChecker.java b/src/main/java/de/Keyle/MyPet/util/support/PvPChecker.java
index e7686d78..d95b986a 100644
--- a/src/main/java/de/Keyle/MyPet/util/support/PvPChecker.java
+++ b/src/main/java/de/Keyle/MyPet/util/support/PvPChecker.java
@@ -111,7 +111,6 @@ public class PvPChecker {
 
     public static boolean canHurtCitizens(Entity defender) {
         if (USE_Citizens && PluginSupportManager.isPluginUsable("Citizens")) {
-            try {
             if (CitizensAPI.getNPCRegistry().isNPC(defender)) {
                 NPC npc = CitizensAPI.getNPCRegistry().getNPC(defender);
                 if (npc == null || npc.data() == null) {
@@ -119,61 +118,41 @@ public class PvPChecker {
                 }
                 return !npc.data().get("protected", true);
             }
-            } catch (NoClassDefFoundError e) {
-                USE_Citizens = false;
-            } catch (Exception ignored) {
-            }
         }
         return true;
     }
 
     public static boolean canHurtWorldGuard(Location location) {
         if (USE_WorldGuard && PluginSupportManager.isPluginUsable("WorldGuard")) {
-            try {
             WorldGuardPlugin wgp = PluginSupportManager.getPluginInstance(WorldGuardPlugin.class);
             RegionManager mgr = wgp.getGlobalRegionManager().get(location.getWorld());
             Vector pt = new Vector(location.getX(), location.getY(), location.getZ());
             ApplicableRegionSet set = mgr.getApplicableRegions(pt);
 
             return set.allows(DefaultFlag.PVP);
-            } catch (NoClassDefFoundError e) {
-                USE_WorldGuard = false;
-            } catch (Exception ignored) {
-            }
         }
         return true;
     }
 
     public static boolean canHurtFactions(Player attacker, Player defender) {
         if (USE_Factions && PluginSupportManager.isPluginUsable("Factions")) {
-            try {
             EntityDamageByEntityEvent sub = new EntityDamageByEntityEvent(attacker, defender, EntityDamageEvent.DamageCause.CUSTOM, 0.);
             return FactionsListenerMain.get().canCombatDamageHappen(sub, false);
-            } catch (NoClassDefFoundError e) {
-                USE_Factions = false;
-            } catch (Exception ignored) {
-            }
         }
         return true;
     }
 
     public static boolean canHurtTowny(Player attacker, Player defender) {
         if (USE_Towny && PluginSupportManager.isPluginUsable("Towny")) {
-            try {
             if (CombatUtil.preventDamageCall(attacker, defender)) {
                 return false;
             }
-            } catch (NoClassDefFoundError e) {
-                USE_Towny = false;
-            } catch (Exception ignored) {
-            }
         }
         return true;
     }
 
     public static boolean canHurtHeroes(Player attacker, Player defender) {
         if (USE_Heroes && PluginSupportManager.isPluginUsable("Heroes")) {
-            try {
             Heroes pluginHeroes = PluginSupportManager.getPluginInstance(Heroes.class);
             Hero heroAttacker = pluginHeroes.getCharacterManager().getHero(attacker);
             Hero heroDefender = pluginHeroes.getCharacterManager().getHero(defender);
@@ -190,17 +169,12 @@ public class PvPChecker {
             if ((party != null) && (party.isNoPvp()) && party.isPartyMember(heroAttacker)) {
                 return false;
             }
-            } catch (NoClassDefFoundError e) {
-                USE_Heroes = false;
-            } catch (Exception ignored) {
-            }
         }
         return true;
     }
 
     public static boolean canHurtRegios(Player defender) {
         if (USE_Regios && PluginSupportManager.isPluginUsable("Regios")) {
-            try {
             RegiosAPI pluginRegios = PluginSupportManager.getPluginInstance(RegiosPlugin.class);
             for (Region region : pluginRegios.getRegions(defender.getLocation())) {
                 if (!region.isPvp()) {
@@ -208,47 +182,32 @@ public class PvPChecker {
                 }
             }
             return pluginRegios.getRegion(defender).isPvp();
-            } catch (NoClassDefFoundError e) {
-                USE_Regios = false;
-            } catch (Exception ignored) {
-            }
         }
         return true;
     }
 
     public static boolean canHurtResidence(Location location) {
         if (USE_Residence && PluginSupportManager.isPluginUsable("Residence")) {
-            try {
             FlagPermissions flagPermissions = Residence.getPermsByLoc(location);
             return flagPermissions.has("pvp", true);
-            } catch (NoClassDefFoundError e) {
-                USE_Residence = false;
-            } catch (Exception ignored) {
-            }
         }
         return true;
     }
 
     public static boolean canHurtMobArena(Player defender) {
         if (USE_MobArena && PluginSupportManager.isPluginUsable("MobArena")) {
-            try {
             if (pluginMobArena == null) {
                 pluginMobArena = new MobArenaHandler();
             }
             if (pluginMobArena.isPlayerInArena(defender)) {
                 return pluginMobArena.getArenaWithPlayer(defender).getSettings().getBoolean("pvp-enabled", true);
             }
-            } catch (NoClassDefFoundError e) {
-                USE_MobArena = false;
-            } catch (Exception ignored) {
-            }
         }
         return true;
     }
 
     public static boolean canHurtSurvivalGame(Player defender) {
         if (USE_SurvivalGame && PluginSupportManager.isPluginUsable("SurvivalGames")) {
-            try {
             int gameid = GameManager.getInstance().getPlayerGameId(defender);
             if (gameid == -1) {
                 return true;
@@ -263,45 +222,30 @@ public class PvPChecker {
             if (game.isProtectionOn()) {
                 return false;
             }
-            } catch (NoClassDefFoundError e) {
-                USE_SurvivalGame = false;
-            } catch (Exception ignored) {
-            }
         }
         return true;
     }
 
     public static boolean canHurtPvPArena(Player attacker, Player defender) {
         if (USE_PvPArena && PluginSupportManager.isPluginUsable("pvparena")) {
-            try {
             if (!PVPArenaAPI.getArenaName(defender).equals("")) {
                 if (PVPArenaAPI.getArenaName(attacker).equals(PVPArenaAPI.getArenaName(defender))) {
                     return PVPArenaAPI.getArenaTeam(attacker) != PVPArenaAPI.getArenaTeam(defender);
                 }
             }
-            } catch (NoClassDefFoundError e) {
-                USE_PvPArena = false;
-            } catch (Exception ignored) {
-            }
         }
         return true;
     }
 
     public static boolean canHurtMcMMO(Player attacker, Player defender) {
         if (USE_McMMO && PluginSupportManager.isPluginUsable("mcMMO")) {
-            try {
             return !PartyAPI.inSameParty(attacker, defender);
-            } catch (NoClassDefFoundError e) {
-                USE_McMMO = false;
-            } catch (Exception ignored) {
-            }
         }
         return true;
     }
 
     public static boolean canHurtAncientRPG(Player attacker, Player defender) {
         if (USE_AncientRPG && PluginSupportManager.isPluginUsable("SurvivalGames")) {
-            try {
             AncientRPGParty party = ApiManager.getApiManager().getPlayerParty(attacker);
             if (party != null) {
                 if (!party.friendlyFire && party.containsName(defender.getName())) {
@@ -315,17 +259,12 @@ public class PvPChecker {
                     return false;
                 }
             }
-            } catch (NoClassDefFoundError e) {
-                USE_AncientRPG = false;
-            } catch (Exception ignored) {
-            }
         }
         return true;
     }
 
     public static boolean canHurtGriefPrevention(Player attacker, Player defender) {
         if (USE_GriefPrevention && PluginSupportManager.isPluginUsable("GriefPrevention")) {
-            try {
             GriefPrevention pluginGriefPrevention = GriefPrevention.instance;
 
             PlayerData defenderData = pluginGriefPrevention.dataStore.getPlayerData(defender.getName());
@@ -356,10 +295,6 @@ public class PvPChecker {
                     }
                 }
             }
-            } catch (NoClassDefFoundError e) {
-                USE_GriefPrevention = false;
-            } catch (Exception ignored) {
-            }
         }
         return true;
     }
