diff --git a/src/main/java/de/Keyle/MyPet/util/support/PvPChecker.java b/src/main/java/de/Keyle/MyPet/util/support/PvPChecker.java
index e7686d78..d95b986a 100644
--- a/src/main/java/de/Keyle/MyPet/util/support/PvPChecker.java
+++ b/src/main/java/de/Keyle/MyPet/util/support/PvPChecker.java
@@ -111,17 +111,12 @@ public class PvPChecker {
 
     public static boolean canHurtCitizens(Entity defender) {
         if (USE_Citizens && PluginSupportManager.isPluginUsable("Citizens")) {
-            try {
-                if (CitizensAPI.getNPCRegistry().isNPC(defender)) {
-                    NPC npc = CitizensAPI.getNPCRegistry().getNPC(defender);
-                    if (npc == null || npc.data() == null) {
-                        return true;
-                    }
-                    return !npc.data().get("protected", true);
+            if (CitizensAPI.getNPCRegistry().isNPC(defender)) {
+                NPC npc = CitizensAPI.getNPCRegistry().getNPC(defender);
+                if (npc == null || npc.data() == null) {
+                    return true;
                 }
-            } catch (NoClassDefFoundError e) {
-                USE_Citizens = false;
-            } catch (Exception ignored) {
+                return !npc.data().get("protected", true);
             }
         }
         return true;
@@ -129,43 +124,28 @@ public class PvPChecker {
 
     public static boolean canHurtWorldGuard(Location location) {
         if (USE_WorldGuard && PluginSupportManager.isPluginUsable("WorldGuard")) {
-            try {
-                WorldGuardPlugin wgp = PluginSupportManager.getPluginInstance(WorldGuardPlugin.class);
-                RegionManager mgr = wgp.getGlobalRegionManager().get(location.getWorld());
-                Vector pt = new Vector(location.getX(), location.getY(), location.getZ());
-                ApplicableRegionSet set = mgr.getApplicableRegions(pt);
+            WorldGuardPlugin wgp = PluginSupportManager.getPluginInstance(WorldGuardPlugin.class);
+            RegionManager mgr = wgp.getGlobalRegionManager().get(location.getWorld());
+            Vector pt = new Vector(location.getX(), location.getY(), location.getZ());
+            ApplicableRegionSet set = mgr.getApplicableRegions(pt);
 
-                return set.allows(DefaultFlag.PVP);
-            } catch (NoClassDefFoundError e) {
-                USE_WorldGuard = false;
-            } catch (Exception ignored) {
-            }
+            return set.allows(DefaultFlag.PVP);
         }
         return true;
     }
 
     public static boolean canHurtFactions(Player attacker, Player defender) {
         if (USE_Factions && PluginSupportManager.isPluginUsable("Factions")) {
-            try {
-                EntityDamageByEntityEvent sub = new EntityDamageByEntityEvent(attacker, defender, EntityDamageEvent.DamageCause.CUSTOM, 0.);
-                return FactionsListenerMain.get().canCombatDamageHappen(sub, false);
-            } catch (NoClassDefFoundError e) {
-                USE_Factions = false;
-            } catch (Exception ignored) {
-            }
+            EntityDamageByEntityEvent sub = new EntityDamageByEntityEvent(attacker, defender, EntityDamageEvent.DamageCause.CUSTOM, 0.);
+            return FactionsListenerMain.get().canCombatDamageHappen(sub, false);
         }
         return true;
     }
 
     public static boolean canHurtTowny(Player attacker, Player defender) {
         if (USE_Towny && PluginSupportManager.isPluginUsable("Towny")) {
-            try {
-                if (CombatUtil.preventDamageCall(attacker, defender)) {
-                    return false;
-                }
-            } catch (NoClassDefFoundError e) {
-                USE_Towny = false;
-            } catch (Exception ignored) {
+            if (CombatUtil.preventDamageCall(attacker, defender)) {
+                return false;
             }
         }
         return true;
@@ -173,26 +153,21 @@ public class PvPChecker {
 
     public static boolean canHurtHeroes(Player attacker, Player defender) {
         if (USE_Heroes && PluginSupportManager.isPluginUsable("Heroes")) {
-            try {
-                Heroes pluginHeroes = PluginSupportManager.getPluginInstance(Heroes.class);
-                Hero heroAttacker = pluginHeroes.getCharacterManager().getHero(attacker);
-                Hero heroDefender = pluginHeroes.getCharacterManager().getHero(defender);
-                int attackerLevel = heroAttacker.getTieredLevel(false);
-                int defenderLevel = heroDefender.getTieredLevel(false);
+            Heroes pluginHeroes = PluginSupportManager.getPluginInstance(Heroes.class);
+            Hero heroAttacker = pluginHeroes.getCharacterManager().getHero(attacker);
+            Hero heroDefender = pluginHeroes.getCharacterManager().getHero(defender);
+            int attackerLevel = heroAttacker.getTieredLevel(false);
+            int defenderLevel = heroDefender.getTieredLevel(false);
 
-                if (Math.abs(attackerLevel - defenderLevel) > Heroes.properties.pvpLevelRange) {
-                    return false;
-                }
-                if ((defenderLevel < Heroes.properties.minPvpLevel) || (attackerLevel < Heroes.properties.minPvpLevel)) {
-                    return false;
-                }
-                HeroParty party = heroDefender.getParty();
-                if ((party != null) && (party.isNoPvp()) && party.isPartyMember(heroAttacker)) {
-                    return false;
-                }
-            } catch (NoClassDefFoundError e) {
-                USE_Heroes = false;
-            } catch (Exception ignored) {
+            if (Math.abs(attackerLevel - defenderLevel) > Heroes.properties.pvpLevelRange) {
+                return false;
+            }
+            if ((defenderLevel < Heroes.properties.minPvpLevel) || (attackerLevel < Heroes.properties.minPvpLevel)) {
+                return false;
+            }
+            HeroParty party = heroDefender.getParty();
+            if ((party != null) && (party.isNoPvp()) && party.isPartyMember(heroAttacker)) {
+                return false;
             }
         }
         return true;
@@ -200,47 +175,32 @@ public class PvPChecker {
 
     public static boolean canHurtRegios(Player defender) {
         if (USE_Regios && PluginSupportManager.isPluginUsable("Regios")) {
-            try {
-                RegiosAPI pluginRegios = PluginSupportManager.getPluginInstance(RegiosPlugin.class);
-                for (Region region : pluginRegios.getRegions(defender.getLocation())) {
-                    if (!region.isPvp()) {
-                        return false;
-                    }
+            RegiosAPI pluginRegios = PluginSupportManager.getPluginInstance(RegiosPlugin.class);
+            for (Region region : pluginRegios.getRegions(defender.getLocation())) {
+                if (!region.isPvp()) {
+                    return false;
                 }
-                return pluginRegios.getRegion(defender).isPvp();
-            } catch (NoClassDefFoundError e) {
-                USE_Regios = false;
-            } catch (Exception ignored) {
             }
+            return pluginRegios.getRegion(defender).isPvp();
         }
         return true;
     }
 
     public static boolean canHurtResidence(Location location) {
         if (USE_Residence && PluginSupportManager.isPluginUsable("Residence")) {
-            try {
-                FlagPermissions flagPermissions = Residence.getPermsByLoc(location);
-                return flagPermissions.has("pvp", true);
-            } catch (NoClassDefFoundError e) {
-                USE_Residence = false;
-            } catch (Exception ignored) {
-            }
+            FlagPermissions flagPermissions = Residence.getPermsByLoc(location);
+            return flagPermissions.has("pvp", true);
         }
         return true;
     }
 
     public static boolean canHurtMobArena(Player defender) {
         if (USE_MobArena && PluginSupportManager.isPluginUsable("MobArena")) {
-            try {
-                if (pluginMobArena == null) {
-                    pluginMobArena = new MobArenaHandler();
-                }
-                if (pluginMobArena.isPlayerInArena(defender)) {
-                    return pluginMobArena.getArenaWithPlayer(defender).getSettings().getBoolean("pvp-enabled", true);
-                }
-            } catch (NoClassDefFoundError e) {
-                USE_MobArena = false;
-            } catch (Exception ignored) {
+            if (pluginMobArena == null) {
+                pluginMobArena = new MobArenaHandler();
+            }
+            if (pluginMobArena.isPlayerInArena(defender)) {
+                return pluginMobArena.getArenaWithPlayer(defender).getSettings().getBoolean("pvp-enabled", true);
             }
         }
         return true;
@@ -248,24 +208,19 @@ public class PvPChecker {
 
     public static boolean canHurtSurvivalGame(Player defender) {
         if (USE_SurvivalGame && PluginSupportManager.isPluginUsable("SurvivalGames")) {
-            try {
-                int gameid = GameManager.getInstance().getPlayerGameId(defender);
-                if (gameid == -1) {
-                    return true;
-                }
-                if (!GameManager.getInstance().isPlayerActive(defender)) {
-                    return true;
-                }
-                Game game = GameManager.getInstance().getGame(gameid);
-                if (game.getMode() != Game.GameMode.INGAME) {
-                    return false;
-                }
-                if (game.isProtectionOn()) {
-                    return false;
-                }
-            } catch (NoClassDefFoundError e) {
-                USE_SurvivalGame = false;
-            } catch (Exception ignored) {
+            int gameid = GameManager.getInstance().getPlayerGameId(defender);
+            if (gameid == -1) {
+                return true;
+            }
+            if (!GameManager.getInstance().isPlayerActive(defender)) {
+                return true;
+            }
+            Game game = GameManager.getInstance().getGame(gameid);
+            if (game.getMode() != Game.GameMode.INGAME) {
+                return false;
+            }
+            if (game.isProtectionOn()) {
+                return false;
             }
         }
         return true;
@@ -273,15 +228,10 @@ public class PvPChecker {
 
     public static boolean canHurtPvPArena(Player attacker, Player defender) {
         if (USE_PvPArena && PluginSupportManager.isPluginUsable("pvparena")) {
-            try {
-                if (!PVPArenaAPI.getArenaName(defender).equals("")) {
-                    if (PVPArenaAPI.getArenaName(attacker).equals(PVPArenaAPI.getArenaName(defender))) {
-                        return PVPArenaAPI.getArenaTeam(attacker) != PVPArenaAPI.getArenaTeam(defender);
-                    }
+            if (!PVPArenaAPI.getArenaName(defender).equals("")) {
+                if (PVPArenaAPI.getArenaName(attacker).equals(PVPArenaAPI.getArenaName(defender))) {
+                    return PVPArenaAPI.getArenaTeam(attacker) != PVPArenaAPI.getArenaTeam(defender);
                 }
-            } catch (NoClassDefFoundError e) {
-                USE_PvPArena = false;
-            } catch (Exception ignored) {
             }
         }
         return true;
@@ -289,35 +239,25 @@ public class PvPChecker {
 
     public static boolean canHurtMcMMO(Player attacker, Player defender) {
         if (USE_McMMO && PluginSupportManager.isPluginUsable("mcMMO")) {
-            try {
-                return !PartyAPI.inSameParty(attacker, defender);
-            } catch (NoClassDefFoundError e) {
-                USE_McMMO = false;
-            } catch (Exception ignored) {
-            }
+            return !PartyAPI.inSameParty(attacker, defender);
         }
         return true;
     }
 
     public static boolean canHurtAncientRPG(Player attacker, Player defender) {
         if (USE_AncientRPG && PluginSupportManager.isPluginUsable("SurvivalGames")) {
-            try {
-                AncientRPGParty party = ApiManager.getApiManager().getPlayerParty(attacker);
-                if (party != null) {
-                    if (!party.friendlyFire && party.containsName(defender.getName())) {
-                        return false;
-                    }
+            AncientRPGParty party = ApiManager.getApiManager().getPlayerParty(attacker);
+            if (party != null) {
+                if (!party.friendlyFire && party.containsName(defender.getName())) {
+                    return false;
                 }
+            }
 
-                AncientRPGGuild guild = ApiManager.getApiManager().getPlayerGuild(attacker.getName());
-                if (guild != null) {
-                    if (!guild.friendlyFire && guild == ApiManager.getApiManager().getPlayerGuild(defender.getName())) {
-                        return false;
-                    }
+            AncientRPGGuild guild = ApiManager.getApiManager().getPlayerGuild(attacker.getName());
+            if (guild != null) {
+                if (!guild.friendlyFire && guild == ApiManager.getApiManager().getPlayerGuild(defender.getName())) {
+                    return false;
                 }
-            } catch (NoClassDefFoundError e) {
-                USE_AncientRPG = false;
-            } catch (Exception ignored) {
             }
         }
         return true;
@@ -325,40 +265,35 @@ public class PvPChecker {
 
     public static boolean canHurtGriefPrevention(Player attacker, Player defender) {
         if (USE_GriefPrevention && PluginSupportManager.isPluginUsable("GriefPrevention")) {
-            try {
-                GriefPrevention pluginGriefPrevention = GriefPrevention.instance;
+            GriefPrevention pluginGriefPrevention = GriefPrevention.instance;
 
-                PlayerData defenderData = pluginGriefPrevention.dataStore.getPlayerData(defender.getName());
-                PlayerData attackerData = pluginGriefPrevention.dataStore.getPlayerData(attacker.getName());
+            PlayerData defenderData = pluginGriefPrevention.dataStore.getPlayerData(defender.getName());
+            PlayerData attackerData = pluginGriefPrevention.dataStore.getPlayerData(attacker.getName());
 
-                if (defenderData.pvpImmune || attackerData.pvpImmune) {
-                    return false;
-                }
+            if (defenderData.pvpImmune || attackerData.pvpImmune) {
+                return false;
+            }
 
-                if (pluginGriefPrevention.getDescription().getVersion().equals("7.8")) {
-                    WorldConfig worldConfig = pluginGriefPrevention.getWorldCfg(defender.getWorld());
-                    DataStore dataStore = pluginGriefPrevention.dataStore;
+            if (pluginGriefPrevention.getDescription().getVersion().equals("7.8")) {
+                WorldConfig worldConfig = pluginGriefPrevention.getWorldCfg(defender.getWorld());
+                DataStore dataStore = pluginGriefPrevention.dataStore;
 
-                    if (worldConfig.getPvPNoCombatinPlayerClaims() || worldConfig.getNoPvPCombatinAdminClaims()) {
-                        Claim localClaim = dataStore.getClaimAt(defender.getLocation(), false, defenderData.lastClaim);
-                        if (localClaim != null) {
-                            if ((localClaim.isAdminClaim() && worldConfig.getNoPvPCombatinAdminClaims()) || (!localClaim.isAdminClaim() && worldConfig.getPvPNoCombatinPlayerClaims())) {
-                                return false;
-                            }
+                if (worldConfig.getPvPNoCombatinPlayerClaims() || worldConfig.getNoPvPCombatinAdminClaims()) {
+                    Claim localClaim = dataStore.getClaimAt(defender.getLocation(), false, defenderData.lastClaim);
+                    if (localClaim != null) {
+                        if ((localClaim.isAdminClaim() && worldConfig.getNoPvPCombatinAdminClaims()) || (!localClaim.isAdminClaim() && worldConfig.getPvPNoCombatinPlayerClaims())) {
+                            return false;
                         }
                     }
-                    if (worldConfig.getPvPNoCombatinPlayerClaims() || worldConfig.getNoPvPCombatinAdminClaims()) {
-                        Claim localClaim = dataStore.getClaimAt(attacker.getLocation(), false, attackerData.lastClaim);
-                        if (localClaim != null) {
-                            if ((localClaim.isAdminClaim() && worldConfig.getNoPvPCombatinAdminClaims()) || (!localClaim.isAdminClaim() && worldConfig.getPvPNoCombatinPlayerClaims())) {
-                                return false;
-                            }
+                }
+                if (worldConfig.getPvPNoCombatinPlayerClaims() || worldConfig.getNoPvPCombatinAdminClaims()) {
+                    Claim localClaim = dataStore.getClaimAt(attacker.getLocation(), false, attackerData.lastClaim);
+                    if (localClaim != null) {
+                        if ((localClaim.isAdminClaim() && worldConfig.getNoPvPCombatinAdminClaims()) || (!localClaim.isAdminClaim() && worldConfig.getPvPNoCombatinPlayerClaims())) {
+                            return false;
                         }
                     }
                 }
-            } catch (NoClassDefFoundError e) {
-                USE_GriefPrevention = false;
-            } catch (Exception ignored) {
             }
         }
         return true;
