diff --git a/src/main/java/de/Keyle/MyPet/entity/types/wolf/EntityMyWolf.java b/src/main/java/de/Keyle/MyPet/entity/types/wolf/EntityMyWolf.java
index eea19878..6f2a3193 100644
--- a/src/main/java/de/Keyle/MyPet/entity/types/wolf/EntityMyWolf.java
+++ b/src/main/java/de/Keyle/MyPet/entity/types/wolf/EntityMyWolf.java
@@ -32,76 +32,101 @@ import net.minecraft.server.v1_6_R2.World;
 import org.bukkit.DyeColor;
 
 @EntitySize(width = 0.6F, height = 0.8F)
-public class EntityMyWolf extends EntityMyPet {
+public class EntityMyWolf extends EntityMyPet
+{
     public static ConfigItem GROW_UP_ITEM;
     protected boolean shaking;
     protected boolean isWet;
     protected float shakeCounter;
     private Sit sitPathfinder;
 
-    public EntityMyWolf(World world, MyPet myPet) {
+    public EntityMyWolf(World world, MyPet myPet)
+    {
         super(world, myPet);
     }
 
-    public void applySitting(boolean sitting) {
+    public void applySitting(boolean sitting)
+    {
         int i = this.datawatcher.getByte(16);
-        if (sitting) {
+        if (sitting)
+        {
             this.datawatcher.watch(16, (byte) (i | 0x1));
-        } else {
+        }
+        else
+        {
             this.datawatcher.watch(16, (byte) (i & 0xFFFFFFFE));
         }
         ((MyWolf) myPet).isSitting = sitting;
     }
 
-    public boolean canMove() {
+    public boolean canMove()
+    {
         return !isSitting();
     }
 
-    public DyeColor getCollarColor() {
+    public DyeColor getCollarColor()
+    {
         return ((MyWolf) myPet).collarColor;
     }
 
-    public void setCollarColor(byte color) {
+    public void setCollarColor(byte color)
+    {
         this.datawatcher.watch(20, color);
         ((MyWolf) myPet).collarColor = DyeColor.getByWoolData(color);
     }
 
     @Override
-    protected String getDeathSound() {
+    protected String getDeathSound()
+    {
         return "mob.wolf.death";
     }
 
     @Override
-    protected String getHurtSound() {
+    protected String getHurtSound()
+    {
         return "mob.wolf.hurt";
     }
 
-    protected String getLivingSound() {
+    protected String getLivingSound()
+    {
         return this.random.nextInt(5) == 0 ? (getHealth() * 100 / getMaxHealth() <= 25 ? "mob.wolf.whine" : "mob.wolf.panting") : "mob.wolf.bark";
     }
 
-    public boolean handlePlayerInteraction(EntityHuman entityhuman) {
-        if (super.handlePlayerInteraction(entityhuman)) {
+    public boolean handlePlayerInteraction(EntityHuman entityhuman)
+    {
+        if (super.handlePlayerInteraction(entityhuman))
+        {
             return true;
         }
         ItemStack itemStack = entityhuman.inventory.getItemInHand();
 
-        if (getOwner().equals(entityhuman)) {
-            if (itemStack != null && canUseItem()) {
-                if (itemStack.id == 351 && itemStack.getData() != ((MyWolf) myPet).getCollarColor().getDyeData() && getOwner().getPlayer().isSneaking()) {
-                    if (itemStack.getData() <= 15) {
+        if (getOwner().equals(entityhuman))
+        {
+            if (itemStack != null && canUseItem())
+            {
+                if (itemStack.id == 351 && itemStack.getData() != ((MyWolf) myPet).getCollarColor().getDyeData() && getOwner().getPlayer().isSneaking())
+                {
+                    if (itemStack.getData() <= 15)
+                    {
                         setCollarColor(DyeColor.getByDyeData((byte) itemStack.getData()));
-                        if (!entityhuman.abilities.canInstantlyBuild) {
-                            if (--itemStack.count <= 0) {
+                        if (!entityhuman.abilities.canInstantlyBuild)
+                        {
+                            if (--itemStack.count <= 0)
+                            {
                                 entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex, null);
                             }
                         }
                         return true;
                     }
-                } else if (GROW_UP_ITEM.compare(itemStack) && getOwner().getPlayer().isSneaking()) {
-                    if (isBaby()) {
-                        if (!entityhuman.abilities.canInstantlyBuild) {
-                            if (--itemStack.count <= 0) {
+                }
+                else if (GROW_UP_ITEM.compare(itemStack) && getOwner().getPlayer().isSneaking())
+                {
+                    if (isBaby())
+                    {
+                        if (!entityhuman.abilities.canInstantlyBuild)
+                        {
+                            if (--itemStack.count <= 0)
+                            {
                                 entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex, null);
                             }
                         }
@@ -116,7 +141,8 @@ public class EntityMyWolf extends EntityMyPet {
         return false;
     }
 
-    protected void initDatawatcher() {
+    protected void initDatawatcher()
+    {
         super.initDatawatcher();
         this.datawatcher.a(12, new Integer(0));         // age
         this.datawatcher.a(16, new Byte((byte) 0));     // tamed/angry/sitting
@@ -126,57 +152,75 @@ public class EntityMyWolf extends EntityMyPet {
         this.datawatcher.a(20, new Byte((byte) 14));    // collar color
     }
 
-    public boolean isAngry() {
+    public boolean isAngry()
+    {
         return ((MyWolf) myPet).isAngry;
     }
 
-    public void setAngry(boolean flag) {
+    public void setAngry(boolean flag)
+    {
         byte b0 = this.datawatcher.getByte(16);
-        if (flag) {
+        if (flag)
+        {
             this.datawatcher.watch(16, (byte) (b0 | 0x2));
-        } else {
+        }
+        else
+        {
             this.datawatcher.watch(16, (byte) (b0 & 0xFFFFFFFD));
         }
         ((MyWolf) myPet).isAngry = flag;
     }
 
-    public boolean isBaby() {
+    public boolean isBaby()
+    {
         return ((MyWolf) myPet).isBaby;
     }
 
-    public void setBaby(boolean flag) {
-        if (flag) {
+    public void setBaby(boolean flag)
+    {
+        if (flag)
+        {
             this.datawatcher.watch(12, Integer.valueOf(Integer.MIN_VALUE));
-        } else {
+        }
+        else
+        {
             this.datawatcher.watch(12, new Integer(0));
         }
         ((MyWolf) myPet).isBaby = flag;
     }
 
-    public boolean isSitting() {
+    public boolean isSitting()
+    {
         return ((MyWolf) myPet).isSitting;
     }
 
-    public void setSitting(boolean sitting) {
+    public void setSitting(boolean sitting)
+    {
         this.sitPathfinder.setSitting(sitting);
     }
 
-    public boolean isTamed() {
+    public boolean isTamed()
+    {
         return ((MyWolf) myPet).isTamed;
     }
 
-    public void setTamed(boolean flag) {
+    public void setTamed(boolean flag)
+    {
         int i = this.datawatcher.getByte(16);
-        if (flag) {
+        if (flag)
+        {
             this.datawatcher.watch(16, (byte) (i | 0x4));
-        } else {
+        }
+        else
+        {
             this.datawatcher.watch(16, (byte) (i & 0xFFFFFFFB));
         }
         ((MyWolf) myPet).isTamed = flag;
     }
 
     @Override
-    public void onLivingUpdate() {
+    public void onLivingUpdate()
+    {
         super.onLivingUpdate();
         if ((!this.world.isStatic) && (this.isWet) && (!this.shaking) && (!bM()) && (this.onGround)) // bM -> has pathentity
         {
@@ -190,23 +234,29 @@ public class EntityMyWolf extends EntityMyPet {
             this.isWet = true;
             this.shaking = false;
             this.shakeCounter = 0.0F;
-        } else if ((this.isWet || this.shaking) && this.shaking) {
-            if (this.shakeCounter == 0.0F) {
+        }
+        else if ((this.isWet || this.shaking) && this.shaking)
+        {
+            if (this.shakeCounter == 0.0F)
+            {
                 makeSound("mob.wolf.shake", aZ(), (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
             }
 
             this.shakeCounter += 0.05F;
-            if (this.shakeCounter - 0.05F >= 2.0F) {
+            if (this.shakeCounter - 0.05F >= 2.0F)
+            {
                 this.isWet = false;
                 this.shaking = false;
                 this.shakeCounter = 0.0F;
             }
 
-            if (this.shakeCounter > 0.4F) {
+            if (this.shakeCounter > 0.4F)
+            {
                 float locY = (float) this.boundingBox.b;
                 int i = (int) (MathHelper.sin((this.shakeCounter - 0.4F) * 3.141593F) * 7.0F);
 
-                for (int j = 0; j < i; j++) {
+                for (int j = 0 ; j < i ; j++)
+                {
                     float offsetX = (this.random.nextFloat() * 2.0F - 1.0F) * this.width * 0.5F;
                     float offsetZ = (this.random.nextFloat() * 2.0F - 1.0F) * this.width * 0.5F;
 
@@ -216,27 +266,33 @@ public class EntityMyWolf extends EntityMyPet {
         }
 
         float tailHeight = 25.F * getHealth() / getMaxHealth();
-        if (this.datawatcher.getFloat(18) != tailHeight) {
+        if (this.datawatcher.getFloat(18) != tailHeight)
+        {
             this.datawatcher.watch(18, tailHeight); // update tail height
         }
     }
 
     @Override
-    public void playStepSound() {
+    public void playStepSound()
+    {
         makeSound("mob.wolf.step", 0.15F, 1.0F);
     }
 
-    public void setCollarColor(DyeColor color) {
+    public void setCollarColor(DyeColor color)
+    {
         setCollarColor(color.getWoolData());
     }
 
-    public void setHealth(int i) {
+    public void setHealth(int i)
+    {
         super.setHealth(i);
         this.bj();
     }
 
-    public void setMyPet(MyPet myPet) {
-        if (myPet != null) {
+    public void setMyPet(MyPet myPet)
+    {
+        if (myPet != null)
+        {
             this.sitPathfinder = new Sit(this);
 
             super.setMyPet(myPet);
@@ -248,7 +304,8 @@ public class EntityMyWolf extends EntityMyPet {
         }
     }
 
-    public void setPathfinder() {
+    public void setPathfinder()
+    {
         super.setPathfinder();
         petPathfinderSelector.addGoal("Sit", 2, sitPathfinder);
     }
