diff --git a/src/main/java/de/Keyle/MyPet/skill/skills/implementation/Behavior.java b/src/main/java/de/Keyle/MyPet/skill/skills/implementation/Behavior.java
index be60406b..a53fcad9 100644
--- a/src/main/java/de/Keyle/MyPet/skill/skills/implementation/Behavior.java
+++ b/src/main/java/de/Keyle/MyPet/skill/skills/implementation/Behavior.java
@@ -39,7 +39,8 @@ import org.spout.nbt.StringTag;
 
 import java.util.Random;
 
-public class Behavior extends BehaviorInfo implements ISkillInstance, IScheduler, ISkillStorage, ISkillActive {
+public class Behavior extends BehaviorInfo implements ISkillInstance, IScheduler, ISkillStorage, ISkillActive
+{
     private static Random random = new Random();
 
     private BehaviorState behavior = BehaviorState.Normal;
@@ -47,7 +48,8 @@ public class Behavior extends BehaviorInfo implements ISkillInstance, IScheduler
     private MyPet myPet;
     private double height;
 
-    public Behavior(boolean addedByInheritance) {
+    public Behavior(boolean addedByInheritance)
+    {
         super(addedByInheritance);
         behaviorActive.put(BehaviorState.Normal, true);
         behaviorActive.put(BehaviorState.Aggressive, false);
@@ -57,108 +59,139 @@ public class Behavior extends BehaviorInfo implements ISkillInstance, IScheduler
         behaviorActive.put(BehaviorState.Duel, false);
     }
 
-    public void setMyPet(MyPet myPet) {
+    public void setMyPet(MyPet myPet)
+    {
         this.myPet = myPet;
         height = MyPet.getEntitySize(myPet.getPetType().getEntityClass())[0];
     }
 
-    public MyPet getMyPet() {
+    public MyPet getMyPet()
+    {
         return myPet;
     }
 
-    public boolean isActive() {
+    public boolean isActive()
+    {
         return active;
     }
 
-    public boolean isModeUsable(BehaviorState mode) {
+    public boolean isModeUsable(BehaviorState mode)
+    {
         return mode.isActive() && behaviorActive.get(mode);
     }
 
-    public void upgrade(ISkillInfo upgrade, boolean quiet) {
-        if (upgrade instanceof BehaviorInfo) {
+    public void upgrade(ISkillInfo upgrade, boolean quiet)
+    {
+        if (upgrade instanceof BehaviorInfo)
+        {
             active = true;
             boolean valuesEdit = false;
             String activeModes = "";
-            if (upgrade.getProperties().getValue().containsKey("friend")) {
+            if (upgrade.getProperties().getValue().containsKey("friend"))
+            {
                 behaviorActive.put(BehaviorState.Friendly, ((ByteTag) upgrade.getProperties().getValue().get("friend")).getBooleanValue());
-                if (behaviorActive.get(BehaviorState.Friendly) && BehaviorState.Friendly.isActive()) {
+                if (behaviorActive.get(BehaviorState.Friendly) && BehaviorState.Friendly.isActive())
+                {
                     activeModes = ChatColor.GOLD + "Friendly" + ChatColor.RESET;
                 }
                 valuesEdit = true;
             }
-            if (upgrade.getProperties().getValue().containsKey("aggro")) {
+            if (upgrade.getProperties().getValue().containsKey("aggro"))
+            {
                 behaviorActive.put(BehaviorState.Aggressive, ((ByteTag) upgrade.getProperties().getValue().get("aggro")).getBooleanValue());
-                if (behaviorActive.get(BehaviorState.Aggressive) && BehaviorState.Aggressive.isActive()) {
-                    if (!activeModes.equalsIgnoreCase("")) {
+                if (behaviorActive.get(BehaviorState.Aggressive) && BehaviorState.Aggressive.isActive())
+                {
+                    if (!activeModes.equalsIgnoreCase(""))
+                    {
                         activeModes += ", ";
                     }
                     activeModes += ChatColor.GOLD + "Aggressive" + ChatColor.RESET;
                 }
                 valuesEdit = true;
             }
-            if (upgrade.getProperties().getValue().containsKey("farm")) {
+            if (upgrade.getProperties().getValue().containsKey("farm"))
+            {
                 behaviorActive.put(BehaviorState.Farm, ((ByteTag) upgrade.getProperties().getValue().get("farm")).getBooleanValue());
-                if (behaviorActive.get(BehaviorState.Farm) && BehaviorState.Farm.isActive()) {
-                    if (!activeModes.equalsIgnoreCase("")) {
+                if (behaviorActive.get(BehaviorState.Farm) && BehaviorState.Farm.isActive())
+                {
+                    if (!activeModes.equalsIgnoreCase(""))
+                    {
                         activeModes += ", ";
                     }
                     activeModes += ChatColor.GOLD + "Farm" + ChatColor.RESET;
                 }
                 valuesEdit = true;
             }
-            if (upgrade.getProperties().getValue().containsKey("raid")) {
+            if (upgrade.getProperties().getValue().containsKey("raid"))
+            {
                 behaviorActive.put(BehaviorState.Raid, ((ByteTag) upgrade.getProperties().getValue().get("raid")).getBooleanValue());
-                if (behaviorActive.get(BehaviorState.Raid) && BehaviorState.Raid.isActive()) {
-                    if (!activeModes.equalsIgnoreCase("")) {
+                if (behaviorActive.get(BehaviorState.Raid) && BehaviorState.Raid.isActive())
+                {
+                    if (!activeModes.equalsIgnoreCase(""))
+                    {
                         activeModes += ", ";
                     }
                     activeModes += ChatColor.GOLD + "Raid" + ChatColor.RESET;
                 }
                 valuesEdit = true;
             }
-            if (upgrade.getProperties().getValue().containsKey("duel")) {
+            if (upgrade.getProperties().getValue().containsKey("duel"))
+            {
                 behaviorActive.put(BehaviorState.Duel, ((ByteTag) upgrade.getProperties().getValue().get("duel")).getBooleanValue());
-                if (behaviorActive.get(BehaviorState.Duel) && BehaviorState.Duel.isActive()) {
-                    if (!activeModes.equalsIgnoreCase("")) {
+                if (behaviorActive.get(BehaviorState.Duel) && BehaviorState.Duel.isActive())
+                {
+                    if (!activeModes.equalsIgnoreCase(""))
+                    {
                         activeModes += ", ";
                     }
                     activeModes += ChatColor.GOLD + "Duel" + ChatColor.RESET;
                 }
                 valuesEdit = true;
             }
-            if (!quiet && valuesEdit) {
+            if (!quiet && valuesEdit)
+            {
                 myPet.sendMessageToOwner(Util.formatText(Locales.getString("Message.Skill.Behavior.Upgrade", myPet.getOwner().getLanguage()), myPet.getPetName()));
                 myPet.sendMessageToOwner("  " + activeModes);
             }
         }
     }
 
-    public String getFormattedValue() {
+    public String getFormattedValue()
+    {
         String activeModes = ChatColor.GOLD + Locales.getString("Name.Normal", myPet.getOwner().getLanguage()) + ChatColor.RESET;
-        if (behaviorActive.get(BehaviorState.Friendly) && BehaviorState.Friendly.isActive()) {
+        if (behaviorActive.get(BehaviorState.Friendly) && BehaviorState.Friendly.isActive())
+        {
 
             activeModes += ", " + ChatColor.GOLD + Locales.getString("Name.Friendly", myPet.getOwner().getLanguage()) + ChatColor.RESET;
         }
-        if (behaviorActive.get(BehaviorState.Aggressive) && BehaviorState.Aggressive.isActive()) {
-            if (!activeModes.equalsIgnoreCase("")) {
+        if (behaviorActive.get(BehaviorState.Aggressive) && BehaviorState.Aggressive.isActive())
+        {
+            if (!activeModes.equalsIgnoreCase(""))
+            {
                 activeModes += ", ";
             }
             activeModes += ChatColor.GOLD + Locales.getString("Name.Aggressive", myPet.getOwner().getLanguage()) + ChatColor.RESET;
         }
-        if (behaviorActive.get(BehaviorState.Farm) && BehaviorState.Farm.isActive()) {
-            if (!activeModes.equalsIgnoreCase("")) {
+        if (behaviorActive.get(BehaviorState.Farm) && BehaviorState.Farm.isActive())
+        {
+            if (!activeModes.equalsIgnoreCase(""))
+            {
                 activeModes += ", ";
             }
             activeModes += ChatColor.GOLD + Locales.getString("Name.Farm", myPet.getOwner().getLanguage()) + ChatColor.RESET;
         }
-        if (behaviorActive.get(BehaviorState.Raid) && BehaviorState.Raid.isActive()) {
-            if (!activeModes.equalsIgnoreCase("")) {
+        if (behaviorActive.get(BehaviorState.Raid) && BehaviorState.Raid.isActive())
+        {
+            if (!activeModes.equalsIgnoreCase(""))
+            {
                 activeModes += ", ";
             }
             activeModes += ChatColor.GOLD + Locales.getString("Name.Raid", myPet.getOwner().getLanguage()) + ChatColor.RESET;
         }
-        if (behaviorActive.get(BehaviorState.Duel) && BehaviorState.Duel.isActive()) {
-            if (!activeModes.equalsIgnoreCase("")) {
+        if (behaviorActive.get(BehaviorState.Duel) && BehaviorState.Duel.isActive())
+        {
+            if (!activeModes.equalsIgnoreCase(""))
+            {
                 activeModes += ", ";
             }
             activeModes += ChatColor.GOLD + Locales.getString("Name.Duel", myPet.getOwner().getLanguage()) + ChatColor.RESET;
@@ -166,7 +199,8 @@ public class Behavior extends BehaviorInfo implements ISkillInstance, IScheduler
         return Locales.getString("Name.Modes", myPet.getOwner().getLanguage()) + ": " + activeModes;
     }
 
-    public void reset() {
+    public void reset()
+    {
         behavior = BehaviorState.Normal;
         behaviorActive.put(BehaviorState.Normal, true);
         behaviorActive.put(BehaviorState.Aggressive, false);
@@ -177,82 +211,117 @@ public class Behavior extends BehaviorInfo implements ISkillInstance, IScheduler
         active = false;
     }
 
-    public void setBehavior(BehaviorState behaviorState) {
+    public void setBehavior(BehaviorState behaviorState)
+    {
         behavior = behaviorState;
         myPet.sendMessageToOwner(Util.formatText(Locales.getString("Message.Skill.Behavior.NewMode", myPet.getOwner().getLanguage()), myPet.getPetName(), Locales.getString("Name." + behavior.name(), myPet.getOwner().getLanguage())));
-        if (behavior == BehaviorState.Friendly) {
+        if (behavior == BehaviorState.Friendly)
+        {
             myPet.getCraftPet().setTarget(null);
         }
     }
 
-    public void activateBehavior(BehaviorState behaviorState) {
-        if (active) {
-            if (behaviorActive.get(behaviorState)) {
+    public void activateBehavior(BehaviorState behaviorState)
+    {
+        if (active)
+        {
+            if (behaviorActive.get(behaviorState))
+            {
                 behavior = behaviorState;
                 myPet.sendMessageToOwner(Util.formatText(Locales.getString("Message.Skill.Behavior.NewMode", myPet.getOwner().getLanguage()), myPet.getPetName(), Locales.getString("Name." + behavior.name(), myPet.getOwner().getPlayer())));
-                if (behavior == BehaviorState.Friendly) {
+                if (behavior == BehaviorState.Friendly)
+                {
                     myPet.getCraftPet().getHandle().setGoalTarget(null);
                 }
             }
-        } else {
+        }
+        else
+        {
             myPet.sendMessageToOwner(Util.formatText(Locales.getString("Message.No.Skill", myPet.getOwner().getLanguage()), myPet.getPetName(), this.getName()));
         }
     }
 
-    public BehaviorState getBehavior() {
+    public BehaviorState getBehavior()
+    {
         return behavior;
     }
 
-    public boolean activate() {
-        if (active) {
-            if (behavior == BehaviorState.Normal) {
-                if (BehaviorState.Friendly.isActive() && behaviorActive.get(BehaviorState.Friendly) && Permissions.hasExtended(myPet.getOwner().getPlayer(), "MyPet.user.extended.Behavior.Friendly")) {
+    public boolean activate()
+    {
+        if (active)
+        {
+            if (behavior == BehaviorState.Normal)
+            {
+                if (BehaviorState.Friendly.isActive() && behaviorActive.get(BehaviorState.Friendly) && Permissions.hasExtended(myPet.getOwner().getPlayer(), "MyPet.user.extended.Behavior.Friendly"))
+                {
                     behavior = BehaviorState.Friendly;
                     myPet.getCraftPet().setTarget(null);
-                } else if (BehaviorState.Aggressive.isActive() && behaviorActive.get(BehaviorState.Aggressive) && Permissions.hasExtended(myPet.getOwner().getPlayer(), "MyPet.user.extended.Behavior.Aggressive")) {
+                }
+                else if (BehaviorState.Aggressive.isActive() && behaviorActive.get(BehaviorState.Aggressive) && Permissions.hasExtended(myPet.getOwner().getPlayer(), "MyPet.user.extended.Behavior.Aggressive"))
+                {
                     behavior = BehaviorState.Aggressive;
                 }
-            } else if (behavior == BehaviorState.Friendly) {
-                if (BehaviorState.Aggressive.isActive() && behaviorActive.get(BehaviorState.Aggressive) && Permissions.hasExtended(myPet.getOwner().getPlayer(), "MyPet.user.extended.Behavior.Aggressive")) {
+            }
+            else if (behavior == BehaviorState.Friendly)
+            {
+                if (BehaviorState.Aggressive.isActive() && behaviorActive.get(BehaviorState.Aggressive) && Permissions.hasExtended(myPet.getOwner().getPlayer(), "MyPet.user.extended.Behavior.Aggressive"))
+                {
                     behavior = BehaviorState.Aggressive;
-                } else {
+                }
+                else
+                {
                     behavior = BehaviorState.Normal;
                 }
-            } else {
+            }
+            else
+            {
                 behavior = BehaviorState.Normal;
             }
             myPet.sendMessageToOwner(Util.formatText(Locales.getString("Message.Skill.Behavior.NewMode", myPet.getOwner().getLanguage()), myPet.getPetName(), Locales.getString("Name." + behavior.name(), myPet.getOwner().getPlayer())));
             return true;
-        } else {
+        }
+        else
+        {
             myPet.sendMessageToOwner(Util.formatText(Locales.getString("Message.No.Skill", myPet.getOwner().getLanguage()), myPet.getPetName(), this.getName()));
             return false;
         }
     }
 
-    public void load(CompoundTag compound) {
-        if (compound.getValue().containsKey("Mode")) {
+    public void load(CompoundTag compound)
+    {
+        if (compound.getValue().containsKey("Mode"))
+        {
             behavior = BehaviorState.valueOf(((StringTag) compound.getValue().get("Mode")).getValue());
         }
     }
 
-    public CompoundTag save() {
+    public CompoundTag save()
+    {
         CompoundTag nbtTagCompound = new CompoundTag(getName(), new CompoundMap());
         nbtTagCompound.getValue().put("Mode", new StringTag("Mode", behavior.name()));
         return nbtTagCompound;
     }
 
-    public void schedule() {
-        if (behavior == BehaviorState.Aggressive && random.nextBoolean()) {
+    public void schedule()
+    {
+        if (behavior == BehaviorState.Aggressive && random.nextBoolean())
+        {
             BukkitUtil.playParticleEffect(myPet.getLocation().add(0, height, 0), "angryVillager", 0.2F, 0.2F, 0.2F, 0.5F, 1, 20);
         }
-        if (myPet instanceof MyEnderman) {
+        if (myPet instanceof MyEnderman)
+        {
             MyEnderman myEnderman = (MyEnderman) myPet;
-            if (behavior == BehaviorState.Aggressive) {
-                if (!myEnderman.isScreaming()) {
+            if (behavior == BehaviorState.Aggressive)
+            {
+                if (!myEnderman.isScreaming())
+                {
                     myEnderman.setScreaming(true);
                 }
-            } else {
-                if (myEnderman.isScreaming()) {
+            }
+            else
+            {
+                if (myEnderman.isScreaming())
+                {
                     myEnderman.setScreaming(false);
                 }
             }
@@ -260,7 +329,8 @@ public class Behavior extends BehaviorInfo implements ISkillInstance, IScheduler
     }
 
     @Override
-    public ISkillInstance cloneSkill() {
+    public ISkillInstance cloneSkill()
+    {
         Behavior newSkill = new Behavior(isAddedByInheritance());
         newSkill.setProperties(getProperties());
         return newSkill;
