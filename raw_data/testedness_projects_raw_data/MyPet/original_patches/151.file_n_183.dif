diff --git a/src/main/java/de/Keyle/MyPet/skill/skills/implementation/Thorns.java b/src/main/java/de/Keyle/MyPet/skill/skills/implementation/Thorns.java
index 90d307d4..6083d39d 100644
--- a/src/main/java/de/Keyle/MyPet/skill/skills/implementation/Thorns.java
+++ b/src/main/java/de/Keyle/MyPet/skill/skills/implementation/Thorns.java
@@ -33,66 +33,86 @@ import org.spout.nbt.StringTag;
 
 import java.util.Random;
 
-public class Thorns extends ThornsInfo implements ISkillInstance, ISkillActive {
+public class Thorns extends ThornsInfo implements ISkillInstance, ISkillActive
+{
     private static Random random = new Random();
     private MyPet myPet;
 
-    public Thorns(boolean addedByInheritance) {
+    public Thorns(boolean addedByInheritance)
+    {
         super(addedByInheritance);
     }
 
-    public void setMyPet(MyPet myPet) {
+    public void setMyPet(MyPet myPet)
+    {
         this.myPet = myPet;
     }
 
-    public MyPet getMyPet() {
+    public MyPet getMyPet()
+    {
         return myPet;
     }
 
-    public boolean isActive() {
+    public boolean isActive()
+    {
         return chance > 0;
     }
 
-    public void upgrade(ISkillInfo upgrade, boolean quiet) {
-        if (upgrade instanceof ThornsInfo) {
-            if (upgrade.getProperties().getValue().containsKey("chance")) {
-                if (!upgrade.getProperties().getValue().containsKey("addset_chance") || ((StringTag) upgrade.getProperties().getValue().get("addset_chance")).getValue().equals("add")) {
+    public void upgrade(ISkillInfo upgrade, boolean quiet)
+    {
+        if (upgrade instanceof ThornsInfo)
+        {
+            if (upgrade.getProperties().getValue().containsKey("chance"))
+            {
+                if (!upgrade.getProperties().getValue().containsKey("addset_chance") || ((StringTag) upgrade.getProperties().getValue().get("addset_chance")).getValue().equals("add"))
+                {
                     chance += ((IntTag) upgrade.getProperties().getValue().get("chance")).getValue();
-                } else {
+                }
+                else
+                {
                     chance = ((IntTag) upgrade.getProperties().getValue().get("chance")).getValue();
                 }
-                if (!upgrade.getProperties().getValue().containsKey("addset_reflection") || ((StringTag) upgrade.getProperties().getValue().get("addset_reflection")).getValue().equals("add")) {
+                if (!upgrade.getProperties().getValue().containsKey("addset_reflection") || ((StringTag) upgrade.getProperties().getValue().get("addset_reflection")).getValue().equals("add"))
+                {
                     reflectedDamagePercent += ((IntTag) upgrade.getProperties().getValue().get("reflection")).getValue();
-                } else {
+                }
+                else
+                {
                     reflectedDamagePercent = ((IntTag) upgrade.getProperties().getValue().get("reflection")).getValue();
                 }
                 reflectedDamagePercent = Math.min(reflectedDamagePercent, 100);
                 chance = Math.min(chance, 100);
-                if (!quiet) {
+                if (!quiet)
+                {
                     myPet.sendMessageToOwner(Util.formatText(Locales.getString("Message.Skill.Thorns.Upgrade", myPet.getOwner().getLanguage()), myPet.getPetName(), chance, reflectedDamagePercent));
                 }
             }
         }
     }
 
-    public String getFormattedValue() {
+    public String getFormattedValue()
+    {
         return chance + "% -> " + reflectedDamagePercent + "% " + Locales.getString("Name.Damage", myPet.getOwner().getLanguage());
     }
 
-    public void reset() {
+    public void reset()
+    {
         chance = 0;
         reflectedDamagePercent = 0;
     }
 
-    public boolean activate() {
+    public boolean activate()
+    {
         return random.nextDouble() < chance / 100.;
     }
 
-    public double getReflectedDamage(double damage) {
+    public double getReflectedDamage(double damage)
+    {
         return damage * reflectedDamagePercent / 100.;
     }
 
-    public void reflectDamage(LivingEntity damager, double damage) {
+    public void reflectDamage(LivingEntity damager, double damage)
+    {
         damager.damage(getReflectedDamage(damage), myPet.getCraftPet());
         myPet.getCraftPet().getHandle().makeSound("damage.thorns", 0.5F, 1.0F);
         BukkitUtil.playParticleEffect(myPet.getLocation().add(0, 1, 0), "magicCrit", 0.5F, 0.5F, 0.5F, 0.1F, 20, 20);
@@ -100,7 +120,8 @@ public class Thorns extends ThornsInfo implements ISkillInstance, ISkillActive {
     }
 
     @Override
-    public ISkillInstance cloneSkill() {
+    public ISkillInstance cloneSkill()
+    {
         Thorns newSkill = new Thorns(this.isAddedByInheritance());
         newSkill.setProperties(getProperties());
         return newSkill;
