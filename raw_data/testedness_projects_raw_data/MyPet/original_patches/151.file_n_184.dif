diff --git a/src/main/java/de/Keyle/MyPet/skill/skills/implementation/Wither.java b/src/main/java/de/Keyle/MyPet/skill/skills/implementation/Wither.java
index 607b6eb9..f47d1d88 100644
--- a/src/main/java/de/Keyle/MyPet/skill/skills/implementation/Wither.java
+++ b/src/main/java/de/Keyle/MyPet/skill/skills/implementation/Wither.java
@@ -34,76 +34,98 @@ import org.spout.nbt.StringTag;
 
 import java.util.Random;
 
-public class Wither extends WitherInfo implements ISkillInstance, ISkillActive {
+public class Wither extends WitherInfo implements ISkillInstance, ISkillActive
+{
     private static Random random = new Random();
     private MyPet myPet;
 
-    public Wither(boolean addedByInheritance) {
+    public Wither(boolean addedByInheritance)
+    {
         super(addedByInheritance);
     }
 
-    public void setMyPet(MyPet myPet) {
+    public void setMyPet(MyPet myPet)
+    {
         this.myPet = myPet;
     }
 
-    public MyPet getMyPet() {
+    public MyPet getMyPet()
+    {
         return myPet;
     }
 
-    public boolean isActive() {
+    public boolean isActive()
+    {
         return chance > 0 && duration > 0;
     }
 
-    public void upgrade(ISkillInfo upgrade, boolean quiet) {
-        if (upgrade instanceof WitherInfo) {
+    public void upgrade(ISkillInfo upgrade, boolean quiet)
+    {
+        if (upgrade instanceof WitherInfo)
+        {
             boolean valuesEdit = false;
-            if (upgrade.getProperties().getValue().containsKey("chance")) {
-                if (!upgrade.getProperties().getValue().containsKey("addset_chance") || ((StringTag) upgrade.getProperties().getValue().get("addset_chance")).getValue().equals("add")) {
+            if (upgrade.getProperties().getValue().containsKey("chance"))
+            {
+                if (!upgrade.getProperties().getValue().containsKey("addset_chance") || ((StringTag) upgrade.getProperties().getValue().get("addset_chance")).getValue().equals("add"))
+                {
                     chance += ((IntTag) upgrade.getProperties().getValue().get("chance")).getValue();
-                } else {
+                }
+                else
+                {
                     chance = ((IntTag) upgrade.getProperties().getValue().get("chance")).getValue();
                 }
                 valuesEdit = true;
             }
-            if (upgrade.getProperties().getValue().containsKey("duration")) {
-                if (!upgrade.getProperties().getValue().containsKey("addset_duration") || ((StringTag) upgrade.getProperties().getValue().get("addset_duration")).getValue().equals("add")) {
+            if (upgrade.getProperties().getValue().containsKey("duration"))
+            {
+                if (!upgrade.getProperties().getValue().containsKey("addset_duration") || ((StringTag) upgrade.getProperties().getValue().get("addset_duration")).getValue().equals("add"))
+                {
                     duration += ((IntTag) upgrade.getProperties().getValue().get("duration")).getValue();
-                } else {
+                }
+                else
+                {
                     duration = ((IntTag) upgrade.getProperties().getValue().get("duration")).getValue();
                 }
                 valuesEdit = true;
             }
             chance = Math.min(chance, 100);
-            if (!quiet && valuesEdit) {
+            if (!quiet && valuesEdit)
+            {
                 myPet.sendMessageToOwner(Util.formatText(Locales.getString("Message.Skill.Wither.Upgrade", myPet.getOwner().getLanguage()), myPet.getPetName(), chance, duration));
             }
         }
     }
 
-    public String getFormattedValue() {
+    public String getFormattedValue()
+    {
         return chance + "% -> " + duration + "sec";
     }
 
-    public void reset() {
+    public void reset()
+    {
         chance = 0;
         duration = 0;
     }
 
-    public boolean activate() {
+    public boolean activate()
+    {
         return random.nextDouble() <= chance / 100.;
     }
 
-    public int getDuration() {
+    public int getDuration()
+    {
         return duration;
     }
 
-    public void witherTarget(LivingEntity target) {
+    public void witherTarget(LivingEntity target)
+    {
         PotionEffect effect = new PotionEffect(PotionEffectType.WITHER, getDuration() * 20, 1, false);
         target.addPotionEffect(effect);
     }
 
     @Override
-    public ISkillInstance cloneSkill() {
+    public ISkillInstance cloneSkill()
+    {
         Wither newSkill = new Wither(this.isAddedByInheritance());
         newSkill.setProperties(getProperties());
         return newSkill;
