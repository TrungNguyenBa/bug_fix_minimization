diff --git a/src/main/java/de/Keyle/MyPet/util/Util.java b/src/main/java/de/Keyle/MyPet/util/Util.java
index fb127718..e2f42aa3 100644
--- a/src/main/java/de/Keyle/MyPet/util/Util.java
+++ b/src/main/java/de/Keyle/MyPet/util/Util.java
@@ -30,95 +30,133 @@ import java.io.InputStreamReader;
 import java.lang.reflect.Field;
 import java.net.URL;
 
-public class Util {
-    public static Field getField(Class<?> clazz, String field) {
-        try {
+public class Util
+{
+    public static Field getField(Class<?> clazz, String field)
+    {
+        try
+        {
             Field f = clazz.getDeclaredField(field);
             f.setAccessible(true);
             return f;
-        } catch (Exception ignored) {
+        }
+        catch (Exception ignored)
+        {
             return null;
         }
     }
 
-    public static boolean setFieldValue(Field field, Object object, Object value) {
-        try {
+    public static boolean setFieldValue(Field field, Object object, Object value)
+    {
+        try
+        {
             field.set(object, value);
             return true;
-        } catch (IllegalAccessException e) {
+        }
+        catch (IllegalAccessException e)
+        {
             return false;
         }
     }
 
-    public static boolean isInt(String number) {
-        try {
+    public static boolean isInt(String number)
+    {
+        try
+        {
             Integer.parseInt(number);
             return true;
-        } catch (NumberFormatException nFE) {
+        }
+        catch (NumberFormatException nFE)
+        {
             return false;
         }
     }
 
-    public static boolean isByte(String number) {
-        try {
+    public static boolean isByte(String number)
+    {
+        try
+        {
             Byte.parseByte(number);
             return true;
-        } catch (NumberFormatException nFE) {
+        }
+        catch (NumberFormatException nFE)
+        {
             return false;
         }
     }
 
-    public static boolean isDouble(String number) {
-        try {
+    public static boolean isDouble(String number)
+    {
+        try
+        {
             Double.parseDouble(number);
             return true;
-        } catch (NumberFormatException nFE) {
+        }
+        catch (NumberFormatException nFE)
+        {
             return false;
         }
     }
 
-    public static boolean isLong(String number) {
-        try {
+    public static boolean isLong(String number)
+    {
+        try
+        {
             Long.parseLong(number);
             return true;
-        } catch (NumberFormatException nFE) {
+        }
+        catch (NumberFormatException nFE)
+        {
             return false;
         }
     }
 
-    public static boolean isFloat(String number) {
-        try {
+    public static boolean isFloat(String number)
+    {
+        try
+        {
             Float.parseFloat(number);
             return true;
-        } catch (NumberFormatException nFE) {
+        }
+        catch (NumberFormatException nFE)
+        {
             return false;
         }
     }
 
-    public static boolean isShort(String number) {
-        try {
+    public static boolean isShort(String number)
+    {
+        try
+        {
             Short.parseShort(number);
             return true;
-        } catch (NumberFormatException nFE) {
+        }
+        catch (NumberFormatException nFE)
+        {
             return false;
         }
     }
 
-    public static String cutString(String string, int length) {
-        if (string.length() > length) {
+    public static String cutString(String string, int length)
+    {
+        if (string.length() > length)
+        {
             return string.substring(0, length);
         }
         return string;
     }
 
-    public static String formatText(String text, Object... values) {
-        for (int i = 0; i < values.length; i++) {
+    public static String formatText(String text, Object... values)
+    {
+        for (int i = 0 ; i < values.length ; i++)
+        {
             text = text.replaceAll("\\{" + i + "}", values[i].toString());
         }
         return text;
     }
 
-    public static String capitalizeName(String name) {
+    public static String capitalizeName(String name)
+    {
         Validate.notNull(name, "Name can't be null");
 
         name = name.replace("_", " ");
@@ -127,12 +165,14 @@ public class Util {
         return name;
     }
 
-    public static String readFileAsString(String filePath) throws java.io.IOException {
+    public static String readFileAsString(String filePath) throws java.io.IOException
+    {
         StringBuilder fileData = new StringBuilder(1000);
         BufferedReader reader = new BufferedReader(new FileReader(filePath));
         char[] buf = new char[1024];
         int numRead;
-        while ((numRead = reader.read(buf)) != -1) {
+        while ((numRead = reader.read(buf)) != -1)
+        {
             String readData = String.valueOf(buf, 0, numRead);
             fileData.append(readData);
             buf = new char[1024];
@@ -141,28 +181,38 @@ public class Util {
         return fileData.toString();
     }
 
-    public static String convertStreamToString(java.io.InputStream is) {
+    public static String convertStreamToString(java.io.InputStream is)
+    {
         java.util.Scanner s = new java.util.Scanner(is).useDelimiter("\\A");
         return s.hasNext() ? s.next() : "";
     }
 
-    public static String readUrlContent(String address) throws IOException {
+    public static String readUrlContent(String address) throws IOException
+    {
         StringBuilder contents = new StringBuilder(2048);
         BufferedReader br = null;
 
-        try {
+        try
+        {
             URL url = new URL(address);
             br = new BufferedReader(new InputStreamReader(url.openStream()));
             String line;
-            while ((line = br.readLine()) != null) {
+            while ((line = br.readLine()) != null)
+            {
                 contents.append(line);
             }
-        } finally {
-            try {
-                if (br != null) {
+        }
+        finally
+        {
+            try
+            {
+                if (br != null)
+                {
                     br.close();
                 }
-            } catch (Exception e) {
+            }
+            catch (Exception e)
+            {
                 e.printStackTrace();
             }
         }
