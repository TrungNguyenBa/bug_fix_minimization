diff --git a/src/main/java/de/Keyle/MyPet/util/itemstringinterpreter/ItemStringInterpreter.java b/src/main/java/de/Keyle/MyPet/util/itemstringinterpreter/ItemStringInterpreter.java
index 13350355..823dc7fb 100644
--- a/src/main/java/de/Keyle/MyPet/util/itemstringinterpreter/ItemStringInterpreter.java
+++ b/src/main/java/de/Keyle/MyPet/util/itemstringinterpreter/ItemStringInterpreter.java
@@ -27,71 +27,96 @@ import java.util.Stack;
 /**
  * This class is part of Minecraft 1.7 and will be removed with Minecraft 1.7
  */
-public class ItemStringInterpreter {
-    public static NBTBase convertString(String data) throws Exception {
+public class ItemStringInterpreter
+{
+    public static NBTBase convertString(String data) throws Exception
+    {
         data = data.trim();
         int i = countTags(data);
-        if (i != 1) {
+        if (i != 1)
+        {
             throw new Exception("Encountered multiple top tags, only one expected");
         }
 
         NBTHolder holder;
-        if (data.startsWith("{")) {
+        if (data.startsWith("{"))
+        {
             holder = getTag("", data);
-        } else {
+        }
+        else
+        {
             holder = getTag(b(data, false), c(data, false));
         }
 
         return holder.getNBT();
     }
 
-    static int countTags(String paramString) throws Exception {
+    static int countTags(String paramString) throws Exception
+    {
         int i = 0;
         int j = 0;
         Stack<Character> localStack = new Stack<Character>();
 
         int k = 0;
-        while (k < paramString.length()) {
+        while (k < paramString.length())
+        {
             char c = paramString.charAt(k);
-            if (c == '"') {
-                if ((k > 0) && (paramString.charAt(k - 1) == '\\')) {
-                    if (j == 0) {
+            if (c == '"')
+            {
+                if ((k > 0) && (paramString.charAt(k - 1) == '\\'))
+                {
+                    if (j == 0)
+                    {
                         throw new Exception("Illegal use of \\\": " + paramString);
                     }
-                } else {
+                }
+                else
+                {
                     j = j == 0 ? 1 : 0;
                 }
-            } else if (j == 0) {
-                if ((c == '{') || (c == '[')) {
-                    if (localStack.isEmpty()) {
+            }
+            else if (j == 0)
+            {
+                if ((c == '{') || (c == '['))
+                {
+                    if (localStack.isEmpty())
+                    {
                         i++;
                     }
                     localStack.push(c);
-                } else {
-                    if ((c == '}') && ((localStack.isEmpty()) || (localStack.pop() != '{'))) {
+                }
+                else
+                {
+                    if ((c == '}') && ((localStack.isEmpty()) || (localStack.pop() != '{')))
+                    {
                         throw new Exception("Unbalanced curly brackets {}: " + paramString);
                     }
-                    if ((c == ']') && ((localStack.isEmpty()) || (localStack.pop() != '['))) {
+                    if ((c == ']') && ((localStack.isEmpty()) || (localStack.pop() != '[')))
+                    {
                         throw new Exception("Unbalanced square brackets []: " + paramString);
                     }
                 }
             }
             k++;
         }
-        if (j != 0) {
+        if (j != 0)
+        {
             throw new Exception("Unbalanced quotation: " + paramString);
         }
-        if (!localStack.isEmpty()) {
+        if (!localStack.isEmpty())
+        {
             throw new Exception("Unbalanced brackets: " + paramString);
         }
 
-        if ((i == 0) && (!paramString.isEmpty())) {
+        if ((i == 0) && (!paramString.isEmpty()))
+        {
             return 1;
         }
         return i;
     }
 
-    static NBTHolder getTag(String tagName, String nbtString) throws Exception {
+    static NBTHolder getTag(String tagName, String nbtString) throws Exception
+    {
         nbtString = nbtString.trim();
         countTags(nbtString);
         NBTHolder nbtHolder;
@@ -99,26 +124,32 @@ public class ItemStringInterpreter {
         String str2;
         String str3;
         char currentCharacter;
-        if (nbtString.startsWith("{")) {
-            if (!nbtString.endsWith("}")) {
+        if (nbtString.startsWith("{"))
+        {
+            if (!nbtString.endsWith("}"))
+            {
                 throw new Exception("Unable to locate ending bracket for: " + nbtString);
             }
 
             nbtString = nbtString.substring(1, nbtString.length() - 1);
 
             nbtHolder = new NBTTagCompoundHolder(tagName);
-            while (nbtString.length() > 0) {
+            while (nbtString.length() > 0)
+            {
                 str1 = a(nbtString, false);
-                if (str1.length() > 0) {
+                if (str1.length() > 0)
+                {
                     str2 = b(str1, false);
                     str3 = c(str1, false);
                     ((NBTTagCompoundHolder) nbtHolder).holderList.add(getTag(str2, str3));
 
-                    if (nbtString.length() < str1.length() + 1) {
+                    if (nbtString.length() < str1.length() + 1)
+                    {
                         break;
                     }
                     currentCharacter = nbtString.charAt(str1.length());
-                    if ((currentCharacter != ',') && (currentCharacter != '{') && (currentCharacter != '}') && (currentCharacter != '[') && (currentCharacter != ']')) {
+                    if ((currentCharacter != ',') && (currentCharacter != '{') && (currentCharacter != '}') && (currentCharacter != '[') && (currentCharacter != ']'))
+                    {
                         throw new Exception("Unexpected token '" + currentCharacter + "' at: " + nbtString.substring(str1.length()));
                     }
                     nbtString = nbtString.substring(str1.length() + 1);
@@ -128,30 +159,38 @@ public class ItemStringInterpreter {
 
             return nbtHolder;
         }
-        if ((nbtString.startsWith("[")) && (!nbtString.matches("\\[[-\\d|,\\s]+\\]"))) {
-            if (!nbtString.endsWith("]")) {
+        if ((nbtString.startsWith("[")) && (!nbtString.matches("\\[[-\\d|,\\s]+\\]")))
+        {
+            if (!nbtString.endsWith("]"))
+            {
                 throw new Exception("Unable to locate ending bracket for: " + nbtString);
             }
 
             nbtString = nbtString.substring(1, nbtString.length() - 1);
 
             nbtHolder = new NBTTagListHolder(tagName);
-            while (nbtString.length() > 0) {
+            while (nbtString.length() > 0)
+            {
                 str1 = a(nbtString, true);
-                if (str1.length() > 0) {
+                if (str1.length() > 0)
+                {
                     str2 = b(str1, true);
                     str3 = c(str1, true);
                     ((NBTTagListHolder) nbtHolder).holderList.add(getTag(str2, str3));
 
-                    if (nbtString.length() < str1.length() + 1) {
+                    if (nbtString.length() < str1.length() + 1)
+                    {
                         break;
                     }
                     currentCharacter = nbtString.charAt(str1.length());
-                    if ((currentCharacter != ',') && (currentCharacter != '{') && (currentCharacter != '}') && (currentCharacter != '[') && (currentCharacter != ']')) {
+                    if ((currentCharacter != ',') && (currentCharacter != '{') && (currentCharacter != '}') && (currentCharacter != '[') && (currentCharacter != ']'))
+                    {
                         throw new Exception("Unexpected token '" + currentCharacter + "' at: " + nbtString.substring(str1.length()));
                     }
                     nbtString = nbtString.substring(str1.length() + 1);
-                } else {
+                }
+                else
+                {
                     System.out.println(nbtString);
                 }
             }
@@ -161,16 +200,20 @@ public class ItemStringInterpreter {
         return new NBTTagHolder(tagName, nbtString);
     }
 
-    private static String a(String paramString, boolean paramBoolean) throws Exception {
+    private static String a(String paramString, boolean paramBoolean) throws Exception
+    {
         int i = a(paramString, ':');
-        if ((i < 0) && (!paramBoolean)) {
+        if ((i < 0) && (!paramBoolean))
+        {
             throw new Exception("Unable to locate name/value separator for string: " + paramString);
         }
         int j = a(paramString, ',');
-        if ((j >= 0) && (j < i) && (!paramBoolean)) {
+        if ((j >= 0) && (j < i) && (!paramBoolean))
+        {
             throw new Exception("Name error at: " + paramString);
         }
-        if ((paramBoolean) && ((i < 0) || (i > j))) {
+        if ((paramBoolean) && ((i < 0) || (i > j)))
+        {
             i = -1;
         }
 
@@ -181,41 +224,59 @@ public class ItemStringInterpreter {
         int i1 = 0;
         int i2 = 0;
 
-        while (k < paramString.length()) {
+        while (k < paramString.length())
+        {
             char c = paramString.charAt(k);
 
-            if (c == '"') {
-                if ((k > 0) && (paramString.charAt(k - 1) == '\\')) {
-                    if (m == 0) {
+            if (c == '"')
+            {
+                if ((k > 0) && (paramString.charAt(k - 1) == '\\'))
+                {
+                    if (m == 0)
+                    {
                         throw new Exception("Illegal use of \\\": " + paramString);
                     }
-                } else {
+                }
+                else
+                {
                     m = m == 0 ? 1 : 0;
-                    if ((m != 0) && (i1 == 0)) {
+                    if ((m != 0) && (i1 == 0))
+                    {
                         n = 1;
                     }
-                    if (m == 0) {
+                    if (m == 0)
+                    {
                         i2 = k;
                     }
                 }
-            } else if (m == 0) {
-                if ((c == '{') || (c == '[')) {
+            }
+            else if (m == 0)
+            {
+                if ((c == '{') || (c == '['))
+                {
                     localStack.push(c);
-                } else {
-                    if ((c == '}') && ((localStack.isEmpty()) || (localStack.pop() != '{'))) {
+                }
+                else
+                {
+                    if ((c == '}') && ((localStack.isEmpty()) || (localStack.pop() != '{')))
+                    {
                         throw new Exception("Unbalanced curly brackets {}: " + paramString);
                     }
-                    if ((c == ']') && ((localStack.isEmpty()) || (localStack.pop() != '['))) {
+                    if ((c == ']') && ((localStack.isEmpty()) || (localStack.pop() != '[')))
+                    {
                         throw new Exception("Unbalanced square brackets []: " + paramString);
                     }
                     if ((c == ',') &&
-                            (localStack.isEmpty())) {
+                            (localStack.isEmpty()))
+                    {
                         return paramString.substring(0, k);
                     }
                 }
             }
-            if (!Character.isWhitespace(c)) {
-                if ((m == 0) && (n != 0) && (i2 != k)) {
+            if (!Character.isWhitespace(c))
+            {
+                if ((m == 0) && (n != 0) && (i2 != k))
+                {
                     return paramString.substring(0, i2 + 1);
                 }
                 i1 = 1;
@@ -227,17 +288,22 @@ public class ItemStringInterpreter {
         return paramString.substring(0, k);
     }
 
-    private static String b(String paramString, boolean paramBoolean) throws Exception {
-        if (paramBoolean) {
+    private static String b(String paramString, boolean paramBoolean) throws Exception
+    {
+        if (paramBoolean)
+        {
             paramString = paramString.trim();
-            if ((paramString.startsWith("{")) || (paramString.startsWith("["))) {
+            if ((paramString.startsWith("{")) || (paramString.startsWith("[")))
+            {
                 return "";
             }
         }
 
         int i = paramString.indexOf(':');
-        if (i < 0) {
-            if (paramBoolean) {
+        if (i < 0)
+        {
+            if (paramBoolean)
+            {
                 return "";
             }
             throw new Exception("Unable to locate name/value separator for string: " + paramString);
@@ -245,17 +311,22 @@ public class ItemStringInterpreter {
         return paramString.substring(0, i).trim();
     }
 
-    private static String c(String paramString, boolean paramBoolean) throws Exception {
-        if (paramBoolean) {
+    private static String c(String paramString, boolean paramBoolean) throws Exception
+    {
+        if (paramBoolean)
+        {
             paramString = paramString.trim();
-            if ((paramString.startsWith("{")) || (paramString.startsWith("["))) {
+            if ((paramString.startsWith("{")) || (paramString.startsWith("[")))
+            {
                 return paramString;
             }
         }
 
         int i = paramString.indexOf(':');
-        if (i < 0) {
-            if (paramBoolean) {
+        if (i < 0)
+        {
+            if (paramBoolean)
+            {
                 return paramString;
             }
             throw new Exception("Unable to locate name/value separator for string: " + paramString);
@@ -263,20 +334,28 @@ public class ItemStringInterpreter {
         return paramString.substring(i + 1).trim();
     }
 
-    private static int a(String paramString, char paramChar) {
+    private static int a(String paramString, char paramChar)
+    {
         int i = 0;
         int j = 0;
-        while (i < paramString.length()) {
+        while (i < paramString.length())
+        {
             char c = paramString.charAt(i);
-            if (c == '"') {
-                if ((i <= 0) || (paramString.charAt(i - 1) != '\\')) {
+            if (c == '"')
+            {
+                if ((i <= 0) || (paramString.charAt(i - 1) != '\\'))
+                {
                     j = j == 0 ? 1 : 0;
                 }
-            } else if (j == 0) {
-                if (c == paramChar) {
+            }
+            else if (j == 0)
+            {
+                if (c == paramChar)
+                {
                     return i;
                 }
-                if ((c == '{') || (c == '[')) {
+                if ((c == '{') || (c == '['))
+                {
                     return -1;
                 }
             }
