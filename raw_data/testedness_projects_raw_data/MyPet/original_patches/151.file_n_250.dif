diff --git a/src/main/java/de/Keyle/MyPet/util/itemstringinterpreter/NBTTagHolder.java b/src/main/java/de/Keyle/MyPet/util/itemstringinterpreter/NBTTagHolder.java
index 0eccdfc2..ccaa0ffc 100644
--- a/src/main/java/de/Keyle/MyPet/util/itemstringinterpreter/NBTTagHolder.java
+++ b/src/main/java/de/Keyle/MyPet/util/itemstringinterpreter/NBTTagHolder.java
@@ -25,69 +25,91 @@ import net.minecraft.server.v1_6_R2.*;
 /**
  * This class will be removed with Minecraft 1.7
  */
-public class NBTTagHolder extends NBTHolder {
+public class NBTTagHolder extends NBTHolder
+{
     protected String data;
 
-    public NBTTagHolder(String name, String data) {
+    public NBTTagHolder(String name, String data)
+    {
         this.name = name;
         this.data = data;
     }
 
     @Override
-    public NBTBase getNBT() {
-        try {
-            if (this.data.matches("[-+]?[0-9]*\\.?[0-9]+[d|D]")) {
+    public NBTBase getNBT()
+    {
+        try
+        {
+            if (this.data.matches("[-+]?[0-9]*\\.?[0-9]+[d|D]"))
+            {
                 return new NBTTagDouble(this.name, Double.parseDouble(this.data.substring(0, this.data.length() - 1)));
             }
-            if (this.data.matches("[-+]?[0-9]*\\.?[0-9]+[f|F]")) {
+            if (this.data.matches("[-+]?[0-9]*\\.?[0-9]+[f|F]"))
+            {
                 return new NBTTagFloat(this.name, Float.parseFloat(this.data.substring(0, this.data.length() - 1)));
             }
-            if (this.data.matches("[-+]?[0-9]+[b|B]")) {
+            if (this.data.matches("[-+]?[0-9]+[b|B]"))
+            {
                 return new NBTTagByte(this.name, Byte.parseByte(this.data.substring(0, this.data.length() - 1)));
             }
-            if (this.data.matches("[-+]?[0-9]+[l|L]")) {
+            if (this.data.matches("[-+]?[0-9]+[l|L]"))
+            {
                 return new NBTTagLong(this.name, Long.parseLong(this.data.substring(0, this.data.length() - 1)));
             }
-            if (this.data.matches("[-+]?[0-9]+[s|S]")) {
+            if (this.data.matches("[-+]?[0-9]+[s|S]"))
+            {
                 return new NBTTagShort(this.name, Short.parseShort(this.data.substring(0, this.data.length() - 1)));
             }
-            if (this.data.matches("[-+]?[0-9]+")) {
+            if (this.data.matches("[-+]?[0-9]+"))
+            {
                 return new NBTTagInt(this.name, Integer.parseInt(this.data.substring(0, this.data.length())));
             }
-            if (this.data.matches("[-+]?[0-9]*\\.?[0-9]+")) {
+            if (this.data.matches("[-+]?[0-9]*\\.?[0-9]+"))
+            {
                 return new NBTTagDouble(this.name, Double.parseDouble(this.data.substring(0, this.data.length())));
             }
-            if ((this.data.equalsIgnoreCase("true")) || (this.data.equalsIgnoreCase("false"))) {
+            if ((this.data.equalsIgnoreCase("true")) || (this.data.equalsIgnoreCase("false")))
+            {
                 return new NBTTagByte(this.name, (byte) (Boolean.parseBoolean(this.data) ? 1 : 0));
             }
-            if ((this.data.startsWith("[")) && (this.data.endsWith("]"))) {
-                if (this.data.length() > 2) {
+            if ((this.data.startsWith("[")) && (this.data.endsWith("]")))
+            {
+                if (this.data.length() > 2)
+                {
                     String str = this.data.substring(1, this.data.length() - 1);
                     String[] arrayOfString = str.split(",");
-                    try {
-                        if (arrayOfString.length <= 1) {
+                    try
+                    {
+                        if (arrayOfString.length <= 1)
+                        {
                             return new NBTTagIntArray(this.name, new int[]{Integer.parseInt(str.trim())});
                         }
 
                         int[] arrayOfInt = new int[arrayOfString.length];
-                        for (int i = 0; i < arrayOfString.length; i++) {
+                        for (int i = 0 ; i < arrayOfString.length ; i++)
+                        {
                             arrayOfInt[i] = Integer.parseInt(arrayOfString[i].trim());
                         }
                         return new NBTTagIntArray(this.name, arrayOfInt);
-                    } catch (NumberFormatException localNumberFormatException2) {
+                    }
+                    catch (NumberFormatException localNumberFormatException2)
+                    {
                         return new NBTTagString(this.name, this.data);
                     }
                 }
                 return new NBTTagIntArray(this.name);
             }
 
-            if ((this.data.startsWith("\"")) && (this.data.endsWith("\"")) && (this.data.length() > 2)) {
+            if ((this.data.startsWith("\"")) && (this.data.endsWith("\"")) && (this.data.length() > 2))
+            {
                 this.data = this.data.substring(1, this.data.length() - 1);
             }
 
             this.data = this.data.replaceAll("\\\\\"", "\"");
             return new NBTTagString(this.name, this.data);
-        } catch (NumberFormatException localNumberFormatException1) {
+        }
+        catch (NumberFormatException localNumberFormatException1)
+        {
             this.data = this.data.replaceAll("\\\\\"", "\"");
         }
         return new NBTTagString(this.name, this.data);
