diff --git a/src/main/java/de/Keyle/MyPet/entity/types/MyPet.java b/src/main/java/de/Keyle/MyPet/entity/types/MyPet.java
index 16539fb4..951b817d 100644
--- a/src/main/java/de/Keyle/MyPet/entity/types/MyPet.java
+++ b/src/main/java/de/Keyle/MyPet/entity/types/MyPet.java
@@ -48,7 +48,8 @@ import java.util.*;
 
 import static org.bukkit.Bukkit.getServer;
 
-public abstract class MyPet implements IMyPet, NBTStorage {
+public abstract class MyPet implements IMyPet, NBTStorage
+{
     private static Map<Class<? extends MyPet>, Double> startHP = new HashMap<Class<? extends MyPet>, Double>();
     private static Map<Class<? extends MyPet>, Double> startSpeed = new HashMap<Class<? extends MyPet>, Double>();
     private static ArrayListMultimap<Class<? extends MyPet>, ConfigItem> food = ArrayListMultimap.create();
@@ -72,12 +73,16 @@ public abstract class MyPet implements IMyPet, NBTStorage {
     protected Experience experience;
     protected long lastUsed = -1;
 
-    public static enum LeashFlag {
+    public static enum LeashFlag
+    {
         Baby, Adult, LowHp, Tamed, UserCreated, Wild, CanBreed, Angry, None, Impossible;
 
-        public static LeashFlag getLeashFlagByName(String name) {
-            for (LeashFlag leashFlags : LeashFlag.values()) {
-                if (leashFlags.name().equalsIgnoreCase(name)) {
+        public static LeashFlag getLeashFlagByName(String name)
+        {
+            for (LeashFlag leashFlags : LeashFlag.values())
+            {
+                if (leashFlags.name().equalsIgnoreCase(name))
+                {
                     return leashFlags;
                 }
             }
@@ -85,15 +90,18 @@ public abstract class MyPet implements IMyPet, NBTStorage {
         }
     }
 
-    public static enum SpawnFlags {
+    public static enum SpawnFlags
+    {
         Success, NoSpace, AlreadyHere, Dead, Canceled, NotAllowed
     }
 
-    public static enum PetState {
+    public static enum PetState
+    {
         Dead, Despawned, Here
     }
 
-    protected MyPet(MyPetPlayer Owner) {
+    protected MyPet(MyPetPlayer Owner)
+    {
         this.petOwner = Owner;
         skills = new Skills(this);
         experience = new Experience(this);
@@ -101,19 +109,29 @@ public abstract class MyPet implements IMyPet, NBTStorage {
         petName = Locales.getString("Name." + getPetType().getTypeName(), petOwner);
     }
 
-    public boolean autoAssignSkilltree() {
-        if (skillTree == null && this.petOwner.isOnline()) {
-            if (Configuration.AUTOMATIC_SKILLTREE_ASSIGNMENT) {
-                if (SkillTreeMobType.getSkillTreeNames(this.getPetType()).size() > 0) {
-                    for (SkillTree skillTree : SkillTreeMobType.getSkillTrees(this.getPetType())) {
-                        if (Permissions.has(this.petOwner.getPlayer(), "MyPet.custom.skilltree." + skillTree.getPermission())) {
+    public boolean autoAssignSkilltree()
+    {
+        if (skillTree == null && this.petOwner.isOnline())
+        {
+            if (Configuration.AUTOMATIC_SKILLTREE_ASSIGNMENT)
+            {
+                if (SkillTreeMobType.getSkillTreeNames(this.getPetType()).size() > 0)
+                {
+                    for (SkillTree skillTree : SkillTreeMobType.getSkillTrees(this.getPetType()))
+                    {
+                        if (Permissions.has(this.petOwner.getPlayer(), "MyPet.custom.skilltree." + skillTree.getPermission()))
+                        {
                             return setSkilltree(skillTree);
                         }
                     }
                 }
-            } else {
-                for (SkillTree skillTree : SkillTreeMobType.getSkillTrees(this.getPetType())) {
-                    if (Permissions.has(this.petOwner.getPlayer(), "MyPet.custom.skilltree." + skillTree.getPermission())) {
+            }
+            else
+            {
+                for (SkillTree skillTree : SkillTreeMobType.getSkillTrees(this.getPetType()))
+                {
+                    if (Permissions.has(this.petOwner.getPlayer(), "MyPet.custom.skilltree." + skillTree.getPermission()))
+                    {
                         sendMessageToOwner(Util.formatText(Locales.getString("Message.Skilltree.SelectionPrompt", getOwner()), getPetName()));
                         break;
                     }
@@ -124,54 +142,66 @@ public abstract class MyPet implements IMyPet, NBTStorage {
         return true;
     }
 
-    public SpawnFlags createPet() {
+    public SpawnFlags createPet()
+    {
         lastUsed = System.currentTimeMillis();
-        if (status != PetState.Here && getOwner().isOnline()) {
-            if (respawnTime <= 0) {
+        if (status != PetState.Here && getOwner().isOnline())
+        {
+            if (respawnTime <= 0)
+            {
                 Location loc = petOwner.getPlayer().getLocation();
                 net.minecraft.server.v1_6_R2.World mcWorld = ((CraftWorld) loc.getWorld()).getHandle();
                 EntityMyPet petEntity = getPetType().getNewEntityInstance(mcWorld, this);
                 craftMyPet = (CraftMyPet) petEntity.getBukkitEntity();
-                if (getYSpawnOffset() > 0) {
+                if (getYSpawnOffset() > 0)
+                {
                     loc = loc.add(0, getYSpawnOffset(), 0);
                 }
                 loc.setPitch(0);
                 loc.setYaw(0);
                 petEntity.setLocation(loc);
-                if (!BukkitUtil.canSpawn(loc, petEntity)) {
+                if (!BukkitUtil.canSpawn(loc, petEntity))
+                {
                     status = PetState.Despawned;
                     return SpawnFlags.NoSpace;
                 }
 
-                if (Minigames.DISABLE_PETS_IN_MINIGAMES && Minigames.isInMinigame(getOwner())) {
+                if (Minigames.DISABLE_PETS_IN_MINIGAMES && Minigames.isInMinigame(getOwner()))
+                {
                     status = PetState.Despawned;
                     return SpawnFlags.NotAllowed;
                 }
-                if (PvPArena.DISABLE_PETS_IN_ARENA && PvPArena.isInPvPArena(getOwner())) {
+                if (PvPArena.DISABLE_PETS_IN_ARENA && PvPArena.isInPvPArena(getOwner()))
+                {
                     status = PetState.Despawned;
                     return SpawnFlags.NotAllowed;
                 }
-                if (MobArena.DISABLE_PETS_IN_ARENA && MobArena.isInMobArena(getOwner())) {
+                if (MobArena.DISABLE_PETS_IN_ARENA && MobArena.isInMobArena(getOwner()))
+                {
                     status = PetState.Despawned;
                     return SpawnFlags.NotAllowed;
                 }
-                if (BattleArena.DISABLE_PETS_IN_ARENA && BattleArena.isInBattleArena(getOwner())) {
+                if (BattleArena.DISABLE_PETS_IN_ARENA && BattleArena.isInBattleArena(getOwner()))
+                {
                     status = PetState.Despawned;
                     return SpawnFlags.NotAllowed;
                 }
-                if (SurvivalGames.DISABLE_PETS_IN_SURVIVAL_GAMES && SurvivalGames.isInSurvivalGames(getOwner())) {
+                if (SurvivalGames.DISABLE_PETS_IN_SURVIVAL_GAMES && SurvivalGames.isInSurvivalGames(getOwner()))
+                {
                     status = PetState.Despawned;
                     return SpawnFlags.NotAllowed;
                 }
 
-                if (!mcWorld.addEntity(petEntity, CreatureSpawnEvent.SpawnReason.CUSTOM)) {
+                if (!mcWorld.addEntity(petEntity, CreatureSpawnEvent.SpawnReason.CUSTOM))
+                {
                     status = PetState.Despawned;
                     return SpawnFlags.Canceled;
                 }
                 craftMyPet.setMetadata("MyPet", new FixedMetadataValue(MyPetPlugin.getPlugin(), this));
                 status = PetState.Here;
 
-                if (worldGroup == null || worldGroup.equals("")) {
+                if (worldGroup == null || worldGroup.equals(""))
+                {
                     setWorldGroup(WorldGroup.getGroupByWorld(craftMyPet.getWorld().getName()).getName());
                 }
 
@@ -180,141 +210,192 @@ public abstract class MyPet implements IMyPet, NBTStorage {
                 return SpawnFlags.Success;
             }
         }
-        if (status == PetState.Dead) {
+        if (status == PetState.Dead)
+        {
             return SpawnFlags.Dead;
-        } else {
+        }
+        else
+        {
             return SpawnFlags.AlreadyHere;
         }
     }
 
-    public CraftMyPet getCraftPet() {
+    public CraftMyPet getCraftPet()
+    {
         getStatus();
         return craftMyPet;
     }
 
-    public static int getCustomRespawnTimeFactor(Class<? extends MyPet> myPetClass) {
-        if (customRespawnTimeFactor.containsKey(myPetClass)) {
+    public static int getCustomRespawnTimeFactor(Class<? extends MyPet> myPetClass)
+    {
+        if (customRespawnTimeFactor.containsKey(myPetClass))
+        {
             return customRespawnTimeFactor.get(myPetClass);
         }
         return 0;
     }
 
-    public static int getCustomRespawnTimeFixed(Class<? extends MyPet> myPetClass) {
-        if (customRespawnTimeFixed.containsKey(myPetClass)) {
+    public static int getCustomRespawnTimeFixed(Class<? extends MyPet> myPetClass)
+    {
+        if (customRespawnTimeFixed.containsKey(myPetClass))
+        {
             return customRespawnTimeFixed.get(myPetClass);
         }
         return 0;
     }
 
-    public double getDamage() {
+    public double getDamage()
+    {
         return getSkills().hasSkill(Damage.class) ? getSkills().getSkill(Damage.class).getDamage() : 0;
     }
 
-    public static float[] getEntitySize(Class<? extends EntityMyPet> entityMyPetClass) {
+    public static float[] getEntitySize(Class<? extends EntityMyPet> entityMyPetClass)
+    {
         EntitySize es = entityMyPetClass.getAnnotation(EntitySize.class);
-        if (es != null) {
+        if (es != null)
+        {
             return new float[]{es.height(), es.width()};
         }
         return new float[]{0, 0};
     }
 
-    public double getExp() {
+    public double getExp()
+    {
         return getExperience().getExp();
     }
 
-    public Experience getExperience() {
+    public Experience getExperience()
+    {
         return experience;
     }
 
-    public CompoundTag getExtendedInfo() {
+    public CompoundTag getExtendedInfo()
+    {
         return new CompoundTag("Info", new CompoundMap());
     }
 
-    public void setExtendedInfo(CompoundTag info) {
+    public void setExtendedInfo(CompoundTag info)
+    {
     }
 
-    public static List<ConfigItem> getFood(Class<? extends MyPet> myPetClass) {
+    public static List<ConfigItem> getFood(Class<? extends MyPet> myPetClass)
+    {
         return food.get(myPetClass);
     }
 
-    public double getHealth() {
-        if (status == PetState.Here) {
+    public double getHealth()
+    {
+        if (status == PetState.Here)
+        {
             return craftMyPet.getHealth();
-        } else {
+        }
+        else
+        {
             return health;
         }
     }
 
-    public void setHealth(double d) {
-        if (d > getMaxHealth()) {
+    public void setHealth(double d)
+    {
+        if (d > getMaxHealth())
+        {
             health = getMaxHealth();
-        } else {
+        }
+        else
+        {
             health = d;
         }
-        if (status == PetState.Here) {
+        if (status == PetState.Here)
+        {
             craftMyPet.setHealth(health);
         }
     }
 
-    public int getHungerValue() {
-        if (Configuration.USE_HUNGER_SYSTEM) {
+    public int getHungerValue()
+    {
+        if (Configuration.USE_HUNGER_SYSTEM)
+        {
             return hunger;
-        } else {
+        }
+        else
+        {
             return 100;
         }
     }
 
-    public void setHungerValue(int value) {
-        if (value > 100) {
+    public void setHungerValue(int value)
+    {
+        if (value > 100)
+        {
             hunger = 100;
-        } else if (value < 1) {
+        }
+        else if (value < 1)
+        {
             hunger = 1;
-        } else {
+        }
+        else
+        {
             hunger = value;
         }
         hungerTime = Configuration.HUNGER_SYSTEM_TIME;
     }
 
-    public static List<LeashFlag> getLeashFlags(Class<? extends MyPet> myPetClass) {
+    public static List<LeashFlag> getLeashFlags(Class<? extends MyPet> myPetClass)
+    {
         return leashFlags.get(myPetClass);
     }
 
-    public double getYSpawnOffset() {
+    public double getYSpawnOffset()
+    {
         return 0;
     }
 
-    public Location getLocation() {
-        if (status == PetState.Here) {
+    public Location getLocation()
+    {
+        if (status == PetState.Here)
+        {
             return craftMyPet.getLocation();
-        } else if (petOwner.isOnline()) {
+        }
+        else if (petOwner.isOnline())
+        {
             return petOwner.getPlayer().getLocation();
-        } else {
+        }
+        else
+        {
             return null;
         }
     }
 
-    public void setLocation(Location loc) {
-        if (status == PetState.Here && BukkitUtil.canSpawn(loc, this.craftMyPet.getHandle())) {
+    public void setLocation(Location loc)
+    {
+        if (status == PetState.Here && BukkitUtil.canSpawn(loc, this.craftMyPet.getHandle()))
+        {
             craftMyPet.teleport(loc);
         }
     }
 
-    public double getMaxHealth() {
+    public double getMaxHealth()
+    {
         return getStartHP(this.getClass()) + (skills.isSkillActive(HP.class) ? skills.getSkill(HP.class).getHpIncrease() : 0);
     }
 
-    public MyPetPlayer getOwner() {
+    public MyPetPlayer getOwner()
+    {
         return petOwner;
     }
 
-    public String getPetName() {
+    public String getPetName()
+    {
         return this.petName;
     }
 
-    public void setPetName(String newName) {
+    public void setPetName(String newName)
+    {
         this.petName = newName;
-        if (status == PetState.Here) {
-            if (Configuration.PET_INFO_OVERHEAD_NAME) {
+        if (status == PetState.Here)
+        {
+            if (Configuration.PET_INFO_OVERHEAD_NAME)
+            {
                 getCraftPet().getHandle().setCustomNameVisible(true);
                 getCraftPet().getHandle().setCustomName(Util.cutString(Configuration.PET_INFO_OVERHEAD_PREFIX + petName + Configuration.PET_INFO_OVERHEAD_SUFFIX, 64));
             }
@@ -323,121 +404,160 @@ public abstract class MyPet implements IMyPet, NBTStorage {
 
     public abstract MyPetType getPetType();
 
-    public double getRangedDamage() {
+    public double getRangedDamage()
+    {
         return (getSkills().hasSkill(Ranged.class) ? getSkills().getSkill(Ranged.class).getDamage() : 0);
     }
 
-    public int getRespawnTime() {
+    public int getRespawnTime()
+    {
         return respawnTime;
     }
 
-    public void setRespawnTime(int time) {
+    public void setRespawnTime(int time)
+    {
         respawnTime = time > 0 ? time : 0;
     }
 
-    public SkillTree getSkillTree() {
+    public SkillTree getSkillTree()
+    {
         return skillTree;
     }
 
-    public Skills getSkills() {
+    public Skills getSkills()
+    {
         return skills;
     }
 
-    public static double getStartHP(Class<? extends MyPet> myPetClass) {
-        if (startHP.containsKey(myPetClass)) {
+    public static double getStartHP(Class<? extends MyPet> myPetClass)
+    {
+        if (startHP.containsKey(myPetClass))
+        {
             return startHP.get(myPetClass);
         }
         return 20;
     }
 
-    public static double getStartSpeed(Class<? extends MyPet> myPetClass) {
-        if (startSpeed.containsKey(myPetClass)) {
+    public static double getStartSpeed(Class<? extends MyPet> myPetClass)
+    {
+        if (startSpeed.containsKey(myPetClass))
+        {
             return startSpeed.get(myPetClass);
         }
         return 0.3F;
     }
 
-    public PetState getStatus() {
-        if (status == PetState.Here) {
-            if (craftMyPet == null || craftMyPet.getHandle() == null) {
+    public PetState getStatus()
+    {
+        if (status == PetState.Here)
+        {
+            if (craftMyPet == null || craftMyPet.getHandle() == null)
+            {
                 status = PetState.Despawned;
-            } else if (craftMyPet.getHealth() <= 0 || craftMyPet.isDead()) {
+            }
+            else if (craftMyPet.getHealth() <= 0 || craftMyPet.isDead())
+            {
                 status = PetState.Dead;
             }
         }
         return status;
     }
 
-    public void setStatus(PetState status) {
-        if (status == PetState.Here) {
-            if (this.status == PetState.Dead) {
+    public void setStatus(PetState status)
+    {
+        if (status == PetState.Here)
+        {
+            if (this.status == PetState.Dead)
+            {
                 respawnPet();
-            } else if (this.status == PetState.Despawned) {
+            }
+            else if (this.status == PetState.Despawned)
+            {
                 createPet();
             }
-        } else if (status == PetState.Dead) {
+        }
+        else if (status == PetState.Dead)
+        {
             this.status = PetState.Dead;
-        } else {
-            if (this.status == PetState.Here) {
+        }
+        else
+        {
+            if (this.status == PetState.Here)
+            {
                 removePet();
             }
         }
     }
 
-    public UUID getUUID() {
-        if (this.uuid == null) {
+    public UUID getUUID()
+    {
+        if (this.uuid == null)
+        {
             this.uuid = UUID.randomUUID();
         }
 
         return this.uuid;
     }
 
-    public void setUUID(UUID uuid) {
+    public void setUUID(UUID uuid)
+    {
         this.uuid = uuid;
     }
 
     @Override
-    public long getLastUsed() {
+    public long getLastUsed()
+    {
         return lastUsed;
     }
 
     @Override
-    public String getWorldGroup() {
+    public String getWorldGroup()
+    {
         return this.worldGroup;
     }
 
-    public void setWorldGroup(String worldGroup) {
-        if (worldGroup == null) {
+    public void setWorldGroup(String worldGroup)
+    {
+        if (worldGroup == null)
+        {
             return;
         }
-        if (WorldGroup.getGroupByName(worldGroup) == null) {
+        if (WorldGroup.getGroupByName(worldGroup) == null)
+        {
             worldGroup = "default";
         }
         this.worldGroup = worldGroup;
     }
 
-    public static boolean hasLeashFlag(Class<? extends MyPet> myPetClass, LeashFlag flag) {
+    public static boolean hasLeashFlag(Class<? extends MyPet> myPetClass, LeashFlag flag)
+    {
         return leashFlags.get(myPetClass).contains(flag);
     }
 
-    public boolean hasTarget() {
+    public boolean hasTarget()
+    {
         return this.getStatus() == PetState.Here && craftMyPet.getHandle().getGoalTarget() != null && craftMyPet.getHandle().getGoalTarget().isAlive();
     }
 
-    public boolean isPassiv() {
+    public boolean isPassiv()
+    {
         return getDamage() == 0;
     }
 
     @Override
-    public void load(CompoundTag myPetNBT) {
+    public void load(CompoundTag myPetNBT)
+    {
     }
 
-    public void removePet() {
+    public void removePet()
+    {
         removePet(false);
     }
 
-    public void removePet(boolean wantToRespawn) {
-        if (status == PetState.Here) {
+    public void removePet(boolean wantToRespawn)
+    {
+        if (status == PetState.Here)
+        {
             health = craftMyPet.getHealth();
             status = PetState.Despawned;
             this.wantToRespawn = wantToRespawn;
@@ -446,7 +566,8 @@ public abstract class MyPet implements IMyPet, NBTStorage {
         }
     }
 
-    public static void resetOptions() {
+    public static void resetOptions()
+    {
         customRespawnTimeFactor.clear();
         customRespawnTimeFixed.clear();
         leashFlags.clear();
@@ -455,10 +576,13 @@ public abstract class MyPet implements IMyPet, NBTStorage {
         startHP.clear();
     }
 
-    public void respawnPet() {
-        if (status != PetState.Here && getOwner().isOnline()) {
+    public void respawnPet()
+    {
+        if (status != PetState.Here && getOwner().isOnline())
+        {
             respawnTime = 0;
-            switch (createPet()) {
+            switch (createPet())
+            {
                 case Success:
                     sendMessageToOwner(Util.formatText(Locales.getString("Message.Spawn.Respawn", petOwner.getLanguage()), petName));
                     break;
@@ -469,16 +593,20 @@ public abstract class MyPet implements IMyPet, NBTStorage {
                     sendMessageToOwner(Util.formatText(Locales.getString("Message.Spawn.NoSpace", petOwner.getLanguage()), petName));
                     break;
             }
-            if (Configuration.USE_HUNGER_SYSTEM) {
+            if (Configuration.USE_HUNGER_SYSTEM)
+            {
                 setHealth((int) Math.ceil(getMaxHealth() / 100. * (hunger + 1 - (hunger % 10))));
-            } else {
+            }
+            else
+            {
                 setHealth(getMaxHealth());
             }
         }
     }
 
     @Override
-    public CompoundTag save() {
+    public CompoundTag save()
+    {
         CompoundTag petNBT = new CompoundTag(null, new CompoundMap());
 
         petNBT.getValue().put("UUID", new StringTag("UUID", getUUID().toString()));
@@ -492,17 +620,22 @@ public abstract class MyPet implements IMyPet, NBTStorage {
         petNBT.getValue().put("Exp", new DoubleTag("Exp", this.getExp()));
         petNBT.getValue().put("LastUsed", new LongTag("LastUsed", this.lastUsed));
         petNBT.getValue().put("Info", getExtendedInfo());
-        if (this.skillTree != null) {
+        if (this.skillTree != null)
+        {
             petNBT.getValue().put("Skilltree", new StringTag("Skilltree", skillTree.getName()));
         }
         CompoundTag skillsNBT = new CompoundTag("Skills", new CompoundMap());
         Collection<ISkillInstance> skillList = this.getSkills().getSkills();
-        if (skillList.size() > 0) {
-            for (ISkillInstance skill : skillList) {
-                if (skill instanceof ISkillStorage) {
+        if (skillList.size() > 0)
+        {
+            for (ISkillInstance skill : skillList)
+            {
+                if (skill instanceof ISkillStorage)
+                {
                     ISkillStorage storageSkill = (ISkillStorage) skill;
                     CompoundTag s = storageSkill.save();
-                    if (s != null) {
+                    if (s != null)
+                    {
                         skillsNBT.getValue().put(skill.getName(), s);
                     }
                 }
@@ -513,89 +646,114 @@ public abstract class MyPet implements IMyPet, NBTStorage {
         return petNBT;
     }
 
-    public void scheduleTask() {
-        if (status != PetState.Despawned && getOwner().isOnline()) {
-            for (ISkillInstance skill : skills.getSkills()) {
-                if (skill instanceof IScheduler) {
+    public void scheduleTask()
+    {
+        if (status != PetState.Despawned && getOwner().isOnline())
+        {
+            for (ISkillInstance skill : skills.getSkills())
+            {
+                if (skill instanceof IScheduler)
+                {
                     ((IScheduler) skill).schedule();
                 }
             }
-            if (status == PetState.Dead) {
+            if (status == PetState.Dead)
+            {
                 respawnTime--;
-                if (Economy.canUseEconomy() && getOwner().hasAutoRespawnEnabled() && respawnTime >= getOwner().getAutoRespawnMin() && Permissions.has(getOwner().getPlayer(), "MyPet.user.respawn")) {
+                if (Economy.canUseEconomy() && getOwner().hasAutoRespawnEnabled() && respawnTime >= getOwner().getAutoRespawnMin() && Permissions.has(getOwner().getPlayer(), "MyPet.user.respawn"))
+                {
                     double cost = respawnTime * Configuration.RESPAWN_COSTS_FACTOR + Configuration.RESPAWN_COSTS_FIXED;
-                    if (Economy.canPay(getOwner(), cost)) {
+                    if (Economy.canPay(getOwner(), cost))
+                    {
                         Economy.pay(getOwner(), cost);
                         sendMessageToOwner(Util.formatText(Locales.getString("Message.Command.Respawn.Paid", petOwner.getLanguage()), petName, cost + " " + Economy.getEconomy().currencyNameSingular()));
                         respawnTime = 1;
                     }
                 }
-                if (respawnTime <= 0) {
+                if (respawnTime <= 0)
+                {
                     respawnPet();
                 }
             }
-            if (Configuration.USE_HUNGER_SYSTEM && hunger > 1 && --hungerTime <= 0) {
+            if (Configuration.USE_HUNGER_SYSTEM && hunger > 1 && --hungerTime <= 0)
+            {
                 hunger--;
                 hungerTime = Configuration.HUNGER_SYSTEM_TIME;
             }
         }
     }
 
-    public void sendMessageToOwner(String text) {
-        if (petOwner.isOnline()) {
+    public void sendMessageToOwner(String text)
+    {
+        if (petOwner.isOnline())
+        {
             getOwner().getPlayer().sendMessage(text);
         }
     }
 
-    public static void setCustomRespawnTimeFactor(Class<? extends MyPet> myPetClass, int factor) {
+    public static void setCustomRespawnTimeFactor(Class<? extends MyPet> myPetClass, int factor)
+    {
         customRespawnTimeFactor.put(myPetClass, factor);
     }
 
-    public static void setCustomRespawnTimeFixed(Class<? extends MyPet> myPetClass, int factor) {
+    public static void setCustomRespawnTimeFixed(Class<? extends MyPet> myPetClass, int factor)
+    {
         customRespawnTimeFixed.put(myPetClass, factor);
     }
 
-    public static void setFood(Class<? extends MyPet> myPetClass, ConfigItem foodToAdd) {
-        for (ConfigItem configItem : food.get(myPetClass)) {
-            if (configItem.compare(foodToAdd.getItem())) {
+    public static void setFood(Class<? extends MyPet> myPetClass, ConfigItem foodToAdd)
+    {
+        for (ConfigItem configItem : food.get(myPetClass))
+        {
+            if (configItem.compare(foodToAdd.getItem()))
+            {
                 return;
             }
         }
         food.put(myPetClass, foodToAdd);
     }
 
-    public static void setLeashFlags(Class<? extends MyPet> myPetClass, LeashFlag leashFlagToAdd) {
-        if (!leashFlags.get(myPetClass).contains(leashFlagToAdd)) {
+    public static void setLeashFlags(Class<? extends MyPet> myPetClass, LeashFlag leashFlagToAdd)
+    {
+        if (!leashFlags.get(myPetClass).contains(leashFlagToAdd))
+        {
             leashFlags.put(myPetClass, leashFlagToAdd);
         }
     }
 
-    public boolean setSkilltree(SkillTree skillTree) {
-        if (skillTree == null || this.skillTree == skillTree) {
+    public boolean setSkilltree(SkillTree skillTree)
+    {
+        if (skillTree == null || this.skillTree == skillTree)
+        {
             return false;
         }
         skills.reset();
         this.skillTree = skillTree;
-        for (int i = 1; i <= experience.getLevel(); i++) {
+        for (int i = 1 ; i <= experience.getLevel() ; i++)
+        {
             getServer().getPluginManager().callEvent(new MyPetLevelUpEvent(this, i, true));
         }
         return true;
     }
 
-    public static void setStartHP(Class<? extends MyPet> myPetClass, double hp) {
+    public static void setStartHP(Class<? extends MyPet> myPetClass, double hp)
+    {
         startHP.put(myPetClass, hp);
     }
 
-    public static void setStartSpeed(Class<? extends MyPet> myPetClass, double speed) {
+    public static void setStartSpeed(Class<? extends MyPet> myPetClass, double speed)
+    {
         startSpeed.put(myPetClass, speed);
     }
 
     @Override
-    public String toString() {
+    public String toString()
+    {
         return "MyPet{owner=" + getOwner().getName() + ", name=" + ChatColor.stripColor(petName) + ", exp=" + experience.getExp() + "/" + experience.getRequiredExp() + ", lv=" + experience.getLevel() + ", status=" + status.name() + ", skilltree=" + skillTree.getName() + ", worldgroup=" + worldGroup + "}";
     }
 
-    public boolean wantToRespawn() {
+    public boolean wantToRespawn()
+    {
         return wantToRespawn;
     }
 }
\ No newline at end of file
