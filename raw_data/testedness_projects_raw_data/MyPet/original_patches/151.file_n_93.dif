diff --git a/src/main/java/de/Keyle/MyPet/entity/types/horse/MyHorse.java b/src/main/java/de/Keyle/MyPet/entity/types/horse/MyHorse.java
index 6560634b..98489f9f 100644
--- a/src/main/java/de/Keyle/MyPet/entity/types/horse/MyHorse.java
+++ b/src/main/java/de/Keyle/MyPet/entity/types/horse/MyHorse.java
@@ -34,7 +34,8 @@ import static de.Keyle.MyPet.entity.types.MyPet.LeashFlag.Tamed;
 import static org.bukkit.Material.*;
 
 @MyPetInfo(food = {SUGAR, WHEAT, APPLE}, leashFlags = {Tamed})
-public class MyHorse extends MyPet implements IMyPetBaby {
+public class MyHorse extends MyPet implements IMyPetBaby
+{
     public int age = 0;
     protected byte horseType = 0;
     protected int variant = 0;
@@ -42,37 +43,45 @@ public class MyHorse extends MyPet implements IMyPetBaby {
     protected boolean chest = false;
     protected boolean saddle = false;
 
-    public MyHorse(MyPetPlayer petOwner) {
+    public MyHorse(MyPetPlayer petOwner)
+    {
         super(petOwner);
     }
 
-    public int getAge() {
+    public int getAge()
+    {
         return age;
     }
 
-    public void setAge(int value) {
+    public void setAge(int value)
+    {
         value = Math.min(0, (Math.max(-24000, value)));
         value = value - (value % 1000);
-        if (status == PetState.Here) {
+        if (status == PetState.Here)
+        {
             ((EntityMyHorse) getCraftPet().getHandle()).setAge(value);
         }
         this.age = value;
     }
 
-    public int getArmor() {
+    public int getArmor()
+    {
         return armor;
     }
 
-    public void setArmor(int value) {
+    public void setArmor(int value)
+    {
         value = Math.min(Math.max(0, value), 3);
-        if (status == PetState.Here) {
+        if (status == PetState.Here)
+        {
             ((EntityMyHorse) getCraftPet().getHandle()).setArmor(value);
         }
         this.armor = value;
     }
 
     @Override
-    public CompoundTag getExtendedInfo() {
+    public CompoundTag getExtendedInfo()
+    {
         CompoundTag info = super.getExtendedInfo();
         info.getValue().put("Type", new ByteTag("Type", getHorseType()));
         info.getValue().put("Variant", new IntTag("Variant", getVariant()));
@@ -84,113 +93,154 @@ public class MyHorse extends MyPet implements IMyPetBaby {
     }
 
     @Override
-    public void setExtendedInfo(CompoundTag info) {
-        if (info.getValue().containsKey("Type")) {
+    public void setExtendedInfo(CompoundTag info)
+    {
+        if (info.getValue().containsKey("Type"))
+        {
             setHorseType(((ByteTag) info.getValue().get("Type")).getValue());
         }
-        if (info.getValue().containsKey("Variant")) {
+        if (info.getValue().containsKey("Variant"))
+        {
             setVariant(((IntTag) info.getValue().get("Variant")).getValue());
         }
-        if (info.getValue().containsKey("Armor")) {
+        if (info.getValue().containsKey("Armor"))
+        {
             setArmor(((IntTag) info.getValue().get("Armor")).getValue());
         }
-        if (info.getValue().containsKey("Age")) {
+        if (info.getValue().containsKey("Age"))
+        {
             setAge(((IntTag) info.getValue().get("Age")).getValue());
         }
-        if (info.getValue().containsKey("Chest")) {
+        if (info.getValue().containsKey("Chest"))
+        {
             setChest(((ByteTag) info.getValue().get("Chest")).getBooleanValue());
         }
-        if (info.getValue().containsKey("Saddle")) {
+        if (info.getValue().containsKey("Saddle"))
+        {
             setSaddle(((ByteTag) info.getValue().get("Saddle")).getBooleanValue());
         }
     }
 
-    public byte getHorseType() {
+    public byte getHorseType()
+    {
         return horseType;
     }
 
-    public void setHorseType(byte horseType) {
+    public void setHorseType(byte horseType)
+    {
         horseType = (byte) Math.min(Math.max(0, horseType), 4);
         this.horseType = horseType;
-        if (status == PetState.Here) {
+        if (status == PetState.Here)
+        {
             ((EntityMyHorse) getCraftPet().getHandle()).setHorseType(horseType);
         }
 
-        if (horseType != 0) {
+        if (horseType != 0)
+        {
             setVariant(0);
         }
     }
 
     @Override
-    public MyPetType getPetType() {
+    public MyPetType getPetType()
+    {
         return MyPetType.Horse;
     }
 
-    public int getVariant() {
+    public int getVariant()
+    {
         return variant;
     }
 
-    public void setVariant(int variant) {
-        if (horseType != 0) {
+    public void setVariant(int variant)
+    {
+        if (horseType != 0)
+        {
             this.variant = 0;
-        } else if (variant >= 0 && variant <= 6) {
+        }
+        else if (variant >= 0 && variant <= 6)
+        {
             this.variant = variant;
-        } else if (variant >= 256 && variant <= 262) {
+        }
+        else if (variant >= 256 && variant <= 262)
+        {
             this.variant = variant;
-        } else if (variant >= 512 && variant <= 518) {
+        }
+        else if (variant >= 512 && variant <= 518)
+        {
             this.variant = variant;
-        } else if (variant >= 768 && variant <= 774) {
+        }
+        else if (variant >= 768 && variant <= 774)
+        {
             this.variant = variant;
-        } else if (variant >= 1024 && variant <= 1030) {
+        }
+        else if (variant >= 1024 && variant <= 1030)
+        {
             this.variant = variant;
-        } else {
+        }
+        else
+        {
             this.variant = 0;
         }
-        if (status == PetState.Here) {
+        if (status == PetState.Here)
+        {
             ((EntityMyHorse) getCraftPet().getHandle()).setVariant(this.variant);
         }
     }
 
-    public boolean hasChest() {
+    public boolean hasChest()
+    {
         return chest;
     }
 
-    public boolean hasSaddle() {
+    public boolean hasSaddle()
+    {
         return saddle;
     }
 
     @Override
-    public boolean isBaby() {
+    public boolean isBaby()
+    {
         return age < 0;
     }
 
-    public void setBaby(boolean flag) {
-        if (status == PetState.Here) {
+    public void setBaby(boolean flag)
+    {
+        if (status == PetState.Here)
+        {
             ((EntityMyHorse) getCraftPet().getHandle()).setBaby(flag);
         }
-        if (flag) {
+        if (flag)
+        {
             this.age = -24000;
-        } else {
+        }
+        else
+        {
             this.age = 0;
         }
     }
 
-    public void setChest(boolean flag) {
-        if (status == PetState.Here) {
+    public void setChest(boolean flag)
+    {
+        if (status == PetState.Here)
+        {
             ((EntityMyHorse) getCraftPet().getHandle()).setChest(flag);
         }
         this.chest = flag;
     }
 
-    public void setSaddle(boolean flag) {
-        if (status == PetState.Here) {
+    public void setSaddle(boolean flag)
+    {
+        if (status == PetState.Here)
+        {
             ((EntityMyHorse) getCraftPet().getHandle()).setSaddle(flag);
         }
         this.saddle = flag;
     }
 
     @Override
-    public String toString() {
+    public String toString()
+    {
         return "MyHorse{owner=" + getOwner().getName() + ", name=" + ChatColor.stripColor(petName) + ", exp=" + experience.getExp() + "/" + experience.getRequiredExp() + ", lv=" + experience.getLevel() + ", status=" + status.name() + ", skilltree=" + (skillTree != null ? skillTree.getName() : "-") + ", worldgroup=" + worldGroup + ", type=" + horseType + ", variant=" + variant + ", armor=" + armor + ", saddle=" + saddle + ", chest=" + chest + "}";
     }
 }
\ No newline at end of file
