diff --git a/src/main/java/de/Keyle/MyPet/MyPetPlugin.java b/src/main/java/de/Keyle/MyPet/MyPetPlugin.java
index 08d12968..ce9c6134 100644
--- a/src/main/java/de/Keyle/MyPet/MyPetPlugin.java
+++ b/src/main/java/de/Keyle/MyPet/MyPetPlugin.java
@@ -52,20 +52,19 @@ import de.Keyle.MyPet.entity.types.wither.EntityMyWither;
 import de.Keyle.MyPet.entity.types.wolf.EntityMyWolf;
 import de.Keyle.MyPet.entity.types.zombie.EntityMyZombie;
 import de.Keyle.MyPet.listeners.*;
-import de.Keyle.MyPet.skill.SkillTreeMobType;
-import de.Keyle.MyPet.skill.Skills;
-import de.Keyle.MyPet.skill.SkillsInfo;
+import de.Keyle.MyPet.skill.MyPetSkillTreeMobType;
+import de.Keyle.MyPet.skill.MyPetSkills;
+import de.Keyle.MyPet.skill.MyPetSkillsInfo;
 import de.Keyle.MyPet.skill.skills.implementation.*;
 import de.Keyle.MyPet.skill.skills.info.*;
-import de.Keyle.MyPet.skill.skilltreeloader.SkillTreeLoader;
-import de.Keyle.MyPet.skill.skilltreeloader.SkillTreeLoaderJSON;
-import de.Keyle.MyPet.skill.skilltreeloader.SkillTreeLoaderNBT;
-import de.Keyle.MyPet.skill.skilltreeloader.SkillTreeLoaderYAML;
+import de.Keyle.MyPet.skill.skilltreeloader.MyPetSkillTreeLoader;
+import de.Keyle.MyPet.skill.skilltreeloader.MyPetSkillTreeLoaderJSON;
+import de.Keyle.MyPet.skill.skilltreeloader.MyPetSkillTreeLoaderNBT;
+import de.Keyle.MyPet.skill.skilltreeloader.MyPetSkillTreeLoaderYAML;
 import de.Keyle.MyPet.util.*;
-import de.Keyle.MyPet.util.Timer;
-import de.Keyle.MyPet.util.configuration.ConfigurationNBT;
-import de.Keyle.MyPet.util.configuration.ConfigurationYAML;
-import de.Keyle.MyPet.util.locale.Locales;
+import de.Keyle.MyPet.util.configuration.NBT_Configuration;
+import de.Keyle.MyPet.util.configuration.YAML_Configuration;
+import de.Keyle.MyPet.util.locale.MyPetLocales;
 import de.Keyle.MyPet.util.logger.DebugLogger;
 import de.Keyle.MyPet.util.logger.MyPetLogger;
 import de.Keyle.MyPet.util.support.*;
@@ -112,7 +111,7 @@ public class MyPetPlugin extends JavaPlugin implements IScheduler
             }
             MyPetList.clearList();
         }
-        Timer.reset();
+        MyPetTimer.reset();
         MyPetLogger.setConsole(null);
         Bukkit.getServer().getScheduler().cancelTasks(getPlugin());
         DebugLogger.info("MyPet disabled!");
@@ -130,11 +129,11 @@ public class MyPetPlugin extends JavaPlugin implements IScheduler
 
         MyPetVersion.reset();
         MyPetLogger.setConsole(getServer().getConsoleSender());
-        PvPChecker.reset();
-        Economy.reset();
-        Configuration.config = this.getConfig();
-        Configuration.setDefault();
-        Configuration.loadConfiguration();
+        MyPetPvP.reset();
+        MyPetEconomy.reset();
+        MyPetConfiguration.config = this.getConfig();
+        MyPetConfiguration.setDefault();
+        MyPetConfiguration.loadConfiguration();
         DebugLogger.setup();
 
         String minecraftVersion = ((CraftServer) getServer()).getHandle().getServer().getVersion();
@@ -155,19 +154,19 @@ public class MyPetPlugin extends JavaPlugin implements IScheduler
 
         DebugLogger.info("Plugins: " + Arrays.toString(getServer().getPluginManager().getPlugins()));
 
-        PlayerListener playerListener = new PlayerListener();
+        MyPetPlayerListener playerListener = new MyPetPlayerListener();
         getServer().getPluginManager().registerEvents(playerListener, this);
 
-        VehicleListener vehicleListener = new VehicleListener();
+        MyPetVehicleListener vehicleListener = new MyPetVehicleListener();
         getServer().getPluginManager().registerEvents(vehicleListener, this);
 
-        EntityListener entityListener = new EntityListener();
+        MyPetEntityListener entityListener = new MyPetEntityListener();
         getServer().getPluginManager().registerEvents(entityListener, this);
 
-        LevelUpListener levelupListener = new LevelUpListener();
+        MyPetLevelUpListener levelupListener = new MyPetLevelUpListener();
         getServer().getPluginManager().registerEvents(levelupListener, this);
 
-        WorldListener worldListener = new WorldListener();
+        MyPetWorldListener worldListener = new MyPetWorldListener();
         getServer().getPluginManager().registerEvents(worldListener, this);
 
         getCommand("petname").setExecutor(new CommandName());
@@ -227,16 +226,16 @@ public class MyPetPlugin extends JavaPlugin implements IScheduler
             petTypes[i] = MyPetType.values()[i].getTypeName();
         }
 
-        SkillTreeMobType.clearMobTypes();
-        SkillTreeLoaderNBT.getSkilltreeLoader().loadSkillTrees(getPlugin().getDataFolder().getPath() + File.separator + "skilltrees", petTypes);
-        SkillTreeLoaderYAML.getSkilltreeLoader().loadSkillTrees(getPlugin().getDataFolder().getPath() + File.separator + "skilltrees", petTypes);
-        SkillTreeLoaderJSON.getSkilltreeLoader().loadSkillTrees(getPlugin().getDataFolder().getPath() + File.separator + "skilltrees", petTypes);
+        MyPetSkillTreeMobType.clearMobTypes();
+        MyPetSkillTreeLoaderNBT.getSkilltreeLoader().loadSkillTrees(getPlugin().getDataFolder().getPath() + File.separator + "skilltrees", petTypes);
+        MyPetSkillTreeLoaderYAML.getSkilltreeLoader().loadSkillTrees(getPlugin().getDataFolder().getPath() + File.separator + "skilltrees", petTypes);
+        MyPetSkillTreeLoaderJSON.getSkilltreeLoader().loadSkillTrees(getPlugin().getDataFolder().getPath() + File.separator + "skilltrees", petTypes);
 
         for (MyPetType mobType : MyPetType.values())
         {
-            SkillTreeMobType skillTreeMobType = SkillTreeMobType.getMobTypeByName(mobType.getTypeName());
-            SkillTreeLoader.addDefault(skillTreeMobType);
-            SkillTreeLoader.manageInheritance(skillTreeMobType);
+            MyPetSkillTreeMobType skillTreeMobType = MyPetSkillTreeMobType.getMobTypeByName(mobType.getTypeName());
+            MyPetSkillTreeLoader.addDefault(skillTreeMobType);
+            MyPetSkillTreeLoader.manageInheritance(skillTreeMobType);
         }
 
         registerMyPetEntity(EntityMyCreeper.class, "Creeper", 50);
@@ -278,18 +277,18 @@ public class MyPetPlugin extends JavaPlugin implements IScheduler
                     "leashFlags:" + MyPet.getLeashFlags(myPetType.getMyPetClass()) + " }");
         }
 
-        new Locales();
+        new MyPetLocales();
 
         File groupsFile = new File(getPlugin().getDataFolder().getPath() + File.separator + "worldgroups.yml");
 
-        if (Backup.MAKE_BACKUPS)
+        if (MyPetBackup.MAKE_BACKUPS)
         {
-            new Backup(NBTPetFile, new File(getPlugin().getDataFolder().getPath() + File.separator + "backups" + File.separator));
+            new MyPetBackup(NBTPetFile, new File(getPlugin().getDataFolder().getPath() + File.separator + "backups" + File.separator));
         }
         loadGroups(groupsFile);
         loadPets(NBTPetFile);
 
-        Timer.startTimer();
+        MyPetTimer.startTimer();
 
         MobArena.findPlugin();
         Minigames.findPlugin();
@@ -356,7 +355,7 @@ public class MyPetPlugin extends JavaPlugin implements IScheduler
             if (MyPetPlayer.isMyPetPlayer(player))
             {
                 MyPetPlayer myPetPlayer = MyPetPlayer.getMyPetPlayer(player);
-                WorldGroup joinGroup = WorldGroup.getGroup(player.getWorld().getName());
+                MyPetWorldGroup joinGroup = MyPetWorldGroup.getGroup(player.getWorld().getName());
                 if (joinGroup != null && !myPetPlayer.hasMyPet() && myPetPlayer.hasMyPetInWorldGroup(joinGroup.getName()))
                 {
                     UUID groupMyPetUUID = myPetPlayer.getMyPetForWorldGroup(joinGroup.getName());
@@ -378,7 +377,7 @@ public class MyPetPlugin extends JavaPlugin implements IScheduler
                     MyPet myPet = MyPetList.getMyPet(player);
                     if (myPet.getStatus() == PetState.Dead)
                     {
-                        player.sendMessage(Util.formatText(Locales.getString("Message.RespawnIn", BukkitUtil.getPlayerLanguage(player)), myPet.getPetName(), myPet.getRespawnTime()));
+                        player.sendMessage(MyPetUtil.formatText(MyPetLocales.getString("Message.RespawnIn", MyPetBukkitUtil.getPlayerLanguage(player)), myPet.getPetName(), myPet.getRespawnTime()));
                     }
                     else if (myPet.wantToRespawn() && myPet.getLocation().getWorld() == player.getLocation().getWorld() && myPet.getLocation().distance(player.getLocation()) < 75)
                     {
@@ -393,52 +392,52 @@ public class MyPetPlugin extends JavaPlugin implements IScheduler
         }
         this.isReady = true;
         savePets(false);
-        Timer.addTask(this);
+        MyPetTimer.addTask(this);
         DebugLogger.info("----------- MyPet ready -----------");
     }
 
     public static void registerSkills()
     {
-        Skills.registerSkill(Inventory.class);
-        Skills.registerSkill(HPregeneration.class);
-        Skills.registerSkill(Pickup.class);
-        Skills.registerSkill(Behavior.class);
-        Skills.registerSkill(Damage.class);
-        Skills.registerSkill(Control.class);
-        Skills.registerSkill(HP.class);
-        Skills.registerSkill(Poison.class);
-        Skills.registerSkill(Ride.class);
-        Skills.registerSkill(Thorns.class);
-        Skills.registerSkill(Fire.class);
-        Skills.registerSkill(Beacon.class);
-        Skills.registerSkill(Wither.class);
-        Skills.registerSkill(Lightning.class);
-        Skills.registerSkill(Slow.class);
-        Skills.registerSkill(Knockback.class);
-        Skills.registerSkill(Ranged.class);
-        Skills.registerSkill(Sprint.class);
+        MyPetSkills.registerSkill(Inventory.class);
+        MyPetSkills.registerSkill(HPregeneration.class);
+        MyPetSkills.registerSkill(Pickup.class);
+        MyPetSkills.registerSkill(Behavior.class);
+        MyPetSkills.registerSkill(Damage.class);
+        MyPetSkills.registerSkill(Control.class);
+        MyPetSkills.registerSkill(HP.class);
+        MyPetSkills.registerSkill(Poison.class);
+        MyPetSkills.registerSkill(Ride.class);
+        MyPetSkills.registerSkill(Thorns.class);
+        MyPetSkills.registerSkill(Fire.class);
+        MyPetSkills.registerSkill(Beacon.class);
+        MyPetSkills.registerSkill(Wither.class);
+        MyPetSkills.registerSkill(Lightning.class);
+        MyPetSkills.registerSkill(Slow.class);
+        MyPetSkills.registerSkill(Knockback.class);
+        MyPetSkills.registerSkill(Ranged.class);
+        MyPetSkills.registerSkill(Sprint.class);
     }
 
     public static void registerSkillsInfo()
     {
-        SkillsInfo.registerSkill(InventoryInfo.class);
-        SkillsInfo.registerSkill(HPregenerationInfo.class);
-        SkillsInfo.registerSkill(PickupInfo.class);
-        SkillsInfo.registerSkill(BehaviorInfo.class);
-        SkillsInfo.registerSkill(DamageInfo.class);
-        SkillsInfo.registerSkill(ControlInfo.class);
-        SkillsInfo.registerSkill(HPInfo.class);
-        SkillsInfo.registerSkill(PoisonInfo.class);
-        SkillsInfo.registerSkill(RideInfo.class);
-        SkillsInfo.registerSkill(ThornsInfo.class);
-        SkillsInfo.registerSkill(FireInfo.class);
-        SkillsInfo.registerSkill(BeaconInfo.class);
-        SkillsInfo.registerSkill(WitherInfo.class);
-        SkillsInfo.registerSkill(LightningInfo.class);
-        SkillsInfo.registerSkill(SlowInfo.class);
-        SkillsInfo.registerSkill(KnockbackInfo.class);
-        SkillsInfo.registerSkill(RangedInfo.class);
-        SkillsInfo.registerSkill(SprintInfo.class);
+        MyPetSkillsInfo.registerSkill(InventoryInfo.class);
+        MyPetSkillsInfo.registerSkill(HPregenerationInfo.class);
+        MyPetSkillsInfo.registerSkill(PickupInfo.class);
+        MyPetSkillsInfo.registerSkill(BehaviorInfo.class);
+        MyPetSkillsInfo.registerSkill(DamageInfo.class);
+        MyPetSkillsInfo.registerSkill(ControlInfo.class);
+        MyPetSkillsInfo.registerSkill(HPInfo.class);
+        MyPetSkillsInfo.registerSkill(PoisonInfo.class);
+        MyPetSkillsInfo.registerSkill(RideInfo.class);
+        MyPetSkillsInfo.registerSkill(ThornsInfo.class);
+        MyPetSkillsInfo.registerSkill(FireInfo.class);
+        MyPetSkillsInfo.registerSkill(BeaconInfo.class);
+        MyPetSkillsInfo.registerSkill(WitherInfo.class);
+        MyPetSkillsInfo.registerSkill(LightningInfo.class);
+        MyPetSkillsInfo.registerSkill(SlowInfo.class);
+        MyPetSkillsInfo.registerSkill(KnockbackInfo.class);
+        MyPetSkillsInfo.registerSkill(RangedInfo.class);
+        MyPetSkillsInfo.registerSkill(SprintInfo.class);
     }
 
     @SuppressWarnings("unchecked")
@@ -496,7 +495,7 @@ public class MyPetPlugin extends JavaPlugin implements IScheduler
         }
         int petCount = 0;
 
-        ConfigurationNBT nbtConfiguration = new ConfigurationNBT(f);
+        NBT_Configuration nbtConfiguration = new NBT_Configuration(f);
         if (!nbtConfiguration.load())
         {
             return 0;
@@ -534,9 +533,9 @@ public class MyPetPlugin extends JavaPlugin implements IScheduler
 
     public int savePets(boolean shutdown)
     {
-        autoSaveTimer = Configuration.AUTOSAVE_TIME;
+        autoSaveTimer = MyPetConfiguration.AUTOSAVE_TIME;
         int petCount = 0;
-        ConfigurationNBT nbtConfiguration = new ConfigurationNBT(NBTPetFile);
+        NBT_Configuration nbtConfiguration = new NBT_Configuration(NBTPetFile);
         List<CompoundTag> petList = new ArrayList<CompoundTag>();
 
         for (MyPet myPet : MyPetList.getAllActiveMyPets())
@@ -573,7 +572,7 @@ public class MyPetPlugin extends JavaPlugin implements IScheduler
         return new ListTag<CompoundTag>("Players", CompoundTag.class, playerList);
     }
 
-    private int loadPlayers(ConfigurationNBT nbtConfiguration)
+    private int loadPlayers(NBT_Configuration nbtConfiguration)
     {
         int playerCount = 0;
         ListTag playerList = (ListTag) nbtConfiguration.getNBTCompound().getValue().get("Players");
@@ -592,7 +591,7 @@ public class MyPetPlugin extends JavaPlugin implements IScheduler
 
     private int loadGroups(File f)
     {
-        ConfigurationYAML yamlConfiguration = new ConfigurationYAML(f);
+        YAML_Configuration yamlConfiguration = new YAML_Configuration(f);
         FileConfiguration config = yamlConfiguration.getConfig();
 
         if (config == null)
@@ -600,7 +599,7 @@ public class MyPetPlugin extends JavaPlugin implements IScheduler
             return 0;
         }
 
-        WorldGroup.clearGroups();
+        MyPetWorldGroup.clearGroups();
 
         Set<String> nodes;
         try
@@ -617,7 +616,7 @@ public class MyPetPlugin extends JavaPlugin implements IScheduler
         if (nodes.size() == 0)
         {
             List<String> worldNames = new ArrayList<String>();
-            WorldGroup defaultGroup = new WorldGroup("default");
+            MyPetWorldGroup defaultGroup = new MyPetWorldGroup("default");
             defaultGroup.registerGroup();
             for (org.bukkit.World world : this.getServer().getWorlds())
             {
@@ -636,7 +635,7 @@ public class MyPetPlugin extends JavaPlugin implements IScheduler
                 List<String> worlds = config.getStringList("Groups." + node);
                 if (worlds.size() > 0)
                 {
-                    WorldGroup newGroup = new WorldGroup(node);
+                    MyPetWorldGroup newGroup = new MyPetWorldGroup(node);
                     for (String world : worlds)
                     {
                         if (getServer().getWorld(world) != null)
@@ -653,8 +652,8 @@ public class MyPetPlugin extends JavaPlugin implements IScheduler
                 }
             }
 
-            WorldGroup defaultGroup = null;
-            for (WorldGroup group : WorldGroup.getGroups())
+            MyPetWorldGroup defaultGroup = null;
+            for (MyPetWorldGroup group : MyPetWorldGroup.getGroups())
             {
                 if (group.getName().equalsIgnoreCase("default"))
                 {
@@ -664,7 +663,7 @@ public class MyPetPlugin extends JavaPlugin implements IScheduler
             }
             if (defaultGroup == null)
             {
-                defaultGroup = new WorldGroup("default");
+                defaultGroup = new MyPetWorldGroup("default");
                 defaultGroup.registerGroup();
                 DebugLogger.info("   registered 'default' group");
             }
@@ -672,7 +671,7 @@ public class MyPetPlugin extends JavaPlugin implements IScheduler
             boolean saveConfig = false;
             for (org.bukkit.World world : getServer().getWorlds())
             {
-                if (WorldGroup.getGroup(world.getName()) == null)
+                if (MyPetWorldGroup.getGroup(world.getName()) == null)
                 {
                     MyPetLogger.write("added " + ChatColor.GOLD + world.getName() + ChatColor.RESET + " to 'default' group.");
                     defaultGroup.addWorld(world.getName());
@@ -692,10 +691,10 @@ public class MyPetPlugin extends JavaPlugin implements IScheduler
     @Override
     public void schedule()
     {
-        if (Configuration.AUTOSAVE_TIME > 0 && autoSaveTimer-- <= 0)
+        if (MyPetConfiguration.AUTOSAVE_TIME > 0 && autoSaveTimer-- <= 0)
         {
             MyPetPlugin.getPlugin().savePets(false);
-            autoSaveTimer = Configuration.AUTOSAVE_TIME;
+            autoSaveTimer = MyPetConfiguration.AUTOSAVE_TIME;
         }
     }
 
