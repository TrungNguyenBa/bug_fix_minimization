diff --git a/src/main/java/de/Keyle/MyPet/entity/types/MyPet.java b/src/main/java/de/Keyle/MyPet/entity/types/MyPet.java
index 9d38f35b..108287f9 100644
--- a/src/main/java/de/Keyle/MyPet/entity/types/MyPet.java
+++ b/src/main/java/de/Keyle/MyPet/entity/types/MyPet.java
@@ -62,21 +62,6 @@ public abstract class MyPet implements IMyPet, NBTStorage
         }
     }
 
-    protected final MyPetPlayer petOwner;
-    protected CraftMyPet craftMyPet;
-    protected String petName = "Pet";
-    protected double health;
-    protected int respawnTime = 0;
-    protected int hungerTime = 0;
-    protected int hunger = 100;
-    protected UUID uuid = null;
-    protected String worldGroup = "";
-    protected PetState status = PetState.Despawned;
-    protected boolean wantToRespawn = false;
-    protected MyPetSkillTree skillTree = null;
-    protected MyPetSkills skills;
-    protected MyPetExperience experience;
-
     public static enum LeashFlag
     {
         Baby, Adult, LowHp, Tamed, UserCreated, Wild, CanBreed, Angry, None, Impossible;
@@ -104,6 +89,21 @@ public abstract class MyPet implements IMyPet, NBTStorage
         Dead, Despawned, Here
     }
 
+    protected CraftMyPet craftMyPet;
+    protected String petName = "Pet";
+    protected final MyPetPlayer petOwner;
+    protected double health;
+    protected int respawnTime = 0;
+    protected int hungerTime = 0;
+    protected int hunger = 100;
+    protected UUID uuid = null;
+    protected String worldGroup = "";
+    protected PetState status = PetState.Despawned;
+    protected boolean wantToRespawn = false;
+    protected MyPetSkillTree skillTree = null;
+    protected MyPetSkills skills;
+    protected MyPetExperience experience;
+
     public MyPet(MyPetPlayer Owner)
     {
         this.petOwner = Owner;
@@ -114,6 +114,48 @@ public abstract class MyPet implements IMyPet, NBTStorage
         petName = MyPetLocales.getString("Name." + getPetType().getTypeName(), petOwner.getLanguage());
     }
 
+    public void setPetName(String newName)
+    {
+        this.petName = newName;
+        if (status == PetState.Here)
+        {
+            if (MyPetConfiguration.PET_INFO_OVERHEAD_NAME)
+            {
+                getCraftPet().getHandle().setCustomNameVisible(true);
+                getCraftPet().getHandle().setCustomName(MyPetUtil.cutString(MyPetConfiguration.PET_INFO_OVERHEAD_PREFIX + petName + MyPetConfiguration.PET_INFO_OVERHEAD_SUFFIX, 64));
+            }
+        }
+        if (MyPetConfiguration.ENABLE_EVENTS)
+        {
+            getPluginManager().callEvent(new MyPetSpoutEvent(this, MyPetSpoutEventReason.Name));
+        }
+    }
+
+    public String getPetName()
+    {
+        return this.petName;
+    }
+
+    public MyPetSkillTree getSkillTree()
+    {
+        return skillTree;
+    }
+
+    public boolean setSkilltree(MyPetSkillTree skillTree)
+    {
+        if (skillTree == null || this.skillTree == skillTree)
+        {
+            return false;
+        }
+        skills.reset();
+        this.skillTree = skillTree;
+        for (int i = 1 ; i <= experience.getLevel() ; i++)
+        {
+            getServer().getPluginManager().callEvent(new MyPetLevelUpEvent(this, i, true));
+        }
+        return true;
+    }
+
     public boolean autoAssignSkilltree()
     {
         if (MyPetConfiguration.AUTOMATIC_SKILLTREE_ASSIGNMENT && skillTree == null && this.petOwner.isOnline())
@@ -132,6 +174,51 @@ public abstract class MyPet implements IMyPet, NBTStorage
         return false;
     }
 
+    public void removePet()
+    {
+        removePet(false);
+    }
+
+    public void removePet(boolean wantToRespawn)
+    {
+        if (status == PetState.Here)
+        {
+            health = craftMyPet.getHealth();
+            status = PetState.Despawned;
+            this.wantToRespawn = wantToRespawn;
+            craftMyPet.remove();
+            craftMyPet = null;
+        }
+    }
+
+    public void respawnPet()
+    {
+        if (status != PetState.Here && getOwner().isOnline())
+        {
+            respawnTime = 0;
+            switch (createPet())
+            {
+                case Success:
+                    sendMessageToOwner(MyPetUtil.formatText(MyPetLocales.getString("Message.OnRespawn", petOwner.getLanguage()), petName));
+                    break;
+                case Canceled:
+                    sendMessageToOwner(MyPetUtil.formatText(MyPetLocales.getString("Message.SpawnPrevent", petOwner.getLanguage()), petName));
+                    break;
+                case NoSpace:
+                    sendMessageToOwner(MyPetUtil.formatText(MyPetLocales.getString("Message.SpawnNoSpace", petOwner.getLanguage()), petName));
+                    break;
+            }
+            if (MyPetConfiguration.USE_HUNGER_SYSTEM)
+            {
+                setHealth((int) Math.ceil(getMaxHealth() / 100. * (hunger + 1 - (hunger % 10))));
+            }
+            else
+            {
+                setHealth(getMaxHealth());
+            }
+        }
+    }
+
     public SpawnFlags createPet()
     {
         if (status != PetState.Here && getOwner().isOnline())
@@ -209,77 +296,50 @@ public abstract class MyPet implements IMyPet, NBTStorage
         return craftMyPet;
     }
 
-    public static int getCustomRespawnTimeFactor(Class<? extends MyPet> myPetClass)
-    {
-        if (customRespawnTimeFactor.containsKey(myPetClass))
-        {
-            return customRespawnTimeFactor.get(myPetClass);
-        }
-        return 0;
-    }
-
-    public static int getCustomRespawnTimeFixed(Class<? extends MyPet> myPetClass)
-    {
-        if (customRespawnTimeFixed.containsKey(myPetClass))
-        {
-            return customRespawnTimeFixed.get(myPetClass);
-        }
-        return 0;
-    }
-
-    public double getDamage()
-    {
-        return (getSkills().hasSkill("Damage") ? ((Damage) getSkills().getSkill("Damage")).getDamage() : 0);
-    }
-
-    public static float[] getEntitySize(Class<? extends EntityMyPet> entityMyPetClass)
+    public PetState getStatus()
     {
-        EntitySize es = entityMyPetClass.getAnnotation(EntitySize.class);
-        if (es != null)
+        if (status == PetState.Here)
         {
-            return new float[]{es.height(), es.width()};
+            if (craftMyPet == null || craftMyPet.getHandle() == null)
+            {
+                status = PetState.Despawned;
+            }
+            else if (craftMyPet.getHealth() <= 0 || craftMyPet.isDead())
+            {
+                status = PetState.Dead;
+            }
         }
-        return new float[]{0, 0};
-    }
-
-    public double getExp()
-    {
-        return getExperience().getExp();
-    }
-
-    public MyPetExperience getExperience()
-    {
-        return experience;
-    }
-
-    public CompoundTag getExtendedInfo()
-    {
-        return new CompoundTag("Info", new CompoundMap());
+        return status;
     }
 
-    public void setExtendedInfo(CompoundTag info)
+    public boolean wantToRespawn()
     {
+        return wantToRespawn;
     }
 
-    public static List<Integer> getFood(Class<? extends MyPet> myPetClass)
+    public void setStatus(PetState status)
     {
-        List<Integer> foodList = new ArrayList<Integer>();
-        if (food.containsKey(myPetClass))
+        if (status == PetState.Here)
         {
-            foodList.addAll(food.get(myPetClass));
+            if (this.status == PetState.Dead)
+            {
+                respawnPet();
+            }
+            else if (this.status == PetState.Despawned)
+            {
+                createPet();
+            }
         }
-        return foodList;
-    }
-
-    public double getHealth()
-    {
-        if (status == PetState.Here)
+        else if (status == PetState.Dead)
         {
-            return craftMyPet.getHealth();
+            this.status = PetState.Dead;
         }
         else
         {
-            return health;
+            if (this.status == PetState.Here)
+            {
+                removePet();
+            }
         }
     }
 
@@ -299,6 +359,33 @@ public abstract class MyPet implements IMyPet, NBTStorage
         }
     }
 
+    public double getHealth()
+    {
+        if (status == PetState.Here)
+        {
+            return craftMyPet.getHealth();
+        }
+        else
+        {
+            return health;
+        }
+    }
+
+    public double getMaxHealth()
+    {
+        return getStartHP(this.getClass()) + (skills.isSkillActive("HP") ? ((HP) skills.getSkill("HP")).getHpIncrease() : 0);
+    }
+
+    public int getRespawnTime()
+    {
+        return respawnTime;
+    }
+
+    public void setRespawnTime(int time)
+    {
+        respawnTime = time > 0 ? time : 0;
+    }
+
     public int getHungerValue()
     {
         if (MyPetConfiguration.USE_HUNGER_SYSTEM)
@@ -334,97 +421,143 @@ public abstract class MyPet implements IMyPet, NBTStorage
         }
     }
 
-    public static List<LeashFlag> getLeashFlags(Class<? extends MyPet> myPetClass)
+    public double getDamage()
     {
-        List<LeashFlag> leashFlagList = new ArrayList<LeashFlag>();
-        if (leashFlags.containsKey(myPetClass))
-        {
-            leashFlagList.addAll(leashFlags.get(myPetClass));
-        }
-        return leashFlagList;
+        return (getSkills().hasSkill("Damage") ? ((Damage) getSkills().getSkill("Damage")).getDamage() : 0);
     }
 
-    public Location getLocation()
+    public double getRangedDamage()
     {
-        if (status == PetState.Here)
-        {
-            return craftMyPet.getLocation();
-        }
-        else if (petOwner.isOnline())
-        {
-            return petOwner.getPlayer().getLocation();
-        }
-        else
-        {
-            return null;
-        }
+        return (getSkills().hasSkill("Ranged") ? ((Ranged) getSkills().getSkill("Ranged")).getDamage() : 0);
     }
 
-    public void setLocation(Location loc)
+    public MyPetSkills getSkills()
     {
-        if (status == PetState.Here && MyPetBukkitUtil.canSpawn(loc, this.craftMyPet.getHandle()))
-        {
-            craftMyPet.teleport(loc);
-        }
+        return skills;
     }
 
-    public double getMaxHealth()
+    public MyPetExperience getExperience()
     {
-        return getStartHP(this.getClass()) + (skills.isSkillActive("HP") ? ((HP) skills.getSkill("HP")).getHpIncrease() : 0);
+        return experience;
     }
 
-    public MyPetPlayer getOwner()
+    public double getExp()
     {
-        return petOwner;
+        return getExperience().getExp();
     }
 
-    public String getPetName()
+    public Location getLocation()
     {
-        return this.petName;
+        if (status == PetState.Here)
+        {
+            return craftMyPet.getLocation();
+        }
+        else if (petOwner.isOnline())
+        {
+            return petOwner.getPlayer().getLocation();
+        }
+        else
+        {
+            return null;
+        }
     }
 
-    public void setPetName(String newName)
+    public void setLocation(Location loc)
     {
-        this.petName = newName;
-        if (status == PetState.Here)
+        if (status == PetState.Here && MyPetBukkitUtil.canSpawn(loc, this.craftMyPet.getHandle()))
         {
-            if (MyPetConfiguration.PET_INFO_OVERHEAD_NAME)
-            {
-                getCraftPet().getHandle().setCustomNameVisible(true);
-                getCraftPet().getHandle().setCustomName(MyPetUtil.cutString(MyPetConfiguration.PET_INFO_OVERHEAD_PREFIX + petName + MyPetConfiguration.PET_INFO_OVERHEAD_SUFFIX, 64));
-            }
+            craftMyPet.teleport(loc);
         }
-        if (MyPetConfiguration.ENABLE_EVENTS)
+    }
+
+    @Override
+    public String getWorldGroup()
+    {
+        return this.worldGroup;
+    }
+
+    public void setWorldGroup(String worldGroup)
+    {
+        if (worldGroup == null)
         {
-            getPluginManager().callEvent(new MyPetSpoutEvent(this, MyPetSpoutEventReason.Name));
+            return;
         }
+        if (MyPetWorldGroup.getGroup(worldGroup) == null)
+        {
+            worldGroup = "default";
+        }
+        this.worldGroup = worldGroup;
     }
 
-    public abstract MyPetType getPetType();
-
-    public double getRangedDamage()
+    public void setUUID(UUID uuid)
     {
-        return (getSkills().hasSkill("Ranged") ? ((Ranged) getSkills().getSkill("Ranged")).getDamage() : 0);
+        this.uuid = uuid;
     }
 
-    public int getRespawnTime()
+    public UUID getUUID()
     {
-        return respawnTime;
+        if (this.uuid == null)
+        {
+            this.uuid = UUID.randomUUID();
+        }
+
+        return this.uuid;
     }
 
-    public void setRespawnTime(int time)
+    public void scheduleTask()
     {
-        respawnTime = time > 0 ? time : 0;
+        if (status != PetState.Despawned && getOwner().isOnline())
+        {
+            for (ISkillInstance skill : skills.getSkills())
+            {
+                if (skill instanceof IScheduler)
+                {
+                    ((IScheduler) skill).schedule();
+                }
+            }
+            if (status == PetState.Dead)
+            {
+                respawnTime--;
+                if (MyPetEconomy.canUseEconomy() && getOwner().hasAutoRespawnEnabled() && respawnTime >= getOwner().getAutoRespawnMin() && MyPetPermissions.has(getOwner().getPlayer(), "MyPet.user.respawn"))
+                {
+                    double cost = respawnTime * MyPetConfiguration.RESPAWN_COSTS_FACTOR + MyPetConfiguration.RESPAWN_COSTS_FIXED;
+                    if (MyPetEconomy.canPay(getOwner(), cost))
+                    {
+                        MyPetEconomy.pay(getOwner(), cost);
+                        sendMessageToOwner(MyPetUtil.formatText(MyPetLocales.getString("Message.RespawnPaid", petOwner.getLanguage()), petName, cost + " " + MyPetEconomy.getEconomy().currencyNameSingular()));
+                        respawnTime = 1;
+                    }
+                }
+                if (respawnTime <= 0)
+                {
+                    respawnPet();
+                }
+            }
+            if (MyPetConfiguration.USE_HUNGER_SYSTEM && hunger > 1 && --hungerTime <= 0)
+            {
+                hunger--;
+                hungerTime = MyPetConfiguration.HUNGER_SYSTEM_TIME;
+
+                if (MyPetConfiguration.ENABLE_EVENTS)
+                {
+                    MyPetSpoutEvent spoutEvent = new MyPetSpoutEvent(this, MyPetSpoutEventReason.HungerChange);
+                    getServer().getPluginManager().callEvent(spoutEvent);
+                }
+            }
+        }
     }
 
-    public MyPetSkillTree getSkillTree()
+    public MyPetPlayer getOwner()
     {
-        return skillTree;
+        return petOwner;
     }
 
-    public MyPetSkills getSkills()
+    public void sendMessageToOwner(String text)
     {
-        return skills;
+        if (petOwner.isOnline())
+        {
+            getOwner().getPlayer().sendMessage(text);
+        }
     }
 
     public static double getStartHP(Class<? extends MyPet> myPetClass)
@@ -436,6 +569,11 @@ public abstract class MyPet implements IMyPet, NBTStorage
         return 1;
     }
 
+    public static void setStartHP(Class<? extends MyPet> myPetClass, double hp)
+    {
+        startHP.put(myPetClass, hp);
+    }
+
     public static double getStartSpeed(Class<? extends MyPet> myPetClass)
     {
         if (startSpeed.containsKey(myPetClass))
@@ -445,94 +583,84 @@ public abstract class MyPet implements IMyPet, NBTStorage
         return 0.3F;
     }
 
-    public PetState getStatus()
+    public static void setStartSpeed(Class<? extends MyPet> myPetClass, double speed)
     {
-        if (status == PetState.Here)
+        startSpeed.put(myPetClass, speed);
+    }
+
+    public static List<Integer> getFood(Class<? extends MyPet> myPetClass)
+    {
+        List<Integer> foodList = new ArrayList<Integer>();
+        if (food.containsKey(myPetClass))
         {
-            if (craftMyPet == null || craftMyPet.getHandle() == null)
-            {
-                status = PetState.Despawned;
-            }
-            else if (craftMyPet.getHealth() <= 0 || craftMyPet.isDead())
-            {
-                status = PetState.Dead;
-            }
+            foodList.addAll(food.get(myPetClass));
         }
-        return status;
+        return foodList;
     }
 
-    public void setStatus(PetState status)
+    public static void setFood(Class<? extends MyPet> myPetClass, int foodToAdd)
     {
-        if (status == PetState.Here)
+        if (food.containsKey(myPetClass))
         {
-            if (this.status == PetState.Dead)
-            {
-                respawnPet();
-            }
-            else if (this.status == PetState.Despawned)
+            List<Integer> foodList = food.get(myPetClass);
+            if (!foodList.contains(foodToAdd))
             {
-                createPet();
+                foodList.add(foodToAdd);
             }
         }
-        else if (status == PetState.Dead)
-        {
-            this.status = PetState.Dead;
-        }
         else
         {
-            if (this.status == PetState.Here)
-            {
-                removePet();
-            }
+            List<Integer> foodList = new ArrayList<Integer>();
+            foodList.add(foodToAdd);
+            food.put(myPetClass, foodList);
         }
     }
 
-    public UUID getUUID()
+    public static List<LeashFlag> getLeashFlags(Class<? extends MyPet> myPetClass)
     {
-        if (this.uuid == null)
+        List<LeashFlag> leashFlagList = new ArrayList<LeashFlag>();
+        if (leashFlags.containsKey(myPetClass))
         {
-            this.uuid = UUID.randomUUID();
+            leashFlagList.addAll(leashFlags.get(myPetClass));
         }
-
-        return this.uuid;
-    }
-
-    public void setUUID(UUID uuid)
-    {
-        this.uuid = uuid;
+        return leashFlagList;
     }
 
-    @Override
-    public String getWorldGroup()
+    public static boolean hasLeashFlag(Class<? extends MyPet> myPetClass, LeashFlag flag)
     {
-        return this.worldGroup;
+        if (leashFlags.containsKey(myPetClass))
+        {
+            return leashFlags.get(myPetClass).contains(flag);
+        }
+        return false;
     }
 
-    public void setWorldGroup(String worldGroup)
+    public static void setLeashFlags(Class<? extends MyPet> myPetClass, LeashFlag leashFlagToAdd)
     {
-        if (worldGroup == null)
+        if (leashFlags.containsKey(myPetClass))
         {
-            return;
+            List<LeashFlag> leashFlagList = leashFlags.get(myPetClass);
+            if (!leashFlagList.contains(leashFlagToAdd))
+            {
+                leashFlagList.add(leashFlagToAdd);
+            }
         }
-        if (MyPetWorldGroup.getGroup(worldGroup) == null)
+        else
         {
-            worldGroup = "default";
+            List<LeashFlag> leashFlagList = new ArrayList<LeashFlag>();
+            leashFlagList.add(leashFlagToAdd);
+            leashFlags.put(myPetClass, leashFlagList);
         }
-        this.worldGroup = worldGroup;
     }
 
-    public static boolean hasLeashFlag(Class<? extends MyPet> myPetClass, LeashFlag flag)
+    public static float[] getEntitySize(Class<? extends EntityMyPet> entityMyPetClass)
     {
-        if (leashFlags.containsKey(myPetClass))
+        EntitySize es = entityMyPetClass.getAnnotation(EntitySize.class);
+        if (es != null)
         {
-            return leashFlags.get(myPetClass).contains(flag);
+            return new float[]{es.height(), es.width()};
         }
-        return false;
-    }
-
-    public boolean hasTarget()
-    {
-        return this.getStatus() == PetState.Here && craftMyPet.getHandle().getGoalTarget() != null && craftMyPet.getHandle().getGoalTarget().isAlive();
+        return new float[]{0, 0};
     }
 
     public boolean isPassiv()
@@ -540,67 +668,20 @@ public abstract class MyPet implements IMyPet, NBTStorage
         return getDamage() == 0;
     }
 
-    @Override
-    public void load(CompoundTag myPetNBT)
-    {
-    }
-
-    public void removePet()
+    public boolean hasTarget()
     {
-        removePet(false);
+        return this.getStatus() == PetState.Here && craftMyPet.getHandle().getGoalTarget() != null && craftMyPet.getHandle().getGoalTarget().isAlive();
     }
 
-    public void removePet(boolean wantToRespawn)
-    {
-        if (status == PetState.Here)
-        {
-            health = craftMyPet.getHealth();
-            status = PetState.Despawned;
-            this.wantToRespawn = wantToRespawn;
-            craftMyPet.remove();
-            craftMyPet = null;
-        }
-    }
+    public abstract MyPetType getPetType();
 
-    public static void resetOptions()
+    public CompoundTag getExtendedInfo()
     {
-        customRespawnTimeFactor.clear();
-        customRespawnTimeFixed.clear();
-        leashFlags.clear();
-        food.clear();
-        startSpeed.clear();
-        for (MyPetType petType : MyPetType.values())
-        {
-            startHP.put(petType.getMyPetClass(), 20D);
-        }
+        return new CompoundTag("Info", new CompoundMap());
     }
 
-    public void respawnPet()
+    public void setExtendedInfo(CompoundTag info)
     {
-        if (status != PetState.Here && getOwner().isOnline())
-        {
-            respawnTime = 0;
-            switch (createPet())
-            {
-                case Success:
-                    sendMessageToOwner(MyPetUtil.formatText(MyPetLocales.getString("Message.OnRespawn", petOwner.getLanguage()), petName));
-                    break;
-                case Canceled:
-                    sendMessageToOwner(MyPetUtil.formatText(MyPetLocales.getString("Message.SpawnPrevent", petOwner.getLanguage()), petName));
-                    break;
-                case NoSpace:
-                    sendMessageToOwner(MyPetUtil.formatText(MyPetLocales.getString("Message.SpawnNoSpace", petOwner.getLanguage()), petName));
-                    break;
-            }
-            if (MyPetConfiguration.USE_HUNGER_SYSTEM)
-            {
-                setHealth((int) Math.ceil(getMaxHealth() / 100. * (hunger + 1 - (hunger % 10))));
-            }
-            else
-            {
-                setHealth(getMaxHealth());
-            }
-        }
     }
 
     @Override
@@ -644,55 +725,18 @@ public abstract class MyPet implements IMyPet, NBTStorage
         return petNBT;
     }
 
-    public void scheduleTask()
+    @Override
+    public void load(CompoundTag myPetNBT)
     {
-        if (status != PetState.Despawned && getOwner().isOnline())
-        {
-            for (ISkillInstance skill : skills.getSkills())
-            {
-                if (skill instanceof IScheduler)
-                {
-                    ((IScheduler) skill).schedule();
-                }
-            }
-            if (status == PetState.Dead)
-            {
-                respawnTime--;
-                if (MyPetEconomy.canUseEconomy() && getOwner().hasAutoRespawnEnabled() && respawnTime >= getOwner().getAutoRespawnMin() && MyPetPermissions.has(getOwner().getPlayer(), "MyPet.user.respawn"))
-                {
-                    double cost = respawnTime * MyPetConfiguration.RESPAWN_COSTS_FACTOR + MyPetConfiguration.RESPAWN_COSTS_FIXED;
-                    if (MyPetEconomy.canPay(getOwner(), cost))
-                    {
-                        MyPetEconomy.pay(getOwner(), cost);
-                        sendMessageToOwner(MyPetUtil.formatText(MyPetLocales.getString("Message.RespawnPaid", petOwner.getLanguage()), petName, cost + " " + MyPetEconomy.getEconomy().currencyNameSingular()));
-                        respawnTime = 1;
-                    }
-                }
-                if (respawnTime <= 0)
-                {
-                    respawnPet();
-                }
-            }
-            if (MyPetConfiguration.USE_HUNGER_SYSTEM && hunger > 1 && --hungerTime <= 0)
-            {
-                hunger--;
-                hungerTime = MyPetConfiguration.HUNGER_SYSTEM_TIME;
-
-                if (MyPetConfiguration.ENABLE_EVENTS)
-                {
-                    MyPetSpoutEvent spoutEvent = new MyPetSpoutEvent(this, MyPetSpoutEventReason.HungerChange);
-                    getServer().getPluginManager().callEvent(spoutEvent);
-                }
-            }
-        }
     }
 
-    public void sendMessageToOwner(String text)
+    public static int getCustomRespawnTimeFactor(Class<? extends MyPet> myPetClass)
     {
-        if (petOwner.isOnline())
+        if (customRespawnTimeFactor.containsKey(myPetClass))
         {
-            getOwner().getPlayer().sendMessage(text);
+            return customRespawnTimeFactor.get(myPetClass);
         }
+        return 0;
     }
 
     public static void setCustomRespawnTimeFactor(Class<? extends MyPet> myPetClass, int factor)
@@ -700,70 +744,32 @@ public abstract class MyPet implements IMyPet, NBTStorage
         customRespawnTimeFactor.put(myPetClass, factor);
     }
 
-    public static void setCustomRespawnTimeFixed(Class<? extends MyPet> myPetClass, int factor)
-    {
-        customRespawnTimeFixed.put(myPetClass, factor);
-    }
 
-    public static void setFood(Class<? extends MyPet> myPetClass, int foodToAdd)
+    public static int getCustomRespawnTimeFixed(Class<? extends MyPet> myPetClass)
     {
-        if (food.containsKey(myPetClass))
-        {
-            List<Integer> foodList = food.get(myPetClass);
-            if (!foodList.contains(foodToAdd))
-            {
-                foodList.add(foodToAdd);
-            }
-        }
-        else
+        if (customRespawnTimeFixed.containsKey(myPetClass))
         {
-            List<Integer> foodList = new ArrayList<Integer>();
-            foodList.add(foodToAdd);
-            food.put(myPetClass, foodList);
+            return customRespawnTimeFixed.get(myPetClass);
         }
+        return 0;
     }
 
-    public static void setLeashFlags(Class<? extends MyPet> myPetClass, LeashFlag leashFlagToAdd)
+    public static void setCustomRespawnTimeFixed(Class<? extends MyPet> myPetClass, int factor)
     {
-        if (leashFlags.containsKey(myPetClass))
-        {
-            List<LeashFlag> leashFlagList = leashFlags.get(myPetClass);
-            if (!leashFlagList.contains(leashFlagToAdd))
-            {
-                leashFlagList.add(leashFlagToAdd);
-            }
-        }
-        else
-        {
-            List<LeashFlag> leashFlagList = new ArrayList<LeashFlag>();
-            leashFlagList.add(leashFlagToAdd);
-            leashFlags.put(myPetClass, leashFlagList);
-        }
+        customRespawnTimeFixed.put(myPetClass, factor);
     }
 
-    public boolean setSkilltree(MyPetSkillTree skillTree)
+    public static void resetOptions()
     {
-        if (skillTree == null || this.skillTree == skillTree)
-        {
-            return false;
-        }
-        skills.reset();
-        this.skillTree = skillTree;
-        for (int i = 1 ; i <= experience.getLevel() ; i++)
+        customRespawnTimeFactor.clear();
+        customRespawnTimeFixed.clear();
+        leashFlags.clear();
+        food.clear();
+        startSpeed.clear();
+        for (MyPetType petType : MyPetType.values())
         {
-            getServer().getPluginManager().callEvent(new MyPetLevelUpEvent(this, i, true));
+            startHP.put(petType.getMyPetClass(), 20D);
         }
-        return true;
-    }
-
-    public static void setStartHP(Class<? extends MyPet> myPetClass, double hp)
-    {
-        startHP.put(myPetClass, hp);
-    }
-
-    public static void setStartSpeed(Class<? extends MyPet> myPetClass, double speed)
-    {
-        startSpeed.put(myPetClass, speed);
     }
 
     @Override
@@ -771,9 +777,4 @@ public abstract class MyPet implements IMyPet, NBTStorage
     {
         return "MyPet{owner=" + getOwner().getName() + ", name=" + ChatColor.stripColor(petName) + ", exp=" + experience.getExp() + "/" + experience.getRequiredExp() + ", lv=" + experience.getLevel() + ", status=" + status.name() + ", skilltree=" + skillTree.getName() + ", worldgroup=" + worldGroup + "}";
     }
-
-    public boolean wantToRespawn()
-    {
-        return wantToRespawn;
-    }
 }
