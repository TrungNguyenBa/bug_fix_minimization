diff --git a/src/main/java/de/Keyle/MyPet/entity/types/EntityMyPet.java b/src/main/java/de/Keyle/MyPet/entity/types/EntityMyPet.java
index 547b90ae..79b121f4 100644
--- a/src/main/java/de/Keyle/MyPet/entity/types/EntityMyPet.java
+++ b/src/main/java/de/Keyle/MyPet/entity/types/EntityMyPet.java
@@ -58,26 +58,19 @@ public abstract class EntityMyPet extends EntityCreature implements IMonster
     {
         super(world);
 
-        try
-        {
-            setSize();
+        setSize();
 
-            setMyPet(myPet);
-            myPet.craftMyPet = (CraftMyPet) this.getBukkitEntity();
+        setMyPet(myPet);
+        myPet.craftMyPet = (CraftMyPet) this.getBukkitEntity();
 
-            this.petPathfinderSelector = new MyPetAIGoalSelector();
-            this.petTargetSelector = new MyPetAIGoalSelector();
+        this.petPathfinderSelector = new MyPetAIGoalSelector();
+        this.petTargetSelector = new MyPetAIGoalSelector();
 
-            this.walkSpeed = MyPet.getStartSpeed(MyPetType.getMyPetTypeByEntityClass(this.getClass()).getMyPetClass());
+        this.walkSpeed = MyPet.getStartSpeed(MyPetType.getMyPetTypeByEntityClass(this.getClass()).getMyPetClass());
 
-            petNavigation = new MCNavigation(this);
+        petNavigation = new MCNavigation(this);
 
-            this.setPathfinder();
-        }
-        catch (Exception e)
-        {
-            e.printStackTrace();
-        }
+        this.setPathfinder();
     }
 
     public boolean isMyPet()
@@ -159,17 +152,10 @@ public abstract class EntityMyPet extends EntityCreature implements IMonster
     @Override
     public void setCustomName(String ignored)
     {
-        try
-        {
-            if (getCustomNameVisible())
-            {
-                super.setCustomName(MyPetUtil.cutString(MyPetConfiguration.PET_INFO_OVERHEAD_PREFIX + myPet.getPetName() + MyPetConfiguration.PET_INFO_OVERHEAD_SUFFIX, 64));
-                this.setCustomNameVisible(false);
-            }
-        }
-        catch (Exception e)
+        if (getCustomNameVisible())
         {
-            e.printStackTrace();
+            super.setCustomName(MyPetUtil.cutString(MyPetConfiguration.PET_INFO_OVERHEAD_PREFIX + myPet.getPetName() + MyPetConfiguration.PET_INFO_OVERHEAD_SUFFIX, 64));
+            this.setCustomNameVisible(false);
         }
     }
 
@@ -225,22 +211,13 @@ public abstract class EntityMyPet extends EntityCreature implements IMonster
 
     public boolean damageEntity(DamageSource damagesource, int i)
     {
-        boolean damageEntity = false;
-        try
-        {
-            Entity entity = damagesource.getEntity();
+        Entity entity = damagesource.getEntity();
 
-            if (entity != null && !(entity instanceof EntityHuman) && !(entity instanceof EntityArrow))
-            {
-                i = (i + 1) / 2;
-            }
-            damageEntity = super.damageEntity(damagesource, i);
-        }
-        catch (Exception e)
+        if (entity != null && !(entity instanceof EntityHuman) && !(entity instanceof EntityArrow))
         {
-            e.printStackTrace();
+            i = (i + 1) / 2;
         }
-        return damageEntity;
+        return super.damageEntity(damagesource, i);
     }
 
     /**
@@ -248,29 +225,20 @@ public abstract class EntityMyPet extends EntityCreature implements IMonster
      */
     public boolean attack(Entity entity)
     {
-        boolean damageEntity = false;
-        try
+        int damage = isMyPet() ? myPet.getDamage() : 0;
+        if (entity instanceof EntityPlayer)
         {
-            int damage = isMyPet() ? myPet.getDamage() : 0;
-            if (entity instanceof EntityPlayer)
+            Player victim = (Player) entity.getBukkitEntity();
+            if (!MyPetPvP.canHurt(myPet.getOwner().getPlayer(), victim))
             {
-                Player victim = (Player) entity.getBukkitEntity();
-                if (!MyPetPvP.canHurt(myPet.getOwner().getPlayer(), victim))
+                if (myPet.hasTarget())
                 {
-                    if (myPet.hasTarget())
-                    {
-                        myPet.getCraftPet().getHandle().setGoalTarget(null);
-                    }
-                    return false;
+                    myPet.getCraftPet().getHandle().setGoalTarget(null);
                 }
+                return false;
             }
-            damageEntity = entity.damageEntity(DamageSource.mobAttack(this), damage);
         }
-        catch (Exception e)
-        {
-            e.printStackTrace();
-        }
-        return damageEntity;
+        return entity.damageEntity(DamageSource.mobAttack(this), damage);
     }
 
     @Override
@@ -312,107 +280,100 @@ public abstract class EntityMyPet extends EntityCreature implements IMonster
      */
     public boolean a_(EntityHuman entityhuman)
     {
-        try
+        if (super.a_(entityhuman))
         {
-            if (super.a_(entityhuman))
-            {
-                return true;
-            }
+            return true;
+        }
 
-            ItemStack itemStack = entityhuman.inventory.getItemInHand();
+        ItemStack itemStack = entityhuman.inventory.getItemInHand();
 
-            if (itemStack == null)
-            {
-                return false;
-            }
+        if (itemStack == null)
+        {
+            return false;
+        }
 
-            Player owner = this.getOwner().getPlayer();
+        Player owner = this.getOwner().getPlayer();
 
-            if (isMyPet() && entityhuman.getBukkitEntity() == owner)
+        if (isMyPet() && entityhuman.getBukkitEntity() == owner)
+        {
+            if (this.hasRider())
             {
-                if (this.hasRider())
-                {
-                    ((CraftPlayer) owner).getHandle().setPassengerOf(null);
-                    return true;
-                }
-                if (myPet.getSkills().isSkillActive("Ride"))
+                ((CraftPlayer) owner).getHandle().setPassengerOf(null);
+                return true;
+            }
+            if (myPet.getSkills().isSkillActive("Ride"))
+            {
+                if (itemStack.id == Ride.ITEM.getId() && canMove())
                 {
-                    if (itemStack.id == Ride.ITEM.getId() && canMove())
+                    if (MyPetPermissions.hasExtended(owner, "MyPet.user.extended.Ride"))
                     {
-                        if (MyPetPermissions.hasExtended(owner, "MyPet.user.extended.Ride"))
-                        {
-                            ((CraftPlayer) owner).getHandle().setPassengerOf(this);
-                            return true;
-                        }
-                        else
-                        {
-                            getMyPet().sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLocales.getString("Message.CantUse", myPet.getOwner().getLanguage())));
-                        }
+                        ((CraftPlayer) owner).getHandle().setPassengerOf(this);
+                        return true;
                     }
-                }
-                if (myPet.getSkills().isSkillActive("Control"))
-                {
-                    if (itemStack.id == Control.ITEM.getId())
+                    else
                     {
-                        return true;
+                        getMyPet().sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLocales.getString("Message.CantUse", myPet.getOwner().getLanguage())));
                     }
                 }
             }
-            if (canEat(itemStack))
+            if (myPet.getSkills().isSkillActive("Control"))
             {
-                if (owner != null && !MyPetPermissions.hasExtended(owner, "MyPet.user.extended.CanFeed"))
+                if (itemStack.id == Control.ITEM.getId())
                 {
-                    return false;
+                    return true;
                 }
-                if (this.petTargetSelector.hasGoal("DuelTarget"))
+            }
+        }
+        if (canEat(itemStack))
+        {
+            if (owner != null && !MyPetPermissions.hasExtended(owner, "MyPet.user.extended.CanFeed"))
+            {
+                return false;
+            }
+            if (this.petTargetSelector.hasGoal("DuelTarget"))
+            {
+                MyPetAIDuelTarget duelTarget = (MyPetAIDuelTarget) this.petTargetSelector.getGoal("DuelTarget");
+                if (duelTarget.getDuelOpponent() != null)
                 {
-                    MyPetAIDuelTarget duelTarget = (MyPetAIDuelTarget) this.petTargetSelector.getGoal("DuelTarget");
-                    if (duelTarget.getDuelOpponent() != null)
-                    {
-                        return true;
-                    }
+                    return true;
                 }
-                int addHunger = MyPetConfiguration.HUNGER_SYSTEM_POINTS_PER_FEED;
-                if (getHealth() < getMaxHealth())
+            }
+            int addHunger = MyPetConfiguration.HUNGER_SYSTEM_POINTS_PER_FEED;
+            if (getHealth() < getMaxHealth())
+            {
+                if (!entityhuman.abilities.canInstantlyBuild)
                 {
-                    if (!entityhuman.abilities.canInstantlyBuild)
-                    {
-                        --itemStack.count;
-                    }
-                    addHunger -= Math.min(3, getMaxHealth() - getHealth()) * 2;
-                    this.heal(Math.min(3, getMaxHealth() - getHealth()), RegainReason.EATING);
-                    if (itemStack.count <= 0)
-                    {
-                        entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex, null);
-                    }
-                    this.tamedEffect(true);
+                    --itemStack.count;
                 }
-                else if (myPet.getHungerValue() < 100)
+                addHunger -= Math.min(3, getMaxHealth() - getHealth()) * 2;
+                this.heal(Math.min(3, getMaxHealth() - getHealth()), RegainReason.EATING);
+                if (itemStack.count <= 0)
                 {
-                    if (!entityhuman.abilities.canInstantlyBuild)
-                    {
-                        --itemStack.count;
-                    }
-                    if (itemStack.count <= 0)
-                    {
-                        entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex, null);
-                    }
-                    this.tamedEffect(true);
+                    entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex, null);
                 }
-                if (addHunger > 0 && myPet.getHungerValue() < 100)
+                this.tamedEffect(true);
+            }
+            else if (myPet.getHungerValue() < 100)
+            {
+                if (!entityhuman.abilities.canInstantlyBuild)
                 {
-                    myPet.setHungerValue(myPet.getHungerValue() + addHunger);
-                    addHunger = 0;
+                    --itemStack.count;
                 }
-                if (addHunger < MyPetConfiguration.HUNGER_SYSTEM_POINTS_PER_FEED)
+                if (itemStack.count <= 0)
                 {
-                    return true;
+                    entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex, null);
                 }
+                this.tamedEffect(true);
+            }
+            if (addHunger > 0 && myPet.getHungerValue() < 100)
+            {
+                myPet.setHungerValue(myPet.getHungerValue() + addHunger);
+                addHunger = 0;
+            }
+            if (addHunger < MyPetConfiguration.HUNGER_SYSTEM_POINTS_PER_FEED)
+            {
+                return true;
             }
-        }
-        catch (Exception e)
-        {
-            e.printStackTrace();
         }
         return false;
     }
@@ -451,24 +412,17 @@ public abstract class EntityMyPet extends EntityCreature implements IMonster
     @Override
     protected void bo()
     {
-        try
-        {
-            bC += 1; // entityAge
-
-            getEntitySenses().a(); // sensing
-            petTargetSelector.tick(); // target selector
-            petPathfinderSelector.tick(); // pathfinder selector
-            petNavigation.tick(); // navigation
-            bp(); // "mob tick"
-
-            // controls
-            getControllerMove().c(); // move
-            getControllerLook().a(); // look
-            getControllerJump().b(); // jump
-        }
-        catch (Exception e)
-        {
-            e.printStackTrace();
-        }
+        bC += 1; // entityAge
+
+        getEntitySenses().a(); // sensing
+        petTargetSelector.tick(); // target selector
+        petPathfinderSelector.tick(); // pathfinder selector
+        petNavigation.tick(); // navigation
+        bp(); // "mob tick"
+
+        // controls
+        getControllerMove().c(); // move
+        getControllerLook().a(); // look
+        getControllerJump().b(); // jump
     }
 }
\ No newline at end of file
