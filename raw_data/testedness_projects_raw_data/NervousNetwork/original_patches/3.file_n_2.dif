diff --git a/src/main/java/org/tiernolan/nervous/network/connection/ChannelHandler.java b/src/main/java/org/tiernolan/nervous/network/connection/ChannelHandler.java
index 82a7d00..bb0bd69 100644
--- a/src/main/java/org/tiernolan/nervous/network/connection/ChannelHandler.java
+++ b/src/main/java/org/tiernolan/nervous/network/connection/ChannelHandler.java
@@ -6,7 +6,6 @@ import java.nio.channels.SocketChannel;
 import java.util.TimerTask;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
-import java.util.concurrent.atomic.AtomicReference;
 
 import org.tiernolan.nervous.network.api.NetworkManager;
 import org.tiernolan.nervous.network.api.protocol.Packet;
@@ -26,8 +25,6 @@ public class ChannelHandler implements Network {
 	private final AtomicBoolean writePending = new AtomicBoolean(false);
 	private final AtomicBoolean closePending = new AtomicBoolean(false);
 	private final AtomicBoolean syncPending = new AtomicBoolean(false);
-	private final AtomicReference<HandlerState> inProgress = new AtomicReference<HandlerState>(HandlerState.IDLE);
-	
 	private boolean write = false;
 	
 	private final Runnable readRunnable;
@@ -41,9 +38,6 @@ public class ChannelHandler implements Network {
 				} catch (IOException e) {
 					close();
 				} finally {
-					if (!inProgress.compareAndSet(HandlerState.RUNNING, HandlerState.IDLE)) {
-						throw new IllegalStateException("Channel Handler was not in RUNNING state");
-					}
 					restoreOps();
 				}
 			}
@@ -55,9 +49,6 @@ public class ChannelHandler implements Network {
 				} catch (IOException e) {
 					close();
 				} finally {
-					if (!inProgress.compareAndSet(HandlerState.RUNNING, HandlerState.IDLE)) {
-						throw new IllegalStateException("Channel Handler was not in RUNNING state");
-					}
 					restoreOps();
 				}
 			}
@@ -86,11 +77,9 @@ public class ChannelHandler implements Network {
 
 	public void setWriteRequest() {
 		if (writePending.compareAndSet(false, true)) {
-			if (inProgress.compareAndSet(HandlerState.IDLE, HandlerState.WRITE_PENDING)) {
 			queueForSync();
 		}
 	}
-	}
 	
 	public void shutdown(long timeout) {
 		serdes.shutdown();
@@ -135,9 +124,7 @@ public class ChannelHandler implements Network {
 		if (!syncPending.compareAndSet(true, false)) {
 			throw new IllegalStateException("Sync flag was false when syncing");
 		}
-		if (inProgress.compareAndSet(HandlerState.WRITE_PENDING, HandlerState.IDLE)) {
 		restoreOps();
-		}
 		if (closePending.get()) {
 			close();
 		}
@@ -155,22 +142,13 @@ public class ChannelHandler implements Network {
 	}
 
 	public Runnable getReadRunnable() {
-		setInProgress();
 		return readRunnable;
 	}
 	
 	public Runnable getWriteRunnable() {
-		setInProgress();
 		return writeRunnable;
 	}
 	
-	private void setInProgress() {
-		if (!inProgress.compareAndSet(HandlerState.IDLE, HandlerState.RUNNING) && !inProgress.compareAndSet(HandlerState.WRITE_PENDING, HandlerState.RUNNING)) {
-			throw new IllegalStateException("Channel Handler was not in IDLE or WRITE_PENDING state");
-		}
-		key.interestOps(0);
-	}
-	
 	protected Serdes getSerdes() {
 		return serdes;
 	}
@@ -185,8 +163,4 @@ public class ChannelHandler implements Network {
 		return hash;
 	}
 
-	private static enum HandlerState {
-		IDLE, WRITE_PENDING, RUNNING;
-	}
-
 }
