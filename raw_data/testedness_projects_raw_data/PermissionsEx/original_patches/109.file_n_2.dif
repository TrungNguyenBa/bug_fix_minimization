diff --git a/src/main/java/ru/tehkode/permissions/backends/PermissionBackend.java b/src/main/java/ru/tehkode/permissions/backends/PermissionBackend.java
index 5b70713..1945f31 100644
--- a/src/main/java/ru/tehkode/permissions/backends/PermissionBackend.java
+++ b/src/main/java/ru/tehkode/permissions/backends/PermissionBackend.java
@@ -9,7 +9,6 @@ import ru.tehkode.permissions.bukkit.PermissionsEx;
 import ru.tehkode.permissions.exceptions.PermissionBackendException;
 
 import java.lang.reflect.Constructor;
-import java.lang.reflect.InvocationTargetException;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.List;
@@ -211,7 +210,7 @@ public abstract class PermissionBackend {
 	 * @param config      Configuration object to access backend settings
 	 * @return new instance of PermissionBackend object
 	 */
-	public static PermissionBackend getBackend(String backendName, Configuration config) throws PermissionBackendException {
+	public static PermissionBackend getBackend(String backendName, Configuration config) {
 		return getBackend(backendName, PermissionsEx.getPermissionManager(), config, DEFAULT_BACKEND);
 	}
 
@@ -223,7 +222,7 @@ public abstract class PermissionBackend {
 	 * @param config      Configuration object to access backend settings
 	 * @return new instance of PermissionBackend object
 	 */
-	public static PermissionBackend getBackend(String backendName, PermissionManager manager, ConfigurationSection config) throws PermissionBackendException {
+	public static PermissionBackend getBackend(String backendName, PermissionManager manager, ConfigurationSection config) {
 		return getBackend(backendName, manager, config, DEFAULT_BACKEND);
 	}
 
@@ -236,7 +235,7 @@ public abstract class PermissionBackend {
 	 * @param fallBackBackend name of backend that should be used if specified backend was not found or failed to initialize
 	 * @return new instance of PermissionBackend object
 	 */
-	public static PermissionBackend getBackend(String backendName, PermissionManager manager, ConfigurationSection config, String fallBackBackend) throws PermissionBackendException{
+	public static PermissionBackend getBackend(String backendName, PermissionManager manager, ConfigurationSection config, String fallBackBackend) {
 		if (backendName == null || backendName.isEmpty()) {
 			backendName = DEFAULT_BACKEND;
 		}
@@ -263,13 +262,7 @@ public abstract class PermissionBackend {
 			} else {
 				throw new RuntimeException(e);
 			}
-		} catch (Throwable e) {
-			if (e instanceof InvocationTargetException) {
-				e = e.getCause();
-				if (e instanceof PermissionBackendException) {
-					throw ((PermissionBackendException) e);
-				}
-			}
+		} catch (Exception e) {
 			throw new RuntimeException(e);
 		}
 	}
