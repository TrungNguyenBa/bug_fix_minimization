diff --git a/src/main/java/ninja/leaping/permissionsex/data/SubjectDataBaker.java b/src/main/java/ninja/leaping/permissionsex/data/SubjectDataBaker.java
index 3bafd4d..0b63422 100644
--- a/src/main/java/ninja/leaping/permissionsex/data/SubjectDataBaker.java
+++ b/src/main/java/ninja/leaping/permissionsex/data/SubjectDataBaker.java
@@ -61,15 +61,15 @@ class SubjectDataBaker {
     public BakedSubjectData bake() throws ExecutionException {
         final Combinations<Entry<String, String>> combos = Combinations.of(activeContexts);
         final Set<Map.Entry<String, String>> visitedSubjects = new HashSet<>();
-        visitSubject(subject, combos, visitedSubjects, 0);
+        visitSubject(subject, combos, visitedSubjects);
         if (!subject.equals(pex.getDefaultIdentifier())) {
-            visitSubject(pex.getDefaultIdentifier(), combos, visitedSubjects, 1);
+            visitSubject(pex.getDefaultIdentifier(), combos, visitedSubjects);
         }
 
         return new BakedSubjectData(activeContexts, NodeTree.of(combinedPermissions, defaultValue), ImmutableList.copyOf(parents), ImmutableMap.copyOf(options));
     }
 
-    private void visitSubject(Map.Entry<String, String> subject, Combinations<Entry<String, String>> contexts, Set<Map.Entry<String, String>> visitedSubjects, int inheritanceLevel) throws ExecutionException {
+    private void visitSubject(Map.Entry<String, String> subject, Combinations<Entry<String, String>> contexts, Set<Map.Entry<String, String>> visitedSubjects) throws ExecutionException {
         if (visitedSubjects.contains(subject)) {
             pex.getLogger().warn("Potential circular inheritance found while traversing inheritance for " + this.subject + " when visiting " + subject);
             return;
@@ -77,30 +77,22 @@ class SubjectDataBaker {
         visitedSubjects.add(subject);
         ImmutableOptionSubjectData data = pex.getSubjects(subject.getKey()).getData(subject.getValue(), updateListener), transientData = pex.getTransientSubjects(subject.getKey()).getData(subject.getValue(), updateListener);
         for (Set<Entry<String, String>> combo : contexts) {
-            visitSingle(transientData, combo, inheritanceLevel);
+            visitSingle(transientData, combo);
             for (Entry<String, String> parent : transientData.getParents(combo)) {
-                visitSubject(parent, contexts, visitedSubjects, inheritanceLevel + 1);
+                visitSubject(parent, contexts, visitedSubjects);
             }
-            visitSingle(data, combo, inheritanceLevel);
+            visitSingle(data, combo);
             for (Entry<String, String> parent : data.getParents(combo)) {
-                visitSubject(parent, contexts, visitedSubjects, inheritanceLevel + 1);
+                visitSubject(parent, contexts, visitedSubjects);
             }
         }
     }
 
-    private void visitSingle(ImmutableOptionSubjectData data, Set<Entry<String, String>> specificCombination, int inheritanceLevel) {
+    private void visitSingle(ImmutableOptionSubjectData data, Set<Entry<String, String>> specificCombination) {
         for (Map.Entry<String, Integer> ent : data.getPermissions(specificCombination).entrySet()) {
-            String perm = ent.getKey();
-            if (ent.getKey().startsWith("#")) { // Prefix to exclude from inheritance
-                if (inheritanceLevel > 1) {
-                    continue;
-                }
-                perm = perm.substring(1);
-            }
-
             Integer existing = combinedPermissions.get(ent.getKey());
             if (existing == null || Math.abs(ent.getValue()) > Math.abs(existing)) {
-                combinedPermissions.put(perm, ent.getValue());
+                combinedPermissions.put(ent.getKey(), ent.getValue());
             }
         }
         parents.addAll(data.getParents(specificCombination));
