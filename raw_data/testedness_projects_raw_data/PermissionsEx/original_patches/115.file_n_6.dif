diff --git a/src/main/java/ru/tehkode/permissions/backends/caching/CachingData.java b/src/main/java/ru/tehkode/permissions/backends/caching/CachingData.java
index 5ae9b28..7b14c19 100644
--- a/src/main/java/ru/tehkode/permissions/backends/caching/CachingData.java
+++ b/src/main/java/ru/tehkode/permissions/backends/caching/CachingData.java
@@ -16,28 +16,16 @@ import java.util.concurrent.Executor;
  */
 public abstract class CachingData implements PermissionsData {
 	private static final String MAP_NULL = "\uDEAD\uBEEFNULLVAL";
-	private final Executor executor;
-	protected final Object lock;
+	protected final Executor executor;
+	private final Object worldsLock = new Object();
 	private Map<String, List<String>> permissions;
 	private Map<String, Map<String, String>> options;
 	private Map<String, List<String>> parents;
 	private Map<String, String> prefixMap = new ConcurrentHashMap<>(), suffixMap = new ConcurrentHashMap<>();
 	private Set<String> worlds;
 
-	public CachingData(Executor executor, Object lock) {
+	public CachingData(Executor executor) {
 		this.executor = executor;
-		this.lock = lock;
-	}
-
-	protected void execute(final Runnable run) {
-		executor.execute(new Runnable() {
-			@Override
-			public void run() {
-				synchronized (lock) {
-					run.run();
-				}
-			}
-		});
 	}
 
 	protected static String serializeNull(String obj) {
@@ -51,28 +39,21 @@ public abstract class CachingData implements PermissionsData {
 	protected abstract PermissionsData getBackingData();
 
 	protected void loadPermissions() {
-		synchronized (lock) {
 		this.permissions = new HashMap<>(getBackingData().getPermissionsMap());
 	}
-	}
 
 	protected void loadOptions() {
-		synchronized (lock) {
 		this.options = new HashMap<>();
 		for (Map.Entry<String, Map<String, String>> e : getBackingData().getOptionsMap().entrySet()) {
 			this.options.put(e.getKey(), new HashMap<>(e.getValue()));
 		}
 	}
-	}
 
 	protected void loadInheritance() {
-		synchronized (lock) {
 		this.parents = new HashMap<>(getBackingData().getParentsMap());
 	}
-	}
 
 	protected void clearCache() {
-		synchronized (lock) {
 		permissions = null;
 		options = null;
 		parents = null;
@@ -80,23 +61,6 @@ public abstract class CachingData implements PermissionsData {
 		suffixMap.clear();
 		clearWorldsCache();
 	}
-	}
-
-	@Override
-	public void load() {
-		synchronized (lock) {
-			getBackingData().load();
-			loadInheritance();
-			loadOptions();
-			loadPermissions();
-			getPrefix(null);
-			getSuffix(null);
-			for (String world : getWorlds()) {
-				getPrefix(world);
-				getSuffix(world);
-			}
-		}
-	}
 
 	@Override
 	public String getIdentifier() {
@@ -114,19 +78,18 @@ public abstract class CachingData implements PermissionsData {
 
 	@Override
 	public void setPermissions(List<String> permissions, final String worldName) {
-		if (this.permissions == null) {
-			loadPermissions();
-		}
 		final List<String> safePermissions = new ArrayList<>(permissions);
-		execute(new Runnable() {
+		executor.execute(new Runnable() {
 			@Override
 			public void run() {
 				clearWorldsCache();
 				getBackingData().setPermissions(safePermissions, worldName);
 			}
 		});
+		if (this.permissions != null) {
 			this.permissions.put(worldName, safePermissions);
 		}
+	}
 
 	@Override
 	public Map<String, List<String>> getPermissionsMap() {
@@ -143,7 +106,7 @@ public abstract class CachingData implements PermissionsData {
 
 	@Override
 	public Set<String> getWorlds() {
-		synchronized (lock) {
+		synchronized (worldsLock) {
 			if (worlds == null) {
 				worlds = getBackingData().getWorlds();
 			}
@@ -152,7 +115,7 @@ public abstract class CachingData implements PermissionsData {
 	}
 
 	protected void clearWorldsCache() {
-		synchronized (lock) {
+		synchronized (worldsLock) {
 			worlds = null;
 		}
 	}
@@ -161,9 +124,7 @@ public abstract class CachingData implements PermissionsData {
 	public String getPrefix(String worldName) {
 		String prefix = prefixMap.get(serializeNull(worldName));
 		if (prefix == null) {
-			synchronized (lock) {
 			prefix = getBackingData().getPrefix(worldName);
-			}
 			prefixMap.put(serializeNull(worldName), serializeNull(prefix));
 		}
 		return deserializeNull(prefix);
@@ -172,7 +133,7 @@ public abstract class CachingData implements PermissionsData {
 
 	@Override
 	public void setPrefix(final String prefix, final String worldName) {
-		execute(new Runnable() {
+		executor.execute(new Runnable() {
 			@Override
 			public void run() {
 				getBackingData().setPrefix(prefix, worldName);
@@ -185,9 +146,7 @@ public abstract class CachingData implements PermissionsData {
 	public String getSuffix(String worldName) {
 		String suffix = suffixMap.get(serializeNull(worldName));
 		if (suffix == null) {
-			synchronized (lock) {
 			suffix = getBackingData().getPrefix(worldName);
-			}
 			suffixMap.put(serializeNull(worldName), serializeNull(suffix));
 		}
 		return deserializeNull(suffix);
@@ -195,7 +154,7 @@ public abstract class CachingData implements PermissionsData {
 
 	@Override
 	public void setSuffix(final String suffix, final String worldName) {
-		execute(new Runnable() {
+		executor.execute(new Runnable() {
 			@Override
 			public void run() {
 				getBackingData().setPrefix(suffix, worldName);
@@ -218,10 +177,7 @@ public abstract class CachingData implements PermissionsData {
 
 	@Override
 	public void setOption(final String option, final String value, final String world) {
-		if (options == null) {
-			loadOptions();
-		}
-		execute(new Runnable() {
+		executor.execute(new Runnable() {
 			@Override
 			public void run() {
 				getBackingData().setOption(option, value, world);
@@ -230,7 +186,6 @@ public abstract class CachingData implements PermissionsData {
 		if (options != null) {
 			Map<String, String> optionsMap = options.get(world);
 			if (optionsMap == null) {
-				// TODO Concurrentify
 				optionsMap = new HashMap<>();
 				options.put(world, optionsMap);
 				clearWorldsCache();
@@ -272,18 +227,17 @@ public abstract class CachingData implements PermissionsData {
 
 	@Override
 	public void setParents(final List<String> rawParents, final String worldName) {
-		if (this.parents == null) {
-			loadInheritance();
-		}
 		final List<String> safeParents = new ArrayList<>(rawParents);
-		execute(new Runnable() {
+		executor.execute(new Runnable() {
 			@Override
 			public void run() {
 				getBackingData().setParents(safeParents, worldName);
 			}
 		});
+		if (this.parents != null) {
 			this.parents.put(worldName, Collections.unmodifiableList(safeParents));
 		}
+	}
 
 	@Override
 	public boolean isVirtual() {
@@ -292,7 +246,7 @@ public abstract class CachingData implements PermissionsData {
 
 	@Override
 	public void save() {
-		execute(new Runnable() {
+		executor.execute(new Runnable() {
 			@Override
 			public void run() {
 				getBackingData().save();
@@ -302,11 +256,9 @@ public abstract class CachingData implements PermissionsData {
 
 	@Override
 	public void remove() {
-		synchronized (lock) {
 		getBackingData().remove();
 		clearCache();
 	}
-	}
 
 	@Override
 	public Map<String, List<String>> getParentsMap() {
