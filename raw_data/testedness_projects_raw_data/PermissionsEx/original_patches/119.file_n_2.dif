diff --git a/src/main/java/ru/tehkode/permissions/PermissionManager.java b/src/main/java/ru/tehkode/permissions/PermissionManager.java
index e8537c9..fc40cc4 100644
--- a/src/main/java/ru/tehkode/permissions/PermissionManager.java
+++ b/src/main/java/ru/tehkode/permissions/PermissionManager.java
@@ -249,10 +249,16 @@ public class PermissionManager {
 			}
 
 			if (userUUID != null && (player.isOnline() || backend.hasUser(userUUID.toString()))) {
-				return getUser(userUUID.toString(), username, player.isOnline());
+				return getUser(userUUID.toString(), username);
 			} else {
 				// The user is offline and unconverted, so we'll just have to return an unconverted user.
-				return getUser(username, null, player.isOnline());
+				PermissionUser user = users.get(username);
+				if (user != null) {
+					return user;
+				}
+				user = createAndLoadUser(username);
+				this.users.put(username.toLowerCase(), user);
+				return user;
 			}
 		}
 	}
@@ -264,13 +270,13 @@ public class PermissionManager {
 	 * @return PermissionUser instance
 	 */
 	public PermissionUser getUser(Player player) {
-		return this.getUser(player.getUniqueId().toString(), player.getName(), true);
+		return this.getUser(player.getUniqueId().toString(), player.getName());
 	}
 
 	public PermissionUser getUser(UUID uid) {
 		final String identifier = uid.toString();
-		if (users.containsKey(identifier.toLowerCase())) {
-			return getUser(identifier, null, false);
+		if (users.containsKey(identifier)) {
+			return getUser(identifier, null);
 		}
 		OfflinePlayer ply = plugin.getServer().getPlayer(uid); // to make things cheaper, we're just checking online players (can be improved later on)
 															   // Also, only online players are really necessary to convert to proper names
@@ -278,20 +284,17 @@ public class PermissionManager {
 		if (ply != null) {
 			fallbackName = ply.getName();
 		}
-		return getUser(identifier, fallbackName, ply != null);
+		return getUser(identifier, fallbackName);
 	}
 
-	private PermissionUser getUser(String identifier, String fallbackName, boolean store) {
-		PermissionUser user = users.get(identifier.toLowerCase());
-
-		if (user != null) {
-			return user;
-		}
+	private PermissionUser getUser(String identifier, String fallbackName) {
+		PermissionUser user = users.get(identifier);
 
+		if (user == null) {
 			PermissionsUserData data = backend.getUserData(identifier);
+
 			if (data != null) {
-			if (fallbackName != null) {
-				if (!backend.hasUser(identifier) && backend.hasUser(fallbackName)) {
+				if (fallbackName != null && !backend.hasUser(identifier) && backend.hasUser(fallbackName)) {
 					if (isDebug()) {
 						getLogger().info("Converting user " + fallbackName + " (UUID " + identifier + ") to UUID-based storage");
 					}
@@ -302,21 +305,30 @@ public class PermissionManager {
 					oldData.remove();
 					// Convert
 				}
-				if (!data.isVirtual()) {
+				if (fallbackName != null) {
 					data.setOption("name", fallbackName, null);
 				}
-			}
 				user = new PermissionUser(identifier, data, this);
 				user.initialize();
-			if (store) {
-				System.out.println("Storing user " + fallbackName);
 				this.users.put(identifier.toLowerCase(), user);
-			}
 			} else {
 				throw new IllegalStateException("User " + identifier + " is null");
 			}
+		}
+
+		return user;
+	}
 
+	private PermissionUser createAndLoadUser(String identifier) {
+		PermissionUser user;
+		PermissionsUserData data = backend.getUserData(identifier);
+			if (data != null) {
+				user = new PermissionUser(identifier, data, this);
+				user.initialize();
 				return user;
+			} else {
+				throw new IllegalStateException("User " + identifier + " is null");
+			}
 	}
 
 	/**
