diff --git a/src/main/java/ninja/leaping/permissionsex/sponge/PermissionsExPlugin.java b/src/main/java/ninja/leaping/permissionsex/sponge/PermissionsExPlugin.java
index 7ea155a..bd053dc 100644
--- a/src/main/java/ninja/leaping/permissionsex/sponge/PermissionsExPlugin.java
+++ b/src/main/java/ninja/leaping/permissionsex/sponge/PermissionsExPlugin.java
@@ -51,9 +51,7 @@ import ninja.leaping.permissionsex.util.command.Commander;
 import ninja.leaping.permissionsex.util.command.CommandSpec;
 import org.slf4j.Logger;
 import org.spongepowered.api.Game;
-import org.spongepowered.api.GameProfile;
 import org.spongepowered.api.entity.player.Player;
-import org.spongepowered.api.entity.player.User;
 import org.spongepowered.api.event.Subscribe;
 import org.spongepowered.api.event.entity.player.PlayerJoinEvent;
 import org.spongepowered.api.event.entity.player.PlayerQuitEvent;
@@ -70,10 +68,8 @@ import org.spongepowered.api.service.permission.SubjectCollection;
 import org.spongepowered.api.service.permission.SubjectData;
 import org.spongepowered.api.service.permission.context.Context;
 import org.spongepowered.api.service.permission.context.ContextCalculator;
-import org.spongepowered.api.service.profile.GameProfileResolver;
 import org.spongepowered.api.service.scheduler.AsynchronousScheduler;
 import org.spongepowered.api.service.sql.SqlService;
-import org.spongepowered.api.service.user.UserStorage;
 import org.spongepowered.api.util.annotation.NonnullByDefault;
 import org.spongepowered.api.util.command.CommandMapping;
 import org.spongepowered.api.util.command.CommandSource;
@@ -185,7 +181,7 @@ public class PermissionsExPlugin implements PermissionService, ImplementationInt
             public Optional<CommandSource> apply(@Nullable String input) {
                 switch (input) {
                     case "Server":
-                        return Optional.<CommandSource>of(game.getServer().getConsole());
+                        break;
                     case "RCON":
                         break;
                 }
@@ -206,14 +202,6 @@ public class PermissionsExPlugin implements PermissionService, ImplementationInt
                     if (player.isPresent()) {
                         return player.get().getUniqueId().toString();
                     } else {
-                        Optional<GameProfileResolver> res = game.getServiceManager().provide(GameProfileResolver.class);
-                        if (res.isPresent()) {
-                            for (GameProfile profile : res.get().match(input)) {
-                                if (profile.getName().equalsIgnoreCase(input)) {
-                                    return profile.getUniqueId().toString();
-                                }
-                            }
-                        }
                         return input; // TODO: Support offline players
                     }
                 }
@@ -230,7 +218,10 @@ public class PermissionsExPlugin implements PermissionService, ImplementationInt
 
         /*
             Commands api todo items:
+            - write command flags
             - handle rolling back CommandContexts -- use a custom immutable data structure for this
+            - write PEX commands
+            - implement into Sponge
          */
         this.registerCommand(
                 CommandSpec.builder()
@@ -513,8 +504,4 @@ public class PermissionsExPlugin implements PermissionService, ImplementationInt
             }
         }));
     }
-
-    public Game getGame() {
-        return game;
-    }
 }
