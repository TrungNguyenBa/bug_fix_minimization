diff --git a/src/main/java/ru/tehkode/permissions/RegExpMatcher.java b/src/main/java/ru/tehkode/permissions/RegExpMatcher.java
index f4ca4a3..465e53a 100644
--- a/src/main/java/ru/tehkode/permissions/RegExpMatcher.java
+++ b/src/main/java/ru/tehkode/permissions/RegExpMatcher.java
@@ -1,11 +1,6 @@
 package ru.tehkode.permissions;
 
-import com.google.common.cache.Cache;
-import com.google.common.cache.CacheBuilder;
-import com.google.common.cache.CacheLoader;
-
 import java.util.HashMap;
-import java.util.concurrent.ExecutionException;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import java.util.regex.PatternSyntaxException;
@@ -14,26 +9,20 @@ public class RegExpMatcher implements PermissionMatcher {
 	public static final String RAW_REGEX_CHAR = "$";
 	protected static Pattern rangeExpression = Pattern.compile("(\\d+)-(\\d+)");
 
-	private final Cache<String, Pattern> patternCache = CacheBuilder.newBuilder().maximumSize(500).build(new CacheLoader<String, Pattern>() {
-		@Override
-		public Pattern load(String permission) throws Exception {
-			return createPattern(permission);
-		}
-	});
+	protected static HashMap<String, Pattern> patternCache = new HashMap<>();
 
 	@Override
 	public boolean isMatches(String expression, String permission) {
-		try {
-			Pattern permissionMatcher = patternCache.get(expression);
-			return permissionMatcher.matcher(permission).matches();
-		} catch (ExecutionException e) {
-			return false;
-		}
+		Pattern permissionMatcher = patternCache.get(expression);
 
+		if (permissionMatcher == null) {
+			patternCache.put(expression, permissionMatcher = createPattern(expression));
+		}
 
+		return permissionMatcher.matcher(permission).matches();
 	}
 
-	protected static Pattern createPattern(String expression) {
+	protected Pattern createPattern(String expression) {
         try {
 		    return Pattern.compile(prepareRegexp(expression), Pattern.CASE_INSENSITIVE);
         } catch (PatternSyntaxException e) {
