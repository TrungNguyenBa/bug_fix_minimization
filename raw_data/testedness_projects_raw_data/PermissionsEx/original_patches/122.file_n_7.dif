diff --git a/src/main/java/ru/tehkode/permissions/backends/sql/SQLBackend.java b/src/main/java/ru/tehkode/permissions/backends/sql/SQLBackend.java
index 75c9292..387e199 100644
--- a/src/main/java/ru/tehkode/permissions/backends/sql/SQLBackend.java
+++ b/src/main/java/ru/tehkode/permissions/backends/sql/SQLBackend.java
@@ -18,7 +18,13 @@
  */
 package ru.tehkode.permissions.backends.sql;
 
-import org.apache.commons.dbcp2.BasicDataSource;
+import org.apache.commons.dbcp2.ConnectionFactory;
+import org.apache.commons.dbcp2.DriverManagerConnectionFactory;
+import org.apache.commons.dbcp2.PoolableConnection;
+import org.apache.commons.dbcp2.PoolableConnectionFactory;
+import org.apache.commons.dbcp2.PoolingDataSource;
+import org.apache.commons.pool2.ObjectPool;
+import org.apache.commons.pool2.impl.GenericObjectPool;
 import org.bukkit.configuration.ConfigurationSection;
 import ru.tehkode.permissions.PermissionManager;
 import ru.tehkode.permissions.PermissionsGroupData;
@@ -27,20 +33,14 @@ import ru.tehkode.permissions.backends.PermissionBackend;
 import ru.tehkode.permissions.exceptions.PermissionBackendException;
 import ru.tehkode.utils.StringUtils;
 
+import javax.sql.DataSource;
 import java.io.IOException;
 import java.io.InputStream;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.sql.Statement;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
+import java.util.*;
 
 /**
  * @author code
@@ -48,10 +48,11 @@ import java.util.Set;
 public class SQLBackend extends PermissionBackend {
 	protected Map<String, List<String>> worldInheritanceCache = new HashMap<>();
 	private Map<String, Object> tableNames;
-	private BasicDataSource ds;
+	private DataSource ds;
+	private final ObjectPool<?> connectionPool;
 	private String dbDriver;
 
-	public SQLBackend(PermissionManager manager, ConfigurationSection config) throws PermissionBackendException {
+	public SQLBackend(PermissionManager manager, ConfigurationSection config) {
 		super(manager, config);
 		final String dbUri = getConfig().getString("uri", "");
 		final String dbUser = getConfig().getString("user", "");
@@ -61,16 +62,40 @@ public class SQLBackend extends PermissionBackend {
 			getConfig().set("uri", "mysql://localhost/exampledb");
 			getConfig().set("user", "databaseuser");
 			getConfig().set("password", "databasepassword");
-			throw new PermissionBackendException("SQL connection is not configured, see config.yml");
+			ds = null;
+			connectionPool = null;
+		} else {
+		    dbDriver = dbUri.split(":", 2)[0];
+
+			ConnectionFactory connectionFactory = new DriverManagerConnectionFactory("jdbc:" + dbUri, dbUser, dbPassword);
+			PoolableConnectionFactory poolableConnectionFactory = new PoolableConnectionFactory(connectionFactory, null);
+			GenericObjectPool<PoolableConnection> connectionPool = new GenericObjectPool<>(poolableConnectionFactory);
+			poolableConnectionFactory.setPool(connectionPool);
+			connectionPool.setMaxTotal(20);
+			connectionPool.setMaxWaitMillis(200);
+			this.ds = new PoolingDataSource<>(connectionPool);
+			this.connectionPool = connectionPool;
 		}
-		dbDriver = dbUri.split(":", 2)[0];
+		this.setupAliases();
+	}
 
-		this.ds = new BasicDataSource();
-		this.ds.setUrl("jdbc:" + dbUri);
-		this.ds.setUsername(dbUser);
-		this.ds.setPassword(dbPassword);
-		this.ds.setMaxTotal(20);
-		this.ds.setMaxWaitMillis(200); // 4 ticks
+	protected static String getDriverClass(String alias) {
+		if (alias.equals("mysql")) {
+			alias = "com.mysql.jdbc.Driver";
+		} else if (alias.equals("sqlite")) {
+			alias = "org.sqlite.JDBC";
+		} else if (alias.matches("postgres?")) {
+			alias = "org.postgresql.Driver";
+		}
+
+		return alias;
+	}
+
+	@Override
+	public void validate() throws PermissionBackendException {
+		if (ds == null) {
+			throw new PermissionBackendException("SQL connection is not configured, see config.yml");
+		}
 
 		try (SQLConnection conn = getSQL()) {
 			conn.checkConnection();
@@ -78,12 +103,11 @@ public class SQLBackend extends PermissionBackend {
 			if (e.getCause() != null && e.getCause() instanceof Exception) {
 				e = (Exception) e.getCause();
 			}
-			throw new PermissionBackendException("Unable to connect to SQL database", e);
+			throw new PermissionBackendException(e);
 		}
 
 		getManager().getLogger().info("Successfully connected to SQL database");
 
-		this.setupAliases();
 		this.deployTables();
 	}
 
@@ -120,7 +144,7 @@ public class SQLBackend extends PermissionBackend {
 	@Override
 	public boolean hasUser(String userName) {
 		try {
-			ResultSet res = getSQL().prepAndBind("SELECT `id` FROM `{permissions_entity}` WHERE `type` = ? AND `name` = ?", SQLData.Type.USER.ordinal(), userName).executeQuery();
+			ResultSet res = getSQL().prepAndBind("SELECT `id` FROM `{permissions_entity}` where `type` = ? AND `name` = ?", SQLData.Type.USER.ordinal(), userName).executeQuery();
 			return res.next();
 		} catch (SQLException e) {
 			return false;
@@ -130,12 +154,12 @@ public class SQLBackend extends PermissionBackend {
 	@Override
 	public boolean hasGroup(String group) {
 		try (SQLConnection conn = getSQL()) {
-			ResultSet res = conn.prepAndBind("SELECT `id` FROM `{permissions_entity}` WHERE `type` = ? AND `name` = ?", SQLData.Type.GROUP.ordinal(), group).executeQuery();
+			ResultSet res = conn.prepAndBind("SELECT `id` FROM `{permissions_entity}` where `type` = ? AND `name` = ?", SQLData.Type.GROUP.ordinal(), group).executeQuery();
 			return res.next();
 		} catch (SQLException e) {
 			return false;
 		}
-	}
+}
 
 	@Override
 	public Set<String> getDefaultGroupNames(String worldName) {
@@ -182,7 +206,7 @@ public class SQLBackend extends PermissionBackend {
 	public Collection<String> getUserNames() {
 		Set<String> ret = new HashSet<>();
 		try (SQLConnection conn = getSQL()) {
-			ResultSet set = conn.prepAndBind("SELECT `value` FROM `{permissions}` WHERE `type` = ? AND `name` = 'name' AND `value` IS NOT NULL", SQLData.Type.USER.ordinal()).executeQuery();
+			ResultSet set = conn.prepAndBind("SELECT `value` from `{permissions}` WHERE `type` = ? AND `name` = 'name' AND `value` IS NOT NULL", SQLData.Type.USER.ordinal()).executeQuery();
 			while (set.next()) {
 				ret.add(set.getString("value"));
 			}
@@ -311,18 +335,16 @@ public class SQLBackend extends PermissionBackend {
 		}
 	}
 
+	@Override
 	public void reload() {
 		worldInheritanceCache.clear();
 	}
 
 	@Override
-	public void close() throws PermissionBackendException {
+	public void close() {
 		if (ds != null) {
-			try {
-				ds.close();
-			} catch (SQLException e) {
-				throw new PermissionBackendException("Error while closing", e);
-			}
+			connectionPool.close();
+			ds = null;
 		}
 	}
 }
