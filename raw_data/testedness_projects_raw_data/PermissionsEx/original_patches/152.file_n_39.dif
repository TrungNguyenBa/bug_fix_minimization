diff --git a/src/main/java/ru/tehkode/permissions/bukkit/superperms/PermissiblePEX.java b/src/main/java/ru/tehkode/permissions/bukkit/superperms/PermissiblePEX.java
index d6accaa..076ba5b 100644
--- a/src/main/java/ru/tehkode/permissions/bukkit/superperms/PermissiblePEX.java
+++ b/src/main/java/ru/tehkode/permissions/bukkit/superperms/PermissiblePEX.java
@@ -39,12 +39,10 @@ import java.util.logging.Logger;
 
 import ru.tehkode.permissions.bukkit.superperms.PermissibleInjector.ClassNameRegexPermissibleInjector;
 import ru.tehkode.permissions.bukkit.superperms.PermissibleInjector.ServerNamePermissibleInjector;
-
 import static ru.tehkode.permissions.bukkit.CraftBukkitInterface.getCBClassName;
-
 public class PermissiblePEX extends PermissibleBase {
-	private static final AtomicBoolean LAST_CALL_ERRORED = new AtomicBoolean(false);
-	private static final Logger LOGGER = Logger.getLogger(PermissiblePEX.class.getCanonicalName());
+    private static final AtomicBoolean LAST_CALL_ERRORED = new AtomicBoolean(false);
+    private static final Logger LOGGER = Logger.getLogger(PermissiblePEX.class.getCanonicalName());
 	protected static PermissibleInjector[] injectors = new PermissibleInjector[]{
 			new ServerNamePermissibleInjector("net.glowstone.entity.GlowHumanEntity", "permissions", true, "Glowstone"),
 			new ServerNamePermissibleInjector("org.getspout.server.entity.SpoutHumanEntity", "permissions", true, "Spout"),
@@ -117,30 +115,30 @@ public class PermissiblePEX extends PermissibleBase {
 		String worldName = player.getWorld().getName();
 		String cid = worldName + ":" + permission;
 
-		try {
-			if (!this.cache.containsKey(cid)) {
-				PermissionCheckResult result = this.performCheck(permission, worldName);
-
-				if (result == PermissionCheckResult.UNDEFINED) { // return default permission
-					result = PermissionCheckResult.fromBoolean(super.hasPermission(permission));
-				}
-
-				this.cache.put(cid, result);
-			}
-
-			PermissionCheckResult result = this.cache.get(cid);
-			if (PermissionsEx.getUser(player).isDebug()) {
-				LOGGER.info("User " + player.getName() + " checked for \"" + permission + "\", cache value " + result + " found.");
-			}
-			LAST_CALL_ERRORED.set(false);
-			return result;
-		} catch (Throwable t) {
-			if (LAST_CALL_ERRORED.compareAndSet(false, true)) {
-				LOGGER.log(Level.SEVERE, "Error accessing PEX instance", t);
-			}
-			return PermissionCheckResult.UNDEFINED;
-		}
-	}
+        try {
+            if (!this.cache.containsKey(cid)) {
+                PermissionCheckResult result = this.performCheck(permission, worldName);
+
+                if (result == PermissionCheckResult.UNDEFINED) { // return default permission
+                    result = PermissionCheckResult.fromBoolean(super.hasPermission(permission));
+                }
+
+                this.cache.put(cid, result);
+            }
+
+            PermissionCheckResult result = this.cache.get(cid);
+            if (PermissionsEx.getUser(player).isDebug()) {
+                LOGGER.info("User " + player.getName() + " checked for \"" + permission + "\", cache value " + result + " found.");
+            }
+            LAST_CALL_ERRORED.set(false);
+            return result;
+        } catch (Throwable t) {
+            if (LAST_CALL_ERRORED.compareAndSet(false, true)) {
+                LOGGER.log(Level.SEVERE, "Error accessing PEX instance", t);
+            }
+            return PermissionCheckResult.UNDEFINED;
+        }
+    }
 
 	public PermissionCheckResult performCheck(String permission, String worldName) {
 		try {
@@ -154,8 +152,8 @@ public class PermissiblePEX extends PermissibleBase {
 					LOGGER.info("User " + user.getName() + " checked for \"" + permission + "\", " + (expression == null ? "no permission found" : "\"" + expression + "\" found"));
 				}
 
-				LAST_CALL_ERRORED.set(false);
-				return PermissionCheckResult.fromBoolean(user.explainExpression(expression));
+                LAST_CALL_ERRORED.set(false);
+                return PermissionCheckResult.fromBoolean(user.explainExpression(expression));
 			}
 
 			// Pass check to superperms
@@ -166,8 +164,8 @@ public class PermissiblePEX extends PermissibleBase {
 					LOGGER.info("User " + user.getName() + " checked for \"" + permission + "\" = " + result + ", found in superperms");
 				}
 
-				LAST_CALL_ERRORED.set(false);
-				return result;
+                LAST_CALL_ERRORED.set(false);
+                return result;
 			}
 
 			// check using parent nodes
@@ -186,8 +184,8 @@ public class PermissiblePEX extends PermissibleBase {
 						LOGGER.info("User " + user.getName() + " checked for \"" + permission + "\" = " + anwser + ",  found from \"" + parentPermission + "\"");
 					}
 
-					LAST_CALL_ERRORED.set(false);
-					return anwser;
+                    LAST_CALL_ERRORED.set(false);
+                    return anwser;
 				}
 			}
 
@@ -200,14 +198,14 @@ public class PermissiblePEX extends PermissibleBase {
 			LOGGER.warning("[PermissionsEx] Can't obtain PermissionsEx instance");
 			reinjectAll();
 		} catch (Throwable e) {
-			if (!LAST_CALL_ERRORED.compareAndSet(false, true)) {
-				// This should stay so if something will gone wrong user have chance to understand whats wrong actually
-				e.printStackTrace();
-			}
-			return PermissionCheckResult.UNDEFINED;
-		}
-
-		LAST_CALL_ERRORED.set(false);
+            if (!LAST_CALL_ERRORED.compareAndSet(false, true)) {
+                // This should stay so if something will gone wrong user have chance to understand whats wrong actually
+                e.printStackTrace();
+            }
+            return PermissionCheckResult.UNDEFINED;
+        }
+
+        LAST_CALL_ERRORED.set(false);
 		return PermissionCheckResult.UNDEFINED;
 	}
 
@@ -241,15 +239,15 @@ public class PermissiblePEX extends PermissibleBase {
 			if (user != null && user.getMatchingExpression(permission, this.player.getWorld().getName()) != null) {
 				return true;
 			}
-			LAST_CALL_ERRORED.set(false);
+            LAST_CALL_ERRORED.set(false);
 		} catch (PermissionsNotAvailable e) {
 			LOGGER.warning("[PermissionsEx] Can't obtain PermissionsEx instance");
 			reinjectAll();
 		} catch (Throwable t) {
-			if (LAST_CALL_ERRORED.compareAndSet(false, true)) {
-				LOGGER.log(Level.SEVERE, "[PermissionsEx] Error checking isPermissionSet for " + player.getName(), t);
-			}
-		}
+            if (LAST_CALL_ERRORED.compareAndSet(false, true)) {
+                LOGGER.log(Level.SEVERE, "[PermissionsEx] Error checking isPermissionSet for " + player.getName(), t);
+            }
+        }
 
 		return super.isPermissionSet(permission);
 	}
@@ -277,7 +275,7 @@ public class PermissiblePEX extends PermissibleBase {
 			// Groups
 			for (PermissionGroup group : user.getGroups(world)) {
 				infoSet.add(new PermissionAttachmentInfo(this.player, "groups." + group.getName(), attachment, true));
-				infoSet.add(new PermissionAttachmentInfo(this.player, "group." + group.getName(), attachment, true));
+                infoSet.add(new PermissionAttachmentInfo(this.player, "group." + group.getName(), attachment, true));
 			}
 
 			// Options
