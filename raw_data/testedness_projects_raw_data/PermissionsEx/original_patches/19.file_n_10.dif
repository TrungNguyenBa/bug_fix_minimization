diff --git a/src/main/java/ninja/leaping/permissionsex/util/command/args/CommandArgs.java b/src/main/java/ninja/leaping/permissionsex/util/command/args/CommandArgs.java
index bdc020c..8f3b2d2 100644
--- a/src/main/java/ninja/leaping/permissionsex/util/command/args/CommandArgs.java
+++ b/src/main/java/ninja/leaping/permissionsex/util/command/args/CommandArgs.java
@@ -19,6 +19,7 @@ package ninja.leaping.permissionsex.util.command.args;
 import com.google.common.base.Function;
 import com.google.common.base.Optional;
 import com.google.common.base.Predicate;
+import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Lists;
 import ninja.leaping.permissionsex.util.Translatable;
 
@@ -26,6 +27,7 @@ import javax.annotation.Nullable;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
+import java.util.Locale;
 
 import static ninja.leaping.permissionsex.util.Translations._;
 
@@ -39,7 +41,7 @@ public class CommandArgs {
 
     public CommandArgs(String rawInput, List<SingleArg> args) {
         this.rawInput = rawInput;
-        this.args = new ArrayList<>(args);
+        this.args = ImmutableList.copyOf(args);
     }
 
     public boolean hasNext() {
@@ -118,24 +120,6 @@ public class CommandArgs {
         return new CommandArgs(commandline, Collections.singletonList(new CommandArgs.SingleArg(commandline, 0, commandline.length() - 1)));
     }
 
-    public void insertArg(String value) {
-        int index = this.index < 0 ? 0 : args.get(this.index).getEndIdx();
-        this.args.add(index, new SingleArg(value, index, index));
-    }
-
-    public void removeArgs(int startIdx, int endIdx) {
-        if (index >= startIdx) {
-            if (index < endIdx) {
-                index = startIdx - 1;
-            } else {
-                index -= (endIdx - startIdx) + 1;
-            }
-        }
-        for (int i = startIdx; i <= endIdx; ++i) {
-            args.remove(startIdx);
-        }
-    }
-
     static class SingleArg {
         private final String value;
         private final int startIdx, endIdx;
