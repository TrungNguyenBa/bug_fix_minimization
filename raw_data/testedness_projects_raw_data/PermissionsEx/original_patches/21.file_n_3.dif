diff --git a/src/main/java/ninja/leaping/permissionsex/PermissionsEx.java b/src/main/java/ninja/leaping/permissionsex/PermissionsEx.java
index 014604a..fc8eb74 100644
--- a/src/main/java/ninja/leaping/permissionsex/PermissionsEx.java
+++ b/src/main/java/ninja/leaping/permissionsex/PermissionsEx.java
@@ -54,7 +54,6 @@ import java.util.Collections;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
-import java.util.Set;
 import java.util.UUID;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
@@ -76,7 +75,6 @@ public class PermissionsEx implements ImplementationInterface {
     });
     private final MemoryDataStore transientData;
     private ProfileService uuidService;
-    private volatile boolean debug;
 
     private static String fLog(Translatable trans) {
         return trans.translateFormatted(Locale.getDefault());
@@ -85,21 +83,12 @@ public class PermissionsEx implements ImplementationInterface {
     public PermissionsEx(final PermissionsExConfiguration config, ImplementationInterface impl) throws PermissionsLoadingException {
         this.config = config;
         this.impl = impl;
-        this.debug = config.isDebugEnabled();
         this.uuidService = HttpRepositoryService.forMinecraft();
         this.transientData = new MemoryDataStore();
         this.transientData.initialize(this);
         this.activeDataStore = config.getDefaultDataStore();
         this.activeDataStore.initialize(this);
         getSubjects("group").cacheAll();
-        convertUuids();
-
-        // Now that initialization is complete
-        uuidService = new CacheForwardingService(uuidService, new PEXProfileCache(getSubjects("user")));
-        registerCommand(PermissionsExCommands.createRootCommand(this));
-    }
-
-    private void convertUuids() {
         try {
             InetAddress.getByName("api.mojang.com");
             Futures.addCallback(this.activeDataStore.performBulkOperation(new Function<DataStore, Integer>() {
@@ -187,6 +176,8 @@ public class PermissionsEx implements ImplementationInterface {
             getLogger().warn(fLog(_("Unable to resolve Mojang API for UUID conversion. Do you have an internet connection? UUID conversion will not proceed (but may not be necessary).")));
         }
 
+        // Now that initialization is complete
+        uuidService = new CacheForwardingService(uuidService, new PEXProfileCache(getSubjects("user")));
     }
 
     public SubjectCache getSubjects(String type) {
@@ -263,12 +254,8 @@ public class PermissionsEx implements ImplementationInterface {
         }
     }
 
-    public void setDebugMode(boolean debug) {
-        this.debug = debug;
-    }
-
     public boolean hasDebugMode() {
-        return this.debug;
+        return config.isDebugEnabled();
     }
 
     public void close() {
@@ -300,17 +287,6 @@ public class PermissionsEx implements ImplementationInterface {
         impl.registerCommand(command);
     }
 
-    @Override
-    public Set<CommandSpec> getImplementationCommands() {
-        return impl.getImplementationCommands();
-    }
-
-    @Override
-    public String getVersion() {
-        return impl.getVersion();
-    }
-
-
     public PermissionsExConfiguration getConfig() {
         return this.config;
     }
