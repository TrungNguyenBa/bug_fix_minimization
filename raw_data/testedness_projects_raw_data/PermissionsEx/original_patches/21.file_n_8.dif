diff --git a/src/main/java/ninja/leaping/permissionsex/util/command/ChildCommands.java b/src/main/java/ninja/leaping/permissionsex/util/command/ChildCommands.java
index 271f64f..28de4c1 100644
--- a/src/main/java/ninja/leaping/permissionsex/util/command/ChildCommands.java
+++ b/src/main/java/ninja/leaping/permissionsex/util/command/ChildCommands.java
@@ -84,12 +84,7 @@ public class ChildCommands {
 
         @Override
         protected Object parseValue(CommandArgs args) throws ArgumentParseException {
-            final String key = args.next();
-            if (!children.containsKey(key.toLowerCase())) {
-                throw args.createError(_("Input command %s was not a valid subcommand!", key));
-            }
-
-            return children.get(key.toLowerCase());
+            return children.get(args.next());
         }
 
         @Override
@@ -113,7 +108,7 @@ public class ChildCommands {
 
         @Override
         public <TextType> TextType getUsage(Commander<TextType> context) {
-            List<Object> args = new ArrayList<>(Math.max(0, children.size() * 2 - 1));
+            List<Object> args = new ArrayList<>(children.size() * 2 - 1);
             for (Iterator<String> it = filterCommands(context).iterator(); it.hasNext();) {
                 args.add(it.next());
                 if (it.hasNext()) {
@@ -140,33 +135,22 @@ public class ChildCommands {
     }
 
     public static CommandExecutor executor(CommandElement arg) {
-        return new ChildCommandExecutor(arg.getKey().getUntranslated(), null);
-    }
-
-    public static CommandExecutor optionalExecutor(CommandElement arg, CommandExecutor fallbackExecutor) {
-        return new ChildCommandExecutor(arg.getKey().getUntranslated(), fallbackExecutor);
+        return new ChildCommandExecutor(arg.getKey().getUntranslated());
     }
 
     private static class ChildCommandExecutor implements CommandExecutor {
         private final String key;
-        private final CommandExecutor fallbackExecutor;
 
-        private ChildCommandExecutor(String key, CommandExecutor fallbackExecutor) {
+        private ChildCommandExecutor(String key) {
             this.key = key;
-            this.fallbackExecutor = fallbackExecutor;
         }
 
         @Override
         public <TextType> void execute(Commander<TextType> src, CommandContext args) throws CommandException {
             CommandSpec spec = args.getOne(key);
             if (spec == null) {
-                if (fallbackExecutor != null) {
-                    fallbackExecutor.execute(src, args);
-                    return;
-                } else {
                 throw new CommandException(_("Invalid subcommand state -- only one command spec must be provided for child arg %s", key));
             }
-            }
             spec.getExecutor().execute(src, args);
         }
     }
