diff --git a/src/main/java/ninja/leaping/permissionsex/sponge/PermissionsExPlugin.java b/src/main/java/ninja/leaping/permissionsex/sponge/PermissionsExPlugin.java
index 3b32817..f43bb35 100644
--- a/src/main/java/ninja/leaping/permissionsex/sponge/PermissionsExPlugin.java
+++ b/src/main/java/ninja/leaping/permissionsex/sponge/PermissionsExPlugin.java
@@ -43,6 +43,7 @@ import ninja.leaping.permissionsex.exception.PermissionsLoadingException;
 import ninja.leaping.permissionsex.util.command.MessageFormatter;
 import org.slf4j.Logger;
 import org.spongepowered.api.Game;
+import org.spongepowered.api.Server;
 import org.spongepowered.api.event.entity.player.PlayerJoinEvent;
 import org.spongepowered.api.event.entity.player.PlayerQuitEvent;
 import org.spongepowered.api.event.state.PreInitializationEvent;
@@ -56,13 +57,11 @@ import org.spongepowered.api.service.config.DefaultConfig;
 import org.spongepowered.api.service.permission.PermissionService;
 import org.spongepowered.api.service.permission.SubjectCollection;
 import org.spongepowered.api.service.permission.SubjectData;
-import org.spongepowered.api.service.permission.context.Context;
 import org.spongepowered.api.service.permission.context.ContextCalculator;
 import org.spongepowered.api.service.scheduler.AsynchronousScheduler;
 import org.spongepowered.api.service.sql.SqlService;
 import org.spongepowered.api.text.Text;
 import org.spongepowered.api.text.Texts;
-import org.spongepowered.api.text.format.TextStyles;
 import org.spongepowered.api.util.annotation.NonnullByDefault;
 import org.spongepowered.api.util.command.CommandCallable;
 import org.spongepowered.api.util.command.CommandException;
@@ -80,7 +79,6 @@ import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.ResourceBundle;
-import java.util.Set;
 import java.util.UUID;
 import java.util.concurrent.Callable;
 import java.util.concurrent.ConcurrentHashMap;
@@ -158,7 +156,7 @@ public class PermissionsExPlugin implements PermissionService, ImplementationInt
         } catch (IOException | ObjectMappingException e) {
             throw new RuntimeException(e);
         }
-        defaults = getSubjects(manager.getDefaultIdentifier().getKey()).get(manager.getDefaultIdentifier().getValue());
+        defaults = getSubjects(PermissionService.SUBJECTS_SYSTEM).get("default");
 
         setCommandSourceProvider(getUserSubjects(), new Function<String, Optional<CommandSource>>() {
             @Override
@@ -211,13 +209,6 @@ public class PermissionsExPlugin implements PermissionService, ImplementationInt
             public boolean call(CommandSource source, String arguments, List<String> parents) throws CommandException {
                 source.sendMessage(messageFactory.combined("You are: ", messageFactory.subject(Maps.immutableEntry(source.getContainingCollection().getIdentifier(), source.getIdentifier()))));
                 source.sendMessage(Texts.of(translated("Your command ran!!")));
-                for (Map.Entry<Set<Context>, Map<String, Boolean>> entry : getDefaultData().getAllPermissions().entrySet()) {
-                    source.sendMessage(Texts.of(Texts.of(TextStyles.BOLD, "Default in contexts: "), entry.getKey().toString()));
-                    for (Map.Entry<String, Boolean> ent : entry.getValue().entrySet()) {
-                        source.sendMessage(messageFactory.permission(ent.getKey(), ent.getValue() ? 1 : -1));
-                    }
-
-                }
                 source.sendMessage(messageFactory.combined("Has permission: ", messageFactory.booleanVal(source.hasPermission("permissionsex.test.check"))));
                 return true;
             }
