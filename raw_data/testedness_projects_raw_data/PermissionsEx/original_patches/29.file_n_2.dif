diff --git a/src/main/java/ninja/leaping/permissionsex/backends/memory/MemoryOptionSubjectData.java b/src/main/java/ninja/leaping/permissionsex/backends/memory/MemoryOptionSubjectData.java
index 1e723d5..5b121af 100644
--- a/src/main/java/ninja/leaping/permissionsex/backends/memory/MemoryOptionSubjectData.java
+++ b/src/main/java/ninja/leaping/permissionsex/backends/memory/MemoryOptionSubjectData.java
@@ -48,14 +48,10 @@ public class MemoryOptionSubjectData implements ImmutableOptionSubjectData {
             throw new ExceptionInInitializerError(e); // This error indicates a programming issue
         }
     }
-
-    protected static <K, V> Map<K, V> updateImmutable(Map<K, V> input, K newKey, V newVal) {
-        Map<K, V> ret = new HashMap<>(input);
-        ret.put(newKey, newVal);
-        return Collections.unmodifiableMap(ret);
-    }
     @ConfigSerializable
     protected static class DataEntry {
+
+
         @Setting private Map<String, Integer> permissions;
         @Setting private Map<String, String> options;
         @Setting private List<String> parents;
@@ -72,7 +68,7 @@ public class MemoryOptionSubjectData implements ImmutableOptionSubjectData {
         }
 
         public DataEntry withOption(String key, String value) {
-            return new DataEntry(permissions, updateImmutable(options, key, value), parents, defaultValue);
+            return new DataEntry(permissions, ImmutableMap.<String, String>builder().putAll(options).put(key, value).build(), parents, defaultValue);
         }
 
         public DataEntry withoutOption(String key) {
@@ -95,7 +91,7 @@ public class MemoryOptionSubjectData implements ImmutableOptionSubjectData {
         }
 
         public DataEntry withPermission(String permission, int value) {
-            return new DataEntry(updateImmutable(permissions, permission, value), options, parents, defaultValue);
+            return new DataEntry(ImmutableMap.<String, Integer>builder().putAll(permissions).put(permission, value).build(), options, parents, defaultValue);
 
         }
 
@@ -155,10 +151,6 @@ public class MemoryOptionSubjectData implements ImmutableOptionSubjectData {
         return new DataEntry();
     }
 
-    protected final MemoryOptionSubjectData newWithUpdated(Set<Entry<String, String>> key, DataEntry val) {
-        return newData(updateImmutable(contexts, immutSet(key), val));
-    }
-
     protected MemoryOptionSubjectData newData(Map<Set<Entry<String, String>>, DataEntry> contexts) {
         return new MemoryOptionSubjectData(contexts);
     }
@@ -205,15 +197,15 @@ public class MemoryOptionSubjectData implements ImmutableOptionSubjectData {
     @Override
     public ImmutableOptionSubjectData setOption(Set<Entry<String, String>> contexts, String key, String value) {
         if (value == null) {
-            return newWithUpdated(contexts, getDataEntryOrNew(contexts).withoutOption(key));
+            return newData(ImmutableMap.<Set<Entry<String, String>>, DataEntry>builder().putAll(this.contexts).put(immutSet(contexts), getDataEntryOrNew(contexts).withoutOption(key)).build());
         } else {
-            return newWithUpdated(contexts, getDataEntryOrNew(contexts).withOption(key, value));
+            return newData(ImmutableMap.<Set<Entry<String, String>>, DataEntry>builder().putAll(this.contexts).put(immutSet(contexts), getDataEntryOrNew(contexts).withOption(key, value)).build());
         }
     }
 
     @Override
     public ImmutableOptionSubjectData setOptions(Set<Entry<String, String>> contexts, Map<String, String> values) {
-        return newWithUpdated(contexts, getDataEntryOrNew(contexts).withOptions(values));
+        return newData(ImmutableMap.<Set<Entry<String, String>>, DataEntry>builder().putAll(this.contexts).put(immutSet(contexts), getDataEntryOrNew(contexts).withOptions(values)).build());
     }
 
     @Override
@@ -221,7 +213,7 @@ public class MemoryOptionSubjectData implements ImmutableOptionSubjectData {
         if (!this.contexts.containsKey(contexts)) {
             return this;
         }
-        return newWithUpdated(contexts, getDataEntryOrNew(contexts).withoutOptions());
+        return newData(ImmutableMap.<Set<Entry<String, String>>, DataEntry>builder().putAll(this.contexts).put(immutSet(contexts), getDataEntryOrNew(contexts).withoutOptions()).build());
     }
 
     @Override
@@ -260,15 +252,15 @@ public class MemoryOptionSubjectData implements ImmutableOptionSubjectData {
     @Override
     public ImmutableOptionSubjectData setPermission(Set<Entry<String, String>> contexts, String permission, int value) {
         if (value == 0) {
-            return newWithUpdated(contexts, getDataEntryOrNew(contexts).withoutPermission(permission));
+            return newData(ImmutableMap.<Set<Entry<String, String>>, DataEntry>builder().putAll(this.contexts).put(immutSet(contexts), getDataEntryOrNew(contexts).withoutPermission(permission)).build());
         } else {
-            return newWithUpdated(contexts, getDataEntryOrNew(contexts).withPermission(permission, value));
+            return newData(ImmutableMap.<Set<Entry<String, String>>, DataEntry>builder().putAll(this.contexts).put(immutSet(contexts), getDataEntryOrNew(contexts).withPermission(permission, value)).build());
         }
     }
 
     @Override
     public ImmutableOptionSubjectData setPermissions(Set<Entry<String, String>> contexts, Map<String, Integer> values) {
-        return newWithUpdated(contexts, getDataEntryOrNew(contexts).withPermissions(values));
+        return newData(ImmutableMap.<Set<Entry<String, String>>, DataEntry>builder().putAll(this.contexts).put(immutSet(contexts), getDataEntryOrNew(contexts).withPermissions(values)).build());
     }
 
     @Override
@@ -292,7 +284,7 @@ public class MemoryOptionSubjectData implements ImmutableOptionSubjectData {
         if (!this.contexts.containsKey(contexts)) {
             return this;
         }
-        return newWithUpdated(contexts, getDataEntryOrNew(contexts).withoutPermissions());
+        return newData(ImmutableMap.<Set<Entry<String, String>>, DataEntry>builder().putAll(this.contexts).put(immutSet(contexts), getDataEntryOrNew(contexts).withoutPermissions()).build());
 
     }
 
@@ -325,7 +317,7 @@ public class MemoryOptionSubjectData implements ImmutableOptionSubjectData {
     @Override
     public ImmutableOptionSubjectData addParent(Set<Entry<String, String>> contexts, String type, String ident) {
         DataEntry entry = getDataEntryOrNew(contexts);
-        return newWithUpdated(contexts, entry.withAddedParent(type + ":" + ident));
+        return newData(ImmutableMap.<Set<Entry<String, String>>, DataEntry>builder().putAll(this.contexts).put(immutSet(contexts), entry.withAddedParent(type + ":" + ident)).build());
     }
 
     @Override
@@ -339,19 +331,19 @@ public class MemoryOptionSubjectData implements ImmutableOptionSubjectData {
         if (!ent.parents.contains(combined)) {
             return this;
         }
-        return newWithUpdated(contexts, ent.withRemovedParent(combined));
+        return newData(ImmutableMap.<Set<Entry<String, String>>, DataEntry>builder().putAll(this.contexts).put(immutSet(contexts), ent.withRemovedParent(combined)).build());
     }
 
     @Override
     public ImmutableOptionSubjectData setParents(Set<Entry<String, String>> contexts, List<Entry<String, String>> parents) {
         DataEntry entry = getDataEntryOrNew(contexts);
-        return newWithUpdated(contexts, entry.withParents(Lists.transform(parents, new Function<Entry<String,String>, String>() {
+        return newData(ImmutableMap.<Set<Entry<String, String>>, DataEntry>builder().putAll(this.contexts).put(immutSet(contexts), entry.withParents(Lists.transform(parents, new Function<Entry<String,String>, String>() {
             @Nullable
             @Override
             public String apply(@Nullable Entry<String, String> input) {
                 return input.getKey() + ":" + input.getValue();
             }
-        })));
+        }))).build());
     }
 
     @Override
@@ -375,7 +367,7 @@ public class MemoryOptionSubjectData implements ImmutableOptionSubjectData {
         if (!this.contexts.containsKey(contexts)) {
             return this;
         }
-        return newWithUpdated(contexts, getDataEntryOrNew(contexts).withoutParents());
+        return newData(ImmutableMap.<Set<Entry<String, String>>, DataEntry>builder().putAll(this.contexts).put(immutSet(contexts), getDataEntryOrNew(contexts).withoutParents()).build());
     }
 
     public int getDefaultValue(Set<Entry<String, String>> contexts) {
@@ -384,7 +376,7 @@ public class MemoryOptionSubjectData implements ImmutableOptionSubjectData {
     }
 
     public ImmutableOptionSubjectData setDefaultValue(Set<Entry<String, String>> contexts, int defaultValue) {
-        return newWithUpdated(contexts, getDataEntryOrNew(contexts).withDefaultValue(defaultValue));
+        return newData(ImmutableMap.<Set<Entry<String, String>>, DataEntry>builder().putAll(this.contexts).put(immutSet(contexts), getDataEntryOrNew(contexts).withDefaultValue(defaultValue)).build());
     }
 
     @Override
