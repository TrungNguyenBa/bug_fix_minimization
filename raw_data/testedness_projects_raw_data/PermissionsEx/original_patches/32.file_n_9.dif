diff --git a/src/main/java/ninja/leaping/permissionsex/sponge/PEXSubject.java b/src/main/java/ninja/leaping/permissionsex/sponge/PEXSubject.java
index f2d4aed..2b5bc4a 100644
--- a/src/main/java/ninja/leaping/permissionsex/sponge/PEXSubject.java
+++ b/src/main/java/ninja/leaping/permissionsex/sponge/PEXSubject.java
@@ -17,16 +17,19 @@
 package ninja.leaping.permissionsex.sponge;
 
 import com.google.common.base.Optional;
-import com.google.common.base.Preconditions;
 import com.google.common.cache.CacheBuilder;
 import com.google.common.cache.CacheLoader;
 import com.google.common.cache.LoadingCache;
+import com.google.common.collect.ImmutableSet;
+import ninja.leaping.permissionsex.Combinations;
 import ninja.leaping.permissionsex.data.Caching;
 import ninja.leaping.permissionsex.data.ImmutableOptionSubjectData;
 import ninja.leaping.permissionsex.sponge.option.MemoryOptionSubjectData;
 import ninja.leaping.permissionsex.sponge.option.OptionSubject;
 import ninja.leaping.permissionsex.sponge.option.OptionSubjectData;
+import org.spongepowered.api.service.permission.MemorySubjectData;
 import org.spongepowered.api.service.permission.Subject;
+import org.spongepowered.api.service.permission.SubjectData;
 import org.spongepowered.api.service.permission.context.Context;
 import org.spongepowered.api.service.permission.context.ContextCalculator;
 import org.spongepowered.api.util.Tristate;
@@ -35,6 +38,7 @@ import org.spongepowered.api.util.command.CommandSource;
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.List;
+import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.ExecutionException;
 
@@ -57,7 +61,6 @@ public class PEXSubject implements OptionSubject, Caching {
     public PEXSubject(String identifier, PEXOptionSubjectData data, PEXSubjectCollection collection) {
         this.identifier = identifier;
         this.data = data;
-        data.addListener(this);
         this.collection = collection;
         this.transientData = new MemoryOptionSubjectData(collection.getPlugin());
     }
@@ -89,8 +92,6 @@ public class PEXSubject implements OptionSubject, Caching {
 
     @Override
     public Optional<String> getOption(Set<Context> contexts, String key) {
-        Preconditions.checkNotNull(contexts, "contexts");
-        Preconditions.checkNotNull(key, "key");
         try {
             return Optional.fromNullable(dataCache.get(contexts).getOptions().get(key));
         } catch (ExecutionException e) {
@@ -115,9 +116,6 @@ public class PEXSubject implements OptionSubject, Caching {
 
     @Override
     public Tristate getPermissionValue(Set<Context> contexts, String permission) {
-        Preconditions.checkNotNull(contexts, "contexts");
-        Preconditions.checkNotNull(permission, "permission");
-
         try {
             return dataCache.get(contexts).getPermissions().get(permission);
         } catch (ExecutionException e) {
@@ -133,8 +131,6 @@ public class PEXSubject implements OptionSubject, Caching {
 
     @Override
     public boolean isChildOf(Set<Context> contexts, Subject parent) {
-        Preconditions.checkNotNull(contexts, "contexts");
-        Preconditions.checkNotNull(parent, "parent");
         return getParents(contexts).contains(parent);
     }
 
@@ -154,7 +150,6 @@ public class PEXSubject implements OptionSubject, Caching {
 
     @Override
     public List<Subject> getParents(Set<Context> contexts) {
-        Preconditions.checkNotNull(contexts, "contexts");
         try {
             return dataCache.get(contexts).getParents();
         } catch (ExecutionException e) {
@@ -166,13 +161,6 @@ public class PEXSubject implements OptionSubject, Caching {
     @Override
     public void clearCache(ImmutableOptionSubjectData newData) {
         dataCache.invalidateAll();
-        /* TODO parent handling
-        for (Subject child : plugin.getAllActiveSubjects()) {
-            if (child.isChildOf(this)) {
-                child.dataCache.invalidateAll(); // (or something that clears cache without requiring a param)
-            }
-        }
-         */
     }
 
     @Override
