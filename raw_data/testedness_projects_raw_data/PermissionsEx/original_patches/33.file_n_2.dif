diff --git a/src/main/java/ninja/leaping/permissionsex/backends/file/FileOptionSubjectData.java b/src/main/java/ninja/leaping/permissionsex/backends/file/FileOptionSubjectData.java
index b5e44da..4763652 100644
--- a/src/main/java/ninja/leaping/permissionsex/backends/file/FileOptionSubjectData.java
+++ b/src/main/java/ninja/leaping/permissionsex/backends/file/FileOptionSubjectData.java
@@ -18,7 +18,6 @@ package ninja.leaping.permissionsex.backends.file;
 
 import com.google.common.base.Function;
 import com.google.common.collect.Collections2;
-import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Maps;
@@ -28,10 +27,10 @@ import ninja.leaping.configurate.objectmapping.ObjectMappingException;
 import ninja.leaping.configurate.objectmapping.Setting;
 import ninja.leaping.configurate.objectmapping.serialize.ConfigSerializable;
 import ninja.leaping.permissionsex.data.ImmutableOptionSubjectData;
+import org.spongepowered.api.service.permission.Subject;
 import org.spongepowered.api.service.permission.context.Context;
 
 import javax.annotation.Nullable;
-import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
@@ -109,20 +108,6 @@ public class FileOptionSubjectData implements ImmutableOptionSubjectData {
             return new DataEntry(permissions, options, parents, defaultValue);
         }
 
-        public DataEntry withParents(String type, List<String> parents) {
-            if (parents == null) {
-                Map<String, List<String>> newParents = new HashMap<>(this.parents);
-                newParents.remove(type);
-                return new DataEntry(permissions, options, newParents, defaultValue);
-            } else {
-                return new DataEntry(permissions, options, ImmutableMap.<String, List<String>>builder().putAll(this.parents).put(type, parents).build(), defaultValue);
-            }
-        }
-
-        public DataEntry withoutParents() {
-            return new DataEntry(permissions, options, ImmutableMap.<String, List<String>>of(), defaultValue);
-        }
-
         @Override
         public String toString() {
             return "DataEntry{" +
@@ -276,88 +261,33 @@ public class FileOptionSubjectData implements ImmutableOptionSubjectData {
     }
 
     @Override
-    public Map<Set<Context>, List<Map.Entry<String, String>>> getAllParents() {
-        return Maps.transformValues(contexts, new Function<DataEntry, List<Map.Entry<String, String>>>() {
-            @Nullable
-            @Override
-            public List<Map.Entry<String, String>> apply(@Nullable DataEntry dataEntry) {
-                return unwrapNestedMap(dataEntry.parents);
-            }
-        });
-    }
-
-    private <K, V> List<Map.Entry<K, V>> unwrapNestedMap(Map<K, List<V>> map) {
-        List<Map.Entry<K, V>> ret = new ArrayList<>();
-        for (Map.Entry<K, List<V>> ent : map.entrySet()) {
-            for (V val : ent.getValue()) {
-                ret.add(Maps.immutableEntry(ent.getKey(), val));
-            }
-        }
-        return ret;
+    public Map<Set<Context>, List<Subject>> getAllParents() {
+        return null;
     }
 
     @Override
-    public List<Map.Entry<String, String>> getParents(Set<Context> contexts) {
-        DataEntry ent = this.contexts.get(contexts);
-        return ent == null ? null : unwrapNestedMap(ent.parents);
-    }
-
-    private <T> List<T> addToCopyOrNew(List<T> orig, T addItem) {
-        ImmutableList.Builder<T> build = ImmutableList.builder();
-        if (orig != null) {
-            build.addAll(orig);
-        }
-        build.add(addItem);
-        return build.build();
+    public List<Subject> getParents(Set<Context> set) {
+        return null;
     }
 
     @Override
-    public ImmutableOptionSubjectData addParent(Set<Context> contexts, String type, String ident) {
-        DataEntry entry = getDataEntryOrNew(contexts);
-        return new FileOptionSubjectData(ImmutableMap.<Set<Context>, DataEntry>builder().putAll(this.contexts).put(contexts, entry.withParents(type, addToCopyOrNew(entry.parents.get(type), ident))).build());
+    public ImmutableOptionSubjectData addParent(Set<Context> set, Subject subject) {
+        return null;
     }
 
     @Override
-    public ImmutableOptionSubjectData removeParent(Set<Context> contexts, String type, String identifier) {
-        DataEntry ent = this.contexts.get(contexts);
-        if (ent == null) {
-            return this;
-        }
-
-        List<String> oldParents = ent.parents.get(type), newParents;
-        if (oldParents == null) {
-            return this;
-        }
-        newParents = new ArrayList<>(oldParents);
-        newParents.remove(identifier);
-        if (newParents.isEmpty()) {
-            newParents = null;
-        }
-        return new FileOptionSubjectData(ImmutableMap.<Set<Context>, DataEntry>builder().putAll(this.contexts).put(contexts, ent.withParents(type, newParents)).build());
+    public ImmutableOptionSubjectData removeParent(Set<Context> set, Subject subject) {
+        return null;
     }
 
     @Override
     public ImmutableOptionSubjectData clearParents() {
-        if (this.contexts.isEmpty()) {
-            return this;
+        return null;
     }
 
-        Map<Set<Context>, DataEntry> newValue = Maps.transformValues(this.contexts, new Function<DataEntry, DataEntry>() {
-            @Nullable
     @Override
-            public DataEntry apply(@Nullable DataEntry dataEntry) {
-                return dataEntry.withoutParents();
-            }
-        });
-        return new FileOptionSubjectData(newValue);
-    }
-
-    @Override
-    public ImmutableOptionSubjectData clearParents(Set<Context> contexts) {
-        if (!this.contexts.containsKey(contexts)) {
-            return this;
-        }
-        return new FileOptionSubjectData(ImmutableMap.<Set<Context>, DataEntry>builder().putAll(this.contexts).put(contexts, getDataEntryOrNew(contexts).withoutParents()).build());
+    public ImmutableOptionSubjectData clearParents(Set<Context> set) {
+        return null;
     }
 
     void serialize(ConfigurationNode node) throws ObjectMappingException {
@@ -369,7 +299,7 @@ public class FileOptionSubjectData implements ImmutableOptionSubjectData {
             existingSections.put(contextsFrom(child), child);
         }
         for (Map.Entry<Set<Context>, DataEntry> ent : contexts.entrySet()) {
-            ConfigurationNode contextSection = existingSections.remove(ent.getKey());
+            ConfigurationNode contextSection = existingSections.get(ent.getKey());
             if (contextSection == null) {
                 contextSection = node.getAppendedNode();
                 ConfigurationNode contextsNode = contextSection.getNode(KEY_CONTEXTS);
@@ -379,9 +309,6 @@ public class FileOptionSubjectData implements ImmutableOptionSubjectData {
             }
             DataEntry.MAPPER.bind(ent.getValue()).serialize(contextSection);
         }
-        for (ConfigurationNode unused : existingSections.values()) {
-            unused.setValue(null);
-        }
     }
 
     public int getDefaultValue(Set<Context> contexts) {
@@ -394,11 +321,6 @@ public class FileOptionSubjectData implements ImmutableOptionSubjectData {
     }
 
     @Override
-    public Iterable<Set<Context>> getActiveContexts() {
-        return contexts.keySet();
-    }
-
-    @Override
     public String toString() {
         return "FileOptionSubjectData{" +
                 "contexts=" + contexts +
