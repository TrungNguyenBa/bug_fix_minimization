diff --git a/src/main/java/ninja/leaping/permissionsex/sponge/PEXOptionSubjectData.java b/src/main/java/ninja/leaping/permissionsex/sponge/PEXOptionSubjectData.java
index d21e9e4..3ec75c3 100644
--- a/src/main/java/ninja/leaping/permissionsex/sponge/PEXOptionSubjectData.java
+++ b/src/main/java/ninja/leaping/permissionsex/sponge/PEXOptionSubjectData.java
@@ -17,8 +17,6 @@
 package ninja.leaping.permissionsex.sponge;
 
 import com.google.common.base.Function;
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Maps;
 import ninja.leaping.permissionsex.data.Caching;
 import ninja.leaping.permissionsex.data.ImmutableOptionSubjectData;
@@ -29,26 +27,20 @@ import org.spongepowered.api.service.permission.context.Context;
 import org.spongepowered.api.util.Tristate;
 
 import javax.annotation.Nullable;
-import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.ExecutionException;
 
 /**
  * Wrapper around ImmutableSubjectData that writes to backend each change
  */
 public class PEXOptionSubjectData implements OptionSubjectData, Caching {
-    private final PermissionsExPlugin plugin;
 	private final SubjectCache cache;
 	private final String identifier;
 	private volatile ImmutableOptionSubjectData data;
-    private final ConcurrentMap<Set<Context>, List<Subject>> parentsCache = new ConcurrentHashMap<>();
 
-    public PEXOptionSubjectData(SubjectCache cache, String identifier, PermissionsExPlugin plugin) throws ExecutionException {
-        this.plugin = plugin;
+	public PEXOptionSubjectData(SubjectCache cache, String identifier) throws ExecutionException {
 		this.cache = cache;
 		this.identifier = identifier;
 		clearCache(cache.getData(identifier, this));
@@ -67,10 +59,7 @@ public class PEXOptionSubjectData implements OptionSubjectData, Caching {
 
 	@Override
 	public void clearCache(ImmutableOptionSubjectData newData) {
-        synchronized (parentsCache) {
 		this.data = newData;
-            parentsCache.clear();
-        }
 	}
 
 	@Override
@@ -158,45 +147,22 @@ public class PEXOptionSubjectData implements OptionSubjectData, Caching {
 
 	@Override
 	public Map<Set<Context>, List<Subject>> getAllParents() {
-        synchronized (parentsCache) {
-            for (Set<Context> set : data.getActiveContexts()) {
-                getParents(set);
-            }
-            return ImmutableMap.copyOf(parentsCache);
-        }
+		return data.getAllParents();
 	}
 
 	@Override
 	public List<Subject> getParents(Set<Context> set) {
-        List<Subject> parents = parentsCache.get(set);
-        if (parents == null) {
-            synchronized (parentsCache) {
-                List<Map.Entry<String, String>> rawParents = data.getParents(set);
-                if (rawParents == null) {
-                    parents = ImmutableList.of();
-                } else {
-                    parents = new ArrayList<>(rawParents.size());
-                    for (Map.Entry<String, String> ent : rawParents) {
-                        parents.add(plugin.getSubjects(ent.getKey()).get().get(ent.getValue()));
-                    }
-                }
-                List<Subject> existingParents = parentsCache.putIfAbsent(set, parents);
-                if (existingParents != null) {
-                    parents = existingParents;
-                }
-            }
-        }
-        return parents;
+		return data.getParents(set);
 	}
 
 	@Override
 	public boolean addParent(Set<Context> set, Subject subject) {
-        return updateIfChanged(data, data.addParent(set, subject.getContainingCollection().getIdentifier(), subject.getIdentifier()));
+		return updateIfChanged(data, data.addParent(set, subject));
 	}
 
 	@Override
 	public boolean removeParent(Set<Context> set, Subject subject) {
-        return updateIfChanged(data, data.removeParent(set, subject.getContainingCollection().getIdentifier(), subject.getIdentifier()));
+		return updateIfChanged(data, data.removeParent(set, subject));
 	}
 
 	@Override
