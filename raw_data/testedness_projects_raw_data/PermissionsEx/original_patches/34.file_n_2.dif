diff --git a/src/main/java/ninja/leaping/permissionsex/backends/file/FileDataStore.java b/src/main/java/ninja/leaping/permissionsex/backends/file/FileDataStore.java
index d0f1585..26cfe99 100644
--- a/src/main/java/ninja/leaping/permissionsex/backends/file/FileDataStore.java
+++ b/src/main/java/ninja/leaping/permissionsex/backends/file/FileDataStore.java
@@ -234,27 +234,23 @@ public class FileDataStore implements DataStore {
     public ListenableFuture<ImmutableOptionSubjectData> setData(String type, String identifier, ImmutableOptionSubjectData data) {
         Preconditions.checkNotNull(type, "type");
         Preconditions.checkNotNull(identifier, "identifier");
-        try {
-            return Futures.immediateFuture(setDataSync(type, identifier, data));
-        } catch (PermissionsLoadingException | ObjectMappingException e) {
-            return Futures.immediateFailedFuture(e);
-        }
-
-    }
-
-    private ImmutableOptionSubjectData setDataSync(String type, String identifier, ImmutableOptionSubjectData data) throws ObjectMappingException, PermissionsLoadingException {
-        if (data == null) {
-            permissionsConfig.getNode(typeToSection(type), identifier).setValue(null);
-            return null;
-        }
+        Preconditions.checkNotNull(data, "data");
 
         if (data instanceof FileOptionSubjectData) {
-            ((FileOptionSubjectData) data).serialize(permissionsConfig.getNode(typeToSection(type), identifier));
+            try {
+                ((FileOptionSubjectData) data).serialize(permissionsConfig.getNode(typeToSection(type), identifier));
+            } catch (ObjectMappingException e) {
+                return Futures.immediateFailedFuture(e);
+            }
         } else {
-            throw new IllegalArgumentException("Data passed was not a FileOptionSubjectData");
+            return Futures.immediateFailedFuture(new IllegalArgumentException("Data passed was not a FileOptionSubjectData"));
+        }
+        try {
+            save();
+        } catch (PermissionsLoadingException e) {
+            return Futures.immediateFailedFuture(e);
         }
-        save();
-        return data;
+        return Futures.immediateFuture(data);
     }
 
     @Override
