diff --git a/src/main/java/ninja/leaping/permissionsex/sponge/PEXSubject.java b/src/main/java/ninja/leaping/permissionsex/sponge/PEXSubject.java
index fa868e6..beb605c 100644
--- a/src/main/java/ninja/leaping/permissionsex/sponge/PEXSubject.java
+++ b/src/main/java/ninja/leaping/permissionsex/sponge/PEXSubject.java
@@ -20,8 +20,10 @@ import com.google.common.base.Optional;
 import com.google.common.collect.ImmutableSet;
 import ninja.leaping.permissionsex.data.Caching;
 import ninja.leaping.permissionsex.data.ImmutableOptionSubjectData;
+import ninja.leaping.permissionsex.sponge.option.OptionSubjectData;
 import org.spongepowered.api.service.permission.MemorySubjectData;
 import org.spongepowered.api.service.permission.Subject;
+import org.spongepowered.api.service.permission.SubjectCollection;
 import org.spongepowered.api.service.permission.SubjectData;
 import org.spongepowered.api.service.permission.context.Context;
 import org.spongepowered.api.service.permission.context.ContextCalculator;
@@ -38,16 +40,16 @@ import java.util.Set;
  * Permissions subject implementation
  */
 public class PEXSubject implements Subject, Caching {
-    private final PEXSubjectCollection collection;
+    private final PermissionsExPlugin plugin;
     private final PEXOptionSubjectData data;
     private final SubjectData transientData;
     private final String identifier;
 
-    public PEXSubject(String identifier, PEXOptionSubjectData data, PEXSubjectCollection collection) {
-        this.identifier = identifier;
+    public PEXSubject(String identifier, PEXOptionSubjectData data, PermissionsExPlugin plugin) {
+        this.plugin = plugin;
         this.data = data;
-        this.collection = collection;
-        this.transientData = new MemorySubjectData(collection.getPlugin());
+        this.identifier = identifier;
+        this.transientData = new MemorySubjectData(plugin);
     }
 
     @Override
@@ -62,7 +64,7 @@ public class PEXSubject implements Subject, Caching {
 
     @Override
     public PEXSubjectCollection getContainingCollection() {
-        return this.collection;
+        return null;
     }
 
     @Override
@@ -91,23 +93,15 @@ public class PEXSubject implements Subject, Caching {
 
     @Override
     public Tristate getPermissionValue(Set<Context> contexts, String permission) {
-        Integer value = emptyOrNull(data.getCurrent().getPermissions(contexts)).get(permission);
-        if (value == null) {
-             value = emptyOrNull(data.getCurrent().getPermissions(SubjectData.GLOBAL_CONTEXT)).get(permission);
-        }
-        if (value == null) {
-            value = data.getCurrent().getDefaultValue(contexts);
-        }
-        if (value == 0) {
-            value = data.getCurrent().getDefaultValue(SubjectData.GLOBAL_CONTEXT);
-        }
+        Integer contextValue = emptyOrNull(data.getCurrent().getPermissions(contexts)).get(permission);
+        Integer globalValue = emptyOrNull(data.getCurrent().getPermissions(SubjectData.GLOBAL_CONTEXT)).get(permission);
+        if (contextValue != null) {
+            return contextValue > 0 ? Tristate.TRUE : Tristate.FALSE;
 
-        if (value < 0) {
-            return Tristate.FALSE;
-        } else if (value == 0) {
-            return Tristate.UNDEFINED;
+        } else if (globalValue != null) {
+            return globalValue > 0 ? Tristate.TRUE : Tristate.FALSE;
         } else {
-            return Tristate.TRUE;
+            return Tristate.UNDEFINED;
         }
     }
 
@@ -124,7 +118,7 @@ public class PEXSubject implements Subject, Caching {
     @Override
     public Set<Context> getActiveContexts() {
         Set<Context> set = new HashSet<>();
-        for (ContextCalculator calc : this.collection.getPlugin().getContextCalculators()) {
+        for (ContextCalculator calc : plugin.getContextCalculators()) {
             calc.accumulateContexts(this, set);
         }
         return ImmutableSet.copyOf(set);
