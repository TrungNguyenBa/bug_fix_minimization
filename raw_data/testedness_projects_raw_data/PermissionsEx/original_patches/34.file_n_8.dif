diff --git a/src/main/java/ninja/leaping/permissionsex/sponge/PEXSubjectCollection.java b/src/main/java/ninja/leaping/permissionsex/sponge/PEXSubjectCollection.java
index 43d60ac..6ff2ac8 100644
--- a/src/main/java/ninja/leaping/permissionsex/sponge/PEXSubjectCollection.java
+++ b/src/main/java/ninja/leaping/permissionsex/sponge/PEXSubjectCollection.java
@@ -19,14 +19,13 @@ package ninja.leaping.permissionsex.sponge;
 import com.google.common.base.Function;
 import com.google.common.base.Optional;
 import com.google.common.base.Supplier;
-import com.google.common.collect.Iterables;
 import ninja.leaping.permissionsex.data.SubjectCache;
 import org.spongepowered.api.service.permission.Subject;
 import org.spongepowered.api.service.permission.SubjectCollection;
 import org.spongepowered.api.service.permission.context.Context;
 import org.spongepowered.api.util.command.CommandSource;
 
-import javax.annotation.Nullable;
+import java.util.Collections;
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.ExecutionException;
@@ -49,15 +48,11 @@ public class PEXSubjectCollection implements SubjectCollection {
         return cache.getType();
     }
 
-    PermissionsExPlugin getPlugin() {
-        return this.plugin;
-    }
-
     @Override
     public Subject get(String identifier) {
         System.out.println("Getting subject for " + identifier);
         try {
-            return new PEXSubject(identifier, new PEXOptionSubjectData(cache, identifier), this);
+            return new PEXSubject(identifier, new PEXOptionSubjectData(cache, identifier), plugin);
         } catch (ExecutionException e) {
             throw new RuntimeException(e);
         }
@@ -70,18 +65,11 @@ public class PEXSubjectCollection implements SubjectCollection {
 
     @Override
     public Iterable<Subject> getAllSubjects() {
-        return Iterables.transform(cache.getAllIdentifiers(), new Function<String, Subject>() {
-            @Nullable
-            @Override
-            public Subject apply(String s) {
-                return get(s);
-            }
-        });
+        return Collections.emptySet();
     }
 
     @Override
     public Map<Subject, Boolean> getAllWithPermission(String permission) {
-        // TODO: Alter the specification to only return active subjects?
         return null;
     }
 
