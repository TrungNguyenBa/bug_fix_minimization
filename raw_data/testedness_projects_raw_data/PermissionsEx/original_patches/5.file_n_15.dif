diff --git a/permissionsex-core/src/main/java/ninja/leaping/permissionsex/backend/sql/SqlDataStore.java b/permissionsex-core/src/main/java/ninja/leaping/permissionsex/backend/sql/SqlDataStore.java
index 8e8baac..b0aff53 100644
--- a/permissionsex-core/src/main/java/ninja/leaping/permissionsex/backend/sql/SqlDataStore.java
+++ b/permissionsex-core/src/main/java/ninja/leaping/permissionsex/backend/sql/SqlDataStore.java
@@ -29,8 +29,9 @@ import ninja.leaping.configurate.objectmapping.Setting;
 import ninja.leaping.permissionsex.backend.AbstractDataStore;
 import ninja.leaping.permissionsex.backend.DataStore;
 import ninja.leaping.permissionsex.backend.sql.tables.SqlSubject;
+import ninja.leaping.permissionsex.data.Caching;
 import ninja.leaping.permissionsex.data.ContextInheritance;
-import ninja.leaping.permissionsex.data.ImmutableSubjectData;
+import ninja.leaping.permissionsex.data.ImmutableOptionSubjectData;
 import ninja.leaping.permissionsex.exception.PermissionsLoadingException;
 import ninja.leaping.permissionsex.rank.RankLadder;
 
@@ -61,7 +62,7 @@ public final class SqlDataStore extends AbstractDataStore {
     private Dao<SqlSubject, String> subjectDao;
 
     @Override
-    protected ImmutableSubjectData getDataInternal(String type, String identifier) throws PermissionsLoadingException {
+    protected ImmutableOptionSubjectData getDataInternal(String type, String identifier) throws PermissionsLoadingException {
         try (Connection conn = sql.getConnection()) {
             SqlSubject subject = subjectDao.queryBuilder().where().eq("type", type).eq("identifier", identifier).queryForFirst();
         } catch (SQLException e) {
@@ -71,7 +72,7 @@ public final class SqlDataStore extends AbstractDataStore {
     }
 
     @Override
-    protected ListenableFuture<ImmutableSubjectData> setDataInternal(String type, String identifier, ImmutableSubjectData data) {
+    protected ListenableFuture<ImmutableOptionSubjectData> setDataInternal(String type, String identifier, ImmutableOptionSubjectData data) {
         return null;
     }
 
@@ -137,7 +138,7 @@ public final class SqlDataStore extends AbstractDataStore {
     }
 
     @Override
-    public Iterable<Map.Entry<Map.Entry<String, String>, ImmutableSubjectData>> getAll() {
+    public Iterable<Map.Entry<Map.Entry<String, String>, ImmutableOptionSubjectData>> getAll() {
         return ImmutableList.of();
     }
 
