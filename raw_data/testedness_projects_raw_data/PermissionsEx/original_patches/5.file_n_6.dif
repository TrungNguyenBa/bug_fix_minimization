diff --git a/permissionsex-core/src/main/java/ninja/leaping/permissionsex/PermissionsEx.java b/permissionsex-core/src/main/java/ninja/leaping/permissionsex/PermissionsEx.java
index 207daae..dc4e7a5 100644
--- a/permissionsex-core/src/main/java/ninja/leaping/permissionsex/PermissionsEx.java
+++ b/permissionsex-core/src/main/java/ninja/leaping/permissionsex/PermissionsEx.java
@@ -42,10 +42,11 @@ import ninja.leaping.permissionsex.data.CacheListenerHolder;
 import ninja.leaping.permissionsex.data.Caching;
 import ninja.leaping.permissionsex.data.CalculatedSubject;
 import ninja.leaping.permissionsex.data.ContextInheritance;
-import ninja.leaping.permissionsex.data.ImmutableSubjectData;
+import ninja.leaping.permissionsex.data.ImmutableOptionSubjectData;
 import ninja.leaping.permissionsex.data.RankLadderCache;
 import ninja.leaping.permissionsex.data.SubjectCache;
 import ninja.leaping.permissionsex.exception.PermissionsLoadingException;
+import ninja.leaping.permissionsex.rank.RankLadder;
 import ninja.leaping.permissionsex.util.PEXProfileCache;
 import ninja.leaping.permissionsex.util.Translatable;
 import ninja.leaping.permissionsex.util.command.CommandSpec;
@@ -159,11 +160,11 @@ public class PermissionsEx implements ImplementationInterface, Caching<ContextIn
                                 }
                                 converted[0]++;
 
-                                ImmutableSubjectData oldData = input.getData("user", profile.getName(), null);
+                                ImmutableOptionSubjectData oldData = input.getData("user", profile.getName(), null);
                                 final String finalLookupName = lookupName;
-                                Futures.addCallback(input.setData("user", newIdentifier, oldData.setOption(ImmutableSet.<Map.Entry<String, String>>of(), "name", profile.getName())), new FutureCallback<ImmutableSubjectData>() {
+                                Futures.addCallback(input.setData("user", newIdentifier, oldData.setOption(ImmutableSet.<Map.Entry<String, String>>of(), "name", profile.getName())), new FutureCallback<ImmutableOptionSubjectData>() {
                                     @Override
-                                    public void onSuccess(@Nullable ImmutableSubjectData result) {
+                                    public void onSuccess(@Nullable ImmutableOptionSubjectData result) {
                                         input.setData("user", finalLookupName, null);
                                     }
 
@@ -271,17 +272,17 @@ public class PermissionsEx implements ImplementationInterface, Caching<ContextIn
             public ListenableFuture<Void> apply(@Nullable final DataStore store) {
                 System.out.println("Performing bulk operation");
                 try {
-                    return Futures.immediateFuture(Futures.transform(Futures.allAsList(Iterables.transform(expected.getAll(), new Function<Map.Entry<Map.Entry<String, String>, ImmutableSubjectData>, ListenableFuture<ImmutableSubjectData>>() {
+                    return Futures.immediateFuture(Futures.transform(Futures.allAsList(Iterables.transform(expected.getAll(), new Function<Map.Entry<Map.Entry<String, String>, ImmutableOptionSubjectData>, ListenableFuture<ImmutableOptionSubjectData>>() {
                         @Nullable
                         @Override
-                        public ListenableFuture<ImmutableSubjectData> apply(Map.Entry<Map.Entry<String, String>, ImmutableSubjectData> input) {
+                        public ListenableFuture<ImmutableOptionSubjectData> apply(Map.Entry<Map.Entry<String, String>, ImmutableOptionSubjectData> input) {
                             System.out.println("Setting data for " + input.getKey());
                             return store.setData(input.getKey().getKey(), input.getKey().getValue(), input.getValue());
                         }
-                    })), new Function<List<ImmutableSubjectData>, Void>() {
+                    })), new Function<List<ImmutableOptionSubjectData>, Void>() {
                         @Nullable
                         @Override
-                        public Void apply(@Nullable List<ImmutableSubjectData> input) {
+                        public Void apply(@Nullable List<ImmutableOptionSubjectData> input) {
                             Futures.getUnchecked(store.setContextInheritance(expected.getContextInheritance(null)));
                             for (String ladder : store.getAllRankLadders()) {
                                 Futures.getUnchecked(store.setRankLadder(ladder, expected.getRankLadder(ladder, null)));
