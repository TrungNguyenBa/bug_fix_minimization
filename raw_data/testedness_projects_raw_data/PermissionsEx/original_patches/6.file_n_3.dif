diff --git a/permissionsex-core/src/main/java/ninja/leaping/permissionsex/backend/ConversionUtils.java b/permissionsex-core/src/main/java/ninja/leaping/permissionsex/backend/ConversionUtils.java
index ea507cc..81c7bbf 100644
--- a/permissionsex-core/src/main/java/ninja/leaping/permissionsex/backend/ConversionUtils.java
+++ b/permissionsex-core/src/main/java/ninja/leaping/permissionsex/backend/ConversionUtils.java
@@ -26,7 +26,6 @@ import java.util.regex.Pattern;
 
 public class ConversionUtils {
     private static final Pattern MATCHER_GROUP_PATTERN = Pattern.compile("\\((.*?)\\)");
-
     public static String convertLegacyPermission(String permission) {
         final StringBuffer ret = new StringBuffer();
         Matcher matcher = MATCHER_GROUP_PATTERN.matcher(permission); // Convert regex multimatches to shell globs
@@ -40,21 +39,19 @@ public class ConversionUtils {
         return ret.toString();
     }
 
-    @SuppressWarnings("unchecked")
-    public static <T extends ImmutableOptionSubjectData> T transfer(ImmutableOptionSubjectData old, T newData) {
-        ImmutableOptionSubjectData tempRet = newData;
+    public static ImmutableOptionSubjectData transfer(ImmutableOptionSubjectData old, ImmutableOptionSubjectData newData) {
         for (Map.Entry<Set<Map.Entry<String, String>>, Map<String, Integer>> ent : old.getAllPermissions().entrySet()) {
-            tempRet = tempRet.setPermissions(ent.getKey(), ent.getValue());
+            newData = newData.setPermissions(ent.getKey(), ent.getValue());
         }
         for (Map.Entry<Set<Map.Entry<String, String>>, Map<String, String>> ent : old.getAllOptions().entrySet()) {
-            tempRet = tempRet.setOptions(ent.getKey(), ent.getValue());
+            newData = newData.setOptions(ent.getKey(), ent.getValue());
         }
         for (Map.Entry<Set<Map.Entry<String, String>>, List<Map.Entry<String, String>>> ent : old.getAllParents().entrySet()) {
-            tempRet = tempRet.setParents(ent.getKey(), ent.getValue());
+            newData = newData.setParents(ent.getKey(), ent.getValue());
         }
         for (Map.Entry<Set<Map.Entry<String, String>>, Integer> ent : old.getAllDefaultValues().entrySet()) {
-            tempRet = tempRet.setDefaultValue(ent.getKey(), ent.getValue());
+            newData = newData.setDefaultValue(ent.getKey(), ent.getValue());
         }
-        return (T) tempRet;
+        return newData;
     }
 }
