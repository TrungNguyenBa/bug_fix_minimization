diff --git a/permissionsex-core/src/main/java/ninja/leaping/permissionsex/backend/memory/MemoryContextInheritance.java b/permissionsex-core/src/main/java/ninja/leaping/permissionsex/backend/memory/MemoryContextInheritance.java
index 86e6d10..e13cea7 100644
--- a/permissionsex-core/src/main/java/ninja/leaping/permissionsex/backend/memory/MemoryContextInheritance.java
+++ b/permissionsex-core/src/main/java/ninja/leaping/permissionsex/backend/memory/MemoryContextInheritance.java
@@ -18,7 +18,6 @@ package ninja.leaping.permissionsex.backend.memory;
 
 import com.google.common.base.Function;
 import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Lists;
 import ninja.leaping.configurate.objectmapping.Setting;
 import ninja.leaping.configurate.objectmapping.serialize.ConfigSerializable;
@@ -66,7 +65,7 @@ public class MemoryContextInheritance implements ContextInheritance {
     @Override
     public ContextInheritance setParents(Map.Entry<String, String> context, List<Map.Entry<String, String>> parents) {
         final Map<String, List<String>> newData = new HashMap<>(contextInheritance);
-        newData.put(Util.subjectToString(context), ImmutableList.copyOf(Lists.transform(ImmutableList.copyOf(parents), new Function<Map.Entry<String, String>, String>() {
+        newData.put(Util.subjectToString(context), ImmutableList.copyOf(Lists.transform(parents, new Function<Map.Entry<String, String>, String>() {
             @Nullable
             @Override
             public String apply(@Nullable Map.Entry<String, String> input) {
@@ -76,42 +75,9 @@ public class MemoryContextInheritance implements ContextInheritance {
         return newCopy(newData);
     }
 
-    @Override
-    public Map<Map.Entry<String, String>, List<Map.Entry<String, String>>> getAllParents() {
-        ImmutableMap.Builder<Map.Entry<String, String>, List<Map.Entry<String, String>>> ret = ImmutableMap.builder();
-        for (Map.Entry<String, List<String>> entry : contextInheritance.entrySet()) {
-            ret.put(Util.subjectFromString(entry.getKey()), Lists.transform(entry.getValue(), new Function<String, Map.Entry<String, String>>() {
-                @Nullable
-                @Override
-                public Map.Entry<String, String> apply(@Nullable String input) {
-                    return Util.subjectFromString(input);
-                }
-            }));
-        }
-        return ret.build();
-    }
-
     protected MemoryContextInheritance newCopy(Map<String, List<String>> raw) {
         return new MemoryContextInheritance(raw);
     }
 
-    public static MemoryContextInheritance fromExistingContextInheritance(ContextInheritance inheritance) {
-        if (inheritance instanceof MemoryContextInheritance) {
-            return ((MemoryContextInheritance) inheritance);
-        } else {
-            Map<String, List<String>> data = new HashMap<>();
-            for (Map.Entry<Map.Entry<String, String>, List<Map.Entry<String, String>>> ent : inheritance.getAllParents().entrySet()) {
-                data.put(Util.subjectToString(ent.getKey()), Lists.transform(ent.getValue(), new Function<Map.Entry<String, String>, String>() {
-                    @Nullable
-                    @Override
-                    public String apply(@Nullable Map.Entry<String, String> input) {
-                        return Util.subjectToString(input);
-                    }
-                }));
-            }
-            return new MemoryContextInheritance(data);
-        }
-    }
-
 
 }
