diff --git a/src/main/java/ru/tehkode/permissions/data/Qualifier.java b/src/main/java/ru/tehkode/permissions/data/Qualifier.java
index 9daf24b..2b8a516 100644
--- a/src/main/java/ru/tehkode/permissions/data/Qualifier.java
+++ b/src/main/java/ru/tehkode/permissions/data/Qualifier.java
@@ -4,12 +4,11 @@ import com.google.common.base.Function;
 import com.google.common.collect.ImmutableList;
 import com.google.common.util.concurrent.Futures;
 import com.google.common.util.concurrent.ListenableFuture;
+import ru.tehkode.permissions.EntityType;
 import ru.tehkode.permissions.backends.PermissionBackend;
 
 import javax.annotation.Nullable;
-import java.lang.reflect.Method;
 import java.util.ArrayList;
-import java.util.Collection;
 import java.util.List;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
@@ -18,12 +17,17 @@ import java.util.concurrent.atomic.AtomicInteger;
 /**
 * A qualifier for a match group.
 */
-public class Qualifier {
+public abstract class Qualifier {
 	private static final AtomicInteger REGISTERED_COUNT = new AtomicInteger(0);
 	private static final ConcurrentMap<String, Qualifier> STRING_LOOKUP = new ConcurrentHashMap<>();
 
 	public static final Qualifier USER = new Qualifier("user") {
 		@Override
+		public boolean matches(Context context, String value) {
+			return context.getEntityType() == EntityType.USER && context.getEntityName().equals(value);
+		}
+
+		@Override
 		public Qualifier getInheritanceQualifier() {
 			return GROUP;
 		}
@@ -35,38 +39,42 @@ public class Qualifier {
 	};
 	public static final Qualifier GROUP = new Qualifier("group") {
 		@Override
+		public boolean matches(Context context, String value) {
+			return context.getEntityType() == EntityType.GROUP && context.getEntityName().equals(value);
+		}
+
+		@Override
 		public String getInheritanceSectionName() {
 			return MatcherGroup.INHERITANCE_KEY;
 		}
 	};
 	public static final Qualifier WORLD = new Qualifier("world") {
 		@Override
+		public boolean matches(Context context, String value) {
+			return context.getWorld() != null && context.getWorld().equals(value);
+		}
+
+		@Override
 		public String getInheritanceSectionName() {
 			return MatcherGroup.WORLD_INHERITANCE_KEY;
 		}
 	};
 	public static final Qualifier UNTIL = new Qualifier("until") {
 		@Override
-		public boolean matches(Context context, String rawValue) {
+		public boolean matches(Context context, String value) {
 			// null or stored until is after the context until means this matches
-			final Collection<String> until = context.getValues(this);
-			if (until == null || until.isEmpty()) {
-				return true;
-			}
-			long value = Long.parseLong(rawValue);
-			for (String test : until) {
-				if (value <= Long.parseLong(test)) {
-					return false;
-				}
-			}
-			return true;
+			return context.getUntil() == 0 || Long.parseLong(value) > context.getUntil();
+		}
+	};
+	public static final Qualifier SERVER = new Qualifier("server") {
+		@Override
+		public boolean matches(Context context, String value) {
+			return context.getServerTags().contains(value);
 		}
 	};
-	public static final Qualifier SERVER = new Qualifier("server");
 
 	private final String name;
 	private final int id;
-	private final boolean simpleMatches;
 
 	public Qualifier(String name) {
 		this.name = name;
@@ -75,13 +83,6 @@ public class Qualifier {
 		} else {
 			throw new IllegalStateException("A qualifier named " + this.name + " already exists!");
 		}
-		boolean simpleMatches;
-		try {
-			simpleMatches = getClass() == Qualifier.class || getClass().getDeclaredMethod("matches") == null;
-		} catch (NoSuchMethodException e) {
-			simpleMatches = true;
-		}
-		this.simpleMatches = simpleMatches;
 	}
 
 	public static int getRegisteredCount() {
@@ -92,9 +93,7 @@ public class Qualifier {
 		return STRING_LOOKUP.get(key);
 	}
 
-	public boolean matches(Context context, String value) {
-		return context.getValues(this).contains(value);
-	}
+	public abstract boolean matches(Context context, String value);
 
 	public String getName() {
 		return name;
@@ -116,9 +115,6 @@ public class Qualifier {
 		return this;
 	}
 
-	public boolean usesSimpleMatches() {
-		return simpleMatches;
-	}
 	@Override
 	public String toString() {
 		return getName();
@@ -141,7 +137,7 @@ public class Qualifier {
 	}
 
 	private ListenableFuture<List<MatcherGroup>> processInherited(final PermissionBackend backend, final Qualifier qual, final List<String> inherited, String current) {
-		return Futures.transform(backend.getMatchingGroups(qual.getInheritanceSectionName(), StaticContext.of(qual, current)), new Function<List<MatcherGroup>, List<MatcherGroup>>() {
+		return Futures.transform(backend.getMatchingGroups(qual.getInheritanceSectionName(), qual, current), new Function<List<MatcherGroup>, List<MatcherGroup>>() {
 			@Override
 			public List<MatcherGroup> apply(@Nullable List<MatcherGroup> matcherGroups) {
 				final List<MatcherGroup> inheritanceGroups = new ArrayList<>();
