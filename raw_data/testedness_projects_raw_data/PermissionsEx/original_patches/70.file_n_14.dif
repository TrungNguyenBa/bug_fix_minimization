diff --git a/src/main/java/ru/tehkode/permissions/query/PermissionQuery.java b/src/main/java/ru/tehkode/permissions/query/PermissionQuery.java
index a0c3721..cf4abda 100644
--- a/src/main/java/ru/tehkode/permissions/query/PermissionQuery.java
+++ b/src/main/java/ru/tehkode/permissions/query/PermissionQuery.java
@@ -2,30 +2,29 @@ package ru.tehkode.permissions.query;
 
 import com.google.common.base.Function;
 import com.google.common.collect.HashMultimap;
-import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
-import com.google.common.collect.ImmutableMultimap;
+import com.google.common.collect.Lists;
 import com.google.common.collect.Multimap;
+import com.google.common.collect.Sets;
 import com.google.common.util.concurrent.Futures;
 import com.google.common.util.concurrent.ListenableFuture;
 import org.bukkit.World;
 import org.bukkit.entity.Player;
+import ru.tehkode.permissions.EntityType;
 import ru.tehkode.permissions.PermissionManager;
 import ru.tehkode.permissions.data.Context;
 import ru.tehkode.permissions.data.MatcherGroup;
 import ru.tehkode.permissions.data.Qualifier;
-import ru.tehkode.permissions.data.StaticContext;
 
-import java.util.Collection;
+import javax.annotation.Nullable;
+import java.util.ArrayList;
 import java.util.Collections;
-import java.util.Comparator;
 import java.util.Date;
-import java.util.HashMap;
+import java.util.Iterator;
 import java.util.List;
-import java.util.Map;
+import java.util.Set;
 import java.util.UUID;
-import java.util.concurrent.ConcurrentMap;
-import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Future;
 
 /**
  * Object holding state for a permission query about to happen.
@@ -34,18 +33,19 @@ import java.util.concurrent.ExecutionException;
  */
 public abstract class PermissionQuery<T extends PermissionQuery<T>> implements Context {
 	private final PermissionManager manager;
-	private final ConcurrentMap<CacheKey, CacheElement> cache;
 	/**
 	 * This is present as an ugly hack to get fancy generic'd return types without casting each time.
 	 */
 	@SuppressWarnings("unchecked")
 	private final T self = (T) this;
+	protected Qualifier primaryKey;
+	protected String primaryValue;
+	private String world;
+	private long until;
 	private boolean inheritance = true;
-	private final Multimap<Qualifier, String> implicitValues = HashMultimap.create(), explicitValues = HashMultimap.create();
 
-	protected PermissionQuery(PermissionManager manager, ConcurrentMap<CacheKey, CacheElement> cache) {
+	protected PermissionQuery(PermissionManager manager) {
 		this.manager = manager;
-		this.cache = cache;
 	}
 
 	protected PermissionManager getManager() {
@@ -62,7 +62,9 @@ public abstract class PermissionQuery<T extends PermissionQuery<T>> implements C
 	}
 
 	public T user(String identifier) {
-		return putQualifier(Qualifier.USER, identifier);
+		primaryKey = Qualifier.USER;
+		primaryValue = identifier;
+		return self;
 	}
 
 	public T user(Player user) {
@@ -76,7 +78,12 @@ public abstract class PermissionQuery<T extends PermissionQuery<T>> implements C
 	}
 
 	public T world(String world) {
-		return putQualifier(Qualifier.WORLD, world);
+		this.world = world;
+		if (this.primaryKey == null || primaryKey == Qualifier.WORLD) {
+			this.primaryKey = Qualifier.WORLD;
+			this.primaryValue = world;
+		}
+		return self;
 	}
 
 	public T world(World world) {
@@ -84,29 +91,16 @@ public abstract class PermissionQuery<T extends PermissionQuery<T>> implements C
 	}
 
 	public T group(String group) {
-		return putQualifier(Qualifier.GROUP, group);
+		primaryKey = Qualifier.GROUP;
+		primaryValue = group;
+		return self;
 	}
 
 	public T until(Date until) {
-		return putQualifier(Qualifier.UNTIL, until.getTime());
-	}
-
-	protected T putQualifier(Qualifier qual, Object value) {
-		if (value == null) {
-			explicitValues.removeAll(qual);
-			implicitValues.removeAll(qual);
-		} else {
-			explicitValues.put(qual, String.valueOf(value));
-		}
+		this.until = until.getTime();
 		return self;
 	}
 
-	protected void updateImplicitValues() {
-		implicitValues.clear();
-		implicitValues.putAll(Qualifier.SERVER, manager.getConfiguration().getServerTags());
-		implicitValues.put(Qualifier.UNTIL, String.valueOf(new Date().getTime()));
-	}
-
 
 	protected ListenableFuture<List<MatcherGroup>> performQuery(String sectionName) {
 		return performQuery(sectionName, false);
@@ -120,194 +114,112 @@ public abstract class PermissionQuery<T extends PermissionQuery<T>> implements C
 	 * @return the relevant matcher groups
 	 */
 	protected ListenableFuture<List<MatcherGroup>> performQuery(final String sectionName, final boolean createIfEmpty) {
-		final CacheKey rawContext = new CacheKey(sectionName, StaticContext.of(explicitValues), inheritance);
-		CacheElement cacheVal = cache.get(rawContext);
-
-		while (true) {
-			if (cacheVal != null) {
-				if (!cacheVal.isValid()) {
-					cache.remove(rawContext, cacheVal);
-				} else {
-					break;
-				}
+		final ListenableFuture<List<MatcherGroup>> query;
+		if (primaryKey != null) {
+			query = this.manager.getBackend().getMatchingGroups(sectionName, primaryKey, primaryValue);
 		} else {
-				cacheVal = fetchUncached(sectionName, createIfEmpty);
-				cache.put(rawContext, cacheVal);
-			}
+			query = this.manager.getBackend().getMatchingGroups(sectionName);
 		}
 
-		return cacheVal.result;
+		final Function<List<MatcherGroup>, List<MatcherGroup>> func = new Function<List<MatcherGroup>, List<MatcherGroup>>() {
+			@Override
+			public List<MatcherGroup> apply(List<MatcherGroup> result) {
+				final Set<String> allowedWorlds = world == null ? Sets.<String>newHashSet() : Sets.newHashSet(world);
+				if (result != null) {
+					for (Iterator<MatcherGroup> it = result.iterator(); it.hasNext(); ) {
+						final MatcherGroup group = it.next();
+						if (!group.matches(PermissionQuery.this, primaryKey)) {
+							it.remove();
+							continue;
 						}
-
-	/**
-	 * Calculate inheritance for any qualifier involved in inheritance
-	 *
-	 * @return Futures of inheritance for inheritable qualifiers
-	 */
-	private Map<Qualifier, ListenableFuture<List<String>>> calculateInheritance() {
-		final Map<Qualifier, ListenableFuture<List<String>>> parentFutures = new HashMap<>();
 						if (inheritance) {
-			// TODO: Inheritance for all used/supported qualifiers -- not too important because nothing else uses inheritance now, but makes expansion easier
-			if (explicitValues.containsKey(Qualifier.USER)) {
-				parentFutures.put(Qualifier.USER.getInheritanceQualifier(), Qualifier.USER.getInheritedValues(manager.getBackend(), explicitValues.get(Qualifier.USER).iterator().next()));
-			} else if (explicitValues.containsKey(Qualifier.GROUP)) {
-				parentFutures.put(Qualifier.GROUP.getInheritanceQualifier(), Qualifier.GROUP.getInheritedValues(manager.getBackend(), explicitValues.get(Qualifier.GROUP).iterator().next()));
+							if (group.getQualifiers().containsKey(Qualifier.WORLD)) {
+								for (String world : group.getQualifiers().get(Qualifier.WORLD)) {
+									allowedWorlds.addAll(Futures.getUnchecked(Qualifier.WORLD.getInheritedValues(manager.getBackend(), world)));
 								}
-			if (explicitValues.containsKey(Qualifier.WORLD)) {
-				parentFutures.put(Qualifier.WORLD.getInheritanceQualifier(), Qualifier.WORLD.getInheritedValues(manager.getBackend(), explicitValues.get(Qualifier.WORLD).iterator().next()));
 							}
 						}
-		return parentFutures;
 					}
+					Collections.sort(result);
 
+				}
+				return result;
+			}
+		};
+		// TODO: Make inheritance work with any qualifier
+		ListenableFuture<List<String>> parents = (inheritance && primaryKey != null && primaryKey != Qualifier.WORLD) ?
+				primaryKey.getInheritedValues(manager.getBackend(), primaryValue)
+				: Futures.immediateFuture(Collections.<String>emptyList());
 
-	private CacheElement fetchUncached(final String sectionName, final boolean createIfEmpty) {
-		updateImplicitValues();
-		final Map<Qualifier, ListenableFuture<List<String>>> parentFutures = calculateInheritance();
-		ListenableFuture<List<MatcherGroup>> result = Futures.chain(Futures.allAsList(parentFutures.values()), new Function<List<List<String>>, ListenableFuture<? extends List<MatcherGroup>>>() {
+		return Futures.chain(parents, new Function<List<String>, ListenableFuture<List<MatcherGroup>>>() {
 			@Override
-			public ListenableFuture<? extends List<MatcherGroup>> apply(List<List<String>> lists) {
-				Multimap<Qualifier, String> contextMultimap = HashMultimap.create(/*implicitValues*/);
-				contextMultimap.putAll(explicitValues);
-				if (!parentFutures.isEmpty()) {
-					for (Map.Entry<Qualifier, ListenableFuture<List<String>>> ent : parentFutures.entrySet()) {
-						contextMultimap.putAll(ent.getKey(), Futures.getUnchecked(ent.getValue()));
+			public ListenableFuture<List<MatcherGroup>> apply(@Nullable List<String> parents) {
+				List<ListenableFuture<List<MatcherGroup>>> toWait = new ArrayList<>();
+				toWait.add(Futures.transform(query, func));
+				if (parents != null) {
+					for (String parent : parents) {
+						toWait.add(Futures.transform(manager.getBackend().getMatchingGroups(sectionName, primaryKey.getInheritanceQualifier(), parent), func));
 					}
 				}
-				return Futures.chain(manager.getBackend().getMatchingGroups(sectionName, StaticContext.of(contextMultimap)), new Function<List<MatcherGroup>, ListenableFuture<List<MatcherGroup>>>() {
-					@Override
-					public ListenableFuture<List<MatcherGroup>> apply(List<MatcherGroup> matcherGroups) {
-						if (matcherGroups.isEmpty() && createIfEmpty) {
-							return Futures.transform(manager.getBackend().createMatcherGroup(sectionName, ImmutableMap.<String, String>of(), explicitValues), new Function<MatcherGroup, List<MatcherGroup>>() {
+				return Futures.transform(Futures.allAsList(toWait), new Function<List<List<MatcherGroup>>, List<MatcherGroup>>() {
 					@Override
-								public List<MatcherGroup> apply(MatcherGroup matcherGroup) {
-									return ImmutableList.of(matcherGroup);
-								}
-							});
-						} else {
-							if (!parentFutures.isEmpty()) {
-								Collections.sort(matcherGroups, new InheritanceAwareComparator(parentFutures));
-							} else {
-								Collections.sort(matcherGroups);
+					public List<MatcherGroup> apply(@Nullable List<List<MatcherGroup>> lists) {
+						List<MatcherGroup> result = null;
+						if (lists != null && !lists.isEmpty()) {
+							result = new ArrayList<>(lists.size() * Math.max(1, lists.get(0).size()));
+							for (List<MatcherGroup> list : lists) {
+								result.addAll(list);
 							}
-							return Futures.immediateFuture(matcherGroups);
 						}
+
+						if ((result == null || result.isEmpty()) && createIfEmpty) {
+							Multimap<Qualifier, String> qualifiers = HashMultimap.create();
+							qualifiers.put(primaryKey, primaryValue);
+							if (world != null && primaryKey != Qualifier.WORLD) {
+								qualifiers.put(Qualifier.WORLD, world);
 							}
-				});
+							if (until != 0) {
+								qualifiers.put(Qualifier.UNTIL, String.valueOf(until));
 							}
-		});
-		return new CacheElement(result, Futures.immediateFuture(Collections.<MatcherGroup>emptyList())); // TODO: Keep track of groups involved in inheritance
+							result = Lists.newArrayList(Futures.getUnchecked(manager.getBackend().createMatcherGroup(sectionName, ImmutableMap.<String, String>of(), qualifiers)));
 						}
-
-	/**
-	Special InheritanceAware comparator
-	map<string, int> for inheritance level
-	 */
-	private static class InheritanceAwareComparator implements Comparator<MatcherGroup> {
-		private final Map<Qualifier, ListenableFuture<List<String>>> parentFutures;
-
-		private InheritanceAwareComparator(Map<Qualifier, ListenableFuture<List<String>>> parentFutures) {
-			this.parentFutures = parentFutures;
-		}
-
-		@Override
-		public int compare(MatcherGroup a, MatcherGroup b) {
-			final int me = a.getQualifierTypeMask();
-			final int other = b.getQualifierTypeMask();
-			if (me != other) {
-				return me > other ? 1 : -1;
+						return result;
 					}
-
-			return 0; // TODO: Take inheritance into account
+				});
 			}
+		});
 	}
 
-	public static final class CacheKey {
-		private final String sectionName;
-		private final Context context;
-		private final boolean inheritance;
-
-		private CacheKey(String sectionName, Context context, boolean inheritance) {
-			this.sectionName = sectionName;
-			this.context = context;
-			this.inheritance = inheritance;
-		}
+	// Context methods
 
 	@Override
-		public boolean equals(Object o) {
-			if (this == o) return true;
-			if (o == null || getClass() != o.getClass()) return false;
-
-			CacheKey cacheKey = (CacheKey) o;
-
-			if (!context.equals(cacheKey.context)) return false;
-			if (!sectionName.equals(cacheKey.sectionName)) return false;
-			if (!inheritance == cacheKey.inheritance) return false;
-
-			return true;
+	public Set<String> getServerTags() {
+		return manager.getConfiguration().getServerTags();
 	}
 
 	@Override
-		public int hashCode() {
-			int result = sectionName.hashCode();
-			result = 31 * result + context.hashCode();
-			result = 7 * result + (inheritance ? 1 : 0);
-			return result;
+	public String getEntityName() {
+		return primaryValue;
 	}
-	}
-
-	public static class CacheElement {
-		private final ListenableFuture<List<MatcherGroup>> result, inheritanceGroups;
-
-		private CacheElement(ListenableFuture<List<MatcherGroup>> result, ListenableFuture<List<MatcherGroup>> inheritanceGroups) {
-			this.result = result;
-			this.inheritanceGroups = inheritanceGroups;
-		}
-
-		public boolean isValid() {
-			if (!result.isDone() || !inheritanceGroups.isDone()) {
-				return true;
-			}
-			try {
-				for (MatcherGroup group : inheritanceGroups.get()) {
-					if (!group.isValid()) {
-						return false;
-					}
-				}
-				for (MatcherGroup group : result.get()) {
-					if (!group.isValid()) {
-						return false;
-					}
-				}
-			} catch (InterruptedException | ExecutionException e) {
-				e.printStackTrace();
-				return false;
-			}
-			return true;
-		}
-	}
-
-	// Context methods
 
 	@Override
-	public Collection<String> getValues(Qualifier qual) {
-		Collection<String> ret = explicitValues.get(qual);
-		if (ret.isEmpty()) {
-			ret = implicitValues.get(qual);
+	public EntityType getEntityType() {
+		if (primaryKey == Qualifier.USER) {
+			return EntityType.USER;
+		} else if (primaryKey == Qualifier.GROUP) {
+			return EntityType.GROUP;
+		} else {
+			return null;
 		}
-		return ret;
 	}
 
 	@Override
-	public boolean hasValue(Qualifier qual) {
-		return explicitValues.containsKey(qual) || implicitValues.containsKey(qual);
+	public String getWorld() {
+		return world;
 	}
 
 	@Override
-	public ImmutableMultimap<Qualifier, String> getValues() {
-		ImmutableMultimap.Builder<Qualifier, String> build = ImmutableMultimap.builder();
-		build.putAll(implicitValues);
-		build.putAll(explicitValues);
-		return build.build();
+	public long getUntil() {
+		return until;
 	}
 }
