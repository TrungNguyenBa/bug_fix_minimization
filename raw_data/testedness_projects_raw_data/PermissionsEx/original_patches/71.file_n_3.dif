diff --git a/src/main/java/ru/tehkode/permissions/backends/file/FileConfig.java b/src/main/java/ru/tehkode/permissions/backends/file/FileConfig.java
index e1bc8c9..6b74b7a 100644
--- a/src/main/java/ru/tehkode/permissions/backends/file/FileConfig.java
+++ b/src/main/java/ru/tehkode/permissions/backends/file/FileConfig.java
@@ -12,7 +12,6 @@ import ru.tehkode.permissions.backends.file.config.PEXMLParser;
 import ru.tehkode.permissions.backends.file.config.PEXMLWriter;
 import ru.tehkode.permissions.backends.file.config.WriterOptions;
 import ru.tehkode.permissions.backends.memory.ConfigInstance;
-import ru.tehkode.permissions.backends.memory.MemoryMatcherGroup;
 import ru.tehkode.permissions.data.Qualifier;
 import ru.tehkode.utils.StringUtils;
 
@@ -91,7 +90,7 @@ public class FileConfig {
 	}
 
 	private FileConfigInstance groupsFromNodes(List<Node> children) throws IOException{
-		final List<MemoryMatcherGroup> ret = new LinkedList<>();
+		final List<FileMatcherGroup> ret = new LinkedList<>();
 		final List<String> globalComments = new ArrayList<>();
 		for (Node node : children) {
 			switch (node.getType()) {
@@ -158,22 +157,22 @@ public class FileConfig {
 		return new FileConfigInstance(ret, globalComments);
 	}
 
-	private static class FileConfigInstance implements ConfigInstance {
+	private static class FileConfigInstance implements ConfigInstance<FileMatcherGroup> {
 		private final List<String> comments;
-		private Collection<MemoryMatcherGroup> groups;
+		private Collection<FileMatcherGroup> groups;
 
-		public FileConfigInstance(Collection<MemoryMatcherGroup> groups, List<String> comments) {
+		public FileConfigInstance(Collection<FileMatcherGroup> groups, List<String> comments) {
 			this.groups = groups;
 			this.comments = comments;
 		}
 
 		@Override
-		public Collection<MemoryMatcherGroup> getGroups() {
+		public Collection<FileMatcherGroup> getGroups() {
 			return groups;
 		}
 
 		@Override
-		public void setGroups(Collection<MemoryMatcherGroup> groups) {
+		public void setGroups(Collection<FileMatcherGroup> groups) {
 			this.groups = groups;
 		}
 	}
@@ -184,7 +183,7 @@ public class FileConfig {
 	 * @param list The list of matchers to save.
 	 * @throws IOException if saving is unsuccessful
 	 */
-	public void save(ConfigInstance list) throws IOException {
+	public void save(ConfigInstance<FileMatcherGroup> list) throws IOException {
 		if (saveSuppressed) {
 			return;
 		}
@@ -212,15 +211,12 @@ public class FileConfig {
 		}
 	}
 
-	private void writeGroups(ConfigInstance list, PEXMLWriter writer) throws IOException {
-		for (MemoryMatcherGroup group : list.getGroups()) {
-			FileMatcherGroup fGroup = group instanceof FileMatcherGroup ? (FileMatcherGroup) group : null;
-			if (fGroup != null) {
-				List<String> comments = fGroup.getComments();
-				if (comments != null) {
-					for (String comment : comments) {
-						writer.writeComment(comment);
-					}
+	private void writeGroups(ConfigInstance<FileMatcherGroup> list, PEXMLWriter writer) throws IOException {
+		for (FileMatcherGroup group : list.getGroups()) {
+			List<String> comments = group.getComments();
+			if (comments != null) {
+				for (String comment : comments) {
+					writer.writeComment(comment);
 				}
 			}
 			writer.beginHeader(group.getName());
@@ -231,13 +227,13 @@ public class FileConfig {
 
 			if (group.isMap()) {
 				for (Map.Entry<String, String> ent : group.getEntries().entrySet()) {
-					writeEntryComments(fGroup, ent.getKey(), writer);
+					writeEntryComments(group, ent.getKey(), writer);
 					writer.writeMapping(ent.getKey(), ent.getValue());
 				}
 
 			} else if (group.isList()) {
 				for (String entry : group.getEntriesList()) {
-					writeEntryComments(fGroup, entry, writer);
+					writeEntryComments(group, entry, writer);
 					writer.writeListEntry(entry);
 				}
 			}
@@ -254,7 +250,7 @@ public class FileConfig {
 	}
 
 	private void writeEntryComments(FileMatcherGroup group, String entry, PEXMLWriter writer) throws IOException {
-		if (group != null && group.getEntryComments() != null) {
+		if (group.getEntryComments() != null) {
 			Collection<String> entryComments = group.getEntryComments().get(entry);
 			if (entryComments != null && !entryComments.isEmpty()) {
 				for (String comment : entryComments) {
