diff --git a/src/main/java/ru/tehkode/permissions/backends/sql/SQLMatcherGroup.java b/src/main/java/ru/tehkode/permissions/backends/sql/SQLMatcherGroup.java
index 0bce1ef..d2c1c3b 100644
--- a/src/main/java/ru/tehkode/permissions/backends/sql/SQLMatcherGroup.java
+++ b/src/main/java/ru/tehkode/permissions/backends/sql/SQLMatcherGroup.java
@@ -4,7 +4,6 @@ import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableMultimap;
 import com.google.common.collect.Multimap;
-import com.google.common.util.concurrent.ListenableFuture;
 import ru.tehkode.permissions.data.MatcherGroup;
 import ru.tehkode.permissions.data.Qualifier;
 
@@ -14,7 +13,6 @@ import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.util.List;
 import java.util.Map;
-import java.util.concurrent.Callable;
 import java.util.concurrent.atomic.AtomicReference;
 
 /**
@@ -68,10 +66,7 @@ public class SQLMatcherGroup extends MatcherGroup {
 	}
 
 	@Override
-	public ListenableFuture<MatcherGroup> setQualifiers(final Multimap<Qualifier, String> qualifiers) {
-		return backend.execute(new Callable<MatcherGroup>() {
-			@Override
-			public MatcherGroup call() throws Exception {
+	public MatcherGroup setQualifiers(Multimap<Qualifier, String> qualifiers) {
 		if (valid.compareAndSet(State.VALID, State.UPDATING)) {
 			try (SQLConnection conn = backend.getSQL()) {
 				conn.beginTransaction();
@@ -89,12 +84,13 @@ public class SQLMatcherGroup extends MatcherGroup {
 				}
 				backend.resetMatcherGroup(getEntityId());
 				return backend.getMatcherGroup(getName(), getEntityId());
+			} catch (SQLException | IOException e) {
+				e.printStackTrace();
+				return null;
 			}
 		} else {
-					throw new InvalidGroupException();
-				}
+			return null;
 		}
-		});
 	}
 
 	@Override
@@ -109,10 +105,7 @@ public class SQLMatcherGroup extends MatcherGroup {
 	}
 
 	@Override
-	public ListenableFuture<MatcherGroup> setEntries(final Map<String, String> value) {
-		return backend.execute(new Callable<MatcherGroup>() {
-			@Override
-			public MatcherGroup call() throws Exception {
+	public MatcherGroup setEntries(Map<String, String> value) {
 		if (valid.compareAndSet(State.VALID, State.UPDATING)) {
 			try (SQLConnection conn = backend.getSQL()) {
 				conn.beginTransaction();
@@ -130,19 +123,17 @@ public class SQLMatcherGroup extends MatcherGroup {
 				}
 				backend.resetMatcherGroup(getEntityId());
 				return backend.getMatcherGroup(getName(), getEntityId());
+			} catch (SQLException | IOException e) {
+				e.printStackTrace();
+				return null;
 			}
 		} else {
-					throw new InvalidGroupException();
-				}
+			return null;
 		}
-		});
 	}
 
 	@Override
-	public ListenableFuture<MatcherGroup> setEntries(final List<String> value) {
-		return backend.execute(new Callable<MatcherGroup>() {
-			@Override
-			public MatcherGroup call() throws Exception {
+	public MatcherGroup setEntries(List<String> value) {
 		if (valid.compareAndSet(State.VALID, State.UPDATING)) {
 			try (SQLConnection conn = backend.getSQL()) {
 				conn.beginTransaction();
@@ -159,12 +150,13 @@ public class SQLMatcherGroup extends MatcherGroup {
 				}
 				backend.resetMatcherGroup(getEntityId());
 				return backend.getMatcherGroup(getName(), getEntityId());
+			} catch (SQLException | IOException e) {
+				e.printStackTrace();
+				return null;
 			}
 		} else {
-					throw new InvalidGroupException();
-				}
+			return null;
 		}
-		});
 	}
 
 	void invalidate() {
@@ -177,22 +169,17 @@ public class SQLMatcherGroup extends MatcherGroup {
 	}
 
 	@Override
-	public ListenableFuture<Boolean> remove() {
-		return backend.execute(new Callable<Boolean>() {
-			@Override
-			public Boolean call() throws Exception {
+	public boolean remove() {
 		if (valid.compareAndSet(State.VALID, State.UPDATING)) {
 			try (SQLConnection conn = backend.getSQL()) {
 				conn.prepAndBind("groups.delete", getEntityId()).execute();
 			} catch (SQLException | IOException e) {
 				valid.set(State.VALID);
-						throw e;
+				e.printStackTrace();
 			}
-					backend.resetMatcherGroup(entityId);
+			backend.resetMatcherGroup(this.entityId);
 			return true;
 		}
 		return false;
 	}
-		});
-	}
 }
