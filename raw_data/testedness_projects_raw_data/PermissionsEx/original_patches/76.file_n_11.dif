diff --git a/src/main/java/ru/tehkode/permissions/backends/sql/SQLMatcherGroup.java b/src/main/java/ru/tehkode/permissions/backends/sql/SQLMatcherGroup.java
index 0bce1ef..d2c1c3b 100644
--- a/src/main/java/ru/tehkode/permissions/backends/sql/SQLMatcherGroup.java
+++ b/src/main/java/ru/tehkode/permissions/backends/sql/SQLMatcherGroup.java
@@ -4,7 +4,6 @@ import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableMultimap;
 import com.google.common.collect.Multimap;
-import com.google.common.util.concurrent.ListenableFuture;
 import ru.tehkode.permissions.data.MatcherGroup;
 import ru.tehkode.permissions.data.Qualifier;
 
@@ -14,7 +13,6 @@ import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.util.List;
 import java.util.Map;
-import java.util.concurrent.Callable;
 import java.util.concurrent.atomic.AtomicReference;
 
 /**
@@ -68,33 +66,31 @@ public class SQLMatcherGroup extends MatcherGroup {
 	}
 
 	@Override
-	public ListenableFuture<MatcherGroup> setQualifiers(final Multimap<Qualifier, String> qualifiers) {
-		return backend.execute(new Callable<MatcherGroup>() {
-			@Override
-			public MatcherGroup call() throws Exception {
-				if (valid.compareAndSet(State.VALID, State.UPDATING)) {
-					try (SQLConnection conn = backend.getSQL()) {
-						conn.beginTransaction();
-						try {
-							conn.prepAndBind("qualifiers.clear").execute();
-							PreparedStatement stmt = conn.prepAndBind("qualifiers.add", entityId, "", "");
-							for (Map.Entry<Qualifier, String> entry : qualifiers.entries()) {
-								stmt.setString(2, entry.getKey().getName());
-								stmt.setString(3, entry.getValue());
-								stmt.addBatch();
-							}
-							stmt.executeBatch();
-						} finally {
-							conn.endTransaction();
-						}
-						backend.resetMatcherGroup(getEntityId());
-						return backend.getMatcherGroup(getName(), getEntityId());
+	public MatcherGroup setQualifiers(Multimap<Qualifier, String> qualifiers) {
+		if (valid.compareAndSet(State.VALID, State.UPDATING)) {
+			try (SQLConnection conn = backend.getSQL()) {
+				conn.beginTransaction();
+				try {
+					conn.prepAndBind("qualifiers.clear").execute();
+					PreparedStatement stmt = conn.prepAndBind("qualifiers.add", entityId, "", "");
+					for (Map.Entry<Qualifier, String> entry : qualifiers.entries()) {
+						stmt.setString(2, entry.getKey().getName());
+						stmt.setString(3, entry.getValue());
+						stmt.addBatch();
 					}
-				} else {
-					throw new InvalidGroupException();
+					stmt.executeBatch();
+				} finally {
+					conn.endTransaction();
 				}
+				backend.resetMatcherGroup(getEntityId());
+				return backend.getMatcherGroup(getName(), getEntityId());
+			} catch (SQLException | IOException e) {
+				e.printStackTrace();
+				return null;
 			}
-		});
+		} else {
+			return null;
+		}
 	}
 
 	@Override
@@ -109,62 +105,58 @@ public class SQLMatcherGroup extends MatcherGroup {
 	}
 
 	@Override
-	public ListenableFuture<MatcherGroup> setEntries(final Map<String, String> value) {
-		return backend.execute(new Callable<MatcherGroup>() {
-			@Override
-			public MatcherGroup call() throws Exception {
-				if (valid.compareAndSet(State.VALID, State.UPDATING)) {
-					try (SQLConnection conn = backend.getSQL()) {
-						conn.beginTransaction();
-						try {
-							conn.prepAndBind("entries.clear").execute();
-							PreparedStatement stmt = conn.prepAndBind("entries.add", entityId, "", "");
-							for (Map.Entry<String, String> entry : value.entrySet()) {
-								stmt.setString(2, entry.getKey());
-								stmt.setString(3, entry.getValue());
-								stmt.addBatch();
-							}
-							stmt.executeBatch();
-						} finally {
-							conn.endTransaction();
-						}
-						backend.resetMatcherGroup(getEntityId());
-						return backend.getMatcherGroup(getName(), getEntityId());
+	public MatcherGroup setEntries(Map<String, String> value) {
+		if (valid.compareAndSet(State.VALID, State.UPDATING)) {
+			try (SQLConnection conn = backend.getSQL()) {
+				conn.beginTransaction();
+				try {
+					conn.prepAndBind("entries.clear").execute();
+					PreparedStatement stmt = conn.prepAndBind("entries.add", entityId, "", "");
+					for (Map.Entry<String, String> entry : value.entrySet()) {
+						stmt.setString(2, entry.getKey());
+						stmt.setString(3, entry.getValue());
+						stmt.addBatch();
 					}
-				} else {
-					throw new InvalidGroupException();
+					stmt.executeBatch();
+				} finally {
+					conn.endTransaction();
 				}
+				backend.resetMatcherGroup(getEntityId());
+				return backend.getMatcherGroup(getName(), getEntityId());
+			} catch (SQLException | IOException e) {
+				e.printStackTrace();
+				return null;
 			}
-		});
+		} else {
+			return null;
+		}
 	}
 
 	@Override
-	public ListenableFuture<MatcherGroup> setEntries(final List<String> value) {
-		return backend.execute(new Callable<MatcherGroup>() {
-			@Override
-			public MatcherGroup call() throws Exception {
-				if (valid.compareAndSet(State.VALID, State.UPDATING)) {
-					try (SQLConnection conn = backend.getSQL()) {
-						conn.beginTransaction();
-						try {
-							conn.prepAndBind("entries.clear").execute();
-							PreparedStatement stmt = conn.prepAndBind("entries.add", entityId, "", null);
-							for (String entry : value) {
-								stmt.setString(2, entry);
-								stmt.addBatch();
-							}
-							stmt.executeBatch();
-						} finally {
-							conn.endTransaction();
-						}
-						backend.resetMatcherGroup(getEntityId());
-						return backend.getMatcherGroup(getName(), getEntityId());
+	public MatcherGroup setEntries(List<String> value) {
+		if (valid.compareAndSet(State.VALID, State.UPDATING)) {
+			try (SQLConnection conn = backend.getSQL()) {
+				conn.beginTransaction();
+				try {
+					conn.prepAndBind("entries.clear").execute();
+					PreparedStatement stmt = conn.prepAndBind("entries.add", entityId, "", null);
+					for (String entry : value) {
+						stmt.setString(2, entry);
+						stmt.addBatch();
 					}
-				} else {
-					throw new InvalidGroupException();
+					stmt.executeBatch();
+				} finally {
+					conn.endTransaction();
 				}
+				backend.resetMatcherGroup(getEntityId());
+				return backend.getMatcherGroup(getName(), getEntityId());
+			} catch (SQLException | IOException e) {
+				e.printStackTrace();
+				return null;
 			}
-		});
+		} else {
+			return null;
+		}
 	}
 
 	void invalidate() {
@@ -177,22 +169,17 @@ public class SQLMatcherGroup extends MatcherGroup {
 	}
 
 	@Override
-	public ListenableFuture<Boolean> remove() {
-		return backend.execute(new Callable<Boolean>() {
-			@Override
-			public Boolean call() throws Exception {
-				if (valid.compareAndSet(State.VALID, State.UPDATING)) {
-					try (SQLConnection conn = backend.getSQL()) {
-						conn.prepAndBind("groups.delete", getEntityId()).execute();
-					} catch (SQLException | IOException e) {
-						valid.set(State.VALID);
-						throw e;
-					}
-					backend.resetMatcherGroup(entityId);
-					return true;
-				}
-				return false;
+	public boolean remove() {
+		if (valid.compareAndSet(State.VALID, State.UPDATING)) {
+			try (SQLConnection conn = backend.getSQL()) {
+				conn.prepAndBind("groups.delete", getEntityId()).execute();
+			} catch (SQLException | IOException e) {
+				valid.set(State.VALID);
+				e.printStackTrace();
 			}
-		});
+			backend.resetMatcherGroup(this.entityId);
+			return true;
+		}
+		return false;
 	}
 }
