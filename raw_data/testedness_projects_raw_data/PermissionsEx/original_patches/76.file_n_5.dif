diff --git a/src/main/java/ru/tehkode/permissions/backends/file/FileMatcherGroup.java b/src/main/java/ru/tehkode/permissions/backends/file/FileMatcherGroup.java
index 1dc5658..3963bab 100644
--- a/src/main/java/ru/tehkode/permissions/backends/file/FileMatcherGroup.java
+++ b/src/main/java/ru/tehkode/permissions/backends/file/FileMatcherGroup.java
@@ -1,15 +1,12 @@
 package ru.tehkode.permissions.backends.file;
 
-import com.google.common.base.Function;
 import com.google.common.collect.ImmutableMultimap;
 import com.google.common.collect.Multimap;
-import com.google.common.util.concurrent.Futures;
-import com.google.common.util.concurrent.ListenableFuture;
 import ru.tehkode.permissions.backends.memory.MemoryMatcherGroup;
+import ru.tehkode.permissions.backends.memory.MemoryMatcherList;
 import ru.tehkode.permissions.data.MatcherGroup;
 import ru.tehkode.permissions.data.Qualifier;
 
-import javax.annotation.Nullable;
 import java.io.IOException;
 import java.util.Collections;
 import java.util.List;
@@ -21,18 +18,18 @@ import java.util.logging.Logger;
 /**
  * Memory matcher group supporting additional matcher data from files
  */
-public final class FileMatcherGroup extends MemoryMatcherGroup<FileMatcherGroup, FileMatcherList> {
+public final class FileMatcherGroup extends MemoryMatcherGroup<FileMatcherGroup> {
 	private static final Logger LOGGER = Logger.getLogger(FileMatcherGroup.class.getCanonicalName());
 	private final List<String> comments;
 	private final Multimap<String, String> entryComments;
 
-	FileMatcherGroup(String name, AtomicReference<FileMatcherGroup> selfRef, FileMatcherList listRef, Multimap<Qualifier, String> qualifiers, Map<String, String> entries, List<String> comments, Multimap<String, String> entryComments) {
+	FileMatcherGroup(String name, AtomicReference<FileMatcherGroup> selfRef, MemoryMatcherList<FileMatcherGroup, ?> listRef, Multimap<Qualifier, String> qualifiers, Map<String, String> entries, List<String> comments, Multimap<String, String> entryComments) {
 		super(name, selfRef, listRef, qualifiers, entries);
 		this.comments = comments == null ? null : Collections.unmodifiableList(comments);
 		this.entryComments = entryComments == null ? null : ImmutableMultimap.copyOf(entryComments);
 	}
 
-	FileMatcherGroup(String name, AtomicReference<FileMatcherGroup> selfRef, FileMatcherList listRef, Multimap<Qualifier, String> qualifiers, List<String> entriesList, List<String> comments, Multimap<String, String> entryComments) {
+	FileMatcherGroup(String name, AtomicReference<FileMatcherGroup> selfRef, MemoryMatcherList<FileMatcherGroup, ?> listRef, Multimap<Qualifier, String> qualifiers, List<String> entriesList, List<String> comments, Multimap<String, String> entryComments) {
 		super(name, selfRef, listRef, qualifiers, entriesList);
 		this.comments = comments == null ? null : Collections.unmodifiableList(comments);
 		this.entryComments = entryComments == null ? null : ImmutableMultimap.copyOf(entryComments);
@@ -47,49 +44,24 @@ public final class FileMatcherGroup extends MemoryMatcherGroup<FileMatcherGroup,
 	}
 
 	@Override
-	public ListenableFuture<MatcherGroup> setQualifiers(Multimap<Qualifier, String> qualifiers) {
-		return Futures.transform(super.setQualifiers(qualifiers), new Function<MatcherGroup, MatcherGroup>() {
-			@Override
-			public MatcherGroup apply(@Nullable MatcherGroup matcherGroup) {
-				save();
-				return matcherGroup;
-			}
-		}, listRef.getExecutor());
+	public MatcherGroup setQualifiers(Multimap<Qualifier, String> qualifiers) {
+		MatcherGroup ret = super.setQualifiers(qualifiers);
+		save();
+		return ret;
 	}
 
 	@Override
-	public ListenableFuture<MatcherGroup> setEntries(Map<String, String> entries) {
-		return Futures.transform(super.setEntries(entries), new Function<MatcherGroup, MatcherGroup>() {
-			@Override
-			public MatcherGroup apply(@Nullable MatcherGroup matcherGroup) {
-				save();
-				return matcherGroup;
-			}
-		}, listRef.getExecutor());
+	public MatcherGroup setEntries(Map<String, String> entries) {
+		MatcherGroup ret = super.setEntries(entries);
+		save();
+		return ret;
 	}
 
 	@Override
-	public ListenableFuture<MatcherGroup> setEntries(List<String> entries) {
-		return Futures.transform(super.setEntries(entries), new Function<MatcherGroup, MatcherGroup>() {
-			@Override
-			public MatcherGroup apply(@Nullable MatcherGroup matcherGroup) {
-				save();
-				return matcherGroup;
-			}
-		}, listRef.getExecutor());
-	}
-
-	@Override
-	public ListenableFuture<Boolean> remove() {
-		return Futures.transform(super.remove(), new Function<Boolean, Boolean>() {
-			@Override
-			public Boolean apply(@Nullable Boolean val) {
-				if (val != null && val) {
-					save();
-				}
-				return val;
-			}
-		}, listRef.getExecutor());
+	public MatcherGroup setEntries(List<String> entries) {
+		MatcherGroup ret = super.setEntries(entries);
+		save();
+		return ret;
 	}
 
 	private void save() {
