diff --git a/src/main/java/ru/tehkode/permissions/backends/memory/MemoryMatcherGroup.java b/src/main/java/ru/tehkode/permissions/backends/memory/MemoryMatcherGroup.java
index d97a925..3a595a4 100644
--- a/src/main/java/ru/tehkode/permissions/backends/memory/MemoryMatcherGroup.java
+++ b/src/main/java/ru/tehkode/permissions/backends/memory/MemoryMatcherGroup.java
@@ -4,8 +4,6 @@ import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableMultimap;
 import com.google.common.collect.Multimap;
-import com.google.common.util.concurrent.Futures;
-import com.google.common.util.concurrent.ListenableFuture;
 import ru.tehkode.permissions.data.MatcherGroup;
 import ru.tehkode.permissions.data.Qualifier;
 
@@ -16,17 +14,17 @@ import java.util.concurrent.atomic.AtomicReference;
 /**
  * Matcher group used when storing a matcher group structure in memory
  */
-public abstract class MemoryMatcherGroup<T extends MemoryMatcherGroup<T, V>, V extends MemoryMatcherList<T, ?>> extends MatcherGroup {
+public abstract class MemoryMatcherGroup<T extends MemoryMatcherGroup<T>> extends MatcherGroup {
 	private final String name;
 	@SuppressWarnings("unchecked")
 	private final T self = (T) this;
 	protected final AtomicReference<T> selfRef;
-	protected final V listRef;
+	protected final MemoryMatcherList<T, ?> listRef;
 	private final Multimap<Qualifier, String> qualifiers;
 	private final Map<String, String> entries;
 	private final List<String> entriesList;
 
-	protected MemoryMatcherGroup(String name, AtomicReference<T> selfRef, V listRef, Multimap<Qualifier, String> qualifiers, Map<String, String> entries) {
+	protected MemoryMatcherGroup(String name, AtomicReference<T> selfRef, MemoryMatcherList<T, ?> listRef, Multimap<Qualifier, String> qualifiers, Map<String, String> entries) {
 		this.name = name;
 		this.selfRef = selfRef;
 		this.listRef = listRef;
@@ -35,7 +33,7 @@ public abstract class MemoryMatcherGroup<T extends MemoryMatcherGroup<T, V>, V e
 		this.entriesList = null;
 	}
 
-	protected MemoryMatcherGroup(String name, AtomicReference<T> selfRef, V listRef, Multimap<Qualifier, String> qualifiers, List<String> entriesList) {
+	protected MemoryMatcherGroup(String name, AtomicReference<T> selfRef, MemoryMatcherList<T, ?> listRef, Multimap<Qualifier, String> qualifiers, List<String> entriesList) {
 		this.name = name;
 		this.selfRef = selfRef;
 		this.listRef = listRef;
@@ -58,7 +56,7 @@ public abstract class MemoryMatcherGroup<T extends MemoryMatcherGroup<T, V>, V e
 	}
 
 	@Override
-	public ListenableFuture<MatcherGroup> setQualifiers(Multimap<Qualifier, String> qualifiers) {
+	public MatcherGroup setQualifiers(Multimap<Qualifier, String> qualifiers) {
 		if (selfRef.compareAndSet(self, null)) {
 			listRef.deltaUpdate(selfRef, getName(), getQualifiers(), qualifiers);
 			T newGroup;
@@ -67,14 +65,14 @@ public abstract class MemoryMatcherGroup<T extends MemoryMatcherGroup<T, V>, V e
 			} else if (isList()) {
 				newGroup = newSelf(getEntriesList(), qualifiers);
 			} else {
-				return Futures.immediateFailedFuture(new IllegalStateException("I'm not a list or a map? This shouldn't be possible").fillInStackTrace());
+				throw new IllegalStateException("I'm not a list or a map? This shouldn't be possible");
 			}
 			if (!selfRef.compareAndSet(null, newGroup)) {
-				return Futures.immediateFailedFuture(new IllegalStateException("Invalid state change occurred, somebody modified my reference while it was null").fillInStackTrace());
+				throw new IllegalStateException("Invalid state change occurred, somebody modified my reference while it was null");
 			}
-			return Futures.<MatcherGroup>immediateFuture(newGroup);
+			return newGroup;
 		} else {
-			return Futures.immediateFailedFuture(new InvalidGroupException());
+			return null;
 		}
 	}
 
@@ -89,23 +87,15 @@ public abstract class MemoryMatcherGroup<T extends MemoryMatcherGroup<T, V>, V e
 	}
 
 	@Override
-	public ListenableFuture<MatcherGroup> setEntries(Map<String, String> value) {
+	public MatcherGroup setEntries(Map<String, String> value) {
 		T newGroup = newSelf(value, getQualifiers());
-		if (selfRef.compareAndSet(self, newGroup)) {
-			return Futures.<MatcherGroup>immediateFuture(newGroup);
-		} else {
-			return Futures.immediateFailedFuture(new InvalidGroupException().fillInStackTrace());
-		}
+		return selfRef.compareAndSet(self, newGroup) ? newGroup : null;
 	}
 
 	@Override
-	public ListenableFuture<MatcherGroup> setEntries(List<String> value) {
+	public MatcherGroup setEntries(List<String> value) {
 		T newGroup = newSelf(value, getQualifiers());
-		if (selfRef.compareAndSet(self, newGroup)) {
-			return Futures.<MatcherGroup>immediateFuture(newGroup);
-		} else {
-			return Futures.immediateFailedFuture(new InvalidGroupException().fillInStackTrace());
-		}
+		return selfRef.compareAndSet(self, newGroup) ? newGroup : null;
 	}
 
 	@Override
@@ -114,11 +104,11 @@ public abstract class MemoryMatcherGroup<T extends MemoryMatcherGroup<T, V>, V e
 	}
 
 	@Override
-	public ListenableFuture<Boolean> remove() {
+	public boolean remove() {
 		if (selfRef.compareAndSet(self, null)) {
 			listRef.remove(selfRef, self);
-			return Futures.immediateFuture(true);
+			return true;
 		}
-		return Futures.immediateFuture(false);
+		return false;
 	}
 }
