diff --git a/src/main/java/ru/tehkode/permissions/PermissionManager.java b/src/main/java/ru/tehkode/permissions/PermissionManager.java
index fcb4509..56e4b8a 100644
--- a/src/main/java/ru/tehkode/permissions/PermissionManager.java
+++ b/src/main/java/ru/tehkode/permissions/PermissionManager.java
@@ -18,12 +18,19 @@
  */
 package ru.tehkode.permissions;
 
+import com.zachsthings.netevents.NetEventsPlugin;
 import org.bukkit.Bukkit;
+import org.bukkit.OfflinePlayer;
 import org.bukkit.World;
 import org.bukkit.configuration.ConfigurationSection;
 import org.bukkit.entity.Player;
+import org.bukkit.event.EventHandler;
+import org.bukkit.event.EventPriority;
+import org.bukkit.event.Listener;
+import org.bukkit.plugin.Plugin;
 import ru.tehkode.permissions.backends.PermissionBackend;
-import ru.tehkode.permissions.bukkit.PermissionsExConfig;
+import ru.tehkode.permissions.bukkit.PermissionsEx;
+import ru.tehkode.permissions.events.PermissionEntityEvent;
 import ru.tehkode.permissions.events.PermissionEvent;
 import ru.tehkode.permissions.events.PermissionSystemEvent;
 import ru.tehkode.permissions.exceptions.PermissionBackendException;
@@ -41,39 +48,126 @@ public class PermissionManager {
 	public final static int TRANSIENT_PERMISSION = 0;
 	protected ConcurrentMap<String, PermissionUser> users = new ConcurrentHashMap<>();
 	protected ConcurrentMap<String, PermissionGroup> groups = new ConcurrentHashMap<>();
+	protected Map<String, PermissionGroup> defaultGroups = new ConcurrentHashMap<>();
 	protected PermissionBackend backend = null;
-	private final PermissionsExConfig config;
-	private final NativeInterface nativeI;
-	private final Logger logger;
+	private final PermissionsEx plugin;
 	protected Timer timer;
 	protected boolean debugMode = false;
 	protected boolean allowOps = false;
 	protected boolean userAddGroupsLast = false;
+	private NetEventsPlugin netEvents;
 
 	protected PermissionMatcher matcher = new RegExpMatcher();
 
-	public PermissionManager(PermissionsExConfig config, Logger logger, NativeInterface nativeI) throws PermissionBackendException {
-		this.config = config;
-		this.logger = logger;
-		this.nativeI = nativeI;
-		this.debugMode = config.isDebug();
-		this.allowOps = config.allowOps();
-		this.userAddGroupsLast = config.userAddGroupsLast();
+	public PermissionManager(PermissionsEx plugin) throws PermissionBackendException {
+		this.plugin = plugin;
+		if (plugin.getConfiguration().useNetEvents()) {
+			Plugin netEventsPlugin = plugin.getServer().getPluginManager().getPlugin("NetEvents");
+			if (netEventsPlugin != null && netEventsPlugin.isEnabled()) {
+				this.netEvents = (NetEventsPlugin) netEventsPlugin;
+				plugin.getServer().getPluginManager().registerEvents(new RemoteEventListener(), plugin);
+			}
+		}
+		this.debugMode = plugin.getConfiguration().isDebug();
+		this.allowOps = plugin.getConfiguration().allowOps();
+		this.userAddGroupsLast = plugin.getConfiguration().userAddGroupsLast();
 		this.initBackend();
 	}
 
 	UUID getServerUUID() {
-		return nativeI.getServerUUID();
+		return netEvents != null ? netEvents.getServerUUID() : null;
+	}
+
+	public boolean isLocal(PermissionEvent event) {
+		return netEvents == null || event.getSourceUUID().equals(netEvents.getServerUUID());
+
 	}
 
 	public boolean shouldCreateUserRecords() {
-		return config.createUserRecords();
+		return plugin.getConfiguration().createUserRecords();
+	}
+
+	public PermissionsEx getPlugin() {
+		return plugin;
+	}
+
+
+	private class RemoteEventListener implements Listener {
+		@EventHandler(priority = EventPriority.LOWEST)
+		public void onEntityEvent(PermissionEntityEvent event) {
+			if (isLocal(event)) {
+				return;
+			}
+			final boolean reloadEntity, reloadAll;
+
+			switch (event.getAction()) {
+				case DEFAULTGROUP_CHANGED:
+				case RANK_CHANGED:
+				case INHERITANCE_CHANGED:
+					reloadAll = true;
+					reloadEntity = false;
+					break;
+				case SAVED:
+				case TIMEDPERMISSION_EXPIRED:
+					return;
+				default:
+					reloadEntity = true;
+					reloadAll = false;
+					break;
+			}
+
+			try {
+				if (backend != null) {
+					backend.reload();
+				}
+			} catch (PermissionBackendException e) {
+				e.printStackTrace();
+			}
+			if (reloadEntity) {
+				switch (event.getType()) {
+					case USER:
+						resetUser(event.getEntityIdentifier());
+						break;
+					case GROUP:
+						PermissionGroup group = groups.remove(event.getEntityIdentifier());
+						if (group != null) {
+							for (Iterator<PermissionUser> it = users.values().iterator(); it.hasNext(); ) {
+								if (it.next().inGroup(group, true)) {
+									it.remove();
+								}
+							}
 						}
 
-	public PermissionsExConfig getConfiguration() {
-		return config;
+						break;
+				}
+			} else if (reloadAll) {
+				clearCache();
+			}
+		}
+
+		@EventHandler(priority = EventPriority.LOWEST)
+		public void onSystemEvent(PermissionSystemEvent event) {
+			if (isLocal(event)) {
+				return;
 			}
 
+			switch (event.getAction()) {
+				case BACKEND_CHANGED:
+				case DEBUGMODE_TOGGLE:
+				case REINJECT_PERMISSIBLES:
+					return;
+			}
+
+			try {
+				if (getBackend() != null) {
+					getBackend().reload();
+				}
+				clearCache();
+			} catch (PermissionBackendException e) {
+				e.printStackTrace();
+			}
+		}
+	}
 
 	/**
 	 * Check if specified player has specified permission
@@ -148,14 +242,19 @@ public class PermissionManager {
 			}
 			return getUser(UUID.fromString(username)); // Username is uuid as string, just use it
 		} catch (IllegalArgumentException ex) {
-			UUID userUUID = nativeI.nameToUUID(username);
-			boolean online = userUUID != null && nativeI.isOnline(userUUID);
+			OfflinePlayer player = plugin.getServer().getOfflinePlayer(username);
+			UUID userUUID = null;
+			try {
+				userUUID = player instanceof Player ? ((Player) player).getUniqueId() : player.getUniqueId();
+			} catch (Throwable t) {
+				// Handle cases where the plugin is not running on a uuid-aware Bukkit by just not converting here
+			}
 
-			if (userUUID != null && (nativeI.isOnline(userUUID) || backend.hasUser(userUUID.toString()))) {
-				return getUser(userUUID.toString(), username, online);
+			if (userUUID != null && (player.isOnline() || backend.hasUser(userUUID.toString()))) {
+				return getUser(userUUID.toString(), username, player.isOnline());
 			} else {
 				// The user is offline and unconverted, so we'll just have to return an unconverted user.
-				return getUser(username, null, false);
+				return getUser(username, null, player.isOnline());
 			}
 		}
 	}
@@ -186,8 +285,18 @@ public class PermissionManager {
 		if (users.containsKey(identifier)) {
 			return getUser(identifier, null, false);
 		}
-		String fallbackName = nativeI.UUIDToName(uid);
-		return getUser(identifier, fallbackName, fallbackName != null);
+		OfflinePlayer ply = null;
+		try {
+			ply = plugin.getServer().getPlayer(uid); // to make things cheaper, we're just checking online players (can be improved later on)
+			// Also, only online players are really necessary to convert to proper names
+		} catch (NoSuchMethodError e) {
+			// Old craftbukkit, guess we won't have a fallback name. Much shame.
+		}
+		String fallbackName = null;
+		if (ply != null) {
+			fallbackName = ply.getName();
+		}
+		return getUser(identifier, fallbackName, ply != null);
 	}
 
 	private PermissionUser getUser(String identifier, String fallbackName, boolean store) {
@@ -490,8 +599,8 @@ public class PermissionManager {
 	 *
 	 * @param groupName group's name
 	 */
-	public PermissionGroup resetGroup(String groupName) {
-		return this.groups.remove(groupName);
+	public void resetGroup(String groupName) {
+		this.groups.remove(groupName);
 	}
 
 	void preloadGroups() {
@@ -595,7 +704,7 @@ public class PermissionManager {
 	 * @param backendName Name of the configuration section which describes this backend
 	 */
 	public PermissionBackend createBackend(String backendName) throws PermissionBackendException {
-		ConfigurationSection config = this.config.getBackendConfig(backendName);
+		ConfigurationSection config = plugin.getConfiguration().getBackendConfig(backendName);
 		String backendType = config.getString("type");
 		if (backendType == null) {
 			config.set("type", backendType = backendName);
@@ -660,11 +769,15 @@ public class PermissionManager {
 	}
 
 	private void initBackend() throws PermissionBackendException {
-		this.setBackend(config.getDefaultBackend());
+		this.setBackend(plugin.getConfiguration().getDefaultBackend());
 	}
 
 	protected void callEvent(PermissionEvent event) {
-		nativeI.callEvent(event);
+		if (netEvents != null) {
+			netEvents.callEvent(event);
+		} else {
+			Bukkit.getServer().getPluginManager().callEvent(event);
+		}
 	}
 
 	protected void callEvent(PermissionSystemEvent.Action action) {
@@ -684,6 +797,6 @@ public class PermissionManager {
 	}
 
 	public Logger getLogger() {
-		return logger;
+		return plugin.getLogger();
 	}
 }
