diff --git a/library/src/main/java/com/actinarium/rhythm/RhythmConfig.java b/library/src/main/java/com/actinarium/rhythm/RhythmConfig.java
index 890909c..a4ace1a 100644
--- a/library/src/main/java/com/actinarium/rhythm/RhythmConfig.java
+++ b/library/src/main/java/com/actinarium/rhythm/RhythmConfig.java
@@ -5,14 +5,13 @@ import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.util.DisplayMetrics;
 import android.view.Gravity;
-import com.actinarium.rhythm.RhythmDrawable.GridLines;
 
 import java.util.ArrayList;
 import java.util.List;
 
 /**
  * A configuration is a set of rules, which grid lines, keylines etc to draw in all {@link RhythmDrawable}s attached to
- * the {@link RhythmGroup} where this config is used at the moment.
+ * the {@link RhythmControl} where this config is used at the moment.
  *
  * @author Paul Danyliuk
  */
@@ -46,12 +45,12 @@ public class RhythmConfig {
     }
 
     /**
-     * A shorthand for {@link RhythmGroup#addConfig(RhythmConfig)}
+     * A shorthand for {@link RhythmControl#addConfig(RhythmConfig)}
      *
      * @param control Rhythm control to add this config to
      * @return this for chaining (e.g. for adding this config to other controls as well)
      */
-    public RhythmConfig addToControl(RhythmGroup control) {
+    public RhythmConfig addToControl(RhythmControl control) {
         control.addConfig(this);
         return this;
     }
@@ -65,14 +64,15 @@ public class RhythmConfig {
      *
      * @param title       Config title
      * @param scaleFactor px to dp ratio, obtained through {@link DisplayMetrics#density}
+     * @param color       Color of the grid, in the usual #AARRGGBB format
      * @return Rhythm config with pre-configured grid line layers
      */
     @SuppressLint("RtlHardcoded")
-    public static RhythmConfig make8DipGrid(String title, float scaleFactor) {
+    public static RhythmConfig make8DipGrid(String title, float scaleFactor, int color) {
         final int step = (int) (scaleFactor * 8);
         return new RhythmConfig(title)
-                .addLayer(new GridLines(Gravity.TOP, step))
-                .addLayer(new GridLines(Gravity.LEFT, step));
+                .addLayer(new RhythmDrawable.GridLines(Gravity.TOP, step, color))
+                .addLayer(new RhythmDrawable.GridLines(Gravity.LEFT, step, color));
     }
 
     /**
@@ -80,24 +80,27 @@ public class RhythmConfig {
      *
      * @param title       Config title
      * @param scaleFactor px to dp ratio, obtained through {@link DisplayMetrics#density}
+     * @param color       Color of the baseline grid, in the usual #AARRGGBB format
      * @return Rhythm config with pre-configured grid line layer
      */
-    public static RhythmConfig makeBaselineGrid(String title, float scaleFactor) {
+    public static RhythmConfig makeBaselineGrid(String title, float scaleFactor, int color) {
         return new RhythmConfig(title)
-                .addLayer(new GridLines(Gravity.TOP, (int) (scaleFactor * 4)).setColor(GridLines.DEFAULT_BASELINE_COLOR));
+                .addLayer(new RhythmDrawable.GridLines(Gravity.TOP, (int) (scaleFactor * 4), color));
     }
 
     /**
      * Make a square 8dp grid combined with differently colored baselines between horizontal grid lines. You can add
      * layers atop this config
      *
-     * @param title       Config title
-     * @param scaleFactor px to dp ratio, obtained through {@link DisplayMetrics#density}
+     * @param title         Config title
+     * @param scaleFactor   px to dp ratio, obtained through {@link DisplayMetrics#density}
+     * @param gridColor     Color of the 8dp grid, in the usual #AARRGGBB format
+     * @param baselineColor Color of additional baselines, in the usual #AARRGGBB format
      * @return Rhythm config with pre-configured grid line layers
      */
-    public static RhythmConfig make8DipAndBaselineGrid(String title, float scaleFactor) {
+    public static RhythmConfig make8DipAndBaselineGrid(String title, float scaleFactor, int gridColor, int baselineColor) {
         final int step = (int) (scaleFactor * 8);
-        return make8DipGrid(title, scaleFactor)
-                .addLayer(new GridLines(Gravity.TOP, step).setOffset(step / 2).setColor(GridLines.DEFAULT_BASELINE_COLOR));
+        return make8DipGrid(title, scaleFactor, gridColor)
+                .addLayer(new RhythmDrawable.GridLines(Gravity.TOP, step, baselineColor).setOffset(step / 2));
     }
 }
