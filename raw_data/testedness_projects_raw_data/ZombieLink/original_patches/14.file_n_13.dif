diff --git a/src/test/java/com/lonepulse/zombielink/test/endpoint/MockEndpointTest.java b/src/test/java/com/lonepulse/zombielink/test/endpoint/MockEndpointTest.java
index 2302a45..3d1f043 100644
--- a/src/test/java/com/lonepulse/zombielink/test/endpoint/MockEndpointTest.java
+++ b/src/test/java/com/lonepulse/zombielink/test/endpoint/MockEndpointTest.java
@@ -26,8 +26,6 @@ import static com.github.tomakehurst.wiremock.client.WireMock.deleteRequestedFor
 import static com.github.tomakehurst.wiremock.client.WireMock.findAll;
 import static com.github.tomakehurst.wiremock.client.WireMock.get;
 import static com.github.tomakehurst.wiremock.client.WireMock.getRequestedFor;
-import static com.github.tomakehurst.wiremock.client.WireMock.head;
-import static com.github.tomakehurst.wiremock.client.WireMock.headRequestedFor;
 import static com.github.tomakehurst.wiremock.client.WireMock.matching;
 import static com.github.tomakehurst.wiremock.client.WireMock.post;
 import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;
@@ -56,8 +54,7 @@ import com.lonepulse.zombielink.core.annotation.Asynchronous;
 import com.lonepulse.zombielink.core.annotation.Bite;
 import com.lonepulse.zombielink.core.annotation.Header;
 import com.lonepulse.zombielink.core.annotation.HeaderSet;
-import com.lonepulse.zombielink.core.annotation.PathParam;
-import com.lonepulse.zombielink.core.annotation.QueryParam;
+import com.lonepulse.zombielink.core.annotation.Param;
 import com.lonepulse.zombielink.core.annotation.Request;
 import com.lonepulse.zombielink.core.annotation.Stateful;
 import com.lonepulse.zombielink.core.inject.Zombie;
@@ -116,7 +113,7 @@ public class MockEndpointTest {
 	}
 	
 	/**
-	 * <p>Test for a {@link Request} with a subpath having {@link QueryParam}s.
+	 * <p>Test for a {@link Request} with a subpath having {@link Param}s.
 	 * 
 	 * @since 1.2.4
 	 */
@@ -136,25 +133,46 @@ public class MockEndpointTest {
 		verify(getRequestedFor(urlEqualTo(url)));
 	}
 
-	/**
-	 * <p>Test for a RESTful {@link Request} with a subpath having {@link PathParam}s.
-	 * 
-	 * @since 1.2.4
-	 */
-	@Test
-	public final void testRestfulSubpathWithParams() {
-		
-		String subpath = "/restfulsubpathwithparam/\\S+", body = "hello", 
-			   id = "doctorwho", url = "/restfulsubpathwithparam/" + id;
-		
-		stubFor(get(urlMatching(subpath))
-				.willReturn(aResponse()
-				.withStatus(200)
-				.withBody(body)));
-		
-		assertEquals(body, mockEndpoint.restfulSubpathWithParam(id));
-		verify(getRequestedFor(urlEqualTo(url)));
-	}
+//	TODO write fresh tests for RESTful requests	
+//	
+//	/**
+//	 * <p>Test for a RESTful {@Link Request} with a subpath.
+//	 * 
+//	 * @since 1.2.4
+//	 */
+//	@Test
+//	public final void testRestfulSubpath() {
+//		
+//		String subpath = "/restfulsubpath", body = "hello";
+//		
+//		stubFor(get(urlEqualTo(subpath))
+//				.willReturn(aResponse()
+//				.withStatus(200)
+//				.withBody(body)));
+//		
+//		assertEquals(body, mockEndpoint.restfulSubpath());
+//		verify(getRequestedFor(urlMatching(subpath)));
+//	}
+//	
+//	/**
+//	 * <p>Test for a RESTful {@link Request} with a subpath having {@link PathParam}s.
+//	 * 
+//	 * @since 1.2.4
+//	 */
+//	@Test
+//	public final void testRestfulSubpathWithParams() {
+//		
+//		String subpath = "/restfulsubpathwithparam/\\S+", body = "hello", 
+//			   id = "doctorwho", url = "/restfulsubpathwithparam/" + id;
+//		
+//		stubFor(get(urlMatching(subpath))
+//				.willReturn(aResponse()
+//				.withStatus(200)
+//				.withBody(body)));
+//		
+//		assertEquals(body, mockEndpoint.restfulSubpathWithParam(id));
+//		verify(getRequestedFor(urlEqualTo(url)));
+//	}
 	
 	/**
 	 * <p>Test for a {@link Request} with a subpath having constant {@link Request.Param}s.
@@ -297,14 +315,20 @@ public class MockEndpointTest {
 	@Test
 	public final void testDeleteMethod() {
 		
-		String id = "doctorwho", uri = "/deleterequest/" + id;
+		String path = "/deleterequest";
 		
-		stubFor(delete(urlMatching(uri))
+		stubFor(delete(urlEqualTo(path))
 				.willReturn(aResponse()
 				.withStatus(200)));
 		
-		mockEndpoint.deleteRequest(id);
-		verify(deleteRequestedFor(urlEqualTo(uri)));
+		mockEndpoint.deleteRequest();
+		
+		List<LoggedRequest> requests = findAll(deleteRequestedFor(urlMatching(path)));
+		assertFalse(requests == null);
+		assertFalse(requests.isEmpty());
+		
+		LoggedRequest request = requests.get(0);
+		assertTrue(request.getMethod().equals(RequestMethod.DELETE));
 	}
 	
 	/**
@@ -317,7 +341,7 @@ public class MockEndpointTest {
 		
 		stubFor(get(urlEqualTo("/requestheader"))
 				.willReturn(aResponse()
-						.withStatus(200)));
+				.withStatus(200)));
 		
 		String header = "mobile";
 		
