diff --git a/src/test/java/com/lonepulse/zombielink/test/endpoint/MockEndpointTest.java b/src/test/java/com/lonepulse/zombielink/test/endpoint/MockEndpointTest.java
index 3d1f043..8accbcd 100644
--- a/src/test/java/com/lonepulse/zombielink/test/endpoint/MockEndpointTest.java
+++ b/src/test/java/com/lonepulse/zombielink/test/endpoint/MockEndpointTest.java
@@ -55,6 +55,7 @@ import com.lonepulse.zombielink.core.annotation.Bite;
 import com.lonepulse.zombielink.core.annotation.Header;
 import com.lonepulse.zombielink.core.annotation.HeaderSet;
 import com.lonepulse.zombielink.core.annotation.Param;
+import com.lonepulse.zombielink.core.annotation.PathParam;
 import com.lonepulse.zombielink.core.annotation.Request;
 import com.lonepulse.zombielink.core.annotation.Stateful;
 import com.lonepulse.zombielink.core.inject.Zombie;
@@ -122,7 +123,7 @@ public class MockEndpointTest {
 		
 		String subpath = "/subpathwithparams\\?\\S+", body = "hello", 
 			   firstName = "Doctor", lastName = "Who",
-			   url = "/subpathwithparams?firstName=" + firstName + "&lastName=" + lastName;
+			   url = "/subpathwithparams?lastName=" + lastName + "&firstName=" + firstName;
 		
 		stubFor(get(urlMatching(subpath))
 				.willReturn(aResponse()
@@ -132,47 +133,45 @@ public class MockEndpointTest {
 		assertEquals(body, mockEndpoint.subpathWithParams(firstName, lastName));
 		verify(getRequestedFor(urlEqualTo(url)));
 	}
-
-//	TODO write fresh tests for RESTful requests	
-//	
-//	/**
-//	 * <p>Test for a RESTful {@Link Request} with a subpath.
-//	 * 
-//	 * @since 1.2.4
-//	 */
-//	@Test
-//	public final void testRestfulSubpath() {
-//		
-//		String subpath = "/restfulsubpath", body = "hello";
-//		
-//		stubFor(get(urlEqualTo(subpath))
-//				.willReturn(aResponse()
-//				.withStatus(200)
-//				.withBody(body)));
-//		
-//		assertEquals(body, mockEndpoint.restfulSubpath());
-//		verify(getRequestedFor(urlMatching(subpath)));
-//	}
-//	
-//	/**
-//	 * <p>Test for a RESTful {@link Request} with a subpath having {@link PathParam}s.
-//	 * 
-//	 * @since 1.2.4
-//	 */
-//	@Test
-//	public final void testRestfulSubpathWithParams() {
-//		
-//		String subpath = "/restfulsubpathwithparam/\\S+", body = "hello", 
-//			   id = "doctorwho", url = "/restfulsubpathwithparam/" + id;
-//		
-//		stubFor(get(urlMatching(subpath))
-//				.willReturn(aResponse()
-//				.withStatus(200)
-//				.withBody(body)));
-//		
-//		assertEquals(body, mockEndpoint.restfulSubpathWithParam(id));
-//		verify(getRequestedFor(urlEqualTo(url)));
-//	}
+	
+	/**
+	 * <p>Test for a RESTful {@Link Request} with a subpath.
+	 * 
+	 * @since 1.2.4
+	 */
+	@Test
+	public final void testRestfulSubpath() {
+		
+		String subpath = "/restfulsubpath", body = "hello";
+		
+		stubFor(get(urlEqualTo(subpath))
+				.willReturn(aResponse()
+				.withStatus(200)
+				.withBody(body)));
+		
+		assertEquals(body, mockEndpoint.restfulSubpath());
+		verify(getRequestedFor(urlMatching(subpath)));
+	}
+	
+	/**
+	 * <p>Test for a RESTful {@link Request} with a subpath having {@link PathParam}s.
+	 * 
+	 * @since 1.2.4
+	 */
+	@Test
+	public final void testRestfulSubpathWithParams() {
+		
+		String subpath = "/restfulsubpathwithparam/\\S+", body = "hello", 
+			   id = "doctorwho", url = "/restfulsubpathwithparam/" + id;
+		
+		stubFor(get(urlMatching(subpath))
+				.willReturn(aResponse()
+				.withStatus(200)
+				.withBody(body)));
+		
+		assertEquals(body, mockEndpoint.restfulSubpathWithParam(id));
+		verify(getRequestedFor(urlEqualTo(url)));
+	}
 	
 	/**
 	 * <p>Test for a {@link Request} with a subpath having constant {@link Request.Param}s.
@@ -292,9 +291,9 @@ public class MockEndpointTest {
 				.willReturn(aResponse()
 				.withStatus(200)));
 		
-		String user = "{\"_id\":1, \"name\":\"DoctorWho\", \"age\":953, \"location\":\"Tardis\"}";
+		String name = "DoctorWho", age = "953", location = "Tardis";
 		
-		mockEndpoint.putRequest(user);
+		mockEndpoint.putRequest(name, age, location);
 		
 		List<LoggedRequest> requests = findAll(putRequestedFor(urlMatching(path)));
 		assertFalse(requests == null);
@@ -304,7 +303,9 @@ public class MockEndpointTest {
 		assertTrue(request.getMethod().equals(RequestMethod.PUT));
 		
 		String body = request.getBodyAsString();
-		assertTrue(body.contains(user));
+		assertTrue(body.contains("name=" + name));
+		assertTrue(body.contains("age=" + age));
+		assertTrue(body.contains("location=" + location));
 	}
 	
 	/**
