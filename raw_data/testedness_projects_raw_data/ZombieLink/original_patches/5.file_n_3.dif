diff --git a/src/main/java/com/lonepulse/zombielink/executor/AsyncRequestExecutor.java b/src/main/java/com/lonepulse/zombielink/executor/AsyncRequestExecutor.java
index 616a903..9a5170e 100644
--- a/src/main/java/com/lonepulse/zombielink/executor/AsyncRequestExecutor.java
+++ b/src/main/java/com/lonepulse/zombielink/executor/AsyncRequestExecutor.java
@@ -28,24 +28,30 @@ import java.util.concurrent.TimeUnit;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.apache.http.HttpRequest;
 import org.apache.http.HttpResponse;
-import org.apache.http.client.HttpClient;
 import org.apache.http.client.methods.HttpRequestBase;
+import org.apache.http.impl.conn.PoolingClientConnectionManager;
+import org.apache.http.protocol.HttpContext;
+import org.apache.http.util.EntityUtils;
 
-import com.lonepulse.zombielink.annotation.Asynchronous;
+import com.lonepulse.zombielink.annotation.Stateful;
 import com.lonepulse.zombielink.inject.InvocationContext;
+import com.lonepulse.zombielink.processor.Processors;
+import com.lonepulse.zombielink.response.AsyncHandler;
 
 /**
- * <p>This is an extension of {@link BasicRequestExecutor} which is responsible for executing <b>asynchronous 
- * requests</b> identified by the @{@link Asynchronous} annotation placed on the endpoint or request method.</p>
+ * <p>A concrete implementation of {@link RequestExecutor} which executes 
+ * {@link HttpRequest}s asynchronously.</p>
  * 
- * @version 1.1.0
- * <br><br>
- * @since 1.2.4
+ * <p>The thread pool is managed by {@link MultiThreadedHttpClient} using 
+ * a {@link PoolingClientConnectionManager}.</p>
+ * 
+ * @version 1.2.0
  * <br><br>
- * @author <a href="mailto:sahan@lonepulse.com">Lahiru Sahan Jayasinghe</a>
+ * @author <a href="mailto:lahiru@lonepulse.com">Lahiru Sahan Jayasinghe</a>
  */
-class AsyncRequestExecutor extends BasicRequestExecutor {
+class AsyncRequestExecutor implements RequestExecutor {
 
 	
 	private static final Log LOG = LogFactory.getLog(AsyncRequestExecutor.class);
@@ -89,48 +95,115 @@ class AsyncRequestExecutor extends BasicRequestExecutor {
 	
 	
 	/**
-	 * <p>Creates a new instance of {@link AsyncRequestExecutor} using the given {@link ExecutionHandler}.</p>
+	 * <p>Takes an {@link HttpRequestBase} and executes it asynchronously. 
+	 * This method returns {@code null} immediately.
 	 * 
-	 * <p>See {@link BasicRequestExecutor#BasicRequestExecutor(ExecutionHandler)}</p>
-	 *
-	 * @param responseHandler
-	 * 			the instance of {@link ExecutionHandler} which will be invoked during request execution
-	 * <br><br>
-	 * @since 1.2.4
-	 */
-	AsyncRequestExecutor(ExecutionHandler responseHandler) {
-		
-		super(responseHandler);
-	}
-	
-	/**
-	 * <p>Executes an {@link HttpRequestBase} <b>asynchronously</b> with the endpoint's {@link HttpClient}, 
-	 * which causes it to return immediately with {@code null}. Directing the request execution is delegated 
-	 * to the super class' implementation.</p> 
+	 * @param httpRequestBase
+	 * 			the {@link HttpRequestBase} to be executed
 	 * 
-	 * <p>See {@link BasicRequestExecutor#execute(HttpRequestBase, InvocationContext)}</p>
+	 * @param config
+	 * 			the {@link InvocationContext} associated with 
+	 * 			the current request
 	 * 
-	 * @param request
-	 * 			the {@link HttpRequestBase} to be executed using the endpoint's {@link HttpClient}
-	 * <br><br>
-	 * @param context
-	 * 			the {@link InvocationContext} used to discover information about the proxy invocation
-	 * <br><br>
-	 * @throws RequestExecutionException
-	 * 			if the HTTP request execution failed
-	 * <br><br>
-	 * @since 1.2.4
+	 * @since 1.1.0
 	 */
 	@Override
-	public HttpResponse execute(final HttpRequestBase httpRequestBase, final InvocationContext context)
+	public HttpResponse execute(final HttpRequestBase httpRequestBase, final InvocationContext config)
 	throws RequestExecutionException {
 
 		ASYNC_EXECUTOR_SERVICE.execute(new Runnable() {
 			
+			@SuppressWarnings("unchecked") //type-safe cast from Object to AsyncHandler
 			@Override
 			public void run() {
 		
-				AsyncRequestExecutor.super.execute(httpRequestBase, context);
+				AsyncHandler<Object> asyncHandler = null;
+				
+				try {
+					
+					List<Object> requestArgs = config.getArguments();
+					
+					if(requestArgs != null) {
+					
+						for (Object object : requestArgs) {
+							
+							if(object instanceof AsyncHandler) {
+								
+								asyncHandler = AsyncHandler.class.cast(object);
+								break;
+							}
+						}
+					}
+					
+					Class<?> endpointClass = config.getEndpoint();
+					HttpResponse httpResponse;
+					
+					if(endpointClass.isAnnotationPresent(Stateful.class)) {
+							
+						HttpContext httpContext = HttpContextDirectory.INSTANCE.get(endpointClass);
+						httpResponse = HttpClientDirectory.INSTANCE.get(endpointClass).execute(httpRequestBase, httpContext);
+					}
+					else {
+							
+						httpResponse = HttpClientDirectory.INSTANCE.get(endpointClass).execute(httpRequestBase);
+					}
+					
+					if(asyncHandler == null) {
+						
+						EntityUtils.consumeQuietly(httpResponse.getEntity());
+						return;
+					}
+					else {
+					
+						int statusCode = httpResponse.getStatusLine().getStatusCode();
+						boolean successful = statusCode > 199 && statusCode < 300;
+						
+						if(successful) {
+							
+							Object reponseEntity = Processors.RESPONSE.run(httpResponse, config);
+							
+							try {
+								
+								asyncHandler.onSuccess(httpResponse, reponseEntity);
+							}
+							catch (Exception e) {
+								
+								LOG.error("Callback \"onSuccess\" aborted with an exception.", e);
+							}
+						}
+						else { 
+							
+							EntityUtils.consumeQuietly(httpResponse.getEntity());
+							
+							try {
+								
+								asyncHandler.onFailure(httpResponse);
+							}
+							catch (Exception e) {
+								
+								LOG.error("Callback \"onFailure\" aborted with an exception.", e);
+							}
+						}
+					}
+				}
+				catch(Exception error) {
+					
+					if(asyncHandler != null) {
+						
+						try {
+						
+							asyncHandler.onError(error);
+						}
+						catch(Exception e) {
+							
+							LOG.error("Callback \"onError\" aborted with an exception.", e);
+						}
+					}
+					else {
+						
+						LOG.error("Asynchronous request execution failed. ", error);
+					}
+				}
 			}
 		});
 		
