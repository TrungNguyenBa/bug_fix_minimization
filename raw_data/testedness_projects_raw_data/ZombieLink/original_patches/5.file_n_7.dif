diff --git a/src/main/java/com/lonepulse/zombielink/executor/RequestExecutionException.java b/src/main/java/com/lonepulse/zombielink/executor/RequestExecutionException.java
index 1f1ae2f..1f0e0aa 100644
--- a/src/main/java/com/lonepulse/zombielink/executor/RequestExecutionException.java
+++ b/src/main/java/com/lonepulse/zombielink/executor/RequestExecutionException.java
@@ -25,13 +25,12 @@ import java.lang.reflect.Method;
 import com.lonepulse.zombielink.ZombieLinkRuntimeException;
 
 /**
- * <p>This runtime exception is thrown whenever a failure occurs in processing a request invocation.</p>
+ * <p>This runtime exception is thrown whenever a failure occurs in executing 
+ * an HTTP request.</p>
  * 
- * @version 1.2.0
+ * @version 1.1.0
  * <br><br>
- * @since 1.1.0
- * <br><br>
- * @author <a href="mailto:sahan@lonepulse.com">Lahiru Sahan Jayasinghe</a>
+ * @author <a href="mailto:lahiru@lonepulse.com">Lahiru Sahan Jayasinghe</a>
  */
 class RequestExecutionException extends ZombieLinkRuntimeException {
 
@@ -40,53 +39,38 @@ class RequestExecutionException extends ZombieLinkRuntimeException {
 	
 
 	/**
-	 * <p>If the given exception is an instance of {@link RequestExecutionException} it is returned as is, 
-	 * else a new {@link RequestExecutionException} is created using the given exception as the root cause.</p>
-	 *
-	 * @param request
-	 * 			the {@link Method} which represents the invoked request's definition
-	 * <br><br>
-	 * @param endpoint
-	 * 			the endpoint {@link Class} whose request execution resulted in a failure
-	 * <br><br>
-	 * @param e
-	 * 			the exception to be wrapped in an instance of {@link RequestExecutionException}
-	 * <br><br>
-	 * @return the wrapped instance of {@link RequestExecutionException}
-	 * <br><br>
-	 * @since 1.2.4
+	 * <p>Displays a detailed description along with the stacktrace. 
 	 */
-	public static final RequestExecutionException wrap(Method request, Class<?> endpoint, Exception e) {
+	public RequestExecutionException(Method request, Class<?> endpoint, Throwable rootCause) {
 		
-		return (e instanceof RequestExecutionException)? 
-				(RequestExecutionException)e :new RequestExecutionException(request, endpoint, e);
+		this("Failed to execute request " + request.getName() + 
+			 " on " + endpoint.getSimpleName(), rootCause);
 	}
 	
+	/**
+	 * See {@link RuntimeException#RuntimeException()}.
+	 */
+	public RequestExecutionException() {
+	}
 
 	/**
-	 * <p>Displays a detailed description with information on the endpoint and request definition.<p>
-	 * 
-	 * @param request
-	 * 			the {@link Method} which represents the invoked request's definition
-	 * <br><br>
-	 * @param endpoint
-	 * 			the endpoint {@link Class} whose request execution resulted in a failure
-	 * <br><br>
-	 * @param rootCause
-	 * 			the parent cause which resulted in the request execution failure 
-	 * <br><br>
-	 * @since 1.1.0
+	 * See {@link RuntimeException#RuntimeException(String)}.
 	 */
-	public RequestExecutionException(Method request, Class<?> endpoint, Throwable rootCause) {
+	public RequestExecutionException(String detailMessage) {
 		
-		super(new StringBuilder("Failed to execute request ").append(request.getName())
-			  .append(" on ").append(endpoint.getSimpleName()).toString(), rootCause);
+		super(detailMessage);
 	}
 
 	/**
-	 * <p>See {@link ZombieLinkRuntimeException#ZombieLinkRuntimeException(String, Throwable)}.</p>
-	 * <br><br>
-	 * @since 1.1.0
+	 * See {@link RuntimeException#RuntimeException(Throwable)}.
+	 */
+	public RequestExecutionException(Throwable throwable) {
+		
+		super(throwable);
+	}
+
+	/**
+	 * See {@link RuntimeException#RuntimeException(String, Throwable)}.
 	 */
 	public RequestExecutionException(String detailMessage, Throwable throwable) {
 
