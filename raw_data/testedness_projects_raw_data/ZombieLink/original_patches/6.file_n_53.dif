diff --git a/src/test/java/com/lonepulse/zombielink/inject/EndpointValidationTest.java b/src/test/java/com/lonepulse/zombielink/inject/EndpointValidationTest.java
index 97e1307..bb93a31 100644
--- a/src/test/java/com/lonepulse/zombielink/inject/EndpointValidationTest.java
+++ b/src/test/java/com/lonepulse/zombielink/inject/EndpointValidationTest.java
@@ -27,6 +27,8 @@ import org.junit.Test;
 import org.junit.rules.ExpectedException;
 
 import com.lonepulse.zombielink.annotation.Endpoint;
+import com.lonepulse.zombielink.inject.ProxyInvocationConfiguration;
+import com.lonepulse.zombielink.validator.Validators;
 
 /**
  * <p>Performs unit testing for <b>endpoint validation</b>.
@@ -78,10 +80,10 @@ public class EndpointValidationTest {
 	public void setUp() throws Exception {
 		
 		missingEndpointAnnotationExceptionClass = (Class<Throwable>) 
-			Class.forName("com.lonepulse.zombielink.inject.MissingEndpointAnnotationException");
+			Class.forName("com.lonepulse.zombielink.validator.MissingEndpointAnnotationException");
 		
 		missingEndpointHostExceptionClass = (Class<Throwable>) 
-			Class.forName("com.lonepulse.zombielink.inject.MissingEndpointHostException");
+			Class.forName("com.lonepulse.zombielink.validator.MissingEndpointHostException");
 	}
 	
 	/**
@@ -92,8 +94,12 @@ public class EndpointValidationTest {
 	@Test
 	public final void testMissingEndpointAnnotation() {
 		
-		expectedException.expect(Is.isA(missingEndpointAnnotationExceptionClass));
-		Validators.ENDPOINT.validate(MissingEndpointAnnotationEndpoint.class);
+		expectedException.expectCause(Is.isA(missingEndpointAnnotationExceptionClass));
+
+		ProxyInvocationConfiguration.Builder builder = new  ProxyInvocationConfiguration.Builder()
+		.setEndpointClass(MissingEndpointAnnotationEndpoint.class);
+		
+		Validators.ENDPOINT.validate(builder.build());
 	}
 	
 	/**
@@ -104,7 +110,11 @@ public class EndpointValidationTest {
 	@Test
 	public final void testMissingEndpointHost() {
 		
-		expectedException.expect(Is.isA(missingEndpointHostExceptionClass));
-		Validators.ENDPOINT.validate(MissingEndpointHostEndpoint.class);
+		expectedException.expectCause(Is.isA(missingEndpointHostExceptionClass));
+		
+		ProxyInvocationConfiguration.Builder builder = new  ProxyInvocationConfiguration.Builder()
+		.setEndpointClass(MissingEndpointHostEndpoint.class);
+		
+		Validators.ENDPOINT.validate(builder.build());
 	}
 }
