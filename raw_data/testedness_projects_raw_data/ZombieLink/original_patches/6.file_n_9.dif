diff --git a/src/main/java/com/lonepulse/zombielink/inject/EndpointProxyFactory.java b/src/main/java/com/lonepulse/zombielink/inject/EndpointProxyFactory.java
index 44cb796..7350940 100644
--- a/src/main/java/com/lonepulse/zombielink/inject/EndpointProxyFactory.java
+++ b/src/main/java/com/lonepulse/zombielink/inject/EndpointProxyFactory.java
@@ -20,24 +20,27 @@ package com.lonepulse.zombielink.inject;
  * #L%
  */
 
-import static com.lonepulse.zombielink.util.Assert.assertNotNull;
-
 import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.Method;
 import java.lang.reflect.Proxy;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Map;
+import java.net.URI;
+
+import org.apache.http.HttpResponse;
+import org.apache.http.client.methods.HttpRequestBase;
+
+import com.lonepulse.zombielink.annotation.Endpoint;
+import com.lonepulse.zombielink.executor.RequestExecutors;
+import com.lonepulse.zombielink.processor.Processors;
+import com.lonepulse.zombielink.request.RequestMethod;
+import com.lonepulse.zombielink.validator.Validators;
 
 /**
- * <p>This is a concrete implementation of {@link ProxyFactory} which is used for constructing proxies 
- * for endpoint definitions.</p>
+ * <p>This factory is used for creating dynamic proxies for communication 
+ * endpoint interfaces that are annotated with {@link Endpoint}.</p>
  * 
- * @version 2.2.0
- * <br><br>
- * @since 1.1.0
+ * @version 2.1.2
  * <br><br>
- * @author <a href="mailto:sahan@lonepulse.com">Lahiru Sahan Jayasinghe</a>
+ * @author <a href="mailto:lahiru@lonepulse.com">Lahiru Sahan Jayasinghe</a>
  */
 enum EndpointProxyFactory implements ProxyFactory {
 	
@@ -46,43 +48,49 @@ enum EndpointProxyFactory implements ProxyFactory {
 	 * <p>The single instance of the factory which caters to all endpoint 
 	 * injection requirements by creating endpoint proxies.
 	 * 
-	 * @since 1.1.0
+	 * @since 2.1.2
 	 */
 	INSTANCE;
 
 
-	private static final Map<String, Object> ENDPOINTS = Collections.synchronizedMap(new HashMap<String, Object>());
-	
-
 	/**
 	 * {@inheritDoc}
 	 */
 	@Override
-	public synchronized <T> T create(final Class<T> endpoint) {
-
-		String proxyKey = assertNotNull(endpoint).getName();
+	public synchronized <T> T create(final Class<T> endpointClass) {
 
-		if(ENDPOINTS.containsKey(proxyKey)) {
-			
-			return endpoint.cast(ENDPOINTS.get(proxyKey));
-		}
+		try {
 		
-		final ProxyInvocation.Template template = new ProxyInvocation.Template(endpoint){};
+			final ProxyInvocationConfiguration.Builder builder = new  ProxyInvocationConfiguration.Builder()
+			.setEndpointClass(endpointClass);
 			
-		try {
+			final URI uri = (URI) Validators.ENDPOINT.validate(builder.build());
 			
-			T endpointProxy = endpoint.cast(Proxy.newProxyInstance(
-				endpoint.getClassLoader(), new Class<?>[] {endpoint} , new InvocationHandler() {
+			T endpointProxy = endpointClass.cast(Proxy.newProxyInstance(endpointClass.getClassLoader(), 
+												 new Class<?>[] {endpointClass} , 
+												 new InvocationHandler() {
 				
 				@Override
 				public Object invoke(final Object proxy, final Method method, final Object[] args) throws Throwable {
 					
-					return ProxyInvocation.newInstance(template, proxy, method, args).invoke();
+					ProxyInvocationConfiguration config = builder
+					.setEndpointClass(endpointClass)
+					.setUri(uri)
+					.setProxy(proxy)
+					.setRequest(method)
+					.setRequestArgs(args)
+					.build();
+					
+					Validators.REQUEST.validate(config);
+					HttpRequestBase request = RequestMethod.TRANSLATOR.translate(config);
+					Processors.REQUEST.run(request, config);
+					
+					HttpResponse response = RequestExecutors.RESOLVER.resolve(config).execute(request, config);
+					
+					return (response == null)? null :Processors.RESPONSE.run(response, config);
 				}
 			}));
 			
-			ENDPOINTS.put(proxyKey, endpointProxy);
-			
 			return endpointProxy;
 		}
 		catch(Exception e) {
