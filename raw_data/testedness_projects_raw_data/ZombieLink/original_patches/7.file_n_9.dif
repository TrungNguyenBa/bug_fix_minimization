diff --git a/src/main/java/com/lonepulse/zombielink/response/EntityProcessor.java b/src/main/java/com/lonepulse/zombielink/response/EntityProcessor.java
index fbf653b..761a5e5 100644
--- a/src/main/java/com/lonepulse/zombielink/response/EntityProcessor.java
+++ b/src/main/java/com/lonepulse/zombielink/response/EntityProcessor.java
@@ -25,9 +25,7 @@ import java.lang.reflect.Method;
 
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
-import org.apache.http.util.EntityUtils;
 
-import com.lonepulse.zombielink.annotation.Asynchronous;
 import com.lonepulse.zombielink.annotation.Header;
 import com.lonepulse.zombielink.annotation.Parser;
 import com.lonepulse.zombielink.annotation.Parser.ParserType;
@@ -74,24 +72,15 @@ class EntityProcessor extends AbstractResponseProcessor {
 	protected Object process(HttpResponse httpResponse, ProxyInvocationConfiguration config, Object parsedResponse)
 	throws ResponseProcessorException {
 
-		HttpEntity httpEntity = httpResponse != null? httpResponse.getEntity() :null;
-		
-		if(httpEntity != null) {
-			
-			try {
+		try {
+
+			if(httpResponse != null) {
 				
 				Method request = config.getRequest();
-				Class<?> responseType = request.getReturnType();
-				
-				boolean handleAsync = (config.getEndpointClass().isAnnotationPresent(Asynchronous.class) 
-									   || request.isAnnotationPresent(Asynchronous.class));
 				
-				boolean responseExpected = !responseType.equals(void.class) && !responseType.equals(Void.class); 
-				
-				if(handleAsync || responseExpected) {
+				if(!request.getReturnType().equals(Void.class) && !(httpResponse.getEntity() == null)) {
 					
 					Class<?> endpoint = config.getEndpointClass();
-					ResponseParser<?> responseParser = null;
 			
 					Parser parser = null;
 					
@@ -103,41 +92,32 @@ class EntityProcessor extends AbstractResponseProcessor {
 						
 						parser = endpoint.getAnnotation(Parser.class);
 					}
-					else if(handleAsync || CharSequence.class.isAssignableFrom(responseType)) {
-						
-						responseParser = ResponseParsers.RESOLVER.resolve(ParserType.RAW);
-					}
 					else {
 						
 						throw new ResponseParserUndefinedException(endpoint, request);
 					}
 					
-					if(parser != null) {
+					ResponseParser<?> responseParser = null;
+					
+					if(parser.value() == ParserType.UNDEFINED) {
 						
-						if(parser.value() == ParserType.UNDEFINED) {
-							
-							responseParser = ResponseParser.class.cast(parser.type().newInstance()); 
-						}
-						else {
-							
-							responseParser = ResponseParsers.RESOLVER.resolve(parser.value()); 
-						}
+						responseParser = ResponseParser.class.cast(parser.type().newInstance());
+					}
+					else {
+				
+						responseParser = ResponseParsers.RESOLVER.resolve(parser.value());
 					}
 					
 					return responseParser.parse(httpResponse, config);
 				}
 			}
-			catch(Exception e) {
-				
-				throw (e instanceof ResponseProcessorException)? 
-						(ResponseProcessorException)e :new ResponseProcessorException(getClass(), config, e);
-			}
-			finally {
-				
-				EntityUtils.consumeQuietly(httpEntity);
-			}
+			
+			return parsedResponse;
+		}
+		catch(Exception e) {
+			
+			throw (e instanceof ResponseProcessorException)? 
+					(ResponseProcessorException)e :new ResponseProcessorException(getClass(), config, e);
 		}
-		
-		return parsedResponse;
 	}
 }
