diff --git a/src/test/java/org/apache/commons/lang3/StringUtilsTest.java b/src/test/java/org/apache/commons/lang3/StringUtilsTest.java
index 25a709ca..c49ee6a0 100644
--- a/src/test/java/org/apache/commons/lang3/StringUtilsTest.java
+++ b/src/test/java/org/apache/commons/lang3/StringUtilsTest.java
@@ -35,7 +35,6 @@
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.Locale;
-import java.util.regex.PatternSyntaxException;
 
 import org.apache.commons.lang3.text.WordUtils;
 import org.junit.Test;
@@ -1198,62 +1197,6 @@ public void testRemovePattern() {
     }
 
     @Test
-    public void testReplaceAll_StringStringString() {
-        assertNull(StringUtils.replaceAll(null, "", ""));
-
-        assertEquals("any", StringUtils.replaceAll("any", null, ""));
-        assertEquals("any", StringUtils.replaceAll("any", "", null));
-
-        assertEquals("zzz", StringUtils.replaceAll("", "", "zzz"));
-        assertEquals("zzz", StringUtils.replaceAll("", ".*", "zzz"));
-        assertEquals("", StringUtils.replaceAll("", ".+", "zzz"));
-
-        assertEquals("z\nz", StringUtils.replaceAll("<__>\n<__>", "<.*>", "z"));
-        assertEquals("z", StringUtils.replaceAll("<__>\n<__>", "(?s)<.*>", "z"));
-
-        assertEquals("ABC___123", StringUtils.replaceAll("ABCabc123", "[a-z]", "_"));
-        assertEquals("ABC_123", StringUtils.replaceAll("ABCabc123", "[^A-Z0-9]+", "_"));
-        assertEquals("ABC123", StringUtils.replaceAll("ABCabc123", "[^A-Z0-9]+", ""));
-        assertEquals("Lorem_ipsum_dolor_sit",
-                     StringUtils.replaceAll("Lorem ipsum  dolor   sit", "( +)([a-z]+)", "_$2"));
-
-        try {
-            StringUtils.replaceAll("any", "{badRegexSyntax}", "");
-            fail("StringUtils.replaceAll expecting PatternSyntaxException");
-        } catch (final PatternSyntaxException ex) {
-            // empty
-        }
-    }
-
-    @Test
-    public void testReplaceFirst_StringStringString() {
-        assertNull(StringUtils.replaceFirst(null, "", ""));
-
-        assertEquals("any", StringUtils.replaceFirst("any", null, ""));
-        assertEquals("any", StringUtils.replaceFirst("any", "", null));
-
-        assertEquals("zzz", StringUtils.replaceFirst("", "", "zzz"));
-        assertEquals("zzz", StringUtils.replaceFirst("", ".*", "zzz"));
-        assertEquals("", StringUtils.replaceFirst("", ".+", "zzz"));
-
-        assertEquals("z\n<__>", StringUtils.replaceFirst("<__>\n<__>", "<.*>", "z"));
-        assertEquals("z", StringUtils.replaceFirst("<__>\n<__>", "(?s)<.*>", "z"));
-
-        assertEquals("ABC_bc123", StringUtils.replaceFirst("ABCabc123", "[a-z]", "_"));
-        assertEquals("ABC_123abc", StringUtils.replaceFirst("ABCabc123abc", "[^A-Z0-9]+", "_"));
-        assertEquals("ABC123abc", StringUtils.replaceFirst("ABCabc123abc", "[^A-Z0-9]+", ""));
-        assertEquals("Lorem_ipsum  dolor   sit",
-                     StringUtils.replaceFirst("Lorem ipsum  dolor   sit", "( +)([a-z]+)", "_$2"));
-
-        try {
-            StringUtils.replaceFirst("any", "{badRegexSyntax}", "");
-            fail("StringUtils.replaceFirst expecting PatternSyntaxException");
-        } catch (final PatternSyntaxException ex) {
-            // empty
-        }
-    }
-
-    @Test
     public void testReplace_StringStringStringInt() {
         assertNull(StringUtils.replace(null, null, null, 2));
         assertNull(StringUtils.replace(null, null, "any", 2));
