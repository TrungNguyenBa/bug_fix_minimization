diff --git a/src/test/java/org/apache/commons/lang3/StringUtilsTest.java b/src/test/java/org/apache/commons/lang3/StringUtilsTest.java
index c49ee6a0..5cc665a1 100644
--- a/src/test/java/org/apache/commons/lang3/StringUtilsTest.java
+++ b/src/test/java/org/apache/commons/lang3/StringUtilsTest.java
@@ -2373,35 +2373,22 @@ public void testLANG666() {
     @Test
     public void testStringUtilsCharSequenceContract() {
         final Class<StringUtils> c = StringUtils.class;
-        // Methods that are expressly excluded from testStringUtilsCharSequenceContract()
-        final String[] excludeMethods = {
-            "public static int org.apache.commons.lang3.StringUtils.compare(java.lang.String,java.lang.String)",
-            "public static int org.apache.commons.lang3.StringUtils.compare(java.lang.String,java.lang.String,boolean)",
-            "public static int org.apache.commons.lang3.StringUtils.compareIgnoreCase(java.lang.String,java.lang.String)",
-            "public static int org.apache.commons.lang3.StringUtils.compareIgnoreCase(java.lang.String,java.lang.String,boolean)"
-        };
         final Method[] methods = c.getMethods();
-
         for (final Method m : methods) {
-            String methodStr = m.toString();
             if (m.getReturnType() == String.class || m.getReturnType() == String[].class) {
                 // Assume this is mutable and ensure the first parameter is not CharSequence.
                 // It may be String or it may be something else (String[], Object, Object[]) so 
                 // don't actively test for that.
                 final Class<?>[] params = m.getParameterTypes();
                 if (params.length > 0 && (params[0] == CharSequence.class || params[0] == CharSequence[].class)) {
-                    if (!ArrayUtils.contains(excludeMethods, methodStr)) {
-                        fail("The method \"" + methodStr + "\" appears to be mutable in spirit and therefore must not accept a CharSequence");
-                    }
+                    fail("The method " + m + " appears to be mutable in spirit and therefore must not accept a CharSequence");
                 }
             } else {
                 // Assume this is immutable in spirit and ensure the first parameter is not String.
                 // As above, it may be something other than CharSequence.
                 final Class<?>[] params = m.getParameterTypes();
                 if (params.length > 0 && (params[0] == String.class || params[0] == String[].class)) {
-                    if (!ArrayUtils.contains(excludeMethods, methodStr)) {
-                        fail("The method \"" + methodStr + "\" appears to be immutable in spirit and therefore must not accept a String");
-                    }
+                    fail("The method " + m + " appears to be immutable in spirit and therefore must not accept a String");
                 }
             }
         }
