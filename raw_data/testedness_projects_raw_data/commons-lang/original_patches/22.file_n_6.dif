diff --git a/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java b/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java
index 330935cd..3c47bd28 100644
--- a/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java
+++ b/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java
@@ -31,7 +31,6 @@
 import java.util.Map;
 import java.util.TimeZone;
 
-import org.apache.commons.lang3.LocaleUtils;
 import org.apache.commons.lang3.SerializationUtils;
 import org.junit.Assert;
 import org.junit.Test;
@@ -326,8 +325,7 @@ private void testLocales(final String format, final boolean eraBC) throws Except
         if (eraBC) {
             cal.set(Calendar.ERA, GregorianCalendar.BC);
         }
-
-        for(final Locale locale : Locale.getAvailableLocales() ) {
+        for(final Locale locale : Locale.getAvailableLocales()) {
             // ja_JP_JP cannot handle dates before 1868 properly
             if (eraBC && locale.equals(FastDateParser.JAPANESE_IMPERIAL)) {
                 continue;
@@ -343,28 +341,6 @@ private void testLocales(final String format, final boolean eraBC) throws Except
         }
     }
 
-    @Test
-    public void testJpLocales() {
-
-        final Calendar cal= Calendar.getInstance(GMT);
-        cal.clear();
-        cal.set(2003, Calendar.FEBRUARY, 10);
-        cal.set(Calendar.ERA, GregorianCalendar.BC);
-
-        final Locale locale = LocaleUtils.toLocale("zh"); {
-            // ja_JP_JP cannot handle dates before 1868 properly
-
-            final SimpleDateFormat sdf = new SimpleDateFormat(LONG_FORMAT, locale);
-            final DateParser fdf = getInstance(LONG_FORMAT, locale);
-
-            try {
-                checkParse(locale, cal, sdf, fdf);
-            } catch(final ParseException ex) {
-                Assert.fail("Locale "+locale+ " failed with "+LONG_FORMAT+"\n" + trimMessage(ex.toString()));
-            }
-        }
-    }
-
     private String trimMessage(final String msg) {
         if (msg.length() < 100) {
             return msg;
@@ -465,7 +441,7 @@ private void testSdfAndFdp(final String format, final String date, final boolean
             final DateParser fdp = getInstance(format, NEW_YORK, Locale.US);
             dfdp = fdp.parse(date);
             if (shouldFail) {
-                Assert.fail("Expected FDF failure, but got " + dfdp + " for ["+format+","+date+"]");
+                Assert.fail("Expected FDF failure, but got " + dfdp + " for ["+format+","+date+"] using "+((FastDateParser)fdp).getParsePattern());
             }
         } catch (final Exception e) {
             f = e;
