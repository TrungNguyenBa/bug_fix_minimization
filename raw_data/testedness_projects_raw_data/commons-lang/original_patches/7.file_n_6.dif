diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java
index 4dc897b6..8210ee34 100644
--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java
+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java
@@ -170,7 +170,7 @@ private void init(final Calendar definingCalendar) {
     //-----------------------------------------------------------------------
 
     /**
-     * Struct to hold strategy and filed width 
+     * Struct to hold strategy and field width
      */
     private static class StrategyAndWidth {
         final Strategy strategy;
@@ -401,12 +401,12 @@ public Date parse(final String source, final ParsePosition pos) {
 
         return parse(source, pos, cal) ?cal.getTime() :null;
     }
-    
+
     /**
-     * Parse a formatted date string according to the format.  Updates the Calendar with parsed fields.  
+     * Parse a formatted date string according to the format.  Updates the Calendar with parsed fields.
      * Upon success, the ParsePosition index is updated to indicate how much of the source text was consumed.
      * Not all source text needs to be consumed.  Upon parse failure, ParsePosition error index is updated to
-     * the offset of the source text which does not match the supplied format.  
+     * the offset of the source text which does not match the supplied format.
      * 
      * @param source The text to parse.
      * @param pos On input, the position in the source to start parsing, on output, updated position.
@@ -415,17 +415,18 @@ public Date parse(final String source, final ParsePosition pos) {
      * @throws IllegalArgumentException when Calendar has been set to be not lenient, and a parsed field is
      * out of range.
      */
-     public boolean parse(final String source, final ParsePosition pos, final Calendar calendar) {
-         ListIterator<StrategyAndWidth> lt = patterns.listIterator();
-         while(lt.hasNext()) {
-             StrategyAndWidth pattern = lt.next();
-             int maxWidth = pattern.getMaxWidth(lt);
-             if(!pattern.strategy.parse(this, calendar, source, pos, maxWidth)) {
-                 return false;
-             }
-         }
-         return true;
-     }
+    @Override
+    public boolean parse(final String source, final ParsePosition pos, final Calendar calendar) {
+        ListIterator<StrategyAndWidth> lt = patterns.listIterator();
+        while(lt.hasNext()) {
+            StrategyAndWidth pattern = lt.next();
+            int maxWidth = pattern.getMaxWidth(lt);
+            if(!pattern.strategy.parse(this, calendar, source, pos, maxWidth)) {
+                return false;
+            }
+        }
+        return true;
+    }
 
     // Support for strategies
     //-----------------------------------------------------------------------
@@ -606,6 +607,7 @@ private Strategy getStrategy(char f, int width, final Calendar definingCalendar)
         case 'w':
             return WEEK_OF_YEAR_STRATEGY;
         case 'y':
+        case 'Y':
             return width>2 ?LITERAL_YEAR_STRATEGY :ABBREVIATED_YEAR_STRATEGY;
         case 'X':
             return ISO8601TimeZoneStrategy.getStrategy(width);
