diff --git a/src/test/java/net/gini/dropwizard/gelf/config/GelfConfigurationTest.java b/src/test/java/net/gini/dropwizard/gelf/config/GelfConfigurationTest.java
index 015ca7d..ee95f3d 100644
--- a/src/test/java/net/gini/dropwizard/gelf/config/GelfConfigurationTest.java
+++ b/src/test/java/net/gini/dropwizard/gelf/config/GelfConfigurationTest.java
@@ -1,12 +1,7 @@
 package net.gini.dropwizard.gelf.config;
 
-import com.google.common.base.Optional;
-import com.yammer.dropwizard.config.ConfigurationException;
-import com.yammer.dropwizard.config.ConfigurationFactory;
-import com.yammer.dropwizard.validation.Validator;
 import org.junit.Test;
 
-import java.io.IOException;
 import java.util.TimeZone;
 
 import static org.hamcrest.core.Is.is;
@@ -19,14 +14,13 @@ import static org.junit.Assert.assertThat;
 public class GelfConfigurationTest {
 
     @Test
-    public void hasValidDefaults() throws IOException, ConfigurationException {
-        final GelfConfiguration config = ConfigurationFactory.forClass(GelfConfiguration.class, new Validator()).build();
+    public void hasValidDefaults() {
+        final GelfConfiguration config = new GelfConfiguration();
 
         assertThat("disabled by default", config.isEnabled(), is(false));
         assertThat("request log is disabled by default", config.isRequestLogEnabled(), is(false));
-        assertThat("default Graylog2 host is 'localhost'", config.getHost(), is("localhost"));
-        assertThat("default Graylog2 port is 12201", config.getPort(), is(12201));
-        assertThat("default hostname is absent", config.getHostName(), is(Optional.<String>absent()));
+        assertThat("default hostname is localhost", config.getHost(), is("localhost"));
+        assertThat("default port is Graylog2 default", config.getPort(), is(12201));
         assertThat("default server version is 0.9.6", config.getServerVersion(), is("0.9.6"));
         assertThat("default facility is GELF", config.getFacility(), is("GELF"));
         assertThat("default chunk threshold is 1000", config.getChunkThreshold(), is(1000));
