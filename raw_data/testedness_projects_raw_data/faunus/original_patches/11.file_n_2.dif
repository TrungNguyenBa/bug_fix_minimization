diff --git a/include/faunus/analysis.h b/include/faunus/analysis.h
index 4761e074..bb83ce58 100755
--- a/include/faunus/analysis.h
+++ b/include/faunus/analysis.h
@@ -811,7 +811,6 @@ namespace Faunus {
           typedef Faunus::MPI::FloatTransmitter::floatp floatp;
           typedef Table2D<Tcoord,double> Tbase;
           typedef Table2D<Tcoord,double> Thist;
-          typedef std::pair<Tcoord,Tcoord> Tpair;
           Thist hist;
           Faunus::MPI::MPIController *mpiPtr; 
           Faunus::MPI::FloatTransmitter ft;
@@ -887,11 +886,10 @@ namespace Faunus {
           }
 
           /**
-           * @brief Update histogram of the single process using both the accepted and rejected 
-           * configutations according to the waste_recycling method. DOI:10.1007/3-540-35273-2_4
-           * Merge histograms from all processes and update the penalty function
+           * @brief Update histogram of the single process
+           * @brief Merge histograms from all processes and update the penalty function
            */
-          double update_recycle(Tpair coord, double weight, bool rejection) {
+          double update_recycle(std::pair<Tcoord,Tcoord> coord, double weight, bool rejection) {
             _cnt++;
             if (weight < 1) {
               hist(coord.first) += (1-weight);
@@ -972,7 +970,6 @@ namespace Faunus {
           typedef Faunus::MPI::FloatTransmitter::floatp floatp;
           typedef Table3D<Tcoord,double> Tbase;
           typedef Table3D<Tcoord,int> Thist;
-          typedef std::pair<Tcoord,Tcoord> Tpair;
           Thist hist;
           Faunus::MPI::MPIController *mpiPtr; 
           Faunus::MPI::FloatTransmitter ft;
@@ -1027,40 +1024,9 @@ namespace Faunus {
            * @brief Update histogram of the single process 
            * @brief Merge histograms from all processes and update the penalty function
            */
-          double update(Tpair coord) {
+          double update(Tcoord coord1, Tcoord coord2) {
             _cnt++;
-            hist(coord.first, coord.second)++; // increment internal histogram
-            _du = 0;
-            if ((_cnt%_Nupdate)==0) { // if Nupdate'th time
-              exchange();
-              for (auto &m : hist.getMap()) { // update penalty function
-                Tbase::operator()(m.first.first, m.first.second) += std::log(m.second);
-              }
-              double min = Tbase::min()->second;
-              for (auto &m : Tbase::getMap()) {
-                Tbase::operator()(m.first.first, m.first.second) -= min;
-              }
-              assert(hist(coord.first, coord.second)!=0 && "hist_size (>= max # of points in histogram) is set too small.");
-              if (hist(coord.first, coord.second)==0) cout << mpiPtr->rank() << " hist(coord1, coord2)=0\n";
-              _du = std::log(hist(coord.first, coord.second)) - min; // prevents energy drift
-              _du_sum += _du;
-              hist.clear();
-            }
-            return _du;
-          }
-
-          /**
-           * @brief Update histogram of the single process using both the accepted and rejected 
-           * configutations according to the waste_recycling method. DOI:10.1007/3-540-35273-2_4
-           * Merge histograms from all processes and update the penalty function
-           */
-          double update_recycle(std::pair<Tpair,Tpair> coord, double weight, bool rejection) {
-            _cnt++;
-            if (weight < 1) {
-              hist(coord.first.first, coord.first.second) += (1-weight);
-              hist(coord.second.first, coord.second.second) += weight;
-            }
-            else hist(coord.second.first, coord.second.second)++;
+            hist(coord1, coord2)++; // increment internal histogram
             _du = 0;
             if ((_cnt%_Nupdate)==0) { // if Nupdate'th time
               exchange();
@@ -1071,10 +1037,9 @@ namespace Faunus {
               for (auto &m : Tbase::getMap()) {
                 Tbase::operator()(m.first.first, m.first.second) -= min;
               }
-              if (!rejection) _du = std::log(hist(coord.second.first, coord.second.second)) - min;
-              else _du = std::log(hist(coord.first.first, coord.first.second)) - min;
-              assert(hist(coord.second.first, coord.second.second)!=0 
-                  && "hist_size (>= max # of points in histogram) is set too small.");
+              assert(hist(coord1, coord2)!=0 && "hist_size (>= max # of points in histogram) is set too small.");
+              if (hist(coord1, coord2)==0) cout << mpiPtr->rank() << " hist(coord1, coord2)=0\n";
+              _du = std::log(hist(coord1, coord2)) - min; // prevents energy drift
               _du_sum += _du;
               hist.clear();
             }
