diff --git a/include/faunus/move.h b/include/faunus/move.h
index c67f64fa..05de3450 100644
--- a/include/faunus/move.h
+++ b/include/faunus/move.h
@@ -794,7 +794,7 @@ namespace Faunus {
           if ( spc->geo.collision( spc->trial[i], Geometry::Geometrybase::BOUNDARY ) )
             return pc::infty;
 
-        double unew = pot->external(spc->trial) + pot->g_external(spc->trial, *igroup);
+        double unew = pot->external(spc->trial) +pot->g_external(spc->trial, *igroup);
         if (unew==pc::infty)
           return pc::infty;       // early rejection
         double uold = pot->external(spc->p) + pot->g_external(spc->p, *igroup);
@@ -1462,7 +1462,7 @@ namespace Faunus {
         for (auto g : spc->groupList())
           if (g!=gPtr)
             du+=pot->g2g(spc->trial, *g, *gPtr) - pot->g2g(spc->p, *g, *gPtr);
-        du+=pot->external(spc->trial) - pot->external(spc->p);
+
         //for (auto i : index)
         //  du += pot->i2all(spc->trial, i) - pot->i2all(spc->p, i);
         return du;
@@ -2692,9 +2692,9 @@ namespace Faunus {
           Group* igroup;
           Point* cntr;
         public:
-          FlipFlop(InputMap&, Energy::Energybase<Tspace>&, Tspace&, string="flipflop"); // if cylindrical geometry, string=cylinder
+          FlipFlop(InputMap&, Energy::Energybase<Tspace>&, Tspace&, string="flipflop");
           void setGroup(Group&); //!< Select Group to move
-          void setCenter(Point&); //!< Select Center of Mass of the bilayer
+          void setCenter(Point&); //!< Select Center of Mass of the vescicle
       };
 
     template<class Tspace>
@@ -2724,10 +2724,6 @@ namespace Faunus {
         assert(igroup!=nullptr);
         assert(cntr!=nullptr);
         Point startpoint=spc->p[igroup->back()];
-        Point endpoint=*cntr;
-        startpoint.z()=cntr->z();
-        if (base::prefix.compare("cylinder") == 0) { // MC move in case of cylindrical geometry
-          startpoint=spc->p[igroup->back()];
         Point head=spc->p[igroup->front()];
         cntr->z()=head.z()=startpoint.z();
         Point dir = spc->geo.vdist(*cntr, startpoint)
@@ -2739,11 +2735,11 @@ namespace Faunus {
         double y1=cntr->y();
         double x2=startpoint.x();
         double y2=startpoint.y();
-          endpoint.x()=x2+1; // rot endpoint of axis ⊥ to line connecting cm of cylinder with 2nd TL
+        Point endpoint; // rot endpoint for on axis ⊥ to line connecting cm of cylinder with 2nd TL
+        endpoint.x()=x2+1;
         endpoint.y()=-(x2-x1)/(y2-y1)+y2;
         endpoint.z()=startpoint.z();
-        }
-        double angle=pc::pi; // MC move in case of planar geometry
+        double angle=pc::pi;
         Geometry::QuaternionRotate vrot;
         vrot.setAxis(spc->geo, startpoint, endpoint, angle); //rot around startpoint->endpoint vec
         for (auto i : *igroup)
@@ -2770,10 +2766,10 @@ namespace Faunus {
           if ( spc->geo.collision( spc->trial[i], Geometry::Geometrybase::BOUNDARY ) )
             return pc::infty;
 
-        double unew = pot->external(spc->trial) + pot->g_external(spc->trial, *igroup);
+        double unew = pot->g_external(spc->trial, *igroup);
         if (unew==pc::infty)
           return pc::infty;       // early rejection
-        double uold = pot->external(spc->p) + pot->g_external(spc->p, *igroup);
+        double uold = pot->g_external(spc->p, *igroup);
 
         for (auto g : spc->groupList()) {
           if (g!=igroup) {
