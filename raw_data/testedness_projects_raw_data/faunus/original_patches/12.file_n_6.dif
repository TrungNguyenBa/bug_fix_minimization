diff --git a/include/faunus/potentials.h b/include/faunus/potentials.h
index 855d8db4..d7624a5f 100644
--- a/include/faunus/potentials.h
+++ b/include/faunus/potentials.h
@@ -997,7 +997,7 @@ namespace Faunus {
           Point force(const Tparticle &a, const Tparticle &b, double r2, const Point &p) {
 #ifdef FAU_APPROXMATH
             double rinv = invsqrtQuake(r2);
-            return lB * a.charge * b.charge * rinv * exp_cawley(-k/rinv) * ( 1/r2 + k*rinv ) * p;
+            return lB * a.charge * b.charge * rinv * exp_cawley(-k/rinv) * ( 1/r2 + k/rinv ) * p;
 #else
             double r=sqrt(r2);
             return lB * a.charge * b.charge / (r*r2) * exp(-k*r) * ( 1 + k*r ) * p;
@@ -1019,47 +1019,6 @@ namespace Faunus {
             }
           } 
     };
-    /**
-     * @brief Debye-Huckel potential
-     * @details Unlike in the Debye-Huckel/Yukawa potential,
-     * particle size is taken into account:
-     * \f[ \beta w_{ij} = \frac{e^2}{4\pi\epsilon_0\epsilon_rk_BT}
-     * \frac{z_i z_j}{r_{ij}(1+\kappa a)} \exp(-\kappa (r_{ij} - a)) \f]
-     * where \f$\kappa=1/D\f$ is the inverse Debye screening length
-     * and \f$a\f$ is the contact distance between two particles.
-     */
-    class DebyeHuckelSD : public DebyeHuckel {
-      public:
-        DebyeHuckelSD(InputMap &in) : DebyeHuckel(in) {}
-
-        template<class Tparticle>
-          double operator()(const Tparticle &a, const Tparticle &b, double r2) {
-            double contact=a.radius+b.radius;
-#ifdef FAU_APPROXMATH
-            double rinv = invsqrtQuake(r2);
-            return (rinv>1/contact) ? pc::infty : 
-              lB * a.charge * b.charge * rinv / (1 + k*contact) * exp_cawley(-k/rinv+k*contact);
-#else
-            double r=sqrt(r2);
-            return (r<contact) ? pc::infty : 
-              lB * a.charge * b.charge / r / (1 + k*contact) * exp(-k*(r-contact));
-#endif
-          }
-
-        template<class Tparticle>
-          Point force(const Tparticle &a, const Tparticle &b, double r2, const Point &p) {
-            double contact=a.radius+b.radius;
-#ifdef FAU_APPROXMATH
-            double rinv = invsqrtQuake(r2);
-            return (rinv>1/contact) ? -pc::infty*p :
-              lB * a.charge * b.charge * rinv / (1 + k*contact) * exp_cawley(-k/rinv+k*contact) * ( 1/r2 + k*rinv ) * p;
-#else
-            double r=sqrt(r2);
-            return (r<contact) ? -pc::infty*p :
-              lB * a.charge * b.charge / (r*r2) / (1 + k*contact) * exp(-k*(r-contact)) * ( 1 + k*r ) * p;
-#endif
-          }
-    };
 
     /**
      * DebyeHuckel ala Chung and Denton, <http://dx.doi.org/10/nkc>
@@ -1103,7 +1062,7 @@ namespace Faunus {
             cout << "id = " << p_id*1660*1e3 << " ex = " << p_ex*1660*1e3 << "\n";
             return p_id + p_ex;
           }
-
+ 
       public:
         DebyeHuckelDenton(InputMap &in) : DebyeHuckel(in) {
           name+="-Denton";
