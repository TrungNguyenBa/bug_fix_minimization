diff --git a/src/examples/water.cpp b/src/examples/water.cpp
index 47737a24..3f88d295 100644
--- a/src/examples/water.cpp
+++ b/src/examples/water.cpp
@@ -1,131 +1,115 @@
 #include <faunus/faunus.h>
-
 using namespace Faunus;
-using namespace Faunus::Move;
 using namespace Faunus::Potential;
 
-typedef Space<Geometry::Cuboid,DipoleParticle> Tspace;
-typedef CombinedPairPotential<LennardJones,MultipoleWolf<true,true,true,false>> Tpairpot;
+typedef Geometry::Cuboid Tgeometry; // specify geometry 
+typedef CombinedPairPotential<CoulombWolf,LennardJonesLB> Tpairpot;
+typedef Space<Tgeometry,PointParticle> Tspace;
 
 int main() {
-
-  cout << textio::splash();      // show faunus banner and credits
-  InputMap mcp("water2.input");//read input file
-
-  // Energy functions and space
-  //auto pot = Energy::NonbondedCutg2g<Tspace,Tpairpot>(mcp)
-  //  + Energy::ExternalPressure<Tspace>(mcp);
-  auto pot = Energy::NonbondedVector<Tspace,Tpairpot>(mcp)
-    + Energy::ExternalPressure<Tspace>(mcp);
+  cout << textio::splash();         // show faunus banner and credits
+                                  
+  InputMap mcp("water.input");      // open user input file
+  MCLoop loop(mcp);                 // class for handling mc loops
+  EnergyDrift sys;                  // class for tracking system energy drifts
+  UnitTest test(mcp);               // class for unit testing
+
+  // Create Space and a Hamiltonian (nonbonded+NVT)
   Tspace spc(mcp);
+  auto pot = Energy::Nonbonded<Tspace,Tpairpot>(mcp)
+    + Energy::ExternalPressure<Tspace>(mcp);
 
-  // Load and add polymer to Space
-  auto N    = mcp.get<int>("mol_N",1);
-  auto file = mcp.get<string>("mol_file");
-  vector<Group> water(N);
-  Tspace::ParticleVector v;                   // temporary, empty particle vector
-  FormatAAM::load(file,v);                    // load AAM structure into v
-  for (auto &i : water) {
-    Geometry::FindSpace f;
-    f.allowMatterOverlap=true;
-    f.find(spc.geo,spc.p,v);// find empty spot in particle vector
-    i = spc.insert(v);                          // Insert into Space
-    i.name="h2o";
-    spc.enroll(i);
+  // Read single water from disk and add N times
+  Group sol;
+  sol.setMolSize(3);
+  string file = mcp.get<string>("mol_file");
+  int N=mcp("mol_N",1);
+  for (int i=0; i<N; i++) {
+    Tspace::ParticleVector v;
+    FormatAAM::load(file,v);
+    Geometry::FindSpace().find(spc.geo, spc.p, v);
+    Group g = spc.insert(v);// Insert into Space
+    sol.setrange(0, g.back());
   }
+  spc.enroll(sol);
 
   // Markov moves and analysis
-  // Move::TranslateRotate<Tspace> gmv(mcp,pot,spc);
-  Move::PolarizeMove<TranslateRotateTspace> >  gmv(mcp,pot,spc);
   Move::Isobaric<Tspace> iso(mcp,pot,spc);
-  
-  Analysis::RadialDistribution<> rdfOO(0.05);
-  Analysis::RadialDistribution<> rdfOH(0.05);
-  Analysis::RadialDistribution<> rdfHH(0.05);
-
-  spc.load("state"); // load old config. from disk (if any)
+  Move::TranslateRotate<Tspace> gmv(mcp,pot,spc);
+  Analysis::RadialDistribution<> rdf(0.05);
+  Analysis::DipoleAnalysis gdc(spc,mcp);
 
-  EnergyDrift sys;   // class for tracking system energy drifts
-  sys.init( Energy::systemEnergy(spc,pot,spc.p)  ); // store total energy
+  spc.load("state");                               // load old config. from disk (if any)
+  sys.init( Energy::systemEnergy(spc,pot,spc.p)  );// store init system energy
 
   cout << atom.info() + spc.info() + pot.info() + textio::header("MC Simulation Begins!");
 
-  MCLoop loop(mcp);            // class for handling mc loops
-  while ( loop.macroCnt() ) {  // Markov chain 
+  while ( loop.macroCnt() ) {                      // Markov chain 
     while ( loop.microCnt() ) {
-      int i=slp_global.rand() % 2;
-      int j,k=water.size();
+      int j,i=slp_global.rand() % 2;
+      int k=sol.numMolecules();                    //number of water molecules
       Group g;
       switch (i) {
         case 0:
           while (k-->0) {
-            j=slp_global.rand() % (water.size());
-            gmv.setGroup(water[j]);
-            sys+=gmv.move();          // translate/rotate polymers
+            j=sol.randomMol();                     // pick random water mol.
+            sol.getMolecule(j,g);
+            g.name="water";
+            g.setMassCenter(spc);                  // mass center needed for rotation
+            gmv.setGroup(g);
+            sys+=gmv.move();                       // translate/rotate
           }
           break;
         case 1:
-          sys+=iso.move();
+          sys+=iso.move();                         // volume move
           break;
       }
-
+      gdc.samplePP(spc);
       // sample oxygen-oxygen rdf
       if (slp_global()>0.9) {
-        auto idO = atom["OW"].id;
-        auto idH = atom["HW"].id;
-        rdfOO.sample(spc,idO,idO);
-        rdfOH.sample(spc,idO,idH);
-        rdfHH.sample(spc,idH,idH);
+        auto id = atom["OW"].id;
+        rdf.sample(spc,sol,id,id);
       }
-
+    
     } // end of micro loop
 
-    sys.checkDrift(Energy::systemEnergy(spc,pot,spc.p)); // energy drift?
+    sys.checkDrift(Energy::systemEnergy(spc,pot,spc.p));
+    cout << gdc.info() << loop.timing();
 
-    cout << loop.timing();
   } // end of macro loop
 
-  // save to disk
-  FormatPQR::save("confout.pqr", spc.p);
-  spc.save("state");
-  rdfOO.save("rdfOO.dat");
-  rdfOH.save("rdfOH.dat");
-  rdfHH.save("rdfHH.dat");
+  //cout << gdc.info() << endl;
+  rdf.save("rdf.dat");
   spc.save("state");
-  FormatPQR::save("confout.pqr", spc.p, spc.geo.len);
+  FormatPQR::save("confout.pqr", spc.p);
 
-  // perform unit 
-  UnitTest test(mcp);
+  // perform unit tests
   iso.test(test);
-  gmvt.test(test);
-  gmvr.test(test);
+  gmv.test(test);
   sys.test(test);
 
   // print information
-  cout << loop.info() + sys.info() + gmvt.info() + gmvr.info() + iso.info() + test.info();
-}
+  cout << loop.info() + sys.info() + gmv.info() + iso.info() + test.info();
 
-/**  @page example_water2 Example: SPC Water (V2)
+  return test.numFailed();
+}
+/**  @page example_water Example: SPC Water
  *
  This will simulate SPC water in a cubic volume using
  the Wolf method for electrostatic interactions.
- This version uses a fake cell list to discard
- interactions beyond a specified water-water mass-center
- cutoff.
 
  Run this example from the `examples` directory:
 
  ~~~~~~~~~~~~~~~~~~~
  $ make
  $ cd src/examples
- $ ./water2.run
+ $ ./water.run
  ~~~~~~~~~~~~~~~~~~~
 
- ![Water](water.png)
-
- water2.cpp
+ water.cpp
  ============
 
- @includelineno examples/water2.cpp
+ @includelineno examples/water.cpp
 
 */
+
