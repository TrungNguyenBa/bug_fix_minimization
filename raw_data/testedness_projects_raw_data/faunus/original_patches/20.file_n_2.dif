diff --git a/include/faunus/multipole.h b/include/faunus/multipole.h
index ede3954a..9837e57f 100644
--- a/include/faunus/multipole.h
+++ b/include/faunus/multipole.h
@@ -21,10 +21,8 @@ namespace Faunus {
    * @f[
    *     |\epsilon(x)| \le 1.5\times 10^{-7}
    * @f]
-   * 
-   * @warning Needs modification if x < 0
    */
-  double erfc_x(double x) {
+  inline double erfc_x(double x) {
     //
     // |error| <= 1.5*10^-7
     double p = 0.3275911;
@@ -40,14 +38,6 @@ namespace Faunus {
   }
 
   /**
-   * @brief See erfc_x-function. 1 - erfc_x
-   * @param x Value for which erf should be calculated 
-   */
-  double erf_x(double x) {
-    return (1 - erfc_x(x));
-  }
-
-  /**
    * @brief Returns NemoType1-interaction (Exponential Repulsion)                         Needs to be checked!
    * @param vec Vector with parameters. Form: \f$ [a_{ab} b_{ab} c_{ab} d_{ab}] \f$  
    * @param r Vector between particles
@@ -61,13 +51,13 @@ namespace Faunus {
       double r2i = r1i*r1i;
       double r6i = r2i*r2i*r2i;
       double ss = 1 - pow(2.71828,-std::min(expmax,pow((1/(asw*r1i)),nsw)));
-
+      
       double uexp  = vec[0]*pow(2.71828,-std::min(expmax,vec[1]/r1i));
       double ur20  = vec[2]*r6i*r6i*r6i*r2i;
       double udis  = vec[3]*ss*r6i;
       return (uexp  + ur20 + udis);
     }
-
+    
   /**
    * @brief Returns NemoType2-interaction (r-7 Repulsion)                         Needs to be checked!
    * @param vec Vector with parameters. Form: \f$ [a_{ab} b_{ab} c_{ab} d_{ab}] \f$  
@@ -82,12 +72,12 @@ namespace Faunus {
       double r2i = r1i*r1i;
       double r6i = r2i*r2i*r2i;
       double ss = 1 - pow(2.71828,-std::min(expmax,pow((1/(asw*r1i)),nsw)));
-
+      
       double uexp  = vec[0]*r1i*r6i;
       double udis  = vec[3]*ss*r6i;
       return (uexp + udis);
     }
-
+    
   /**
    * @brief Returns NemoType3-interaction (Modified Interactions)                         Needs to be checked!
    * @param vec Vector with parameters. Form: \f$ [a_{ab} b_{ab} c_{ab} d_{ab} n_{ab}] \f$  
@@ -98,13 +88,24 @@ namespace Faunus {
       double r1i = 1/r.norm();
       double r2i = r1i*r1i;
       double r6i = r2i*r2i*r2i;
-
+      
       double uexp  = vec[3]*pow(r1i,vec[4]);          // vec[4] = nab   <------------------------
       double udis1  = -vec[2]*r6i;
       double udis2  = vec[0]*pow(2.71828,-vec[1]/r1i);
       return (uexp  + udis1 + udis2);
     }
-
+    /*
+    template<class Tvec>
+      double NemoType1(Eigen::VectorXd &vec, const Tvec &r) {
+        double r1i = 1/r.norm();
+        double r2i = r1i*r1i;
+        double r6i = r2i*r2i*r2i;
+        double uexp = vec[0]*pow(2.71828,-std::min(expmax,vec[1]/r1i));
+        double ur20 = pow(vec[2]*r1i,20);
+        double udis = vec[3]*(1 - pow(2.71828,-min(expmax,(1/(r1i*asw))**nsw)))*r6i;
+        return (uexp + ur20 + udis);
+      }*/
+  
   /**
    * @brief Returns NemoType4-interaction (Damping Exponential)
    * @param vec Vector with parameters. Form: \f$ [a_{ab} b_{ab} c_{ab} d_{ab} e_{ab} f_{ab} n_{ab}] \f$  
@@ -116,7 +117,7 @@ namespace Faunus {
       double r1i = 1/r.norm();
       double r2i = r1i*r1i;
       double r6i = r2i*r2i*r2i;
-
+      
       double uexp1  = vec[4]*pow(2.71828,-std::min(expmax,vec[5]/r1i));
       double uexp2  = 0;
       if(vec[6] != 0) uexp2 = vec[3]*pow(r1i,vec[6]);               // vec[6] = nab   <------------------------
@@ -124,7 +125,7 @@ namespace Faunus {
       double udis2  = vec[0]*pow(2.71828,-std::min(expmax,vec[1]/r1i));
       return (uexp1 + uexp2  + udis1 + udis2);
     }
-
+    
   /**
    * @brief Returns NemoType5-interaction (Full Damping)                         Needs to be checked!
    * @param vec Vector with parameters. Form: \f$ [a_{ab} b_{ab} c_{ab} d_{ab} e_{ab} f_{ab} n_{ab}] \f$  
@@ -143,7 +144,7 @@ namespace Faunus {
       double ud4 = 3*bri*ud3;
       double ud5 = 2*bri*ud4;
       double ud6 = bri*ud5;
-
+      
       double uexp1  = vec[4]*pow(2.71828,-std::min(expmax,vec[5]/r1i));
       double uexp2  = 0;
       if(vec[6] != 0) uexp2 = vec[3]*pow(r1i,vec[6]);       // vec[6] = nab   <------------------------
@@ -152,7 +153,7 @@ namespace Faunus {
       double udis2  = vec[0]*pow(2.71828,-std::min(expmax,1/bri));
       return (uexp1 + uexp2  + udis1 + udd*udis2);
     }
-
+    
   /**
    * @brief Returns NemoType6-interaction (Full Damping chtr)                         Needs to be checked!
    * @param vec Vector with parameters. Form: \f$ [a_{ab} b_{ab} c_{ab} d_{ab} e_{ab} f_{ab} n_{ab}] \f$  
@@ -181,7 +182,7 @@ namespace Faunus {
       double uchtexp = -vec[8]*pow(2.71828,-std::min(expmax,vec[7]/r1i));  // vec[7] = acht, vec[8] = kcht    <------------------------
       return (uexp1 + uexp2  + udis1 + udd*udis2 + uchtexp);
     }
-
+    
   /**
    * @brief Returns NemoType7-interaction (Full Damping chtr gaussian)                         Needs to be checked!
    * @param vec Vector with parameters. Form: \f$ [a_{ab} b_{ab} c_{ab} d_{ab} e_{ab} f_{ab} n_{ab}  a_{cht} k_{cht}] \f$  
@@ -200,7 +201,7 @@ namespace Faunus {
       double ud4 = 3*bri*ud3;
       double ud5 = 2*bri*ud4;
       double ud6 = bri*ud5;
-
+      
       double uchtexp = -vec[8]*pow(2.71828,-std::min(expmax,vec[7]*(pow((r.norm()-vec[3]),2))));  // vec[7] = acht, vec[8] = kcht    <------------------------
       double uexp  = vec[4]*pow(2.71828,-std::min(expmax,vec[5]/r1i));
       double udis1  =-vec[2]*r6i;
@@ -210,62 +211,39 @@ namespace Faunus {
     }
 
   /**
-   * @brief Returns ion-dipole interaction.
-   * @param QBxMuA Product of ion B:s charge and dipole A:s scalar
-   * @param muA Unit dipole moment vector of particel A
-   * @param QAxMuB Product of ion A:s charge and dipole B:s scalar
-   * @param muB Unit dipole moment vector of particel B
-   * @param r Direction \f$ r_A - r_B \f$
+   * @brief Returns ion-dipole interaction, Needs to be checked!
+   * @param QxMu Product of ion charge and dipole scalar
+   * @param mu Unit dipole moment vector
+   * @param r Direction \f$ r_Mu - r_Q \f$  
    */
   template<class Tvec>
-    double q2mu(double QBxMuA, const Tvec &muA, double QAxMuB, const Tvec &muB, const Tvec &r) {
-      double r2i = 1/r.squaredNorm();  // B = sol(dip), A = ch(charge)
-      double r1i = sqrt(r2i);
-      double r3i = r1i*r2i;
-      double W1 = QBxMuA*muA.dot(r)*r3i;
-      double W2 = QAxMuB*muB.dot(-r)*r3i;
-      return (W1+W2);
+    double q2mu(double QxMu1, const Tvec &mu1, double QxMu2, const Tvec &mu2, const Tvec &r) {
+      double R2 = 1/r.squaredNorm();
+      double R1 = sqrt(R2);
+      double R3 = R1*R2;
+      double W1 = QxMu1*mu1.dot(r)*R3;
+      double W2 = QxMu2*mu2.dot(r)*R3;
+      return (W1-W2);  // Beware of r_Mu - r_Q = -r according to Israelachvili p.36, i.e. minus becomes plus
     }
-    
+
   /**
    * @brief Returns dipole-dipole interaction
    *
    * @param muA Unit dipole moment vector of particle A
    * @param muB Unit dipole moment vector of particle B
    * @param muAxmuB Product of dipole scalars
-   * @param r Direction \f$ r_A - r_B \f$
+   * @param r Vector \f$ r_{AB} \f$
    */
   template<class Tvec>
     double mu2mu(const Tvec &muA, const Tvec &muB, double muAxmuB, const Tvec &r) {
-      double r2i = 1/r.squaredNorm();
-      double r1i = sqrt(r2i);
-      double r3i = r1i*r2i;
-      double r5i = r3i*r2i;
-      //Eigen::Matrix3d T = 3*r5i*r*r.transpose() - r3i*Matrix3d::Identity();
-      //double W = -muA.transpose()*T*muB;
-      double W = 3*muA.dot(r)*muB.dot(r)*r5i - muA.dot(muB)*r3i;
-      return -W*muAxmuB;
-    }
-
-  /**
-   * @brief Returns ion-quadrupole interaction
-   * @param qA Charge of particle A
-   * @param quadB Quadrupole moment of particle B
-   * @param qB Charge of particle B
-   * @param quadA Quadrupole moment of particle A
-   * @param r Direction \f$ r_A - r_B \f$
-   */
-  template<class Tvec, class Tmat>
-    double q2quad(double qA, const Tmat &quadB,double qB, const Tmat &quadA, const Tvec &r) {
-      double r2i = 1/r.squaredNorm();
-      double r1i = sqrt(r2i);
-      double r3i = r1i*r2i;
-      double r5i = r3i*r2i;
-      double WAB = r.transpose()*quadB*r;
-      WAB = 3*WAB*r5i - quadB.trace()*r3i;
-      double WBA = r.transpose()*quadA*r;
-      WBA = 3*WBA*r5i - quadA.trace()*r3i;
-      return (qA*WAB + qB*WBA);
+      double R2 = 1/r.squaredNorm();
+      double R1 = sqrt(R2);
+      double R3 = R1*R2;
+      double R5 = R3*R2;
+      //Eigen::Matrix3d T = 3*R5*r*r.transpose() - R3*Matrix3d::Identity();
+      //double W = -muA.transpose()*T*muB;                       // Buckingham    Å^-3
+      double W = muA.dot(muB)*R3-3*muA.dot(r)*muB.dot(r)*R5; // J&K
+      return W*muAxmuB;  // e^2 Å^2 Å ^-3 = e^2 /A
     }
 
   /**
@@ -276,32 +254,31 @@ namespace Faunus {
    */
   class WolfBase {
     private:
+      double rc1i_d, rc3i_d, rc4i_d, rc5i_d, rc6i_d, rc1i, rc2i, rc3i, expKc, kappa, kappa2, kappa4, kappa6;
+      
+      
       struct wdata {
-        double r2i, T1, Tc1_r1i, der_dTc1_r1i, T2_1, T2_2, Tc2_2_r2i, der_dTc2_1, der_dTc2_2_r2i;
+        //template<class Tparticle>
+        double r1i_d, r3i_d, r5i_d, diffR;
+        //Tparticle* a,b;
       };
       
-      double rc1, rc2i, kappa, kappa2, constant;
-      double Tc1, Tc2_1, Tc2_2, dTc1, dTc2_1, dTc2_2;
-      wdata data;
-
-    public:
-      template<class Tparticle>
-        void calcWolfData(const Tparticle &a, const Tparticle &b, const Point &r) {
-          data.r2i = 1/r.squaredNorm();
-          double r1i = sqrt(data.r2i);
-          double r1i_d = erfc_x(kappa/r1i)*r1i;
-          double der = (1/r1i) - rc1;
-          double expK = constant*exp(-kappa2/data.r2i);
-          data.T1 = (expK + r1i_d)*data.r2i;
-          data.Tc1_r1i = Tc1*r1i;
-          data.der_dTc1_r1i = der*dTc1*r1i;
-          data.T2_1 = -(r1i_d + expK)*data.r2i;
-          data.T2_2 = (3.*r1i_d*data.r2i + (3.*data.r2i + 2.*kappa2)*expK)*data.r2i;
-          data.Tc2_2_r2i = Tc2_2*data.r2i;
-          data.der_dTc2_1 = der*dTc2_1;
-          data.der_dTc2_2_r2i = der*dTc2_2*data.r2i;
+      template<class Tparticle, class Tvec>
+        wdata calcWolfData(const Tparticle &a, const Tparticle &b, const Tvec &r) {
+          wdata data;
+          //data.a = a;
+          //data.b = b;
+          double r2i = 1/r.squaredNorm();
+          double r1i = sqrt(r2i);
+          double expK = 2*kappa*exp(-kappa2/r2i)/sqrt(pc::pi);
+          data.diffR = (1/r1i) - (1/rc1i);
+          data.r1i_d = erfc_x(kappa/r1i)*r1i;
+          data.r3i_d = expK * (kappa2 + r2i) + data.r1i_d * r2i;
+          data.r5i_d = expK*(r2i*r2i + (2*r2i/3)*kappa2 + (kappa6/(3*r2i)) + (kappa4/6)) + data.r1i_d*r2i*r2i;
+          return data;
         }
-      
+            
+    public:
       /**
        * @brief Constructor
        * @param alpha Dampening factor (inverse angstrom)
@@ -310,711 +287,435 @@ namespace Faunus {
       WolfBase(double alpha, double rcut) {
         kappa = alpha;
         kappa2 = kappa*kappa;
-        constant = 2*kappa/sqrt(pc::pi);
-        rc1 = rcut;
-        double rc2 = rc1*rc1;
-        rc2i = 1/rc2;
-        double rc1i = 1/rc1;
-        double expKc = constant*exp(-kappa2/rc2i);
-        double rc1i_d = erfc_x(kappa*rc1)*rc1i;
-        
-        Tc1 = (expKc + rc1i_d)*rc2i;
-        Tc2_1 = -(rc1i_d*rc2i + expKc*rc2i);
-        Tc2_2 = (3.*rc1i_d*rc2i*rc2i + (3.*rc2i + 2.*kappa2)*expKc*rc2i);
-        
-        dTc1 = (-2*Tc1/rc1) - 2*kappa2*expKc;
-        dTc2_1 = -(3*Tc2_1/rc1) + (2*kappa2*exp(-rc2*kappa2)*rc1i*constant);
-        dTc2_2 = (-3*Tc2_2/rc1) - (4*kappa2*kappa2*exp(-rc2*kappa2)*rc1i*constant);
-        
-        Tc1 = Tc1*rc1;
-        dTc1 = dTc1*rc1;
-        Tc2_2 = Tc2_2*rc2;
-        dTc2_2 = dTc2_2*rc2;
+        kappa4 = kappa2*kappa2;
+        kappa6 = kappa4*kappa2;
+        rc1i = 1/rcut;
+        rc2i = rc1i*rc1i;
+        rc3i = rc1i*rc2i;
+        expKc = 2*kappa*exp(-kappa2/rc2i)/sqrt(pc::pi);
+        rc1i_d = erfc_x(kappa/rc1i)*rc1i;
+        rc3i_d = expKc*(kappa2 + rc2i) + rc1i_d*rc2i;
+        rc4i_d = expKc*( (2*kappa4/(3*rc1i)) + (2*kappa2*rc1i/3) + rc3i ) + rc1i_d*rc3i;
+        rc5i_d = expKc*(rc2i*rc2i + (2*rc2i*kappa2/3) + (kappa6/(3*rc2i)) + (kappa4/6)) + rc1i_d*rc2i*rc2i;
+        rc6i_d = expKc*((-kappa6/(15*rc1i)) + (2*kappa6*kappa2/(15*rc3i)) + (2*kappa2*rc3i/3) + (4*kappa4/(15*rc1i)) + rc1i) + rc1i_d*rc3i*rc2i;
       }
-
+      
       /**
-       * @brief Returns ion-dipole interaction.
-       * @param QBxMuA Product of ion B:s charge and dipole A:s scalar
-       * @param muA Unit dipole moment vector of particel A
-       * @param QAxMuB Product of ion A:s charge and dipole B:s scalar
-       * @param muB Unit dipole moment vector of particel B
-       * @param r Direction \f$ r_A - r_B \f$
+       * @brief Returns ion-dipole interaction, Needs to be checked!
+       * @param QxMu Product of ion charge and dipole scalar
+       * @param mu Unit dipole moment vector
+       * @param r Direction \f$ r_Mu - r_Q \f$  
        */
-      template<class Tvec, bool useWdata=false>
-        double q2mu(double QBxMuA, const Tvec &muA, double QAxMuB, const Tvec &muB, const Tvec &r) const {
-          /* Code to use if calcWolfData is not called */
-          if (useWdata==false) {
-            double r2i = 1/r.squaredNorm();
-            if (r2i < rc2i)
-              return 0;
-            double r1i = sqrt(r2i);
-            double T1 = (constant*exp(-kappa2/r2i) + erfc_x(kappa/r1i)*r1i)*r2i;
-            double der = (1/r1i) - rc1;
-            double W1 = QBxMuA*muA.dot(r)*(T1 - Tc1*r1i - der*dTc1*r1i);
-            double W2 = QAxMuB*muB.dot(-r)*(T1 - Tc1*r1i - der*dTc1*r1i);
-            return (W1 + W2);
-          }
-          if (data.r2i < rc2i)
+       template<class Tvec>
+         double q2mu(double QxMu1, const Tvec &mu1, double QxMu2, const Tvec &mu2, const Tvec &r) {
+           double r2i = 1/r.squaredNorm();
+           if (r2i < rc2i)
             return 0;
-          double W1 = QBxMuA*muA.dot(r)*(data.T1 - data.Tc1_r1i - data.der_dTc1_r1i);
-          double W2 = QAxMuB*muB.dot(-r)*(data.T1 - data.Tc1_r1i - data.der_dTc1_r1i);
-          return (W1 + W2);
-      }
+           double r1i = sqrt(r2i);
+           double expK = 2*kappa*exp(-kappa2/r2i)/sqrt(pc::pi);
+           double r3i_d = expK * (kappa2 + r2i) + erfc_x(kappa/r1i)*r1i * r2i;
+           double der = ((1/r1i) - (1/rc1i))*3*rc4i_d;
+           double W1 = QxMu1*mu1.dot(r)*(r3i_d - rc3i_d + der);
+           double W2 = QxMu2*mu2.dot(r)*(r3i_d - rc3i_d + der);
+           return (W1-W2);  // Beware of r_Mu - r_Q = -r according to Israelachvili p.36, i.e. minus becomes plus
+         }
 
       /**
        * @brief Dipole-dipole energy
        * @param muA Dipole moment (A) unit vector
        * @param muB Dipole moment (B) unit vector
-       * @param muAxmuB Product of dipole moment scalars, |A|*|B|
-       * @param r Direction \f$ r_A - r_B \f$
+       * @param muAxMuB Product of dipole moment scalars, |A|*|B|
+       * @param r_ab Vector A to B
+       * @param r1i inverse length of `r_ab`
+       * @param r2i inverer length of `r_ab` squared
+       * @returns energy in `kT/lB`
        */
       template<class Tvec>
         double mu2mu(const Tvec &muA, const Tvec &muB, double muAxmuB, const Tvec &r) const {
-          /* Code to use if calcWolfData is not called
-          double r2i = 1.0/r.squaredNorm();
+          double r2i = 1/r.squaredNorm();
           if (r2i < rc2i)
             return 0;
           double r1i = sqrt(r2i);
           double r1i_d = erfc_x(kappa/r1i)*r1i;
-          double expK = constant*exp(-kappa2/r2i);
-          double T2_1 = -(r1i_d + expK)*r2i;
-          double T2_2 = (3.*r1i_d*r2i + (3.*r2i + 2.*kappa2)*expK)*r2i;
-          double der = (1/r1i) - rc1;
-          double t3 = muA.dot(muB)*(T2_1 - Tc2_1 - der*dTc2_1);
-          double t5 = muA.dot(r)*muB.dot(r)*(T2_2 - Tc2_2*r2i - der*dTc2_2*r2i);
-          return -(t5 + t3)*muAxmuB;
-          */
-          
-          if (data.r2i < rc2i)
-            return 0;
-          double t3 = muA.dot(muB)*(data.T2_1 - Tc2_1 - data.der_dTc2_1);
-          double t5 = muA.dot(r)*muB.dot(r)*(data.T2_2 - data.Tc2_2_r2i - data.der_dTc2_2_r2i);
-          return -(t5 + t3)*muAxmuB;
-          
+          double expK =  2 * kappa*exp(-kappa2/r2i) / sqrt(pc::pi);
+          double r3i_d = expK * (kappa2 + r2i) + r1i_d * r2i;
+          double r5i_d = r2i*expK*(r2i + (2/3)*kappa2 + (kappa6/(3*r2i*r2i)) + (kappa4/(6*r2i))) + r1i_d*r2i*r2i;       
+          Eigen::Matrix3d T = 3*r*r.transpose()*(r5i_d - rc5i_d + 5*rc6i_d) - Matrix3d::Identity()*(r3i_d - rc3i_d + 3*rc4i_d);
+          double W = -muA.transpose()*T*muB;  
+          return W*muAxmuB;
         }
-
+        
       /**
-       * @brief Returns ion-quadrupole energy
-       * @param qA Charge of particle A
-       * @param quadB Quadrupole moment of particle B
-       * @param qB Charge of particle B
-       * @param quadA Quadrupole moment of particle A
-       * @param r Direction @f$ r_A - r_B @f$
+       * @brief Returns ion-quadrupole interaction
        */
-      template<class Tvec, class Tmat>
-        double q2quad(double qA, const Tmat &quadB,double qB, const Tmat &quadA, const Tvec &r) const {
-          /* Code to use if calcWolfData is not called
-          double r2i = 1/r.squaredNorm();
-          if (r2i < rc2i)
-            return 0;
-          double r1i = sqrt(r2i);
-          double r1i_d = erfc_x(kappa/r1i)*r1i;
-          double expK = constant*exp(-kappa2/r2i);
-          double T2_1 = -(r1i_d + expK)*r2i;
-          double T2_2 = (3.*r1i_d*r2i + (3.*r2i + 2.*kappa2)*expK)*r2i;
-          double der = (1/r1i) - rc1;
-          double WAB = r.transpose()*quadB*r;
-          WAB = WAB*(T2_2 - Tc2_2*r2i - der*dTc2_2*r2i) + quadB.trace()*(T2_1 - Tc2_1 - der*dTc2_1);
-          double WBA = r.transpose()*quadA*r;
-          WBA = WBA*(T2_2 - Tc2_2*r2i - der*dTc2_2*r2i) + quadA.trace()*(T2_1 - Tc2_1 - der*dTc2_1);
-          return (qA*WAB + qB*WAB);
-          */
-          
-          if (data.r2i < rc2i)
+       template<class Tvec, class Tmat>
+         double q2quad(double q1, const Tmat &quad1, double q2, const Tmat &quad2, const Tvec &r) {
+           double r2i = 1/r.squaredNorm();
+           if (r2i < rc2i)
             return 0;
-          double WAB = r.transpose()*quadB*r;
-          WAB = WAB*(data.T2_2 - data.Tc2_2_r2i - data.der_dTc2_2_r2i) + quadB.trace()*(data.T2_1 - Tc2_1 - data.der_dTc2_1);
-          double WBA = r.transpose()*quadA*r;
-          WBA = WBA*(data.T2_2 - data.Tc2_2_r2i - data.der_dTc2_2_r2i) + quadA.trace()*(data.T2_1 - Tc2_1 - data.der_dTc2_1);
-          return (qA*WAB + qB*WAB);
-          
-        }
-
-      /** @brief Dipole field at `r` due to dipole `p` 
-       */
-      template<class Tparticle>
-        Point field(const Tparticle &p, const Point &r) const {
-          return Point(0,0,0);
-        }
+           double r1i = sqrt(r2i);
+           //double r3i = r1i*r2i;
+           double expK =  2 * kappa*exp(-kappa2/r2i) / sqrt(pc::pi);
+           double r1i_d = erfc_x(kappa/r1i)*r1i;
+           double r3i_d = expK*(kappa2 + r2i) + r1i_d*r2i;
+           double r5i_d = r2i*expK*(r2i + (2/3)*kappa2 + (kappa6/(3*r2i*r2i)) + (kappa4/(6*r2i))) + r1i_d*r2i*r2i;   
+           double W1 = q1*r.transpose()*quad1*r*r5i_d  - q1*quad1.trace()*(r3i_d/3);
+           double W2 = q2*r.transpose()*quad2*r*r5i_d  - q2*quad2.trace()*(r3i_d/3);
+           return (W1+W2); // e^2 / Å
+         }
+         
+        /** @brief Dipole field at `r` due to dipole `p` 
+         *  Gets returned in [e/Å / lB] (\f$\beta eE / lB \f$)
+         */
+        template<class Tparticle>
+          Point fieldMu2Mu(const Tparticle &p, const Point &r) const {
+            double r2i = 1.0/r.squaredNorm();
+            double r1i = sqrt(r2i);
+            Point r_ab = r*r1i;
+            double expK =  2 * kappa*exp(-kappa2/r2i) / sqrt(pc::pi);
+            double r1i_d = erfc_x(kappa/r1i)*r1i*r2i;    // multiplied with r2i
+            double r3i_d = expK*(kappa2 + r2i) + r1i_d;
+            double r5i_d = expK*(r2i + (2/3)*kappa2 + (kappa6/(3*r2i*r2i)) + (kappa4/(6*r2i))) + r1i_d;                                        // Normalized with 1/r2i
+            return (3.0*p.mu.dot(r_ab)*r_ab*r5i_d - p.mu*r3i_d)*p.muscalar; // \beta e E
+          }
 
       double getKappa() { return kappa; }
-      double getCutoff() { return rc1; }
+      double getCutoff() { return 1/rc1i; }
   };
-  
+
   /**
-   * @brief Base class for Gaussian-damped interactions. Implemented according to DOI: 10.1002/jcc.20574
-   *
-   * The idea is that this class has no dependencies and is
-   * to be used as a helper class for other classes.
+   * @brief Returns ion-quadrupole interaction
    */
-  class GaussianDampingBase {
-    private:
-      double constant;
-      Eigen::VectorXd betaC, betaD, betaQ, betaC3, betaD2, betaD3;
-      Eigen::MatrixXd betaCC, betaCD, betaCQ, betaDD;
-      Eigen::MatrixXd betaCC2, betaCD2, betaCQ2, betaDD2;
-      Eigen::MatrixXd betaCC3, betaCD3, betaCQ3, betaDD3;
+  template<class Tvec, class Tmat>
+    double q2quad(double q, const Tmat &quad, const Tvec &r) {
+      double r2i = 1/r.squaredNorm();
+      double r1i = sqrt(r2i);
+      double r3i = r1i*r2i;
+      double r5i = r3i*r2i;
+      double W = r.transpose()*quad*r;
+      W = W*r5i - quad.trace()*(r3i/3);
+      return q*W; // e^2 / Å
+    }
 
-    public:
-      /**
-       * @brief Constructor
-       */
-      GaussianDampingBase() {
-        constant = 2/sqrt(pc::pi);
-        int N = atom.size() - 1;
-        betaC.resize(N);
-        betaD.resize(N);
-        betaQ.resize(N);
-        betaC3.resize(N);
-        betaD2.resize(N);
-        betaD3.resize(N);
-        betaCC.resize(N,N);
-        betaCD.resize(N,N);
-        betaCQ.resize(N,N);
-        betaDD.resize(N,N);
-        betaCC2.resize(N,N);
-        betaCD2.resize(N,N);
-        betaCQ2.resize(N,N);
-        betaDD2.resize(N,N);
-        betaCC3.resize(N,N);
-        betaCD3.resize(N,N);
-        betaCQ3.resize(N,N);
-        betaDD3.resize(N,N);
-        
-        for(int i = 0; i < N; i++) {
-          betaC(i) = atom[i+1].betaC;
-          betaC3(i) = betaC(i)*betaC(i)*betaC(i);
-          betaD(i) = atom[i+1].betaD;
-          betaD2(i) = betaD(i)*betaD(i);
-          betaD3(i) = betaD2(i)*betaD(i);
-          betaQ(i) = atom[i+1].betaQ;
+  namespace Potential {
+
+    class NemoRepulsion : public PairPotentialBase {
+      private:
+        string _brief() { return "NemoRepulsion"; }
+      protected:
+        typedef Eigen::VectorXd Tvec;
+        typedef opair<int> Tpair;
+        std::map<Tpair,Tvec> pairMap;
+        double expmax;
+        double scaling;
+
+      public:
+        NemoRepulsion(InputMap &in) {
+          name="Nemo repulsion";
+          pc::setT ( in.get<double>("temperature", 298.15, "Absolute temperature (K)") );
+          expmax = in.get<double>("expmax", 80, "Maximum repulsion exponent");
+          scaling = 1000/(pc::Nav*pc::kT());  // Converts from kJ/mol to kT
+          pairMap = json::atomPairMap("water2.json","pairproperties","nemorep");
         }
-        for(int i = 0; i < N; i++) {
-          for(int j = i; j < N; j++) {
-            betaCC(i,j) = betaC(i)*betaC(j)/sqrt(betaC(i)*betaC(i) + betaC(j)*betaC(j));
-            betaCD(i,j) = betaC(i)*betaD(j)/sqrt(betaC(i)*betaC(i) + betaD(j)*betaD(j));
-            betaCQ(i,j) = betaC(i)*betaQ(j)/sqrt(betaC(i)*betaC(i) + betaQ(j)*betaQ(j));
-            betaDD(i,j) = betaD(i)*betaD(j)/sqrt(betaD(i)*betaD(i) + betaD(j)*betaD(j));
-            betaCC(j,i) = betaCC(i,j);
-            betaCD(j,i) = betaD(i)*betaC(j)/sqrt(betaD(i)*betaD(i) + betaC(j)*betaC(j));
-            betaCQ(j,i) = betaQ(i)*betaC(j)/sqrt(betaQ(i)*betaQ(i) + betaC(j)*betaC(j));
-            betaDD(j,i) = betaDD(i,j);
-            betaCC2(i,j) = betaCC(i,j)*betaCC(i,j);
-            betaCD2(i,j) = betaCD(i,j)*betaCD(i,j);
-            betaCQ2(i,j) = betaCQ(i,j)*betaCQ(i,j);
-            betaDD2(i,j) = betaDD(i,j)*betaDD(i,j);
-            betaCC2(j,i) = betaCC2(i,j);
-            betaCD2(j,i) = betaCD(j,i)*betaCD(j,i);
-            betaCQ2(j,i) = betaCQ(j,i)*betaCQ(j,i);
-            betaDD2(j,i) = betaDD2(i,j);
-            betaCC3(i,j) = betaCC2(i,j)*betaCC(i,j);
-            betaCD3(i,j) = betaCD2(i,j)*betaCD(i,j);
-            betaCQ3(i,j) = betaCQ2(i,j)*betaCQ(i,j);
-            betaDD3(i,j) = betaDD2(i,j)*betaDD(i,j);
-            betaCC3(j,i) = betaCC3(i,j);
-            betaCD3(j,i) = betaCD2(j,i)*betaCD(j,i);
-            betaCQ3(j,i) = betaCQ2(j,i)*betaCQ(j,i);
-            betaDD3(j,i) = betaDD3(i,j);
-          }
-        }
-      }
-      
-      /**
-       * @brief Returns ion-ion energy
-       * @param qA Charge of ion A
-       * @param qB Charge of ion B
-       * @param ida Id of particle A
-       * @param idb Id of particle B
-       * @param r Direction \f$ r_A - r_B \f$
-       */
-      template<class Tvec>
-        double q2q(double qA, double qB, int ida, int idb, const Tvec &r) const {
-          double r1 = r.norm();
-          return (qA*qB*erf_x(betaCC(ida-1,idb-1)*r1)/r1);
-      }
 
-      /**
-       * @brief Returns ion-dipole energy
-       * @param QBxMuA Product of charge of particle B and dipole scalar of particle A
-       * @param muA Unit dipole moment vector of particle A
-       * @param QAxMuB Product of charge of particle A and dipole scalar of particle B
-       * @param muB Unit dipole moment vector of particle B
-       * @param ida Id of particle A
-       * @param idb Id of particle B
-       * @param r Direction \f$ r_A - r_B \f$
-       */
-      template<class Tvec>
-        double q2mu(double QBxMuA, const Tvec &muA, double QAxMuB, const Tvec &muB, int ida, int idb, const Tvec &r) const {
-          double r2 = r.squaredNorm();
-          double r1 = sqrt(r2);
-          double B1_BA = ( (erf_x( betaCD(ida-1,idb-1) * r1 )/r1) - betaCD(ida-1,idb-1) * constant * exp(-betaCD2(ida-1,idb-1)*r2) ) / r2;
-          double B1_AB = ( (erf_x( betaCD(idb-1,ida-1) * r1 )/r1) - betaCD(idb-1,ida-1) * constant * exp(-betaCD2(idb-1,ida-1)*r2) ) / r2;
-          double W_BA = ( QBxMuA * muA.dot(r) * B1_BA);
-          double W_AB = ( QAxMuB * muB.dot(-r) * B1_AB);
-          return ( W_BA + W_AB );
-      }
+        /**
+         * @brief NemoRepulsion
+         * @param a Dipole particle A
+         * @param b Dipole particle B
+         * @param r Direction \f$ r_A - r_B \f$  
+         */
+        template<class Tparticle>
+          double operator()(const Tparticle &a, const Tparticle &b, const Point &r) const {
+            Tpair pair(a.id,b.id);
+            Tvec vec;
+            auto it = pairMap.find(pair);
+            if (it!=pairMap.end()) { 
+              vec = it->second;
+              return nemo4(vec, r,expmax)*scaling;
+            }
+            assert(!"No pair data defined");
+            return 0;
+          }
 
-      /**
-       * @brief Dipole-dipole energy
-       * @param muA Unit dipole moment vector of particle A
-       * @param muB Unit dipole moment vector of particle B
-       * @param muAxmuB Product of dipole moment scalars
-       * @param ida Id of particle A
-       * @param idb Id of particle B
-       * @param r Direction \f$ r_A - r_B \f$
-       */
-      template<class Tvec>
-        double mu2mu(const Tvec &muA, const Tvec &muB, double muAxmuB, int ida, int idb, const Tvec &r) const {
-          double x = betaDD(ida-1,idb-1)*r.norm();
-          double x2 = x*x;
-          double erfX = erf_x(x)/x;
-          double expX = constant * exp(-x2);
-          double B1 = ( erfX - expX ) / x2;
-          double B2 = ( 3*erfX - (3 + 2*x2) * expX ) / ( x2 * x2 );
-          double W = ( muA.dot(muB) * B1 - betaDD2(ida-1,idb-1) * ( muA.dot(r) ) * ( muB.dot(r) ) * B2 ) * betaDD3(ida-1,idb-1);
-          return ( muAxmuB * W );
+        string info(char w) { return _brief(); }
+    };
+
+    /**
+     * @brief Ion-dipole interaction, 
+     *
+     * More info...
+     */
+    class IonDipole : public PairPotentialBase {
+      private:
+        string _brief() { return "Ion-dipole"; }
+      protected:
+        double _lB;
+      public:
+        IonDipole(InputMap &in) {
+          pc::setT ( in.get<double>("temperature", 298.15, "Absolute temperature (K)") );
+          double epsilon_r = in.get<double>("epsilon_r",80., "Dielectric constant");
+          _lB=pc::lB( epsilon_r );
         }
+        /**
+         * @brief Ion-dipole
+         * @param a Dipole particle A
+         * @param b Dipole particle B
+         * @param r Direction \f$ r_A - r_B \f$  
+         */
+        template<class Tparticle> // q2mu(1->2,r) + q2mu(2->1,-r) = q2mu(1->2,r) - q2mu(2->1,r)
+          double operator()(const Tparticle &a, const Tparticle &b, const Point &r) const {
+            return _lB*q2mu(a.charge*b.muscalar,b.mu,b.charge*a.muscalar,a.mu,r);
+          }
 
-      /**
-       * @brief Returns ion-quadrupole energy
-       * @param qA Charge of particle A
-       * @param quadB Quadrupole moment of particle B
-       * @param qB Charge of particle B
-       * @param quadA Quadrupole moment of particle A
-       * @param ida Id of particle A
-       * @param idb Id of particle B
-       * @param r Direction @f$ r_A - r_B @f$
-       */
-      template<class Tvec, class Tmat>
-        double q2quad(double qA, const Tmat &quadB,double qB, const Tmat &quadA, int ida, int idb, const Tvec &r) const {
-          double r1 = r.norm();
-          double x_AB = betaCQ(ida-1,idb-1)*r1;
-          double x2_AB = x_AB*x_AB;
-          double erfX_AB = erf_x(x_AB)/x_AB;
-          double expX_AB = constant * exp(-x2_AB);
-          double B1_AB = ( erfX_AB - expX_AB ) / x2_AB;
-          double B2_AB = betaCQ2(ida-1,idb-1) * ( 3*erfX_AB - (3 + 2*x2_AB) * expX_AB ) / ( x2_AB * x2_AB );
-          double W_AB = r.transpose()*quadB*r;
-          W_AB = W_AB * B2_AB - quadB.trace() * B1_AB;
-          double x_BA = betaCQ(idb-1,ida-1)*r1;
-          double x2_BA = x_BA*x_BA;
-          double erfX_BA = erf_x(x_BA)/x_BA;
-          double expX_BA = constant * exp(-x2_BA);
-          double B1_BA = ( erfX_BA - expX_BA ) / x2_BA;
-          double B2_BA = betaCQ2(idb-1,ida-1) * ( 3*erfX_BA - (3 + 2*x2_BA) * expX_BA ) / ( x2_BA * x2_BA );
-          double W_BA = r.transpose()*quadA*r;
-          W_BA = W_BA * B2_BA - quadA.trace() * B1_BA;
-          return ( qA * W_AB * betaCQ3(ida-1,idb-1) + qB * W_BA * betaCQ3(idb-1,ida-1) );
+        string info(char w) { return _brief(); }
+    };
+
+    /**
+     * @brief Dipole-dipole interaction
+     *
+     * More info...
+     */
+    class DipoleDipole : public PairPotentialBase {
+      private:
+        string _brief() {
+          std::ostringstream o;
+          o << "Dipole-dipole, lB=" << _lB << textio::_angstrom;
+          return o.str();          
         }
+      protected:
+        double _lB;
+      public:
+        DipoleDipole(InputMap &in) {
+          name="Dipole-dipole";
+          pc::setT ( in.get<double>("temperature", 298.15,
+                "Absolute temperature (K)") );
+          double epsilon_r = in.get<double>("epsilon_r",80.,
+              "Dielectric constant");
+          _lB = pc::lB(epsilon_r);
+        }
+        template<class Tparticle>
+          double operator()(const Tparticle &a, const Tparticle &b, const Point &r) const {
+            return _lB*mu2mu(a.mu, b.mu, a.muscalar*b.muscalar, r);
+          }
 
-      /** 
-       * @brief Field at `r` due to ion `p`.
-       * @param p Particles from which field arises
-       * @param r Direction @f$ r_A - r_B @f$
-       * @param ida Id of particle exposed to the field from p. If ida is not set the exposed particle is assumed to be a point particle (optional)
-       */
-      template<class Tparticle>
-        Point fieldCharge(const Tparticle &p, const Point &r, int ida=-1) const {
-          Point E(0,0,0);
-          if(ida != -1) {
-            double x = betaCC(ida-1,p.id-1)*r.norm();
-            double x2 = x*x;
-            E = (p.charge * betaCC3(ida-1,p.id-1) * ( ( erf_x(x) / x ) - constant * exp(-x2) ) / x2)*r;
-          } else {
-            double x = betaC(p.id-1)*r.norm();
-            double x2 = x*x;
-            E = (p.charge * betaC3(p.id-1)* ( ( erf_x(x) / x ) - constant * exp(-x2) ) / x2) *r;
+        /** @brief Dipole field at `r` due to dipole `p` 
+         *  Gets returned in [e/Å] (\f$\beta eE \f$)
+         */
+        template<class Tparticle>
+          Point field(const Tparticle &p, const Point &r) const {
+            double R2 = 1.0/r.squaredNorm();
+            double R1 = sqrt(R2);
+            Point r_n = r*R1;
+            return ((3.0*p.mu.dot(r_n)*r_n - p.mu)*R2*R1)*p.muscalar*_lB; // \beta e E
+          }
+
+        /**
+         * @brief Interaction of dipole `p` with field `E`, see 'Intermolecular and SUrface Forces' by J. Israelachvili, p. 97 eq. 5.15
+         * @todo Needs to be tested!
+         */
+        template<class Tparticle>
+          double fieldEnergy(const Tparticle &p, const Point &E) {
+            return -p.muscalar*p.mu.dot(E);
           }
-          return E;
+
+        string info(char w) {
+          using namespace textio;
+          std::ostringstream o;
+          o << pad(SUB,w,"Temperature") << pc::T() << " K" << endl
+            << pad(SUB,w,"Bjerrum length") << _lB << " "+angstrom << endl;
+          return o.str();
         }
-        
-      /** 
-       * @brief Field at `r` due to dipole `p`.
-       * @param p Particles from which field arises
-       * @param r Direction @f$ r_A - r_B @f$
-       * @param ida Id of particle exposed to the field from p. If ida is not set the exposed particle is assumed to be a point particle (optional)
-       */
-      template<class Tparticle>
-        Point fieldDipole(const Tparticle &p, const Point &r, int ida=-1) const {
-          Point E(0,0,0);
-          if(ida != -1) {
-            double x = betaDD(ida-1,p.id-1)*r.norm();
-            double x2 = x*x;
-            double erfX = erf_x(x)/x;
-            double expX = constant * exp(-x2);
-            double B1 = ( erfX - expX ) / x2;
-            double B2 = ( 3*erfX - (3 + 2*x2) * expX ) / ( x2 * x2 );
-            E = -p.muscalar*( B1 * p.mu - betaDD2(ida-1,p.id-1) * p.mu.dot(r) * B2 *r ) * betaDD3(ida-1,p.id-1);
-          } else {
-            double x = betaD(p.id-1)*r.norm();
-            double x2 = x*x;
-            double erfX = erf_x(x)/x;
-            double expX = constant * exp(-x2);
-            double B1 = ( erfX - expX ) / x2;
-            double B2 = ( 3*erfX - (3 + 2*x2) * expX ) / ( x2 * x2 );
-            E = -p.muscalar*( B1 * p.mu - betaD2(p.id-1) * p.mu.dot(r) * B2 *r ) * betaD3(p.id-1);
+    };
+
+    /**
+     * @brief Dipole-dipole interaction w. spherical cutoff and reaction field
+     *
+     * More info...
+     */
+    class DipoleDipoleRF : public DipoleDipole {
+      private:
+        string _brief() { return "Dipole-dipole (RF)"; }
+        double rc2,eps,eps_rf;
+      public:
+        DipoleDipoleRF(InputMap &in) : DipoleDipole(in) {
+          name+=" Reaction Field";
+          rc2 = pow(in.get<double>("dipdip_cutoff",pc::infty), 2);
+          eps_rf = in.get<double>("epsilon_rf",80.);
+          eps = _lB*(2*(eps_rf-1)/(2*eps_rf+1))/pow(rc2,1.5);
+        }
+        template<class Tparticle>
+          double operator()(const Tparticle &a, const Tparticle &b, const Point &r) const {
+            if (r.squaredNorm() < rc2)
+              return (DipoleDipole::operator()(a,b,r) - eps*a.mu.dot(b.mu)*a.muscalar*b.muscalar);
+            return 0;
           }
-          return E;
+
+        void updateDiel(double er) {
+          eps = _lB*(2*(er-1)/(er+1))/pow(rc2,1.5);
+        }  
+
+        string info(char w) {
+          using namespace textio;
+          std::ostringstream o;
+          o << DipoleDipole::info(w)
+            << pad(SUB,w,"Cutoff") << sqrt(rc2) << " "+angstrom << endl
+            << pad(SUB,w,"epsilon_rf") << eps_rf << endl;
+          return o.str();
         }
-  };
-  
-        namespace Potential {
-
-          class NemoRepulsion : public PairPotentialBase {
-            private:
-              string _brief() { return "NemoRepulsion"; }
-            protected:
-              typedef Eigen::VectorXd Tvec;
-              typedef opair<int> Tpair;
-              std::map<Tpair,Tvec> pairMap;
-              double expmax;
-              double scaling;
-
-            public:
-              NemoRepulsion(InputMap &in) {
-                name="Nemo repulsion";
-                pc::setT ( in.get<double>("temperature", 298.15, "Absolute temperature (K)") );
-                expmax = in.get<double>("expmax", 80, "Maximum repulsion exponent");
-                scaling = 1000/(pc::Nav*pc::kT());  // Converts from kJ/mol to kT
-                pairMap = json::atomPairMap("water2.json","pairproperties","nemorep");
-              }
-
-              /**
-               * @brief NemoRepulsion
-               * @param a Dipole particle A
-               * @param b Dipole particle B
-               * @param r Direction \f$ r_A - r_B \f$  
-               */
-              template<class Tparticle>
-                double operator()(const Tparticle &a, const Tparticle &b, const Point &r) const {
-                  Tpair pair(a.id,b.id);
-                  Tvec vec;
-                  auto it = pairMap.find(pair);
-                  if (it!=pairMap.end()) { 
-                    vec = it->second;
-                    return nemo4(vec, r,expmax)*scaling;
-                  }
-                  assert(!"No pair data defined");
-                  return 0;
-                }
-
-              string info(char w) { return _brief(); }
-          };
-
-          /**
-           * @brief Ion-dipole interaction, 
-           *
-           * More info...
-           */
-          class IonDipole : public PairPotentialBase {
-            private:
-              string _brief() { return "Ion-dipole"; }
-            protected:
-              double _lB;
-            public:
-              IonDipole(InputMap &in) {
-                pc::setT ( in.get<double>("temperature", 298.15, "Absolute temperature (K)") );
-                double epsilon_r = in.get<double>("epsilon_r",80., "Dielectric constant");
-                _lB=pc::lB( epsilon_r );
-              }
-              /**
-               * @brief Ion-dipole
-               * @param a Dipole particle A
-               * @param b Dipole particle B
-               * @param r Direction \f$ r_A - r_B \f$  
-               */
-              template<class Tparticle>
-                double operator()(const Tparticle &a, const Tparticle &b, const Point &r) const {
-                  return _lB*q2mu(a.charge*b.muscalar,b.mu,b.charge*a.muscalar,a.mu,r);
-                }
-
-              string info(char w) { return _brief(); }
-          };
-
-          /**
-           * @brief Dipole-dipole interaction
-           *
-           * More info...
-           */
-          class DipoleDipole : public PairPotentialBase {
-            private:
-              string _brief() {
-                std::ostringstream o;
-                o << "Dipole-dipole, lB=" << _lB << textio::_angstrom;
-                return o.str();          
-              }
-            protected:
-              double _lB;
-            public:
-              DipoleDipole(InputMap &in) {
-                name="Dipole-dipole";
-                pc::setT ( in.get<double>("temperature", 298.15,
-                      "Absolute temperature (K)") );
-                double epsilon_r = in.get<double>("epsilon_r",80.,
-                    "Dielectric constant");
-                _lB = pc::lB(epsilon_r);
-              }
-              template<class Tparticle>
-                double operator()(const Tparticle &a, const Tparticle &b, const Point &r) const {
-                  return _lB*mu2mu(a.mu, b.mu, a.muscalar*b.muscalar, r);
-                }
-
-              /** @brief Dipole field at `r` due to dipole `p` 
-               */
-              template<class Tparticle>
-                Point field(const Tparticle &p, const Point &r) const {
-                  double r2i = 1.0/r.squaredNorm();
-                  double r1i = sqrt(r2i);
-                  return ((3.0*p.mu.dot(r)*r*r2i - p.mu)*r2i*r1i)*p.muscalar*_lB;
-                }
-
-              /**
-               * @brief Interaction of dipole `p` with field `E`, see 'Intermolecular and SUrface Forces' by J. Israelachvili, p. 97 eq. 5.15
-               * @todo Needs to be tested!
-               */
-              template<class Tparticle>
-                double fieldEnergy(const Tparticle &p, const Point &E) {
-                  return -p.muscalar*p.mu.dot(E);
-                }
-
-              string info(char w) {
-                using namespace textio;
-                std::ostringstream o;
-                o << pad(SUB,w,"Temperature") << pc::T() << " K" << endl
-                  << pad(SUB,w,"Bjerrum length") << _lB << " "+angstrom << endl;
-                return o.str();
-              }
-          };
-
-          /**
-           * @brief Ion-quadrupole interaction
-           *
-           * More info...
-           */
-          class IonQuad : public PairPotentialBase {
-            private:
-              string _brief() { return "Ion-quadrupole"; }
-            protected:
-              double _lB;
-            public:
-              IonQuad(InputMap &in) {
-                name="Ion-Quad";
-                pc::setT ( in.get<double>("temperature", 298.15, "Absolute temperature (K)") );
-                double epsilon_r = in.get<double>("epsilon_r",80., "Dielectric constant");
-                _lB=pc::lB( epsilon_r );
-              }
-              template<class Tparticle>
-                double operator()(const Tparticle &a, const Tparticle &b, const Point &r) const {
-                  return _lB*q2quad(a.charge, b.theta,b.charge, a.theta,r);
-                }
-                
-              template<class Tparticle>
-                Point field(const Tparticle &p, const Point &r) const {
-                  return Point(0,0,0);
-                }
-
-              string info(char w) { return _brief(); }
-          };
-          
-          /**
-           * @brief Dipole-dipole interaction w. spherical cutoff and reaction field
-           *
-           * More info...
-           */
-          class DipoleDipoleRF : public DipoleDipole {
-            private:
-              string _brief() { return "Dipole-dipole (RF)"; }
-              double rc2,eps,eps_rf;
-            public:
-              DipoleDipoleRF(InputMap &in) : DipoleDipole(in) {
-                name+=" Reaction Field";
-                rc2 = pow(in.get<double>("dipdip_cutoff",pc::infty), 2);
-                eps_rf = in.get<double>("epsilon_rf",80.);
-                eps = _lB*(2*(eps_rf-1)/(2*eps_rf+1))/pow(rc2,1.5);
-              }
-              template<class Tparticle>
-                double operator()(const Tparticle &a, const Tparticle &b, const Point &r) const {
-                  if (r.squaredNorm() < rc2)
-                    return (DipoleDipole::operator()(a,b,r) - eps*a.mu.dot(b.mu)*a.muscalar*b.muscalar);
-                  return 0;
-                }
-                
-              /** @brief Field at `r` due to dipole `p` 
-               * @warning Untested!
-               */
-              template<class Tparticle>
-                Point field(const Tparticle &p, const Point &r) const {
-                  return (DipoleDipole::field(p,r) + eps*p.mu*p.muscalar);
-                }
-
-              void updateDiel(double er) {
-                eps = _lB*(2*(er-1)/(er+1))/pow(rc2,1.5);
-              }  
-
-              string info(char w) {
-                using namespace textio;
-                std::ostringstream o;
-                o << DipoleDipole::info(w)
-                  << pad(SUB,w,"Cutoff") << sqrt(rc2) << " "+angstrom << endl
-                  << pad(SUB,w,"epsilon_rf") << eps_rf << endl;
-                return o.str();
-              }
-          };
-
-          class IonDipoleWolf : public IonDipole {
-            private:
-              string _brief() { return "Ion-dipole Wolf"; }
-              WolfBase wolf;
-            public:
-              IonDipoleWolf(InputMap &in) : IonDipole(in),
-              wolf(in.get<double>("kappa", 1.8, "Kappa-damping"),
-                  in.get<double>("dipdip_cutoff",in.get<double>("cuboid_len",pc::infty)/2)) {
-                name+=" Wolf";
-              }
-
-              template<class Tparticle>
-                double operator()(const Tparticle &a, const Tparticle &b, const Point &r) {
-                  wolf.calcWolfData(a,b,r);
-                  return _lB*wolf.q2mu(a.charge*b.muscalar,b.mu,b.charge*a.muscalar,a.mu,r);
-                }
-
-              string info(char w) {
-                using namespace textio;
-                std::ostringstream o;
-                o << IonDipole::info(w)
-                  << pad(SUB,w,"Cutoff") << wolf.getCutoff() << " "+angstrom << endl
-                  << pad(SUB,w,"Kappa") << wolf.getKappa() << " "+angstrom+"^-1" << endl;
-                return o.str();
-              }
-          };
-          
-          class DipoleDipoleWolf : public DipoleDipole {
-            private:
-              string _brief() { return "Dipole-dipole Wolf"; }
-              WolfBase wolf;
-            public:
-              DipoleDipoleWolf(InputMap &in) : DipoleDipole(in),
-              wolf(in.get<double>("kappa", 1.8, "Kappa-damping"),
-                  in.get<double>("dipdip_cutoff",in.get<double>("cuboid_len",pc::infty)/2)) {
-                name+=" Wolf";
-              }
-
-              template<class Tparticle>
-                double operator()(const Tparticle &a, const Tparticle &b, const Point &r) {
-                  wolf.calcWolfData(a,b,r);
-                  return _lB*wolf.mu2mu(a.mu,b.mu, a.muscalar*b.muscalar, r);
-                }
-
-              /** @brief Dipole field at `r` due to dipole `p` 
-               */
-              template<class Tparticle>
-                Point field(const Tparticle &p, const Point &r) const {
-                  return _lB*wolf.field(p,r);
-                }
-
-              string info(char w) {
-                using namespace textio;
-                std::ostringstream o;
-                o << DipoleDipole::info(w)
-                  << pad(SUB,w,"Cutoff") << wolf.getCutoff() << " "+angstrom << endl
-                  << pad(SUB,w,"Kappa") << wolf.getKappa() << " "+angstrom+"^-1" << endl;
-                return o.str();
-              }
-          };
-          
-          class IonQuadWolf : public IonQuad {
-            private:
-              string _brief() { return "Ion-Quadrupole Wolf"; }
-              WolfBase wolf;
-            public:
-              IonQuadWolf(InputMap &in) : IonQuad(in),
-              wolf(in.get<double>("kappa", 1.8, "Kappa-damping"),
-                  in.get<double>("dipdip_cutoff",in.get<double>("cuboid_len",pc::infty)/2)) {
-                name+=" Wolf";
-              }
-
-              template<class Tparticle>
-                double operator()(const Tparticle &a, const Tparticle &b, const Point &r) {
-                  wolf.calcWolfData(a,b,r);
-                  return _lB*wolf.q2quad(a.charge, b.theta,b.charge, a.theta,r);
-                }
-
-              string info(char w) {
-                using namespace textio;
-                std::ostringstream o;
-                o << IonQuad::info(w)
-                  << pad(SUB,w,"Cutoff") << wolf.getCutoff() << " "+angstrom << endl
-                  << pad(SUB,w,"Kappa") << wolf.getKappa() << " "+angstrom+"^-1" << endl;
-                return o.str();
-              }
-          };
-          
-          class IonIonGaussianDamping : public Coulomb {
-            private:
-              string _brief() { return "Coulomb Gaussian Damping"; }
-              GaussianDampingBase gdb;
-            public:
-              IonIonGaussianDamping(InputMap &in) : Coulomb(in),
-              gdb() { name+=" Gaussian Damping"; }
-
-              template<class Tparticle>
-                double operator()(const Tparticle &a, const Tparticle &b, const Point &r) {
-                  return lB*gdb.q2q(a.charge,b.charge,a.id,b.id,r);
-                }
-                
-              template<class Tparticle>
-                Point field(const Tparticle &p, const Point &r) const {
-                  return lB*gdb.fieldCharge(p,r);
-                }
-          };
+    };
+
+    /**
+     * @brief Ion-dipole interaction
+     *
+     * More info...
+     */
+    class IonQuad : public PairPotentialBase {
+      private:
+        string _brief() { return "Ion-quadrupole"; }
+      protected:
+        double _lB;
+      public:
+        IonQuad(InputMap &in) {
+          pc::setT ( in.get<double>("temperature", 298.15, "Absolute temperature (K)") );
+          double epsilon_r = in.get<double>("epsilon_r",80., "Dielectric constant");
+          _lB=pc::lB( epsilon_r );
+        }
+        template<class Tparticle>
+          double operator()(const Tparticle &a, const Tparticle &b, const Point &r) const {
+            return _lB*(q2quad(a.charge, b.theta,r)+q2quad(b.charge, a.theta,r));
+          }
+
+        string info(char w) { return _brief(); }
+    };
+    
+    class IonDipoleWolf : public IonDipole {
+      private:
+        string _brief() { return "Ion-dipole Wolf"; }
+        WolfBase wolf;
+      public:
+        IonDipoleWolf(InputMap &in) : IonDipole(in),
+        wolf(in.get<double>("kappa", 1.8, "Kappa-damping"),
+            in.get<double>("dipdip_cutoff",in.get<double>("cuboid_len",pc::infty)/2)) {
+          name+=" Wolf";
+        }
+
+        template<class Tparticle>
+          double operator()(const Tparticle &a, const Tparticle &b, const Point &r) const {
+            double r2i = 1/r.squaredNorm();
+            double r1i = std::sqrt(r2i);
+            return _lB*wolf.q2mu(a.mu,b.mu, a.muscalar*b.muscalar, r, r1i, r2i);
+          }
           
-          class IonDipoleGaussianDamping : public IonDipole {
-            private:
-              string _brief() { return "Ion-dipole Gaussian Damping"; }
-              GaussianDampingBase gdb;
-            public:
-              IonDipoleGaussianDamping(InputMap &in) : IonDipole(in),
-              gdb() { name+=" Gaussian Damping"; }
-
-              template<class Tparticle>
-                double operator()(const Tparticle &a, const Tparticle &b, const Point &r) {
-                  return _lB*gdb.q2mu(a.charge*b.muscalar,b.mu,b.charge*a.muscalar,a.mu,a.id,b.id,r);
-                }
-          };
+        template<class Tparticle>
+          Point field(const Tparticle &p, const Point &r) const {
+            return Point(0,0,0);
+          }
+
+        string info(char w) {
+          using namespace textio;
+          std::ostringstream o;
+          o << IonDipole::info(w)
+            << pad(SUB,w,"Cutoff") << wolf.getCutoff() << " "+angstrom << endl
+            << pad(SUB,w,"Kappa") << wolf.getKappa() << " "+angstrom+"^-1" << endl;
+          return o.str();
+        }
+    };
+
+    class DipoleDipoleWolf : public DipoleDipole {
+      private:
+        string _brief() { return "Dipole-dipole Wolf"; }
+        WolfBase wolf;
+      public:
+        DipoleDipoleWolf(InputMap &in) : DipoleDipole(in),
+        wolf(in.get<double>("kappa", 1.8, "Kappa-damping"),
+            in.get<double>("dipdip_cutoff",in.get<double>("cuboid_len",pc::infty)/2)) {
+          name+=" Wolf";
+        }
+
+        template<class Tparticle>
+          double operator()(const Tparticle &a, const Tparticle &b, const Point &r) const {
+            return _lB*wolf.mu2mu(a.mu,b.mu, a.muscalar*b.muscalar, r);
+          }
           
-          class DipoleDipoleGaussianDamping : public DipoleDipole {
-            private:
-              string _brief() { return "Dipole-dipole Gaussian Damping"; }
-              GaussianDampingBase gdb;
-            public:
-              DipoleDipoleGaussianDamping(InputMap &in) : DipoleDipole(in),
-              gdb() { name+=" Gaussian Damping"; }
-
-              template<class Tparticle>
-                double operator()(const Tparticle &a, const Tparticle &b, const Point &r) {
-                  return _lB*gdb.mu2mu(a.mu,b.mu, a.muscalar*b.muscalar,a.id,b.id,r);
-                }
-                
-              template<class Tparticle>
-                Point field(const Tparticle &p, const Point &r) const {
-                  return _lB*gdb.fieldDipole(p,r);
-                }
-          };
+        /** @brief Dipole field at `r` due to dipole `p` 
+         *  Gets returned in [e/Å] (\f$\beta eE \f$)
+         */
+        template<class Tparticle>
+          Point field(const Tparticle &p, const Point &r) const {
+            return _lB*wolf.fieldMu2Mu(p,r);
+          }
+
+        string info(char w) {
+          using namespace textio;
+          std::ostringstream o;
+          o << DipoleDipole::info(w)
+            << pad(SUB,w,"Cutoff") << wolf.getCutoff() << " "+angstrom << endl
+            << pad(SUB,w,"Kappa") << wolf.getKappa() << " "+angstrom+"^-1" << endl;
+          return o.str();
+        }
+    };
+    
+    class IonQuadWolf : public IonQuad {
+      private:
+        string _brief() { return "Ion-Quadrupole Wolf"; }
+        WolfBase wolf;
+      public:
+        IonQuadWolf(InputMap &in) : IonQuad(in),
+        wolf(in.get<double>("kappa", 1.8, "Kappa-damping"),
+            in.get<double>("dipdip_cutoff",in.get<double>("cuboid_len",pc::infty)/2)) {
+          name+=" Wolf";
+        }
+
+        template<class Tparticle>
+          double operator()(const Tparticle &a, const Tparticle &b, const Point &r) const {
+            return _lB*wolf.q2quad(a.charge, b.theta, b.charge, a.theta,r);
+          }
           
-          class IonQuadGaussianDamping : public IonQuad {
-            private:
-              string _brief() { return "Ion-Quadrupole Gaussian Damping"; }
-              GaussianDampingBase gdb;
-            public:
-              IonQuadGaussianDamping(InputMap &in) : IonQuad(in),
-              gdb() { name+=" Gaussian Damping"; }
-
-              template<class Tparticle>
-                double operator()(const Tparticle &a, const Tparticle &b, const Point &r) {
-                  return _lB*gdb.q2quad(a.charge, b.theta,b.charge, a.theta,a.id,b.id,r);
-                }
-          };
-      }
+        template<class Tparticle>
+          Point field(const Tparticle &p, const Point &r) const {
+            Eigen::Matrix3d T1, T2, T3;/*
+            T1(0,0) = r.x()*r.x()*r.x();
+            T1(0,1) = r.x()*r.x()*r.y();
+            T1(0,2) = r.x()*r.x()*r.z();
+            T1(1,0) = r.x()*r.y()*r.x();
+            T1(1,1) = r.x()*r.y()*r.y();
+            T1(1,2) = r.x()*r.y()*r.z();
+            T1(2,0) = r.x()*r.z()*r.x();
+            T1(2,1) = r.x()*r.z()*r.y();
+            T1(2,2) = r.x()*r.z()*r.z();
+            
+            T2(0,0) = r.y()*r.x()*r.x();
+            T2(0,1) = r.y()*r.x()*r.y();
+            T2(0,2) = r.y()*r.x()*r.z();
+            T2(1,0) = r.y()*r.y()*r.x();
+            T2(1,1) = r.y()*r.y()*r.y();
+            T2(1,2) = r.y()*r.y()*r.z();
+            T2(2,0) = r.y()*r.z()*r.x();
+            T2(2,1) = r.y()*r.z()*r.y();
+            T2(2,2) = r.y()*r.z()*r.z();
+            
+            T3(0,0) = r.z()*r.x()*r.x();
+            T3(0,1) = r.z()*r.x()*r.y();
+            T3(0,2) = r.z()*r.x()*r.z();
+            T3(1,0) = r.z()*r.y()*r.x();
+            T3(1,1) = r.z()*r.y()*r.y();
+            T3(1,2) = r.z()*r.y()*r.z();
+            T3(2,0) = r.z()*r.z()*r.x();
+            T3(2,1) = r.z()*r.z()*r.y();
+            T3(2,2) = r.z()*r.z()*r.z();*/
+            return Point(0,0,0);
+          }
+
+        string info(char w) {
+          using namespace textio;
+          std::ostringstream o;
+          o << IonQuad::info(w)
+            << pad(SUB,w,"Cutoff") << wolf.getCutoff() << " "+angstrom << endl
+            << pad(SUB,w,"Kappa") << wolf.getKappa() << " "+angstrom+"^-1" << endl;
+          return o.str();
+        }
+    };
+  }
 }
 #endif
 
