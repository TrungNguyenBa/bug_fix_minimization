diff --git a/include/faunus/average.h b/include/faunus/average.h
index a96bcc11..fde47f18 100644
--- a/include/faunus/average.h
+++ b/include/faunus/average.h
@@ -27,8 +27,7 @@ namespace Faunus {
   template<class T> class Average {
   public:
     T sqsum;                                      ///< Square sum
-    Average();          
-    Average(T,T,int=1); 
+    Average();                                 
     virtual ~Average() {} 
     T sum;                                        ///< Sum of all values
     unsigned long long int cnt;                   ///< Number of values
@@ -37,6 +36,7 @@ namespace Faunus {
     T stdev();                                    ///< Standard deviation
     void add(T);                                  ///< Add value to current set.
     void reset();                                 ///< Clear all data
+    void load(unsigned long long int,T);          ///< Load initial values
     Average & operator=(T);                       ///< Assign value to current set. 
     Average & operator+=(T);                      ///< Add value to current set. 
     Average & operator*=(T);                      ///< Scale current set
@@ -51,18 +51,6 @@ namespace Faunus {
   
   template<class T> Average<T>::Average() { reset(); }
   
-  template<class T> Average<T>::Average(T average, T squaresum, int N) {
-    reset();
-    assert( N>0 && "Counter has rotated to zero!");
-    if (N<=0)
-      std::cerr << "Numeric limits reached in average class!\n";
-    else {
-      sum+=N*average;
-      sqsum+=squaresum;
-      cnt = N;
-    }
-  }
-  
   template<class T> T Average<T>::avg() const {
     if (cnt<=0) {
       std::cerr << "Warning average counter is empty.\n";
@@ -75,6 +63,12 @@ namespace Faunus {
     sum=sqsum=0;
     cnt=0;
   }
+  
+  template<class T> void Average<T>::load(unsigned long long int cnt_in,T x) {
+    reset();
+    cnt = cnt_in - 1;
+    add(cnt_in*x);
+  }
 
   template<class T> Average<T>& Average<T>::operator=(T x) {
     reset();
@@ -184,7 +178,7 @@ namespace Faunus {
       }
 
       friend std::ostream &operator<<(std::ostream &o, const AverageExt<T> &a) {
-        T s=a.stddev();
+        double s=a.stddev();
         o << a.avg();
         if (s>1e-15)
           o << " " << s;
