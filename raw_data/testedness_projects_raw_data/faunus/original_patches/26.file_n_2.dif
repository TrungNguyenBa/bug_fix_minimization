diff --git a/include/faunus/multipole.h b/include/faunus/multipole.h
index c8be0b68..f8b1b294 100644
--- a/include/faunus/multipole.h
+++ b/include/faunus/multipole.h
@@ -255,8 +255,7 @@ namespace Faunus {
       double r1i = sqrt(r2i);
       double r3i = r1i*r2i;
       double r5i = r3i*r2i;
-      double W = r.transpose()*quad*r;
-      W = W*r5i - quad.trace()*(r3i/3);
+      double W = r.transpose()*quad*r*r5i  - quad.trace()*(r3i/3);
       return q*W; // e^2 / Ã…
     }
     
@@ -316,7 +315,7 @@ namespace Faunus {
         rc2i_d = (expKc + rc1i_d)*rc1i;
         rc3i_d = expKc*(kappa2 + rc2i) + rc1i_d*rc2i;
         rc4i_d = expKc*( (2*kappa4/(3*rc1i)) + (2*kappa2*rc1i/3) + rc3i ) + rc1i_d*rc3i;
-        rc5i_d = rc2i*expKc*(rc2i + (2/3)*kappa2 + (kappa6/(3*rc2i*rc2i)) + (kappa4/(6*rc2i))) + rc1i_d*rc2i*rc2i;
+        rc5i_d = expKc*(rc2i*rc2i + (2*rc2i*kappa2/3) + (kappa6/(3*rc2i)) + (kappa4/6)) + rc1i_d*rc2i*rc2i;
         rc6i_d = expKc*(rc2i*rc3i + (2/3)*kappa2*rc3i + (4/15)*kappa4*rc1i - (1/15)*(kappa6/rc1i) + (2/15)*(kappa4*kappa4/rc3i)) + rc1i_d*rc2i*rc3i;
       
         cout << rc1i_d << ", " << rc3i_d << ", " << rc3i_d << ", " << 3*rc5i_d << endl;
@@ -568,37 +567,9 @@ namespace Faunus {
   class WolfGaussianDamping {
     private:
       double rc1, rc2i, constant, kappa, kappa2, kappa4, kappa6;
-      Eigen::MatrixXd betaCC12, betaCD12, betaCQ12, betaCD122, betaCQ122, betaCD123, betaDD12, betaDD122, betaDD123, betaCQ123;
-      Eigen::MatrixXd B0cCC, B1cCD, B1cDD, B1cCQ, B2cDD, B2cCQ;
-      Eigen::MatrixXd dB0cCC, dB1cCD, dB1cDD, dB1cCQ, dB2cDD, dB2cCQ;
-      
-      struct wdata {
-        //template<class Tparticle>
-        double r2i, r1i_dW, r2i_dW, r3i_dW, r4i_dW, r5i_dW, erfX, expX, B0_s, B1_s, B2_s, diffR;
-        //Tparticle* a,b;
-      };
-
-      template<class Tparticle, class Tvec>
-        void calcWolfData(const Tparticle &a, const Tparticle &b, const Tvec &r, wdata &data) {
-          data.r2i = 1/r.squaredNorm();
-          double r1i = sqrt(data.r2i);
-          double r3i = data.r2i*r1i;
-          double r4i = data.r2i*data.r2i;
-          double expK =  constant*kappa*exp(-kappa2/data.r2i);
-          data.r1i_dW = erfc_x(kappa/r1i)*r1i;
-          data.r2i_dW = (expK + data.r1i_dW)*r1i;
-          data.r3i_dW = expK*(kappa2 + data.r2i) + data.r1i_dW * data.r2i;
-          data.r4i_dW = expK*((2*kappa4/(3*r1i)) + (2*kappa2*r1i/3) + r3i) + data.r1i_dW*r3i;
-          data.r5i_dW = expK*data.r2i*(data.r2i + (2/3)*kappa2 + (kappa6/(3*r4i)) + (kappa4/(6*data.r2i))) + data.r1i_dW*r4i;   
-          data.erfX = erf_x(betaDD12(a.id-1,b.id-1)/r1i);
-          data.expX = constant*betaDD12(a.id-1,b.id-1)*exp(-betaDD12(a.id-1,b.id-1)/data.r2i);
-
-          data.B0_s = erf_x(betaCC12(a.id-1,b.id-1)/r1i)*data.r1i_dW;
-          data.B1_s = data.erfX*data.r3i_dW - data.expX*data.r2i_dW;            
-          data.B2_s = 3*data.erfX*data.r5i_dW - data.expX*(2*data.r2i_dW*betaDD122(a.id-1,b.id-1) + 3*data.r4i_dW);
-          data.diffR = (1/r1i) - rc1;
-          return data;
-        }
+      Eigen::MatrixXd betaCC12, betaCD12, betaCD122, betaCD123, betaDD12, betaDD122, betaDD123;
+      Eigen::MatrixXd B0cCC, B1cCD, B1cDD, B2cDD;
+      Eigen::MatrixXd dB0cCC, dB1cCD, dB1cDD, dB2cDD;
       
     public:
       /**
@@ -609,10 +580,11 @@ namespace Faunus {
        * @param betaD Exponent of Gaussian dipole distribution
        * @param rcut Cutoff distance (angstrom)
        */
+      //template<class Tparticles>
       WolfGaussianDamping(double kappa_in, double rcut) {
       //WolfGaussianDamping(const Tparticles &p, double kappa_in, double rcut) {
-        Eigen::MatrixXd expBCC, expBCD, expBDD, expBCQ, erfBCC, erfBCD, erfBDD, erfBCQ;
-        Eigen::VectorXd betaC, betaD, betaQ;
+        Eigen::MatrixXd expBCC, expBCD, expBDD, erfBCC, erfBCD, erfBDD;
+        Eigen::VectorXd betaC, betaD;
         constant = 2/sqrt(pc::pi);
         kappa = kappa_in;
         kappa2 = kappa*kappa;
@@ -631,45 +604,34 @@ namespace Faunus {
         double rc5i_dW = expKc*(rc2i*rc2i + (2*rc2i*kappa2/3) + (kappa6/(3*rc2i)) + (kappa4/6)) + rc1i_dW*rc2i*rc2i;
         double rc6i_dW = expKc*(rc2i*rc3i + (2/3)*kappa2*rc3i + (4/15)*kappa4*rc1i - (1/15)*(kappa6/rc1i) + (2/15)*(kappa4*kappa4/rc3i)) + rc1i_dW*rc2i*rc3i;
         
-        int N = atom.size() - 1;
+        int N = 1; //p.size();
         betaC.resize(N);
         betaD.resize(N);
-        betaQ.resize(N);
         erfBCC.resize(N,N);
         erfBCD.resize(N,N);
         erfBDD.resize(N,N);
-        erfBCQ.resize(N,N);
         expBCC.resize(N,N);
         expBCD.resize(N,N);
         expBDD.resize(N,N);
-        expBCQ.resize(N,N);
         betaCC12.resize(N,N);
         betaCD12.resize(N,N);
-        betaCQ12.resize(N,N);
         betaCD122.resize(N,N);
         betaCD123.resize(N,N);
         betaDD12.resize(N,N);
         betaDD122.resize(N,N);
-        betaCQ122.resize(N,N);
         betaDD123.resize(N,N);
-        betaCQ123.resize(N,N);
         B0cCC.resize(N,N);
         B1cCD.resize(N,N);
         B1cDD.resize(N,N);
-        B1cCQ.resize(N,N);
         B2cDD.resize(N,N);
-        B2cCQ.resize(N,N);
         dB0cCC.resize(N,N);
         dB1cCD.resize(N,N);
         dB1cDD.resize(N,N);
-        dB1cCQ.resize(N,N);
         dB2cDD.resize(N,N);
-        dB2cCQ.resize(N,N);
         
         for(int i = 0; i < N; i++) {
-          betaC(i) = atom[i+1].betaC;
-          betaD(i) = atom[i+1].betaD;
-          betaQ(i) = atom[i+1].betaQ;
+          betaC(i) = 1.3; //p[i].betaC;
+          betaD(i) = 1.3; //p[i].betaD;
         }
 
         for(int i = 0; i < N; i++) {
@@ -677,36 +639,33 @@ namespace Faunus {
             betaCC12(i,j) = betaC(i)*betaC(j)/sqrt(betaC(i)*betaC(i) + betaC(j)*betaC(j));
             betaCD12(i,j) = betaC(i)*betaD(j)/sqrt(betaC(i)*betaC(i) + betaD(j)*betaD(j));
             betaDD12(i,j) = betaD(i)*betaD(j)/sqrt(betaD(i)*betaD(i) + betaD(j)*betaD(j));
-            betaCQ12(i,j) = betaC(i)*betaQ(j)/sqrt(betaC(i)*betaC(i) + betaQ(j)*betaQ(j));
             betaCD122(i,j) = betaCD12(i,j)*betaCD12(i,j);
             betaDD122(i,j) = betaDD12(i,j)*betaDD12(i,j);
-            betaCQ122(i,j) = betaCQ12(i,j)*betaCQ12(i,j);
             betaCD123(i,j) = betaCD122(i,j)*betaCD12(i,j);
             betaDD123(i,j) = betaDD122(i,j)*betaDD12(i,j);
-            betaCQ123(i,j) = betaCQ122(i,j)*betaCQ12(i,j);
             
             expBCC(i,j) = constant*betaCC12(i,j)*exp(-betaCC12(i,j)/rc2i);
             expBCD(i,j) = constant*betaCD12(i,j)*exp(-betaCD12(i,j)/rc2i);
             expBDD(i,j) = constant*betaDD12(i,j)*exp(-betaDD12(i,j)/rc2i);
-            expBCQ(i,j) = constant*betaCQ12(i,j)*exp(-betaCQ12(i,j)/rc2i);
             erfBCC(i,j) = erf_x(betaCC12(i,j)/rc1i);
             erfBCD(i,j) = erf_x(betaCD12(i,j)/rc1i);
             erfBDD(i,j) = erf_x(betaDD12(i,j)/rc1i);
-            erfBCQ(i,j) = erf_x(betaCQ12(i,j)/rc1i);
+            
+            cout << expBCC(i,j) << ", " << expBCD(i,j) << ", " << expBDD(i,j) << endl;
+            cout << erfBCC(i,j) << ", " << erfBCD(i,j) << ", " << erfBDD(i,j) << endl;
             
             B0cCC(i,j) = erfBCC(i,j)*rc1i_dW;
             B1cCD(i,j) = erfBCD(i,j)*rc3i_dW - expBCD(i,j)*rc2i_dW;
             B1cDD(i,j) = erfBDD(i,j)*rc3i_dW - expBDD(i,j)*rc2i_dW;            
-            B1cCQ(i,j) = erfBCQ(i,j)*rc3i_dW - expBCQ(i,j)*rc2i_dW; 
             B2cDD(i,j) = 3*erfBDD(i,j)*rc5i_dW - expBDD(i,j)*(2*rc2i_dW*betaDD122(i,j) + 3*rc4i_dW);
-            B2cCQ(i,j) = 3*erfBCQ(i,j)*rc5i_dW - expBCQ(i,j)*(2*rc2i_dW*betaCQ122(i,j) + 3*rc4i_dW);
 
             dB0cCC(i,j) = expBCC(i,j)*rc1i_dW - erfBCC(i,j)*rc2i_dW;
             dB1cCD(i,j) = expBCD(i,j)*(rc3i_dW + (2/betaCD12(i,j))*rc3i_dW + 2*betaCD12(i,j)*rc1i_dW) - 3*erfBCD(i,j)*rc4i_dW;
             dB1cDD(i,j) = expBDD(i,j)*(rc3i_dW + (2/betaDD12(i,j))*rc3i_dW + 2*betaDD12(i,j)*rc1i_dW) - 3*erfBDD(i,j)*rc4i_dW;
-            dB1cCQ(i,j) = expBCQ(i,j)*(rc3i_dW + (2/betaCQ12(i,j))*rc3i_dW + 2*betaCQ12(i,j)*rc1i_dW) - 3*erfBCQ(i,j)*rc4i_dW;
             dB2cDD(i,j) = expBDD(i,j)*(15*rc5i_dW + 10*betaDD122(i,j)*rc3i_dW + 4*betaDD122(i,j)*betaDD122(i,j)*rc1i_dW) - 15*erfBDD(i,j)*rc6i_dW;
-            dB2cDD(i,j) = expBCQ(i,j)*(15*rc5i_dW + 10*betaCQ122(i,j)*rc3i_dW + 4*betaCQ122(i,j)*betaCQ122(i,j)*rc1i_dW) - 15*erfBCQ(i,j)*rc6i_dW;
+          
+            cout << B0cCC(i,j) << ", " << B1cCD(i,j) << ", " << B1cDD(i,j) << ", " << B2cDD(i,j) << endl;
+            cout << dB0cCC(i,j) << ", " << dB1cCD(i,j) << ", " << dB1cDD(i,j) << ", " << dB2cDD(i,j) << endl;
           }
         }
       }
@@ -763,7 +722,10 @@ namespace Faunus {
        * @returns energy in `kT/lB`
        */
       template<class Tvec>
-        double mu2mu(const Tvec &muA, const Tvec &muB, double muAxmuB, int betaA, int betaB, const Tvec &r) const {
+        double mu2mu(const Tvec &muA, const Tvec &muB, double muAxmuB, const Tvec &r) const {
+        //double mu2mu(const Tvec &muA, const Tvec &muB, double muAxmuB, int betaA, int betaB, const Tvec &r) const {
+          int betaA = 0;
+          int betaB = 0;
           double r2i = 1/r.squaredNorm();
           if (r2i < rc2i)
             return 0;
@@ -775,12 +737,24 @@ namespace Faunus {
           double r2i_dW = (expK + r1i_dW)*r1i;
           double r3i_dW = expK*(kappa2 + r2i) + r1i_dW * r2i;
           double r4i_dW = expK*((2*kappa4/(3*r1i)) + (2*kappa2*r1i/3) + r3i) + r1i_dW*r3i;
-          double r5i_dW = expK*(r2i*r2i + (2*r2i*kappa2/3) + (kappa6/(3*r2i)) + (kappa4/6)) + r1i_dW*r2i*r2i;  
+          double r5i_dW = expK*r2i*(r2i + (2/3)*kappa2 + (kappa6/(3*r2i*r2i)) + (kappa4/(6*r2i))) + r1i_dW*r2i*r2i;   
           double erfX = erf_x(betaDD12(betaA,betaB)/r1i);
           double expX = constant*betaDD12(betaA,betaB)*exp(-betaDD12(betaA,betaB)/r2i);
 
           double B1_s = erfX*r3i_dW - expX*r2i_dW;            
           double B2_s = 3*erfX*r5i_dW - expX*(2*r2i_dW*betaDD122(betaA,betaB) + 3*r4i_dW);
+          /*
+          if((1/r1i) > 4.29) {
+            cout << "r: " << (1/r1i) << endl;
+            cout << (B1_s - B1cDD(betaA,betaB)) << endl;
+            cout << (B2_s - B2cDD(betaA,betaB)) << endl;
+            cout << der << endl;
+            cout << "Erf: " << erf_x(1000) << ", beta: " << betaDD12(betaA,betaB) << ", r1: " << (1/r1i) << endl;
+            cout << "erfX: " << erfX << ", r3i_dW: " << r3i_dW << ", expX: " << expX << ", r2i_dW: " << r2i_dW << endl;
+            cout << "erfX: " << erfX << ", r5i_dW: " << r5i_dW << ", expX: " << expX << ", r2i_dW*betaDD122(betaA,betaB): " << r2i_dW*betaDD122(betaA,betaB) << ", r4i_dW:" << r4i_dW << endl;
+            cout << "B2_s: " << B2_s << ", B1_s: " << B1_s << endl;
+            cout << "r5i: " << r2i*r3i << ", r3i: " << r3i << endl;
+          }*/
           double W = muA.dot(muB)*(B1_s - B1cDD(betaA,betaB) - der*dB1cDD(betaA,betaB)) - muA.dot(r)*muB.dot(r)*(B2_s - B2cDD(betaA,betaB) -der*dB2cDD(betaA,betaB));
           return W*muAxmuB;
         }
@@ -788,32 +762,20 @@ namespace Faunus {
       /**
        * @brief Returns ion-quadrupole interaction. Not implemented!
        */
-        
        template<class Tvec, class Tmat>
-          double q2quad(double q1, const Tmat &quad1, double q2, const Tmat &quad2, int betaA, int betaB, const Tvec &r) const {
+         double q2quad(double q1, const Tmat &quad1, double q2, const Tmat &quad2, const Tvec &r) {
            double r2i = 1/r.squaredNorm();
            if (r2i < rc2i)
             return 0;
            double r1i = sqrt(r2i);
-            double der = (1/r1i) - rc1;
            double r3i = r1i*r2i;
            double expK =  2 * kappa*exp(-kappa2/r2i) / sqrt(pc::pi);
-            double r1i_dW = erfc_x(kappa/r1i)*r1i;
-            double r2i_dW = (expK + r1i_dW)*r1i;
-            double r3i_dW = expK*(kappa2 + r2i) + r1i_dW*r2i;
-            double r4i_dW = expK*((2*kappa4/(3*r1i)) + (2*kappa2*r1i/3) + r3i) + r1i_dW*r3i;
-            double r5i_dW = r2i*expK*(r2i + (2/3)*kappa2 + (kappa6/(3*r2i*r2i)) + (kappa4/(6*r2i))) + r1i_dW*r2i*r2i;  
-            double erfX = erf_x(betaDD12(betaA,betaB)/r1i);
-            double expX = constant*betaDD12(betaA,betaB)*exp(-betaDD12(betaA,betaB)/r2i);
-
-            double B1_s = erfX*r3i_dW - expX*r2i_dW;            
-            double B2_s = 3*erfX*r5i_dW - expX*(2*r2i_dW*betaDD122(betaA,betaB) + 3*r4i_dW);
-
-            Eigen::MatrixXd Temp = q1*quad1 + q2*quad2;
-            double W = r.transpose()*Temp*r;
-            W = W*(B2_s - B2cCQ(betaA,betaB) - der*dB2cCQ(betaA,betaB));
-            W = W  - (q1*quad1.trace() + q2*quad2.trace())*(B1_s - B1cCQ(betaA,betaB) -der*dB1cCQ(betaA,betaB));
-            return (W/3); // e^2 / Ã…
+           double r1i_d = erfc_x(kappa/r1i)*r1i;
+           double r3i_d = expK*(kappa2 + r2i) + r1i_d*r2i;
+           double r5i_d = r2i*expK*(r2i + (2/3)*kappa2 + (kappa6/(3*r2i*r2i)) + (kappa4/(6*r2i))) + r1i_d*r2i*r2i;   
+           double W1 = q1*r.transpose()*quad1*r*r5i_d  - q1*quad1.trace()*(r3i_d/3);
+           double W2 = q2*r.transpose()*quad2*r*r5i_d  - q2*quad2.trace()*(r3i_d/3);
+           return (W1+W2); // e^2 / Ã…
          }
          
         /** 
@@ -827,8 +789,8 @@ namespace Faunus {
         template<class Tparticle>
           Point field(const Tparticle &p, const Tparticle &p0, const Point &r) const {
           //Point field(const Tparticle &p, int betaA, int betaB, const Point &r) const {
-            int betaA = 0;
-            int betaB = 0;
+            int betaA = 1;
+            int betaB = 1;
            double r2i = 1/r.squaredNorm();
            if (r2i < rc2i)
             return Point(0,0,0);
@@ -921,6 +883,34 @@ namespace Faunus {
 
         string info(char w) { return _brief(); }
     };
+   /* 
+      class IonIonDamped : public Coulomb {
+      private:
+        string _brief() { return "Damped Coulomb"; }
+        GaussianDamping gd;
+      public:
+        CoulombDamped(InputMap &in) : Coulomb(in),
+        gd() {
+          name+=" Coulomb";
+        }
+
+        template<class Tparticle>
+          double operator()(const Tparticle &a, const Tparticle &b, const Point &r) const {
+            return lB*gd.q2q(a.charge*b.charge, a.betaC, b.betaC, r);
+          }
+          
+        template<class Tparticle>
+          Point field(const Tparticle &p,const Tparticle &p0, const Point &r) const {
+            return lB*gd.fieldQ2Q(p,p0,r);
+          }
+
+        string info(char w) {
+          using namespace textio;
+          std::ostringstream o;
+          o << Coulomb::info(w) << endl;
+          return o.str();
+        }
+    };*/
 
     /**
      * @brief Ion-dipole interaction, 
@@ -1058,7 +1048,6 @@ namespace Faunus {
         double _lB;
       public:
         IonQuad(InputMap &in) {
-                name="Ion-Quad";
           pc::setT ( in.get<double>("temperature", 298.15, "Absolute temperature (K)") );
           double epsilon_r = in.get<double>("epsilon_r",80., "Dielectric constant");
           _lB=pc::lB( epsilon_r );
@@ -1202,12 +1191,12 @@ namespace Faunus {
         DipoleDipoleWolfDamped(InputMap &in) : DipoleDipole(in),
         wolf(in.get<double>("kappa", 1.8, "Kappa-damping"),
             in.get<double>("dipdip_cutoff",in.get<double>("cuboid_len",pc::infty)/2)) {
-                name+=" Wolf Damped";
+          name+=" Wolf";
         }
 
         template<class Tparticle>
           double operator()(const Tparticle &a, const Tparticle &b, const Point &r) const {
-                  return _lB*wolf.mu2mu(a.mu,b.mu, a.muscalar*b.muscalar, a.id-1, b.id-1, r);
+            return _lB*wolf.mu2mu(a.mu,b.mu, a.muscalar*b.muscalar, r);
           }
           
         /** @brief Dipole field at `r` due to dipole `p` 
@@ -1230,36 +1219,7 @@ namespace Faunus {
     
     
     
-          class IonQuadWolfDamped : public IonQuad {
-            private:
-              string _brief() { return "Ion-quad Wolf Damped"; }
-              WolfGaussianDamping wolf;
-            public:
-              IonQuadWolfDamped(InputMap &in) : IonQuad(in),
-              wolf(in.get<double>("kappa", 1.8, "Kappa-damping"),
-                  in.get<double>("dipdip_cutoff",in.get<double>("cuboid_len",pc::infty)/2)) {
-                name+=" Wolf Damped";
-              }
-
-              template<class Tparticle>
-                double operator()(const Tparticle &a, const Tparticle &b, const Point &r) const {
-                  return _lB*wolf.q2quad(a.charge, a.theta, b.charge, b.theta,a.id-1,b.id-1, r);
-                }
-                
-              template<class Tparticle>
-                Point field(const Tparticle &p,const Tparticle &p0, const Point &r) const {
-                  return _lB*wolf.field(p,p0,r);
-                }
     
-              string info(char w) {
-                using namespace textio;
-                std::ostringstream o;
-                o << IonQuad::info(w)
-                  << pad(SUB,w,"Cutoff") << wolf.getCutoff() << " "+angstrom << endl
-                  << pad(SUB,w,"Kappa") << wolf.getKappa() << " "+angstrom+"^-1" << endl;
-                return o.str();
-              }
-          };
     
     
     class IonQuadWolf : public IonQuad {
@@ -1292,8 +1252,7 @@ namespace Faunus {
           return o.str();
         }
     };
-          
-        }
   }
+}
 #endif
 
