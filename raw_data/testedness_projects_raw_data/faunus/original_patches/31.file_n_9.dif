diff --git a/src/playground/stenqvist/nemo.cpp b/src/playground/stenqvist/nemo.cpp
index 0002aa6c..a193df6d 100644
--- a/src/playground/stenqvist/nemo.cpp
+++ b/src/playground/stenqvist/nemo.cpp
@@ -5,13 +5,75 @@ using namespace Faunus::Move;
 using namespace Faunus::Potential;
 
 typedef Space<Geometry::Cuboid,DipoleParticle> Tspace;   // Cuboid
-typedef CombinedPairPotential<LennardJones,DipoleDipoleRF> Tpair;
+typedef CombinedPairPotential<HardSphere,DipoleDipoleWolf> Tpair;
 
-//typedef Move::PolarizeMove<AtomicTranslation<Tspace> > TmoveTran;
-//typedef Move::PolarizeMove<AtomicRotation<Tspace> > TmoveRot;
 typedef Move::AtomicTranslation<Tspace> TmoveTran;   
 typedef Move::AtomicRotation<Tspace> TmoveRot;
 
+template<class Tpairpot, class Tid>
+bool savePotential1(Tpairpot pot, Tid ida, Tid idb, string file) {
+  std::ofstream f(file.c_str());
+  if (f) {
+    double min=1.1 * (atom[ida].radius+atom[idb].radius);
+    DipoleParticle a,b;
+    a=atom[ida];
+    b=atom[idb];
+    a.mu = Point(1,0,0);
+    b.mu = Point(1,0,0);
+    /*f << "# Pair potential: " << pot.brief() << endl
+      << "# Atoms: " << atom[ida].name << "<->" << atom[idb].name
+      << endl;*/
+    for (double r=1.1; r<=4.3; r+=0.001) {
+      f << std::left << std::setw(10) << r << " "
+        << pot(a,b,Point(r,0,0)) << endl;
+    }
+    return true;
+  }
+  return false;
+}
+template<class Tpairpot, class Tid>
+bool savePotential2(Tpairpot pot, Tid ida, Tid idb, string file) {
+  std::ofstream f(file.c_str());
+  if (f) {
+    double min=1.1 * (atom[ida].radius+atom[idb].radius);
+    DipoleParticle a,b;
+    a=atom[ida];
+    b=atom[idb];
+    a.mu = Point(1,0,0);
+    b.mu = Point(0,1,0);
+    /*f << "# Pair potential: " << pot.brief() << endl
+      << "# Atoms: " << atom[ida].name << "<->" << atom[idb].name
+      << endl;*/
+    for (double r=1.1; r<=4.3; r+=0.001) {
+      f << std::left << std::setw(10) << r << " "
+        << pot(a,b,Point(r,0,0)) << endl;
+    }
+    return true;
+  }
+  return false;
+}
+template<class Tpairpot, class Tid>
+bool savePotential3(Tpairpot pot, Tid ida, Tid idb, string file) {
+  std::ofstream f(file.c_str());
+  if (f) {
+    double min=1.1 * (atom[ida].radius+atom[idb].radius);
+    DipoleParticle a,b;
+    a=atom[ida];
+    b=atom[idb];
+    a.mu = Point(1,0,0);
+    b.mu = Point(-1,0,0);
+    /*f << "# Pair potential: " << pot.brief() << endl
+      << "# Atoms: " << atom[ida].name << "<->" << atom[idb].name
+      << endl;*/
+    for (double r=1.1; r<=4.3; r+=0.001) {
+      f << std::left << std::setw(10) << r << " "
+        << pot(a,b,Point(r,0,0)) << endl;
+    }
+    return true;
+  }
+  return false;
+}
+
 int main() {
   ::atom.includefile("stockmayer.json");         // load atom properties
   InputMap in("stockmayer.input");               // open parameter file for user input
@@ -23,7 +85,7 @@ int main() {
   MCLoop loop(in);                               // class for mc loop counting
   Analysis::RadialDistribution<> rdf(0.005);       // particle-particle g(r)
   Analysis::Table2D<double,Average<double> > mucorr(0.005);       // particle-particle g(r)
-  Analysis::Table2D<double,double> mucorr_distribution(0.005);
+  Analysis::Table2D<double,double> mucorr1(0.005);
   TmoveTran trans(in,pot,spc);
   TmoveRot rot(in,pot,spc);
   trans.setGroup(sol);                                // tells move class to act on sol group
@@ -35,6 +97,13 @@ int main() {
   FormatXTC xtc(spc.geo.len.norm());
   double rc = in.get<double>("dipdip_cutoff",in.get<double>("cuboid_len",pc::infty)/2);
 
+
+  cout << "Cutoff = " << rc << " angstrom\n";
+
+  savePotential1(Tpair(in), atom["sol"].id, atom["sol"].id, "pot_dipdip1.dat");
+  savePotential2(Tpair(in), atom["sol"].id, atom["sol"].id, "pot_dipdip2.dat");
+  savePotential3(Tpair(in), atom["sol"].id, atom["sol"].id, "pot_dipdip3.dat");
+
   sys.init( Energy::systemEnergy(spc,pot,spc.p)  );   // initial energy
   while ( loop.macroCnt() ) {                         // Markov chain 
     while ( loop.microCnt() ) {
@@ -50,7 +119,7 @@ int main() {
             if(r < rc) {
               rdf(r)++;
               mucorr(r) += spc.p[i].mu.dot(spc.p[j].mu);
-              mucorr_distribution(spc.p[i].mu.dot(spc.p[j].mu)) += 1;
+              mucorr1(spc.p[i].mu.dot(spc.p[j].mu)) += 1;
             }
           }
         }
@@ -69,7 +138,7 @@ int main() {
   FormatPQR().save("confout.pqr", spc.p);
   rdf.save("gofr.dat");                               // save g(r) to disk
   mucorr.save("mucorr.dat");                               // save g(r) to disk
-  mucorr_distribution.save("mucorr_distribution.dat");
+  mucorr1.save("mucorr1.dat");
   std::cout << spc.info() + pot.info() + trans.info()
     + rot.info() + sys.info() + test.info(); // final info
   spc.save("state");
