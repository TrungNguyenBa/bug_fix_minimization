diff --git a/include/faunus/point.h b/include/faunus/point.h
index 11d840c4..4ec621da 100644
--- a/include/faunus/point.h
+++ b/include/faunus/point.h
@@ -124,8 +124,18 @@ namespace Faunus {
       return operator<<(i);
     }
 
-    /*
-     * @brief Internal rotation. No effect on isotropic particle.
+    /**
+     * @brief Transform point (rotation etc)
+     * @param rot Functor that rotates a point and returns the rotated Point
+     *
+     * The functor should take care of simulation boundaries (if any) and typically one
+     * would want to pass the Geometry::VectorRotate class as in the following example:
+     * @code
+     * Point a(1,0,0);
+     * QuaternionRotate rotator;
+     * rotator.setAxis(geometry, Point(0,0,0), Point(0,0,1), 3.14 ); // rotate pi around 0,0,1
+     * a.rotate(rotator);
+     * @endcode
      */
     template<typename Trotator>
       void rotate(const Trotator &rot) {
@@ -500,9 +509,6 @@ namespace Faunus {
       return o;
     }
 
-    /**
-     * @brief Internal rotation: dipole and polarizability
-     */
     template<typename Trotator>
       void rotate(const Trotator &rot) {
         assert(rot.getOrigin().squaredNorm()<1e-6);
@@ -570,7 +576,8 @@ namespace Faunus {
             patchsides[0] = rot(patchsides[0]);
             patchsides[1] = rot(patchsides[1]);
             chdir = rot(chdir);
-          }
+          } else
+            Point::rotate(rot);
         }
 
       /* read in same order as written! */
