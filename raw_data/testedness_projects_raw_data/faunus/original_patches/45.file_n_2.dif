diff --git a/include/faunus/analysis.h b/include/faunus/analysis.h
index b92ea4e9..2fbf03a7 100755
--- a/include/faunus/analysis.h
+++ b/include/faunus/analysis.h
@@ -156,7 +156,10 @@ namespace Faunus {
             setResolution(resolution);
           }
 
-          void clear() { map.clear(); } 
+          void clear() { 
+            map.clear(); 
+
+          }
 
           void setResolution(Tx resolution) {
             assert( resolution>0 );
@@ -538,6 +541,7 @@ namespace Faunus {
               return sample(spc,all,ida,idb);
             }
 
+
           template<class Tspace>
             void sampleMolecule(Tspace &spc, Group &sol) {
               for (int i=0; i<sol.numMolecules()-1; i++) {
@@ -1193,15 +1197,8 @@ namespace Faunus {
           }
 
         /**
-         * @brief Claussius-Mossotti analysis
-         *
-         * Calculates \f$ \epsilon_x \f$ according to \f$ \frac{\epsilon_x-1}{\epsilon_x+2} = \frac{4\pi}{3}\rho\alpha  \f$.
-         *
-         * Only valid for isotropic systems. 
-         * 
-         * More information: <http://dx.doi.org/10.1080/08927029708024131>
-         *
-         * @warning Unfinished
+         * @brief Claussius-Mossotti relationship calculates \f$ \epsilon_x \f$ according to \f$ \frac{\epsilon_x-1}{\epsilon_x+2} = \frac{4\pi}{3}\rho\alpha  \f$. Only valid for isotropic systems. 
+         * @brief DOI:10.1080/08927029708024131
          * 
          * @param p Particle vector
          * @param spc The space
@@ -1214,9 +1211,7 @@ namespace Faunus {
 
         /**
          * @brief Get the Kirkwood-factor, g_k. 
-         * More here: "Understanding Molecular Simulation", D. Frenkel, B. Smit, p.302
-         *
-         * @warning Unfinished
+         * @brief "Understanding Molecular Simulation", D. Frenkel, B. Smit, p.302
          * 
          * @param p Particle vector
          * @param spc The space
@@ -1245,8 +1240,7 @@ namespace Faunus {
         /**
          * @brief Returns dielectric constant according to
          * \f$ \frac{\epsilon_0-1}{3} = \frac{4\pi}{9Vk_BT}<\bold{M}^2> + \frac{\epsilon_x-1}{3}  \f$. Only works when \f$ \epsilon_{RF} = \infty \f$.
-         * 
-         * More info: <http://dx.doi.org:10.1080/08927029708024131>
+         * @brief DOI:10.1080/08927029708024131
          */ 
         double getDielTinfoil() {
           return (CM+pc::Ang2Bohr(M2_box.avg(),2)*vol_const_box);
