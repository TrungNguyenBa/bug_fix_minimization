diff --git a/include/faunus/energy.h b/include/faunus/energy.h
index 729c2b21..93591699 100644
--- a/include/faunus/energy.h
+++ b/include/faunus/energy.h
@@ -528,51 +528,33 @@ namespace Faunus {
       class NonbondedCutg2g : public Nonbonded<Tspace,Tpairpot> {
         protected:
           typedef Nonbonded<Tspace,Tpairpot> base;
+          typename Tspace::ParticleVector *_p, *_trial;
           double rcut2;
-
           template<class Tpvec>
             Point getMassCenter(const Tpvec &p, const Group &g) {
-              return (&p==&base::spc->p) ? g.cm : g.cm_trial;
+              assert(_p!=nullptr && _trial!=nullptr && "Did you call setSpace?");
+              assert(&p==_p || &p==_trial);
+              return (&p==_p) ? g.cm : g.cm_trial;
             };
 
-          template<class Tpvec>
-            bool cut(const Tpvec &p, const Group &g1, const Group &g2) {
-              if (g1.isMolecular())
-                if (g2.isMolecular()) {
-                  Point a = getMassCenter(p,g1);
-                  Point b = getMassCenter(p,g2);
-                  if (base::geo.sqdist(a,b)>rcut2)
-                    return true;
-                }
-              return false;
-            }
-
         public:
           NonbondedCutg2g(InputMap &in) : base(in) {
             rcut2 = pow( in.get<double>("g2g_cutoff",pc::infty), 2);
-            base::name+=" (g2g cut=" + std::to_string(sqrt(rcut2))
-              + textio::_angstrom + ")";
+            base::name+=" (g2g cut=" + std::to_string(sqrt(rcut2)) + textio::_angstrom + ")";
           }
-
-          double g2g(const typename base::Tpvec &p, Group &g1, Group &g2) FOVERRIDE {
-            return cut(p,g1,g2) ? 0 : base::g2g(p,g1,g2);
+          void setSpace(Tspace &spc) {
+            _p=&(spc.p);
+            _trial=&(spc.trial);
           }
-
-          double i2g(const typename base::Tpvec &p, Group &g, int i) FOVERRIDE {
-            auto gi=base::spc->findGroup(i);
-            return cut(p,g,*gi) ? 0 : base::i2g(p,g,i);
+          double g2g(const typename base::Tpvec &p, Group &g1, Group &g2) FOVERRIDE {
+            if (g1.isMolecular())
+              if (g2.isMolecular()) {
+                Point a = getMassCenter(p,g1);
+                Point b = getMassCenter(p,g2);
+                if (base::geo.sqdist(a,b)>rcut2)
+                  return 0;
               }
-
-          double i2all(typename base::Tpvec &p, int i) FOVERRIDE {
-            auto gi=base::spc->findGroup(i);
-            double u=base::g_internal(p,*gi);
-            for (auto gj : base::spc->groupList())
-              if (gi!=gj)
-                u+=g2g(p,*gi,*gj);
-
-            //for (auto gj : base::spc->groupList())
-            //  u+=i2g(p,*gj,i);
-            return u;
+            return base::g2g(p,g1,g2);
           }
       };
 
