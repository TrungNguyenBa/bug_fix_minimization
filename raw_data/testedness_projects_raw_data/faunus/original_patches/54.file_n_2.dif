diff --git a/include/faunus/mpi.h b/include/faunus/mpi.h
index 570296d1..bedaaddd 100644
--- a/include/faunus/mpi.h
+++ b/include/faunus/mpi.h
@@ -48,22 +48,12 @@ namespace Faunus {
         slump random;     //!< Random number generator for MPI calls
         string id;        //!< Unique name associated with current rank
         std::ofstream cout; //!< Redirect stdout to here for rank-based file output
-      
-        inline string info() {
-          std::ostringstream o;
-          o << textio::header("Message Parsing Interface (MPI)");
-          o << textio::pad(textio::SUB, 20, "Number of processors") << nproc() << endl;
-          o << textio::pad(textio::SUB, 20, "Current rank") << rank() << endl;
-          o << textio::pad(textio::SUB, 20, "Master rank") << rankMaster() << endl;
-          return o.str();
-        }
-
       private:
         int _nproc;        //!< Number of processors in communicator
         int _rank;         //!< Rank of process
         int _master;       //!< Rank number of the master
     };
-
+    
     /**
      * @brief Split N items into M parts
      * @param N number of items
@@ -74,14 +64,14 @@ namespace Faunus {
      * item for the i'th part.
      */
     template<class T=int>
-      std::pair<T,T> splitEven(MPIController &mpi, T N) {
-        T M = mpi.nproc();
-        T i = mpi.rank();
-        T beg=(N*i)/M;
-        T end=(N*i+N)/M-1;
-        return std::pair<T,T>(beg,end);
-      }
-
+    std::pair<T,T> splitEven(MPIController &mpi, T N) {
+      T M = mpi.nproc();
+      T i = mpi.rank();
+      T beg=(N*i)/M;
+      T end=(N*i+N)/M-1;
+      return std::pair<T,T>(beg,end);
+    }
+    
     /**
      * @brief Reduced sum
      *
