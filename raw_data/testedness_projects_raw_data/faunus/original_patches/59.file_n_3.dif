diff --git a/include/faunus/potentials.h b/include/faunus/potentials.h
index 45266aa2..9c4fdc18 100644
--- a/include/faunus/potentials.h
+++ b/include/faunus/potentials.h
@@ -50,11 +50,11 @@ namespace Faunus {
     class PairPotentialBase {
       private:
         virtual string _brief();
-        //void initCutoff(size_t, float);       //!< Initialize all cut-off distances to single value
-        //void setCutoff(size_t, size_t, float);//!< Specialized cut-off for a pair
+      protected:
+        Eigen::MatrixXf rcut2;                //!< Squared cut-off distance (angstrom)
+        void initCutoff(size_t, float);       //!< Initialize all cut-off distances to single value
+        void setCutoff(size_t, size_t, float);//!< Specialized cut-off for a pair
       public:  
-        typedef PairMatrix<double> Tcutoff;
-        Tcutoff rcut2;                        //!< Squared cut-off distance (angstrom^2)
         PairPotentialBase(std::string="");
         virtual ~PairPotentialBase();
         string name;       //!< Name of potential
@@ -293,7 +293,7 @@ namespace Faunus {
      * sigma and epsilon are taken from `AtomMap` via the global instance
      * `atom`. In your InputMap configuration file you would typically set the atom list file using
      * the keyword `atomlist`. Note that sigma for each atom is set to two times the radius found in
-     * `AtomMap`. Epsilon is stored internally in `kT*4`.
+     * `AtomMap`.
      *
      * For example:
      * 
@@ -368,7 +368,7 @@ namespace Faunus {
       class CosAttractMixed : public LennardJonesMixed<Tmixingrule> {
       protected:
           typedef LennardJonesMixed<Tmixingrule> base;
-          PairMatrix<double> rc2,rc,c; // matrix of sigma_ij^2 and eps_ij
+          PairMatrix<double> rcwc2,rc2,c,rc,eps; // matrix of sigma_ij^2 and eps_ij
       public:
           CosAttractMixed(InputMap &in) : base(in) {
               base::name="Cos^2 attraction (mixed)";
@@ -376,36 +376,29 @@ namespace Faunus {
               c.resize(n);
               rc.resize(n);
               rc2.resize(n);
-              /*PatchyCigarCigar.rcutPtr=new double*[n];
-              for(int i = 0; i < n; ++i) {
-                  PatchyCigarCigar.rcutPtr[i] = new double[n];
-              }*/
-              //Potential::PatchyCigarCigar.rcutPtr.resize(n);
+              rcwc2.resize(n);
+              eps.resize(n);
               for (size_t i=0; i<n; i++)
-                  for (size_t j=i; j<n; j++) {
+                  for (size_t j=0; j<n; j++) {
                       rc.set(i,j,base::mixer.mixSigma( atom.list[i].pdis, atom.list[j].pdis));
-                      base::rcut2.set(i,j,base::mixer.mixSigma( atom.list[i].pswitch, atom.list[j].pswitch));
-                      c.set(i,j, 0.5*pc::pi/base::rcut2(i,j) );
-                      base::rcut2.set(i,j, base::rcut2(i,j) + rc(i,j) );
-                      base::rcut2.set(i,j, base::rcut2(i,j) * base::rcut2(i,j) );
+                      rcwc2.set(i,j,base::mixer.mixSigma( atom.list[i].pswitch, atom.list[j].pswitch));
+                      c.set(i,j, 0.5*pc::pi/rcwc2(i,j) );
+                      rcwc2.set(i,j, rcwc2(i,j) + rc(i,j) );
+                      rcwc2.set(i,j, rcwc2(i,j) * rcwc2(i,j) );
                       rc2.set(i,j, rc(i,j)*rc(i,j) );
-                      //epsilon is set in base class LJmixed and is stored as multiplied by 4
-                      //PatchyCigarCigar.rcutPtr[i][j]=rc(i,j);
-                      //Potential::PatchyCigarCigar.rcutPtr(i,j)=rc(i,j);
+                      eps.set(i,j,base::mixer.mixEpsilon( atom.list[i].eps, atom.list[j].eps ));
+                      
                   }
           }
           
           template<class Tparticle>
           double operator()(const Tparticle &a, const Tparticle &b, double r2) const {
-              if (r2<rc2(a.id,b.id)) {
-                  //epsilon is from LJmixed stored as multiplied by 4
-                  return -0.25*base::eps(a.id,b.id);
-              }
-              if (r2>base::rcut2(a.id,b.id))
+              if (r2<rc2(a.id,b.id))
+                  return -eps(a.id,b.id);
+              if (r2>rcwc2(a.id,b.id))
                   return 0;
               double x=cos( c(a.id,b.id)*( sqrt(r2)-rc(a.id,b.id) ) );
-              //epsilon is from LJmixed stored as multiplied by 4
-              return -0.25*base::eps(a.id,b.id)*x*x;
+              return -eps(a.id,b.id)*x*x;
           }
           template<class Tparticle>
           double operator() (const Tparticle &a, const Tparticle &b, const Point &r) const {
@@ -438,7 +431,6 @@ namespace Faunus {
               return 0;
             x=x/r2;  // (s/r)^2
             x=x*x*x;// (s/r)^6
-             // cout<<"weeks: "<< eps(a.id,b.id)*(x*x - x + onefourth) <<"\n";
             return eps(a.id,b.id)*(x*x - x + onefourth);
           }
 
@@ -920,34 +912,21 @@ namespace Faunus {
           string _brief() {
             return first.brief() + " " + second.brief();
           }
-        void setCutoff() {
-          for (size_t i=0; i<atom.list.size(); i++)
-            for (size_t j=0; j<atom.list.size(); j++) {
-              if (first.rcut2(i,j) > second.rcut2(i,j))
-                PairPotentialBase::rcut2.set(i,j,first.rcut2(i,j));
-              else
-                PairPotentialBase::rcut2.set(i,j,second.rcut2(i,j));
-            }
-        }
-        
         public:
           T1 first;  //!< First pair potential of type T1
           T2 second; //!< Second pair potential of type T2
 
           CombinedPairPotential(T1 a, T2 b) : first(a), second(b) {
             name=first.name+"+"+second.name;
-            setCutoff();
           }
 
           CombinedPairPotential(InputMap &in) : first(in), second(in) {
             name=first.name+"+"+second.name;
-            setCutoff();
           }
 
           CombinedPairPotential(InputMap &in, string pfx1, string pfx2) :
             PairPotentialBase(pfx1+pfx2), first(in,pfx1), second(in,pfx2) {
               name=first.name+"+"+second.name;
-              setCutoff();
             }
 
           template<class Tparticle, class Tdist>
