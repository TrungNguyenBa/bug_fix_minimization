diff --git a/include/faunus/io.h b/include/faunus/io.h
index 281c56ac..be52c095 100644
--- a/include/faunus/io.h
+++ b/include/faunus/io.h
@@ -151,7 +151,7 @@ namespace Faunus {
    * @brief PQR format
    * @date December 2007
    *
-   * Saves particles as a PQR file. This format is very similar
+   * Saves particles as a PQR file. This format is very simular
    * to PDB but also contains charges and radii
    */
   class FormatPQR {
@@ -189,64 +189,6 @@ namespace Faunus {
          */
 
   };
-   
-    /**
-     * @brief XYZ format
-     * @date June 2013
-     *
-     * Saves particles as a XYZ file. This format has number of particles at the first line
-     * comment on second line followed by positions of all particles xyz position on each line
-     */
-    class FormatXYZ {
-    public:
-        template<class Tpvec, class Tvec=Point>
-        static bool save(const string &file, const Tpvec &p, Tvec len=Tvec(0,0,0)) {
-            char buf[100];
-            
-            std::ostringstream o;
-            sprintf(buf, "%d \n", p.size());
-            o << buf;
-            sprintf(buf, "Generated by Faunus\n");
-            o << buf;
-            for (auto &p_i : p) {
-                string name=atom[p_i.id].name;
-                sprintf(buf, "%f %f %f\n", p_i.x(), p_i.y(), p_i.z() );
-                o << buf;
-            }
-            return IO::writeFile(file, o.str());
-        }
-        
-    };
-    
-    /**
-     * @brief MXYZ format
-     * @date June 2013
-     *
-     * Saves particles as a modifiedXYZ file. This format has number of particles at the first line
-     * comment on second line, which we use to have a box information, and this is followed by positions,
-     * direction and patch direction on each line
-     */
-    class FormatMXYZ {
-    public:
-        template<class Tpvec, class Tvec=Point>
-        static bool save(const string &file, const Tpvec &p, Tvec len=Tvec(0,0,0)) {
-            char buf[100];
-            
-            std::ostringstream o;
-            sprintf(buf, "%d \n", p.size());
-            o << buf;
-            sprintf(buf, "sweep %d; box %f %f %f \n", len.x(),len.y(),len.z());
-            o << buf;
-            for (auto &p_i : p) {
-                string name=atom[p_i.id].name;
-                sprintf(buf, "%f %f %f %f %f %f %f %f %f\n",
-                        p_i.x(), p_i.y(), p_i.z(), p_i.dir.x(), p_i.dir.y(), p_i.dir.z(), p_i.patchdir.x(), p_i.patchdir.y(), p_i.patchdir.z() );
-                o << buf;
-            }
-            return IO::writeFile(file, o.str());
-        }
-        
-    };
 
   /**
    * @brief Gromacs GRO format
