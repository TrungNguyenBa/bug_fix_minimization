diff --git a/include/faunus/spherocylinder.h b/include/faunus/spherocylinder.h
index 471c796b..c68a7014 100644
--- a/include/faunus/spherocylinder.h
+++ b/include/faunus/spherocylinder.h
@@ -8,29 +8,25 @@ namespace Faunus {
 
   namespace Geometry {
 
-      /**
-       * @brief Calculate perpendicular projection of the first vector versus the second vector
-       *
-       * Calculate projection of a vector to a plane define by second vector (normal of a plan)
-       * \param a the first vector
-       * \param b the second vector
-       */
-      template<class Tpoint1, class Tpoint2>
-      Point vec_perpproject(const Tpoint1 &a, const Tpoint2 &b) {
-          return a-b*a.dot(b);
-      }
-  
-      /**
-       * @brief Initialize vectors and propertise of patchy spherocylinder - run at start and after patch changes
-       *
-       * Calculates cosine of angles, patch direction including chirality
-       * and vector corresponding to sides of patch that are used in
-       * calculations of interactions. 
-       * This function shall be run at the beginning of calculations and after changes of patch properties.
-       * It shall be also after a lot of move to remove accumulated comouptation errors
-       * \param geo geometry
-       * \param target patchy spherocylinder
-       */
+    /**
+     * @brief Calculate minimum distance between two line segments
+     *
+     * Find closest distance between line segments and return its vector
+     * gets orientations and lengths of line segments and the vector connecting
+     * their center os masses (from vec1 to vec2)
+     * Copyright 2001, softSurfer (www.softsurfer.com)
+     * This code may be freely used and modified for any purpose
+     * providing that this copyright notice is included with it.
+     * SoftSurfer makes no warranty for this code, and cannot be held
+     * liable for any real or imagined damage resulting from its use.
+     * Users of this code must verify correctness for their application.
+     *
+     * \param dir1 Direction of first segment
+     * \param halfl1 Half length of first segment
+     * \param dir2 Direction of second segment
+     * \param halfl2 Half length of second segment
+     * \param r_cm Distance vector between the middle of the two segments
+     */
     template<class Tgeometry>
       int cigar_initialize(Tgeometry &geo, CigarParticle &target)
       {
@@ -48,15 +44,8 @@ namespace Faunus {
           Point vec;
           Geometry::QuaternionRotate rot;
           
-          if ( target.halfl < 1e-6 ) return 0;
-          target.pcangl = cos(target.patchangle/360*pc::pi);
-          target.pcanglsw = cos((0.5*target.patchangle + atom[target.id].panglsw)/180*pc::pi);
-          
-          assert( target.dir.squaredNorm() < 1e-6 && "Direction vector of patchy spherocylinder has zero size.");
           target.dir.normalize();
-          assert( target.patchdir.squaredNorm() < 1e-6 && "Patch direction vector of patchy spherocylinder has zero size.");
           target.patchdir=vec_perpproject(target.patchdir,target.dir);
-          target.patchdir.normalize();
           /*calculate patch sides*/
           if ( atom[target.id].chiral_angle < 1e-6 ){
               vec = target.dir;
@@ -70,38 +59,17 @@ namespace Faunus {
           //target.patchsides[0] = target.patchdir;
           //quatrot=quat_create(target.dir, target.pcoshalfi, target.psinhalfi);
           //vec_rotate(&(target.patchsides[0]),quatrot);
-          target.patchsides[0] = target.patchdir;
+          target.patchsides[0] = patchdir;
           rot.setAxis(geo, Point(0,0,0), vec, 0.5*atom[target.id].pangl);
           target.patchsides[0].rotate(rot);
-          target.patchsides[0].normalize();
           /*second side*/
-          target.patchsides[1] = target.patchdir;
+          target.patchsides[1] = patchdir;
           rot.setAxis(geo, Point(0,0,0), vec, -0.5*atom[target.id].pangl);
           target.patchsides[1].rotate(rot);
-          target.patchsides[0].normalize();
           return 0;
-          assert( target.patchsides[0].squaredNorm() < 1e-6 && "Vector associated with patch side has zero size. Patchy spherocylinder were probably not initialized.");
+         
       }
       
-    /**
-     * @brief Calculate minimum distance between two line segments
-     *
-     * Find closest distance between line segments and return its vector
-     * gets orientations and lengths of line segments and the vector connecting
-     * their center os masses (from vec1 to vec2)
-     * Copyright 2001, softSurfer (www.softsurfer.com)
-     * This code may be freely used and modified for any purpose
-     * providing that this copyright notice is included with it.
-     * SoftSurfer makes no warranty for this code, and cannot be held
-     * liable for any real or imagined damage resulting from its use.
-     * Users of this code must verify correctness for their application.
-     *
-     * \param dir1 Direction of first segment
-     * \param halfl1 Half length of first segment
-     * \param dir2 Direction of second segment
-     * \param halfl2 Half length of second segment
-     * \param r_cm Distance vector between the middle of the two segments
-     */      
     template<class T=double>
       Point mindist_segment2segment(const Point &dir1, T halfl1,
           const Point &dir2, T halfl2, const Point &r_cm)
@@ -205,6 +173,11 @@ namespace Faunus {
         return -r_cm + (dir*d);
       }
 
+    template<class Tpoint1, class Tpoint2>
+      Point vec_perpproject(const Tpoint1 &a, const Tpoint2 &b) {
+        return a-b*a.dot(b);
+      }
+
     /**
      * Finds intersections of spherocylinder and plane defined by vector
      * "w_vec" and if they are in all-way patch then returns number of them (PSC)
@@ -801,7 +774,6 @@ namespace Faunus {
                 double intersections[5];
                 Point vec1, vec2, vec_intrs, vec_mindist;
 
-                intrs=0;
                 for(i=0;i<5;i++)
                   intersections[i]=0;
                 //1- do intersections of spherocylinder2 with patch of spherocylinder1 at.
@@ -935,29 +907,17 @@ namespace Faunus {
               // a sphere - b cigar
               else {
                 //PatchyCigarSphere(b,a)
-                assert( b.dir.squaredNorm() < 1e-6 && "Direction vector of patchy spherocylinder has zero size.");
-                assert( b.patchdir.squaredNorm() < 1e-6 && "Patch direction vector of patchy spherocylinder has zero size.");
-                assert( b.patchsides[0].squaredNorm() < 1e-6 && "Vector associated with patch side has zero size. Patchy spherocylinder were probably not initialized.");
                 return pairpot_cs(b,a,r_cm);
               }
             } else {
               // a cigar - b sphere
               if (b.halfl<1e-6) {
                 //PatchyCigarSphere(a,b)
-                assert( a.dir.squaredNorm() < 1e-6 && "Direction vector of patchy spherocylinder has zero size.");
-                assert( a.patchdir.squaredNorm() < 1e-6 && "Patch direction vector of patchy spherocylinder has zero size.");
-                assert( a.patchsides[0].squaredNorm() < 1e-6 && "Vector associated with patch side has zero size. Patchy spherocylinder were probably not initialized.");
                 return pairpot_cs(a,b,r_cm);
               }
               // a cigar - b cigar
               else {
                 //PatchyCigarCigar
-                assert( a.dir.squaredNorm() < 1e-6 && "Direction vector of patchy spherocylinder has zero size.");
-                assert( b.dir.squaredNorm() < 1e-6 && "Direction vector of patchy spherocylinder has zero size.");
-                assert( a.patchdir.squaredNorm() < 1e-6 && "Patch direction vector of patchy spherocylinder has zero size.");
-                assert( b.patchdir.squaredNorm() < 1e-6 && "Patch direction vector of patchy spherocylinder has zero size.");
-                assert( a.patchsides[0].squaredNorm() < 1e-6 && "Vector associated with patch side has zero size. Patchy spherocylinder were probably not initialized.");
-                assert( b.patchsides[0].squaredNorm() < 1e-6 && "Vector associated with patch side has zero size. Patchy spherocylinder were probably not initialized.");
                 return pairpot_cc(a,b,r_cm);
               }
             }
