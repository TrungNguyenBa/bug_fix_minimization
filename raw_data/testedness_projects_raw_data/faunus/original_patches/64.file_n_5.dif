diff --git a/include/faunus/potentials.h b/include/faunus/potentials.h
index 6699f8be..a9cce81b 100644
--- a/include/faunus/potentials.h
+++ b/include/faunus/potentials.h
@@ -62,17 +62,8 @@ namespace Faunus {
         string brief();    //!< Brief, one-lined information string
         virtual void setTemperature(double); //!< Set temperature [K]
 
-        /**
-         * @brief Particle-particle force in units of \c kT/AA
-         * @param a First particle
-         * @param b Second particle
-         * @param r2 Squared distance between them (angstrom squared)
-         * @param p Vector from: p=b-a
-         */
-        template<typename Tparticle>
-          Point force(const Tparticle &a, const Tparticle &b, double r2, const Point &p) {
-            return Point(0,0,0);
-          }
+        /** @brief Particle-particle force in units of \c kT/Ã… */
+        virtual Point force(const particle&, const particle&, double, const Point&);
 
         /** @brief Electric field at spatial position */
         template<typename Tparticle>
@@ -190,31 +181,31 @@ namespace Faunus {
             return (r2>r02) ? pc::infty : -0.5*k*r02*std::log(1-r2*r02inv);
           }
     };
-
+    
     /**
      * @brief Hertz pair potential
      */
     class Hertz : public PairPotentialBase {
-      private:
-        double E;
-        string _brief();
-      public:
-        Hertz(InputMap&, string="hertz");
-        template<class Tparticle>
-          double operator()(const Tparticle &a, const Tparticle &b, double r2) {
-            double m = a.radius+b.radius;
-            double diameter = 2.*a.radius;
-            if(r2 <= m*m) {
-              return E*pow((1-(sqrt(r2)/diameter)),(5./2.));
-            }
-            return 0;
-          }
-        template<class Tparticle>
-          double operator()(const Tparticle &a, const Tparticle &b,const Point &r2) {
-            return operator()(a,b, r2.squaredNorm());
-
-          }
-        string info(char); 
+    private:
+      double E;
+      string _brief();
+    public:
+      Hertz(InputMap&, string="hertz");
+      template<class Tparticle>
+      double operator()(const Tparticle &a, const Tparticle &b, double r2) {
+        double m = a.radius+b.radius;
+        double diameter = 2.*a.radius;
+        if(r2 <= m*m) {
+          return E*pow((1-(sqrt(r2)/diameter)),(5./2.));
+        }
+        return 0;
+      }
+      template<class Tparticle>
+      double operator()(const Tparticle &a, const Tparticle &b,const Point &r2) {
+        return operator()(a,b, r2.squaredNorm());
+        
+      }
+      string info(char); 
     };
 
 
@@ -550,8 +541,8 @@ namespace Faunus {
             double x=r6(sigma,r2)*0.5;
             return eps*(x*x - x + 0.25);
           }
-        template<class Tparticle>
-          Point force(const Tparticle &a, const Tparticle &b, double r2, const Point &p) {
+        template<class T>
+          Point force(const T &a, const T &b, double r2, const Point &p) {
             double sigma = a.radius+b.radius;
             if (r2 > sigma*sigma)
               return Point(0,0,0);
@@ -575,7 +566,7 @@ namespace Faunus {
       //friend class Energy::GouyChapman;
       private:
       string _brief();
-
+ 
       double epsilon_r;
       protected:
       double depsdt;      //!< \f$ T\partial \epsilon_r / \epsilon_r \partial T = -1.37 \f$
@@ -687,62 +678,62 @@ namespace Faunus {
             if (qq>1e-6)
               return -c * qq / (r2*r2) * (a.radius*a.radius*a.radius);
             return 0;
-          }
+	}
         string info(char);
     };
 
 
     class YukawaGel : public Coulomb {
-      private:
-        string _brief();
-        double Z, nc,ns, v, k, Z2e2overER,d,kd,k2d2,ekd, braket7;
-
-      public:
-
-        YukawaGel(InputMap&);
-        template<class Tparticle>
-          double operator()(const Tparticle &a, const Tparticle &b, double r2) {
-            double m = a.radius+b.radius;
-            double r = sqrt(r2);
-            double kr = k*r;
-
-
-            double ekr=exp(-kr);
-
-            if(r2 <= m*m) {
-              double roverd = r/d;
-
-              double ekdsinhkr = ekd*sinh(kr);
-
-              double A = (2./d)*Z2e2overER;
-
-              double braket = (6./5.)-(2.*pow(roverd,2))+((3./2.)*pow(roverd,3))-((1./5.)*pow(roverd,5));
-
-              double B = (72./((k2d2*k2d2)*r))*Z2e2overER;
-
-              double braket2 = (((1.-ekr+(0.5*kr*kr)+((1./24.)*pow(kr,4)))*(1.-(4./k2d2)))+((4.*ekdsinhkr)/kd));
-
-              double braket3 = ( ekdsinhkr + (k*k*d*r) + ( ((k*k*k*k)/6.) * ((d*d*d*r)+(r*r*r*d)) ) )* (1.+(4./k2d2));
-
-              double braket4 = ((4.*r)/d)*(1.+(0.5*k2d2)+((1./30.)*(k2d2*k2d2)));
-              double braket5 = ((8.*r*r*r)/(3.*d*d*d))*((k2d2/4.)+((k2d2*k2d2)/12.));
-              double braket6 = (((1./180.)*((k*k*k*k)/(d*d)))*(r*r*r*r*r*r));
-
-              double pot = (A*braket)-(B*(braket2+braket3-braket4-braket5-braket6));
-              return pot;
-            }
-            else{
-
-              double pot2 = ((144./(k2d2*k2d2))*(Z2e2overER)*(braket7*braket7)*(ekr/r));
-
-              return pot2;
-            }
-          }
-        template<class Tparticle>
-          double operator() (const Tparticle &a, const Tparticle &b, const Point &r) {
-            return operator()(a,b,r.squaredNorm());
-          }
-        string info(char); 
+    private:
+      string _brief();
+      double Z, nc,ns, v, k, Z2e2overER,d,kd,k2d2,ekd, braket7;
+      
+    public:
+      
+      YukawaGel(InputMap&);
+      template<class Tparticle>
+      double operator()(const Tparticle &a, const Tparticle &b, double r2) {
+        double m = a.radius+b.radius;
+        double r = sqrt(r2);
+        double kr = k*r;
+        
+        
+        double ekr=exp(-kr);
+        
+        if(r2 <= m*m) {
+          double roverd = r/d;
+          
+          double ekdsinhkr = ekd*sinh(kr);
+          
+          double A = (2./d)*Z2e2overER;
+          
+          double braket = (6./5.)-(2.*pow(roverd,2))+((3./2.)*pow(roverd,3))-((1./5.)*pow(roverd,5));
+          
+          double B = (72./((k2d2*k2d2)*r))*Z2e2overER;
+          
+          double braket2 = (((1.-ekr+(0.5*kr*kr)+((1./24.)*pow(kr,4)))*(1.-(4./k2d2)))+((4.*ekdsinhkr)/kd));
+          
+          double braket3 = ( ekdsinhkr + (k*k*d*r) + ( ((k*k*k*k)/6.) * ((d*d*d*r)+(r*r*r*d)) ) )* (1.+(4./k2d2));
+          
+          double braket4 = ((4.*r)/d)*(1.+(0.5*k2d2)+((1./30.)*(k2d2*k2d2)));
+          double braket5 = ((8.*r*r*r)/(3.*d*d*d))*((k2d2/4.)+((k2d2*k2d2)/12.));
+          double braket6 = (((1./180.)*((k*k*k*k)/(d*d)))*(r*r*r*r*r*r));
+          
+          double pot = (A*braket)-(B*(braket2+braket3-braket4-braket5-braket6));
+          return pot;
+        }
+        else{
+          
+          double pot2 = ((144./(k2d2*k2d2))*(Z2e2overER)*(braket7*braket7)*(ekr/r));
+          
+          return pot2;
+        }
+      }
+      template<class Tparticle>
+      double operator() (const Tparticle &a, const Tparticle &b, const Point &r) {
+        return operator()(a,b,r.squaredNorm());
+      }
+      string info(char); 
     };
 
     /**
@@ -847,8 +838,8 @@ namespace Faunus {
             return Tdefault::info(w) + _info;
           }
       };
-
-
+    
+    
 
     /**
      * @brief Combines two pair potentials
