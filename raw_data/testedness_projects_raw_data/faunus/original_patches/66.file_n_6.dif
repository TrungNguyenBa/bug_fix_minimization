diff --git a/src/examples/stockmayer.cpp b/src/examples/stockmayer.cpp
index d2444d95..c056a962 100644
--- a/src/examples/stockmayer.cpp
+++ b/src/examples/stockmayer.cpp
@@ -4,24 +4,23 @@ using namespace Faunus;                          // use Faunus namespace
 using namespace Faunus::Move;
 using namespace Faunus::Potential;
 
-typedef Space<Geometry::Cuboid,DipoleParticle> Tspace;
-
 #ifdef POLARIZE
-typedef Move::PolarizeMove<AtomicTranslation<Tspace> > TmoveTran;
-typedef Move::PolarizeMove<AtomicRotation<Tspace> > TmoveRot;
+typedef Move::PolarizeMove<AtomicTranslation> TmoveTran;
+typedef Move::PolarizeMove<AtomicRotation> TmoveRot;
 #else
-typedef Move::AtomicTranslation<Tspace> TmoveTran;   
-typedef Move::AtomicRotation<Tspace> TmoveRot;
+typedef Move::AtomicTranslation TmoveTran;   
+typedef Move::AtomicRotation TmoveRot;
 #endif
 
+typedef Geometry::Cuboid Tgeo;                   // select simulation geometry and pair potential
 typedef CombinedPairPotential<LennardJones,DipoleDipole> Tpair;
 
 int main() {
   ::atom.includefile("stockmayer.json");         // load atom properties
   InputMap in("stockmayer.input");               // open parameter file for user input
-  Energy::NonbondedVector<Tspace,Tpair> pot(in); // non-bonded only
+  Energy::NonbondedVector<Tpair,Tgeo> pot(in);   // create Hamiltonian, non-bonded only
   EnergyDrift sys;                               // class for tracking system energy drifts
-  Tspace spc(in);                // create simulation space, particles etc.
+  Space spc( pot.getGeometry() );                // create simulation space, particles etc.
   Group sol;
   sol.addParticles(spc, in);                     // group for particles
   MCLoop loop(in);                               // class for mc loop counting
@@ -34,21 +33,20 @@ int main() {
   spc.load("state_ST");
   spc.p = spc.trial;
   
-  sys.init( Energy::systemEnergy(spc,pot,spc.p)  );   // initial energy
+  sys.init( Energy::systemEnergy(spc,pot,spc.p)  );      // store initial total system energy
   while ( loop.macroCnt() ) {                         // Markov chain 
     while ( loop.microCnt() ) {
       if (slp_global() > 0.5)
-        sys+=trans.move( sol.size() );                // translate
+        sys+=trans.move( sol.size() );                     // translate
       else
-        sys+=rot.move( sol.size() );                  // rotate
+        sys+=rot.move( sol.size() );                       // rotate
 
       if (slp_global()<0.5)
-        for (auto i=sol.front(); i<sol.back(); i++) { // salt rdf
+        for (auto i=sol.front(); i<sol.back(); i++) { // salt radial distribution function
           for (auto j=i+1; j<=sol.back(); j++) {
-            double r =spc.geo.dist(spc.p[i],spc.p[j]); 
+            double r =pot.geometry.dist(spc.p[i],spc.p[j]); 
             rdf(r)++;
-            mucorr(r) += spc.p[i].mu.dot(spc.p[j].mu)
-              / (spc.p[i].muscalar*spc.p[j].muscalar);
+            mucorr(r) += spc.p[i].mu.dot(spc.p[j].mu)/(spc.p[i].muscalar*spc.p[j].muscalar);
           }
         }
     }    
@@ -60,7 +58,6 @@ int main() {
   FormatPQR().save("confout.pqr", spc.p);
   rdf.save("gofr.dat");                               // save g(r) to disk
   mucorr.save("mucorr.dat");                               // save g(r) to disk
-  std::cout << spc.info() + pot.info() + trans.info()
-    + rot.info() + sys.info(); // final info
+  std::cout << spc.info() + pot.info() + trans.info() + rot.info() + sys.info(); // final info
   spc.save("state_ST");
 }
