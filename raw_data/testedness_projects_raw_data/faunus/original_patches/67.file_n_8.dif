diff --git a/src/examples/stockmayer.cpp b/src/examples/stockmayer.cpp
index c056a962..9c6fade0 100644
--- a/src/examples/stockmayer.cpp
+++ b/src/examples/stockmayer.cpp
@@ -4,16 +4,15 @@ using namespace Faunus;                          // use Faunus namespace
 using namespace Faunus::Move;
 using namespace Faunus::Potential;
 
-#ifdef POLARIZE
-typedef Move::PolarizeMove<AtomicTranslation> TmoveTran;
-typedef Move::PolarizeMove<AtomicRotation> TmoveRot;
-#else
-typedef Move::AtomicTranslation TmoveTran;   
-typedef Move::AtomicRotation TmoveRot;
-#endif
-
 typedef Geometry::Cuboid Tgeo;                   // select simulation geometry and pair potential
-typedef CombinedPairPotential<LennardJones,DipoleDipole> Tpair;
+//typedef DipoleDipole Tpair;
+//typedef CombinedPairPotential<CoulombHS,DipoleDipole> Tpair;
+typedef CombinedPairPotential<HardSphere,IonQuad> Tpair;
+//typedef CoulombLJ Tpair;
+//typedef DipoleDipoleRF Tpair;
+
+
+
 
 int main() {
   ::atom.includefile("stockmayer.json");         // load atom properties
@@ -21,16 +20,20 @@ int main() {
   Energy::NonbondedVector<Tpair,Tgeo> pot(in);   // create Hamiltonian, non-bonded only
   EnergyDrift sys;                               // class for tracking system energy drifts
   Space spc( pot.getGeometry() );                // create simulation space, particles etc.
-  Group sol;
-  sol.addParticles(spc, in);                     // group for particles
+  GroupAtomic sol(spc, in);                      // group for particles
   MCLoop loop(in);                               // class for mc loop counting
-  Analysis::RadialDistribution<> rdf(0.1);       // particle-particle g(r)
+  Analysis::RadialDistribution<> rdf(0.2);       // particle-particle g(r)
   Analysis::Table2D<double,Average<double> > mucorr(0.2);       // particle-particle g(r)
-  TmoveTran trans(in,pot,spc);
-  TmoveRot rot(in,pot,spc);
+  Move::AtomicTranslation trans(in, pot, spc);   // particle move class
+  Move::AtomicRotation rot(in, pot, spc);        // particle move class
+  //PolarizeMove<AtomicTranslation> trans(in,pot,spc);
+  //PolarizeMove<AtomicRotation> rot(in,pot,spc);
   trans.setGroup(sol);                                // tells move class to act on sol group
   rot.setGroup(sol);                                  // tells move class to act on sol group
-  spc.load("state_ST");
+  //spc.load("state_ST");
+  //Analysis::getDielConst cdc(in.get<double>("dipdip_cutoff",pc::infty));   // 
+  
+
   spc.p = spc.trial;
   
   sys.init( Energy::systemEnergy(spc,pot,spc.p)  );      // store initial total system energy
@@ -41,6 +44,8 @@ int main() {
       else
         sys+=rot.move( sol.size() );                       // rotate
 
+      //cdc.sample(spc.p,*spc.geo);
+      
       if (slp_global()<0.5)
         for (auto i=sol.front(); i<sol.back(); i++) { // salt radial distribution function
           for (auto j=i+1; j<=sol.back(); j++) {
@@ -51,9 +56,11 @@ int main() {
         }
     }    
     
+    //cout << cdc.info();
     sys.checkDrift(Energy::systemEnergy(spc,pot,spc.p)); // compare energy sum with current
     cout << loop.timing();
   }
+  //std::cout << " Mu_1: " << spc.p[0].mu.transpose()*spc.p[0].muscalar << " eÅ\n Mu_2: " << spc.p[1].mu.transpose()*spc.p[1].muscalar << " eÅ \n";
 
   FormatPQR().save("confout.pqr", spc.p);
   rdf.save("gofr.dat");                               // save g(r) to disk
