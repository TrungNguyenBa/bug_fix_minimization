diff --git a/src/examples/penalty.cpp b/src/examples/penalty.cpp
index e45f5d35..668bd8be 100644
--- a/src/examples/penalty.cpp
+++ b/src/examples/penalty.cpp
@@ -87,7 +87,7 @@ int main() {
   the penalty function method, demonstrating how the penalty function 
   (at the bottom right) yields flat distribution functions in rough energy landscapes.
 
-  ![Particle distribution functions and penalty function in an 2D oscillating field](penalty.png)
+  ![Particle distribution functions in an 2D oscillating field](penalty.png)
 
   To run this example, make sure faunus is compiled with MPI enabled:
 
@@ -98,13 +98,6 @@ int main() {
   $ ./penalty.run mpirun
   ~~~
 
-  A gnuplot script to generate the plots of the probability distributions and 
-  penalty function is provided:
-  
-  ~~~
-  $ gnuplot penalty.gnu
-  ~~~
-
   The penalty function routine in Faunus is general and implemented in
   MPI using a master-slave scheme. Each system has its own rank and random seed.
   Samplings of the configurational space from all processes are merged by 
@@ -116,8 +109,8 @@ int main() {
   loop_microsteps         250000    # number of moves between printing histograms
   penalty_update          500000    # number of moves between updates
   penalty_size            20000     # must be >= max number of points in the histogram (i.e. 41x41=1681)
-  penalty_bw1             0.1       # bin width of 1st coordinate
-  penalty_bw2             0.1       # bin width of 2nd coordinate
+  penalty_res1            0.1       # bin width of 1st coordinate
+  penalty_res2            0.1       # bin width of 2nd coordinate
   penalty_lo1             -2.0      # lower limit of 1st coordinate
   penalty_hi1             2.0       # upper limit of 1st coordinate
   penalty_lo2             -2.0      # lower limit of 2nd coordinate
