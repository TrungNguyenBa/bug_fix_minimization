diff --git a/include/faunus/analysis.h b/include/faunus/analysis.h
index d7a144dc..6c748830 100755
--- a/include/faunus/analysis.h
+++ b/include/faunus/analysis.h
@@ -338,16 +338,14 @@ namespace Faunus {
             static_assert( std::is_integral<Ty>::value, "Histogram must be of integral type");
             static_assert( std::is_unsigned<Ty>::value, "Histogram must be unsigned");
            }
-
-          /**
-           * @brief Sample radial distibution of two atom types
-           * @param spc Simulation space
-           * @param g Group to search
-           * @param ida Atom id of first particle
-           * @param idb Atom id of second particle
+          /*!
+           * \brief Sample radial distibution of two atom types
+           * \param spc Simulation space
+           * \param g Group to search
+           * \param ida Atom id of first particle
+           * \param idb Atom id of second particle
            */
-          template<class Tspace, class Tgroup>
-            void sample(Tspace &spc, Tgroup &g, short ida, short idb) {
+          void sample(Space &spc, Group &g, short ida, short idb) {
             for (auto i=g.begin(); i!=g.end()-1; i++)
               for (auto j=i+1; j!=g.end(); j++)
                 if ( (spc.p[*i].id==ida && spc.p[*j].id==idb) || (spc.p[*i].id==idb && spc.p[*j].id==ida) ) {
@@ -503,62 +505,14 @@ namespace Faunus {
     class PolymerShape : public AnalysisBase {
       private:
         std::map< string, Average<double> > Rg2, Rg, Re2, Rs, Rs2, Rg2x, Rg2y, Rg2z;
+        double gyrationRadiusSquared(const Group&, const Space &);
+        Point vectorEnd2end(const Group&, const Space &);
         void _test(UnitTest&);
         string _info();
-        template<class Tgroup, class Tspace>
-          double gyrationRadiusSquared(const Tgroup &pol, const Tspace &spc) {
-            assert( spc.geo->dist(pol.cm, pol.massCenter(spc))<1e-9
-                && "Mass center must be in sync.");
-            Point rg2=vectorgyrationRadiusSquared(pol,spc);
-            return rg2.x()+rg2.y()+rg2.z();
-          }
-
-        template<class Tgroup, class Tspace>
-          Point vectorEnd2end(const Tgroup &pol, const Tspace &spc) {
-            return spc.geo->vdist( spc.p[pol.front()], spc.p[pol.back()] );
-          }
-
-        template<class Tgroup, class Tspace>
-          Point vectorgyrationRadiusSquared(const Tgroup &pol, const Tspace &spc) {
-            assert( spc.geo->dist(pol.cm, pol.massCenter(spc))<1e-9
-                && "Mass center must be in sync.");
-            double sum=0;
-            Point t, r2(0,0,0);
-            for (auto i : pol) {
-              t = spc.p[i]-pol.cm;                // vector to center of mass
-              spc.geo->boundary(t);               // periodic boundary (if any)
-              r2.x() += spc.p[i].mw * t.x() * t.x();
-              r2.y() += spc.p[i].mw * t.y() * t.y();
-              r2.z() += spc.p[i].mw * t.z() * t.z();
-              sum += spc.p[i].mw;                 // total mass
-            }
-            assert(sum>0 && "Zero molecular weight not allowed.");
-            return r2*(1./sum);
-          }
-
       public:
         PolymerShape();
-
-        /** @brief Sample properties of Group (identified by group name) */
-        template<class Tgroup, class Tspace>
-          void sample(const Tgroup &pol, const Tspace &spc) {
-            if (!run() || pol.front()==pol.back())
-              return;
-            Point r2 = vectorgyrationRadiusSquared(pol,spc);
-            double rg2 = r2.x()+r2.y()+r2.z(); 
-            double re2 = spc.geo->sqdist( spc.p[pol.front()], spc.p[pol.back()] );
-            Rg2[pol.name]  += rg2;
-            Rg2x[pol.name] += r2.x();
-            Rg2y[pol.name] += r2.y();
-            Rg2z[pol.name] += r2.z();
-            Rg[pol.name]   += sqrt(r2.x()+r2.y()+r2.z());
-            Re2[pol.name]  += re2; //end-2-end squared
-            double rs = Re2[pol.name].avg()/Rg2[pol.name].avg(); // fluctuations in shape factor
-            Rs[pol.name]   += rs;
-            Rs2[pol.name]  += rs*rs;
-            //Point re = vectorEnd2end(pol,spc);
-            //Re2[pol.name] += pow(re.len(), 2);
-          }
+        Point vectorgyrationRadiusSquared(const Group&, const Space &);
+        void sample(const Group&, const Space&); //!< Sample properties of Group (identified by group name)
     };
 
     /**
@@ -578,56 +532,19 @@ namespace Faunus {
     class ChargeMultipole : public AnalysisBase {
       private:
         std::map< string, Average<double> > Z, Z2, mu, mu2;
-
-        /**
-         * @param g Group to calculate charge for
-         * @param spc Space
-         */
-        template<class Tgroup, class Tpvec>
-          double charge(const Tgroup &g, const Tpvec &p, double Z=0) {
-            for (auto i : g)
-              if (!exclude(p[i]))
-                Z+=p[i].charge;
-            return Z;
-          }
-
-        template<class Tgroup, class Tspace>
-          double dipole(const Tgroup &g, const Tspace &spc) {
-            assert( spc.geo->dist(g.cm, g.massCenter(spc))<1e-9
-                && "Mass center must be in sync.");
-            Point t, mu(0,0,0);
-            for (auto i : g)
-              if (exclude(spc.p[i])==false) {
-                t = spc.p[i]-g.cm;                // vector to center of mass
-                spc.geo->boundary(t);               // periodic boundary (if any)
-                mu+=spc.p[i].charge*t;
-              }
-            return mu.len();
-          }
-
+        double charge(const Group&, const Space&);
+        double dipole(const Group&, const Space&);
         virtual bool exclude(const particle&);  //!< Determines particle should be excluded from analysis
         string _info();
       public:
         ChargeMultipole();
-
-        /** @brief Sample properties of Group (identified by group name) */
-        template<class Tgroup, class Tspace>
-          void sample(const Tgroup &g, const Tspace &spc) {
-            assert(!g.name.empty() && "All Groups should have a name!");
-            if (run()) {
-              double z=charge(g, spc.p);
-              Z[g.name]+=z;
-              Z2[g.name]+=pow(z,2);
-              double dip=dipole(g,spc);
-              mu[g.name]+=dip;
-              mu2[g.name]+=pow(dip,2);
-            }
-          }
+        void sample(const Group&, const Space&); //!< Sample properties of Group (identified by group name)
 
         /* @brief Sample properties of Group (identified by group name) */
-        template<typename Tgroup, typename Tspace>
-          void sample(const std::vector<Tgroup> &gvec, const Tspace &spc) {
-            if (run())
+        template<typename Tgroup>
+          void sample(const std::vector<Tgroup> &gvec, const Space &spc) {
+            if (!run())
+              return;
             for (auto &g : gvec)
               sample(g, spc);
           }
@@ -635,6 +552,15 @@ namespace Faunus {
         std::set<string> exclusionlist; //!< Atom names listed here will be excluded from the analysis.
     };
 
+    /*
+       class VectorAlignment : public AnalysisBase {
+       private:
+       virtual Point convert(const Group&, const Space&); // Returns points calculated from group properties
+       public:
+       void sample(const Group&, const Group&, const Space&);
+       };
+       */
+
     /**
      * @brief Widom method for excess chemical potentials
      *
