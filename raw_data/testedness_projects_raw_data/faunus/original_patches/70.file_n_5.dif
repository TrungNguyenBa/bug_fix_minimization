diff --git a/include/faunus/group.h b/include/faunus/group.h
index 5a353833..4ca292a6 100644
--- a/include/faunus/group.h
+++ b/include/faunus/group.h
@@ -5,8 +5,6 @@
 #include <faunus/common.h>
 #include <faunus/geometry.h>
 #include <faunus/range.h>
-#include <faunus/species.h>
-#include <faunus/inputfile.h>
 #endif
 
 namespace Faunus {
@@ -18,16 +16,7 @@ namespace Faunus {
    */
   class Group : public Range {
     private:
-      /**
-       * @warning Intra-molecular distances must not exceed half
-       *          the box size for cubouid geometry.
-       *    @todo Implement assertion to catch failure when molecule
-       *          is bigger than half the box size.
-       */
-      template<class Tspace>
-        Point _massCenter(const Tspace &spc) const {
-          return Geometry::massCenter(*spc.geo, spc.p, *this);
-        }
+      virtual Point _massCenter(const Space&) const;
     protected:
       virtual std::ostream& write(std::ostream &) const; //!< Write all Group data to stream
       virtual string _info();
@@ -39,94 +28,23 @@ namespace Faunus {
       Point cm_trial;                         //!< mass center vector for trial position
       Point cm;                               //!< mass center vector
       int random() const;                     //!< Pick random particle index in Group
+      double charge(const p_vec&) const;      //!< Calculates total charge
+      Point massCenter(const Space&) const;   //!< Calculates mass center - does not touch group!
+      Point setMassCenter(const Space &);     //!< Calculate AND set mass center (cm and cm_trial)
+      Point dipolemoment(const Space&) const; //!< Calculates dipole moment
 
-      /** @brief Total charge */
-      template<class Tpvec>
-        double charge(const Tpvec &p, double Z=0) const {
-          for (auto i : *this) Z+=p[i].charge;
-          return Z;
-        }
-
-      /** @brief Calculates mass center - does not touch group! */
-      template<class Tspace>
-        Point massCenter(const Tspace &spc) const {
-          assert(&spc!=nullptr);
-          return _massCenter(spc);
-        }
-
-      /** @brief Calculate AND set mass center (cm and cm_trial) */
-      template<class Tspace>
-        Point setMassCenter(const Tspace &spc) {
-          cm=massCenter(spc);
-          cm_trial=cm;
-          return cm;
-        }
-
-      /** @brief Calculates electric dipole moment */
-      template<class Tspace>
-        Point dipolemoment(const Tspace &s, Point mu=Point(0,0,0)) const {
-          for (auto i : *this) {
-            Point t=s.p[i] - cm;
-            s.geo->boundary(t);
-            mu += t*s.p[i].charge;
-          }
-          return mu;
-        }
-
-      /**
-       * @brief Translate along a vector
-       * @param spc Simulation Space
-       * @param p Vector to translate with
-       */
-      template<class Tspace>
-        void translate(Tspace &spc, const Point &p) {
-          assert( spc.geo->sqdist(cm,massCenter(spc))<1e-6
-              && "Mass center out of sync.");
-          for (auto i : *this)
-            spc.trial[i].translate(*spc.geo, p);
-          cm_trial.translate(*spc.geo, p);
-        }
-
-      /**
-       * @brief Rotate around a vector
-       * @param spc Simulation space
-       * @param endpoint End point of rotation axis, starting from the mass center
-       * @param angle [rad]
-       */
-      template<class Tspace>
-        void rotate(Tspace &spc, const Point &endpoint, double angle) {
-          assert( spc.geo->dist(cm,massCenter(spc) )<1e-6 );
-          Geometry::QuaternionRotate vrot;
-          cm_trial = cm;
-          vrot.setAxis(*spc.geo, cm, endpoint, angle);//rot around CM->point vec
-          for (auto i : *this)
-            spc.trial[i].rotate(vrot);
-          assert( spc.geo->dist(cm_trial, massCenter(spc))<1e-9
-              && "Rotation messed up mass center. Is the box too small?");
-        }
-
+      virtual void rotate(Space&, const Point&, double);//!< Rotate around a vector
+      virtual void translate(Space&, const Point&);     //!< Translate along a vector
       virtual void scale(Space&, double);               //!< Volume scaling for NPT ensemble
+      virtual void undo(Space&);                        //!< Undo move operation
+      virtual void accept(Space&);                      //!< Accept a trial move
 
-      /** @brief Undo move operation */
-      template<class Tspace>
-        void undo(Tspace &s) {
-          for (auto i : *this)
-            s.trial[i]=s.p[i];
-          cm_trial=cm;
-        }
+      virtual bool isMolecular() const;                 //!< True if group represents a molecule
+      virtual bool isAtomic() const;                    //!< True if group represents atomic species
 
-      /** @brief Accept a trial move */
-      template<class Tspace>
-        void accept(Tspace &s) {
-          for (auto i : *this)
-            s.p[i] = s.trial[i];
-          cm=cm_trial;
-        }
-
-      virtual bool isMolecular() const; //!< True if group represents a molecule
-      virtual bool isAtomic() const;    //!< True if group represents atomic species
       virtual int numMolecules() const; //!< Number of molecules in group
 
+      bool operator==(const Group&) const;                   //!< Compare two Groups
       friend std::ostream &operator<<(std::ostream&, Group&);//!< Output Group data to stream
       virtual Group &operator<<(std::istream&);              //!< Get Group data from stream
       virtual ~Group();
@@ -139,51 +57,8 @@ namespace Faunus {
     public:
       GroupAtomic(int=-1, int=-1);
       GroupAtomic(Space&, InputMap&);        //!< Construct and call add()
+      void add(Space&, InputMap&);           //!< Add atomic particles via InputMap parameters
       bool isAtomic() const;                 //!< Always true for GroupAtomic
-
-      /**
-       * @brief Add atomic particles via InputMap parameters
-       * The InputMap is scanned for the following keywords, starting with X=1:
-       *
-       * Key            | Description
-       * :------------- | :---------------------
-       * `tionX`        | Name of atom X
-       * `nionX`        | Number of type X atoms
-       * `dpionX`       | (Displacement parameter of atom type X)
-       * `aionX`        | (Activity of atom X (molar scale))
-       *
-       * If the two latter properties, displacement and activity, are omitted
-       * (recommended) the values from AtomTypes is used instead. That is, you
-       * should specify these directly in the input JSON file.
-       */
-      template<class Tspace>
-        void add(Tspace &spc, InputMap &in) {
-          setfront( spc.p.size() );
-          int size=0;
-          int n=1, npart;
-          do {
-            std::ostringstream nion("nion"),
-              tion("tion"), dpion("dpion"), aion("aion");
-            nion << "nion" << n;
-            tion << "tion" << n;
-            dpion<< "dpion"<< n;
-            aion << "aion" << n++; //activity
-            npart = in.get(nion.str(), 0);
-            if (npart>0) {
-              short id = atom[ in.get<string>(tion.str(), "UNK") ].id;
-              atom[id].dp = in.get(dpion.str(), atom[id].dp);
-              atom[id].activity = in.get(aion.str(), 0.);
-              spc.insert( atom[id].name, npart);
-              size+=npart;
-            } else break;
-          } while (npart>0);
-          if (size>0)
-            resize(size);
-          else
-            resize(0);
-          setMassCenter(spc);
-          spc.enroll(*this);
-        }
   };
 
   /**
