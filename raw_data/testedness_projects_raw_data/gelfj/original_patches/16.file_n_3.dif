diff --git a/src/main/java/org/graylog2/GelfMessage.java b/src/main/java/org/graylog2/GelfMessage.java
index 8bf3410..36c5faa 100644
--- a/src/main/java/org/graylog2/GelfMessage.java
+++ b/src/main/java/org/graylog2/GelfMessage.java
@@ -8,6 +8,7 @@ import java.io.UnsupportedEncodingException;
 import java.math.BigDecimal;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
+import java.util.Date;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.zip.GZIPOutputStream;
@@ -53,16 +54,19 @@ public class GelfMessage {
 
         map.put("version", getVersion());
         map.put("host", getHost());
-        map.put("short_message", getShortMessage());
+        String shortMsg = getShortMessage();
+        map.put("short_message", shortMsg != null ? shortMsg : "<empty>");
         map.put("full_message", getFullMessage());
         map.put("timestamp", getTimestamp());
 
         map.put("level", getLevel());
         map.put("facility", getFacility());
-        if (null != getFile()) {
+        if( null != getFile() )
+        {
             map.put("file", getFile());
         }
-        if (null != getLine()) {
+        if( null != getLine() )
+        {
             map.put("line", getLine());
         }
 
@@ -76,33 +80,34 @@ public class GelfMessage {
     }
 
     public ByteBuffer[] toBuffers() {
-        byte[] messageBytes = gzipMessage(toJson());
+		byte[] messageBytes = gzipMessage( toJson() );
 		// calculate the length of the datagrams array
-        int diagrams_length = messageBytes.length / MAXIMUM_CHUNK_SIZE;
+		int diagrams_length=messageBytes.length / MAXIMUM_CHUNK_SIZE;
 		// In case of a remainder, due to the integer division, add a extra datagram
-        if (messageBytes.length % MAXIMUM_CHUNK_SIZE != 0) {
+		if ( messageBytes.length % MAXIMUM_CHUNK_SIZE != 0 ) {
 			diagrams_length++;
 		}
-        ByteBuffer[] datagrams = new ByteBuffer[diagrams_length];
-        if (messageBytes.length > MAXIMUM_CHUNK_SIZE) {
-            sliceDatagrams(messageBytes, datagrams);
+		ByteBuffer[] datagrams = new ByteBuffer[ diagrams_length ];
+		if ( messageBytes.length > MAXIMUM_CHUNK_SIZE ) {
+			sliceDatagrams( messageBytes, datagrams );
 		} else {
-            datagrams[0] = ByteBuffer.allocate(messageBytes.length);
-            datagrams[0].put(messageBytes);
+			datagrams[0] = ByteBuffer.allocate( messageBytes.length );
+			datagrams[0].put( messageBytes );
 			datagrams[0].flip();
 		}
 		return datagrams;
 	}
 
     public ByteBuffer toBuffer() {
-        byte[] messageBytes = gzipMessage(toJson());
-        ByteBuffer buffer = ByteBuffer.allocate(messageBytes.length);
-        buffer.put(messageBytes);
+		byte[] messageBytes = gzipMessage( toJson() );
+		ByteBuffer buffer = ByteBuffer.allocate( messageBytes.length );
+		buffer.put( messageBytes );
 		buffer.flip();
 		return buffer;
 	}
 
-    private void sliceDatagrams(byte[] messageBytes, ByteBuffer[] datagrams) {
+	private void sliceDatagrams(byte[] messageBytes, ByteBuffer[] datagrams)
+	{
         int messageLength = messageBytes.length;
         byte[] messageId = ByteBuffer.allocate(8)
             .putInt(getCurrentMillis())       // 4 least-significant-bytes of the time in millis
@@ -118,8 +123,8 @@ public class GelfMessage {
             if (to >= messageLength) {
                 to = messageLength;
             }
-            byte[] datagram = concatByteArray(header, Arrays.copyOfRange(messageBytes, from, to));
-            datagrams[idx] = ByteBuffer.allocate(datagram.length);
+			byte[] datagram = concatByteArray( header, Arrays.copyOfRange( messageBytes, from, to ) );
+			datagrams[idx] = ByteBuffer.allocate( datagram.length );
 			datagrams[idx].put(datagram);
 			datagrams[idx].flip();
         }
@@ -134,7 +139,7 @@ public class GelfMessage {
 
         try {
             GZIPOutputStream stream = new GZIPOutputStream(bos);
-            byte[] bytes;
+            byte[] bytes = null;
             try {
                 bytes = message.getBytes("UTF-8");
             } catch (UnsupportedEncodingException e) {
@@ -178,7 +183,7 @@ public class GelfMessage {
     }
 
     public String getShortMessage() {
-        return !isEmpty(shortMessage) ? shortMessage : "<empty>";
+        return shortMessage;
     }
 
     public void setShortMessage(String shortMessage) {
@@ -256,11 +261,7 @@ public class GelfMessage {
     }
 
     public boolean isValid() {
-        return isShortOrFullMessagesExists() && !isEmpty(version) && !isEmpty(host) && !isEmpty(facility);
-    }
-
-    private boolean isShortOrFullMessagesExists() {
-        return !isEmpty(shortMessage) || !isEmpty(fullMessage);
+        return !isEmpty(version) && !isEmpty(host) && !isEmpty(facility);
     }
 
     public boolean isEmpty(String str) {
