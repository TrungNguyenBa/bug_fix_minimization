diff --git a/src/main/java/org/grails/maven/plugin/tools/DefaultGrailsServices.java b/src/main/java/org/grails/maven/plugin/tools/DefaultGrailsServices.java
index b086d3b..559498d 100644
--- a/src/main/java/org/grails/maven/plugin/tools/DefaultGrailsServices.java
+++ b/src/main/java/org/grails/maven/plugin/tools/DefaultGrailsServices.java
@@ -65,7 +65,102 @@ public class DefaultGrailsServices extends AbstractLogEnabled implements GrailsS
         this._basedir = basedir;
     }
 
+    public MavenProject createPOM(final String groupId, final GrailsProject grailsProjectDescriptor, final String mtgGroupId,
+                                  final String grailsPluginArtifactId, final String mtgVersion) {
+        return createPOM(groupId, grailsProjectDescriptor, mtgGroupId, grailsPluginArtifactId, mtgVersion, false);
+    }
 
+    public MavenProject createPOM(final String groupId, final GrailsProject grailsProjectDescriptor, final String mtgGroupId,
+                                  final String grailsPluginArtifactId, final String mtgVersion, final boolean addEclipseSettings) {
+        final MavenProject pom = new MavenProject();
+        if (pom.getBuild().getPluginManagement() == null) {
+            pom.getBuild().setPluginManagement(new PluginManagement());
+        }
+        final PluginManagement pluginMgt = pom.getPluginManagement();
+
+        // Those four properties are needed.
+        pom.setModelVersion("4.0.0");
+        pom.setPackaging("grails-app");
+        // Specific for GRAILS
+        pom.getModel().getProperties().setProperty("grailsHome", "${env.GRAILS_HOME}");
+        pom.getModel().getProperties().setProperty("grailsVersion", grailsProjectDescriptor.getAppGrailsVersion());
+        // Add our own plugin
+        final Plugin grailsPlugin = new Plugin();
+        grailsPlugin.setGroupId(mtgGroupId);
+        grailsPlugin.setArtifactId(grailsPluginArtifactId);
+        grailsPlugin.setVersion(mtgVersion);
+        grailsPlugin.setExtensions(true);
+        pom.addPlugin(grailsPlugin);
+        // Add compiler plugin settings
+        final Plugin compilerPlugin = new Plugin();
+        compilerPlugin.setGroupId("org.apache.maven.plugins");
+        compilerPlugin.setArtifactId("maven-compiler-plugin");
+        final Xpp3Dom compilerConfig = new Xpp3Dom("configuration");
+        final Xpp3Dom source = new Xpp3Dom("source");
+        source.setValue("1.5");
+        compilerConfig.addChild(source);
+        final Xpp3Dom target = new Xpp3Dom("target");
+        target.setValue("1.5");
+        compilerConfig.addChild(target);
+        compilerPlugin.setConfiguration(compilerConfig);
+        pom.addPlugin(compilerPlugin);
+        // Add eclipse plugin settings
+        if (addEclipseSettings) {
+            final Plugin warPlugin = new Plugin();
+            warPlugin.setGroupId("org.apache.maven.plugins");
+            warPlugin.setArtifactId("maven-war-plugin");
+            final Xpp3Dom warConfig = new Xpp3Dom("configuration");
+            final Xpp3Dom warSourceDirectory = new Xpp3Dom("warSourceDirectory");
+            warSourceDirectory.setValue("web-app");
+            warConfig.addChild(warSourceDirectory);
+            warPlugin.setConfiguration(warConfig);
+            pluginMgt.addPlugin(warPlugin);
+
+            final Plugin eclipsePlugin = new Plugin();
+            eclipsePlugin.setGroupId("org.apache.maven.plugins");
+            eclipsePlugin.setArtifactId("maven-eclipse-plugin");
+            final Xpp3Dom configuration = new Xpp3Dom("configuration");
+            final Xpp3Dom projectnatures = new Xpp3Dom("additionalProjectnatures");
+            final Xpp3Dom projectnature = new Xpp3Dom("projectnature");
+            projectnature.setValue("org.codehaus.groovy.eclipse.groovyNature");
+            projectnatures.addChild(projectnature);
+            configuration.addChild(projectnatures);
+            final Xpp3Dom additionalBuildcommands = new Xpp3Dom(
+                "additionalBuildcommands");
+            final Xpp3Dom buildcommand = new Xpp3Dom("buildcommand");
+            buildcommand.setValue("org.codehaus.groovy.eclipse.groovyBuilder");
+            additionalBuildcommands.addChild(buildcommand);
+            configuration.addChild(additionalBuildcommands);
+            // Xpp3Dom additionalProjectFacets = new Xpp3Dom(
+            // "additionalProjectFacets");
+            // Xpp3Dom jstWeb = new Xpp3Dom("jst.web");
+            // jstWeb.setValue("2.5");
+            // additionalProjectFacets.addChild(jstWeb);
+            // configuration.addChild(additionalProjectFacets);
+            final Xpp3Dom packaging = new Xpp3Dom("packaging");
+            packaging.setValue("war");
+            configuration.addChild(packaging);
+
+            eclipsePlugin.setConfiguration(configuration);
+            pluginMgt.addPlugin(eclipsePlugin);
+        }
+        // Change the default output directory to generate classes
+        pom.getModel().getBuild().setOutputDirectory("web-app/WEB-INF/classes");
+
+        pom.setArtifactId(grailsProjectDescriptor.getAppName());
+        pom.setName(grailsProjectDescriptor.getAppName());
+        pom.setGroupId(groupId);
+        pom.setVersion(grailsProjectDescriptor.getAppVersion());
+        if (!grailsProjectDescriptor.getAppVersion().endsWith("SNAPSHOT")) {
+            getLogger().warn("=====================================================================");
+            getLogger().warn("If your project is currently in development, in accordance with maven ");
+            getLogger().warn("standards, its version must be " + grailsProjectDescriptor.getAppVersion() + "-SNAPSHOT and not " + grailsProjectDescriptor.getAppVersion() + ".");
+            getLogger().warn("Please, change your version in the application.properties descriptor");
+            getLogger().warn("and regenerate your pom.");
+            getLogger().warn("=====================================================================");
+        }
+        return pom;
+    }
 
     public GrailsProject readProjectDescriptor() throws MojoExecutionException {
         // Load existing Grails properties
