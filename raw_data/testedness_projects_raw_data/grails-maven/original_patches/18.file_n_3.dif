diff --git a/src/main/java/org/grails/maven/plugin/AbstractGrailsMojo.java b/src/main/java/org/grails/maven/plugin/AbstractGrailsMojo.java
index f8d0e1f..81c835d 100755
--- a/src/main/java/org/grails/maven/plugin/AbstractGrailsMojo.java
+++ b/src/main/java/org/grails/maven/plugin/AbstractGrailsMojo.java
@@ -323,22 +323,32 @@ public abstract class AbstractGrailsMojo extends AbstractMojo {
             final String targetDir = this.project.getBuild().getDirectory();
             ForkedGrailsRuntime.ExecutionContext ec = new ForkedGrailsRuntime.ExecutionContext();
             ec.setBuildDependencies(resolveGrailsExecutionPathJars(true));
-            List<File> providedDependencies = resolveArtifacts(getProvidedArtifacts(project));
-            List<File> compileDependencies = getCompileFiles();
-            Set<File> testDependencies = new HashSet<File>();
-            Set<File> runtimeDependencies = new HashSet<File>( getRuntimeFiles() );
-            runtimeDependencies.addAll(compileDependencies);
+            List<File> providedDependencies = resolveArtifacts(getProvidedArtifacts(project));            
+            List<File> compileDependencies = resolveArtifacts(getCompileArtifacts(project));
 
+            Set<File> runtimeDependencies = new HashSet<File>( resolveArtifacts(getRuntimeArtifacts(project)) );
+            runtimeDependencies.addAll( compileDependencies );
+            try {
+            	runtimeDependencies.addAll( getDependencyFiles( project.getRuntimeClasspathElements() ) );
+            } catch (DependencyResolutionRequiredException e) {
+                throw new MojoExecutionException("Failed to create runtime classpath for Grails execution.", e);
+            }
+            
+            Set<File> testDependencies = new HashSet<File>( resolveArtifacts(getTestArtifacts(project)) );
             testDependencies.addAll( providedDependencies );
             testDependencies.addAll( compileDependencies );
             testDependencies.addAll( runtimeDependencies );
-            testDependencies.addAll( getTestFiles() );
+            testDependencies.addAll( testDependencies );
+            try {
+            	testDependencies.addAll( getDependencyFiles( project.getTestClasspathElements() ) );
+            } catch (DependencyResolutionRequiredException e) {
+                throw new MojoExecutionException("Failed to create test classpath for Grails execution.", e);
+            }
 
             ec.setProvidedDependencies(providedDependencies);
-            ec.setRuntimeDependencies(new ArrayList<File>(runtimeDependencies));
             ec.setCompileDependencies(compileDependencies);
-            ec.setTestDependencies(new ArrayList<File>(testDependencies));
-
+            ec.setTestDependencies( new ArrayList<File>(testDependencies) );
+            ec.setRuntimeDependencies( new ArrayList<File>(runtimeDependencies) );
             ec.setGrailsWorkDir(new File(grailsWorkDir));
             ec.setProjectWorkDir(new File(targetDir));
             ec.setClassesDir(new File(targetDir, "classes"));
