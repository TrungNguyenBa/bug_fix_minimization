diff --git a/src/main/java/com/fasterxml/jackson/dataformat/protobuf/ProtobufParser.java b/src/main/java/com/fasterxml/jackson/dataformat/protobuf/ProtobufParser.java
index bdba3e9..cce8056 100644
--- a/src/main/java/com/fasterxml/jackson/dataformat/protobuf/ProtobufParser.java
+++ b/src/main/java/com/fasterxml/jackson/dataformat/protobuf/ProtobufParser.java
@@ -32,17 +32,8 @@ public class ProtobufParser extends ParserMinimalBase
     
     private final static int STATE_NESTED_VALUE = 4;
 
-    // State in which an unpacked array is starting
-    private final static int STATE_ARRAY_START = 5;
-
-    private final static int STATE_ARRAY_START_PACKED = 6;
-
-    private final static int STATE_ARRAY_VALUE = 7;
-
-    private final static int STATE_ARRAY_VALUE_PACKED = 8;
-    
     // State after either reaching end-of-input, or getting explicitly closed
-    private final static int STATE_CLOSED = 9;
+    private final static int STATE_CLOSED = 5;
 
     private final static int[] UTF8_UNIT_CODES = ProtobufUtil.sUtf8UnitLengths;
     
@@ -452,6 +443,7 @@ public class ProtobufParser extends ParserMinimalBase
     public void close() throws IOException
     {
         _state = STATE_CLOSED;
+        _currToken = null;
         if (!_closed) {
             _closed = true;
             try {
@@ -577,7 +569,7 @@ public class ProtobufParser extends ParserMinimalBase
             if (_inputPtr >= _inputEnd) {
                 if (!loadMore()) {
                     close();
-                    return (_currToken = JsonToken.END_OBJECT);
+                    return null;
                 }
             }
             {
@@ -591,21 +583,11 @@ public class ProtobufParser extends ParserMinimalBase
                     return _skipUnknownField(tag >> 3, wireType);
                 }
                 _parsingContext.setCurrentName(_currentField.name);
+                _state = STATE_ROOT_VALUE;
                 // otherwise quickly validate compatibility
                 if (!_currentField.isValidFor(wireType)) {
                     _reportIncompatibleType(_currentField, wireType);
                 }
-
-                // array?
-                if (_currentField.repeated) {
-                    if (_currentField.packed) {
-                        _state = STATE_ARRAY_START_PACKED;
-                    } else {
-                        _state = STATE_ARRAY_START;
-                    }                    
-                } else {
-                    _state = STATE_ROOT_VALUE;
-                }
             }
             return (_currToken = JsonToken.FIELD_NAME);
             
@@ -648,30 +630,6 @@ public class ProtobufParser extends ParserMinimalBase
             }
             return (_currToken = JsonToken.FIELD_NAME);
 
-        case STATE_ARRAY_START:
-            _parsingContext = _parsingContext.createChildArrayContext();            
-            return (_currToken = JsonToken.START_ARRAY);
-
-        case STATE_ARRAY_START_PACKED:
-
-            int len = _decodeLength();
-            int newEnd = _inputPtr + len;
-
-            // First: validate that we do not extend past end offset of enclosing message
-            if (!_parsingContext.inRoot()) {
-                if (newEnd > _currentEndOffset) {
-                    _reportErrorF("Packed array for field '%s' (of type %s) extends past end of enclosing message: %d > %d (length: %d)",
-                            _currentField.name, _currentMessage.getName(), newEnd, _currentEndOffset, len);
-                }
-            }
-            _currentEndOffset = newEnd; 
-            _parsingContext = _parsingContext.createChildArrayContext(newEnd);            
-            return (_currToken = JsonToken.START_ARRAY);
-
-        case STATE_ARRAY_VALUE:
-            // !!! TBI
-            throw new Error();
-            
         case STATE_NESTED_VALUE:
             {
                 JsonToken t = _readNextValue(_currentField.type, false);
@@ -851,7 +809,7 @@ public class ProtobufParser extends ParserMinimalBase
                     loadMoreGuaranteed();
                 } else if (!loadMore()) {
                     close();
-                    return JsonToken.END_OBJECT;
+                    return null;
                 }
             }
             tag = _decodeVInt();
