diff --git a/src/main/java/com/fasterxml/jackson/dataformat/protobuf/ProtobufGenerator.java b/src/main/java/com/fasterxml/jackson/dataformat/protobuf/ProtobufGenerator.java
index d8b7503..277377d 100644
--- a/src/main/java/com/fasterxml/jackson/dataformat/protobuf/ProtobufGenerator.java
+++ b/src/main/java/com/fasterxml/jackson/dataformat/protobuf/ProtobufGenerator.java
@@ -172,7 +172,7 @@ public class ProtobufGenerator extends GeneratorBase
         _ioContext = ctxt;
         _protobufFeatures = pbFeatures;
         _output = output;
-        _pbContext = _rootContext = ProtobufWriteContext.createNullContext();
+        _pbContext = ProtobufWriteContext.createNullContext();
         _currBuffer = ctxt.allocWriteEncodingBuffer();
     }
 
@@ -254,23 +254,7 @@ public class ProtobufGenerator extends GeneratorBase
 
     @Override
     public final void writeFieldName(String name) throws IOException {
-        if (!_inObject) {
-            _reportError("Can not write field name: current context not an OBJECT but "+_pbContext.getTypeDesc());
-        }
-        ProtobufField f = _currMessage.field(name);
-        if (f == null) {
-            // May be ok, if we have said so
-            if ((_currMessage == UNKNOWN_MESSAGE)
-                    || isEnabled(JsonGenerator.Feature.IGNORE_UNKNOWN)) {
-                f = UNKNOWN_FIELD;
-            } else {
-                _reportError("Unrecognized field '"+name+"' (in Message of type "+_currMessage.getName()
-                        +"); known fields are: "+_currMessage.fieldsAsString());
-                        
-            }
-        }
-        _pbContext.setField(f);
-        _currField = f;
+        _findField(name);
     }
 
     @Override
@@ -509,12 +493,6 @@ public class ProtobufGenerator extends GeneratorBase
             writeNull();
             return;
         }
-
-        if (_currField.wireType != WireType.LENGTH_PREFIXED) {
-            _reportWrongWireType("string");
-            return;
-        }
-
         // Couple of choices; short (guaranteed to have length <= 127); medium (guaranteed
         // to fit in single buffer); and large (something else)
 
@@ -605,11 +583,6 @@ public class ProtobufGenerator extends GeneratorBase
             writeNull();
             return;
         }
-        if (_currField.wireType != WireType.LENGTH_PREFIXED) {
-            _reportWrongWireType("string");
-            return;
-        }
-
         // Could guarantee with 42 chars or less; but let's do bit more speculative
         if (clen > 99) {
             _encodeLongerString(text, offset, clen);
@@ -686,10 +659,6 @@ public class ProtobufGenerator extends GeneratorBase
     public final void writeString(SerializableString sstr) throws IOException
     {
         _verifyValueWrite();
-        if (_currField.wireType != WireType.LENGTH_PREFIXED) {
-            _reportWrongWireType("string");
-            return;
-        }
         byte[] b = sstr.asUnquotedUTF8();
         _writeLengthPrefixed(b,  0, b.length);
     }
@@ -698,10 +667,6 @@ public class ProtobufGenerator extends GeneratorBase
     public void writeRawUTF8String(byte[] text, int offset, int len) throws IOException
     {
         _verifyValueWrite();
-        if (_currField.wireType != WireType.LENGTH_PREFIXED) {
-            _reportWrongWireType("string");
-            return;
-        }
         _writeLengthPrefixed(text, offset, len);
     }
 
@@ -709,15 +674,11 @@ public class ProtobufGenerator extends GeneratorBase
     public final void writeUTF8String(byte[] text, int offset, int len) throws IOException
     {
         _verifyValueWrite();
-        if (_currField.wireType != WireType.LENGTH_PREFIXED) {
-            _reportWrongWireType("string");
-            return;
-        }
         _writeLengthPrefixed(text, offset, len);
     }
 
     private final static Charset UTF8 = Charset.forName("UTF-8");
-    
+
     /*
     /**********************************************************
     /* Output method implementations, unprocessed ("raw")
@@ -778,8 +739,7 @@ public class ProtobufGenerator extends GeneratorBase
         // expecting String, and rather assume that if so, caller just provides as
         // raw bytes of String
         if (_currField.wireType != WireType.LENGTH_PREFIXED) {
-            _reportWrongWireType("binary");
-            return;
+            _reportError("Can not write binary value for for '"+_currField.name+"' (type "+_currField.type+")");
         }
         _ensureRoom(10);
         _writeLengthPrefixed(data, offset, len);
@@ -795,7 +755,7 @@ public class ProtobufGenerator extends GeneratorBase
     public void writeBoolean(boolean state) throws IOException
     {
         _verifyValueWrite();
-        
+
         // same as 'writeNumber(int)', really
         final int type = _currField.wireType;
 
@@ -811,16 +771,13 @@ public class ProtobufGenerator extends GeneratorBase
             _writeInt64(1L);
             return;
         }
-        _reportWrongWireType("boolean");
+        _reportError("Can not write `boolean` value for '"+_currField.name+"' (type "+_currField.type+")");
     }
 
     @Override
     public void writeNull() throws IOException
     {
         _verifyValueWrite();
-        if (_currField == UNKNOWN_FIELD) {
-            return;
-        }
 
         // protobuf has no way of writing null does it?
         // ...but should we try to add placeholders in arrays?
@@ -856,7 +813,7 @@ public class ProtobufGenerator extends GeneratorBase
             _writeInt64(v);
             return;
         }
-        _reportWrongWireType("int");
+        _reportError("Can not write `int` value for for '"+_currField.name+"' (type "+_currField.type+")");
     }
 
     @Override
@@ -881,7 +838,7 @@ public class ProtobufGenerator extends GeneratorBase
             _writeInt64(v);
             return;
         }
-        _reportWrongWireType("long");
+        _reportError("Can not write `long` value for for '"+_currField.name+"' (type "+_currField.type+")");
     }
 
     @Override
@@ -891,9 +848,6 @@ public class ProtobufGenerator extends GeneratorBase
             writeNull();
             return;
         }
-        if (_currField == UNKNOWN_FIELD) {
-            return;
-        }
         // !!! TODO: better scheme to detect overflow or something
         writeNumber(v.longValue());
     }
@@ -918,7 +872,7 @@ public class ProtobufGenerator extends GeneratorBase
             _encodeLongerString(String.valueOf(d));
             return;
         }
-        _reportWrongWireType("double");
+        _reportError("Can not write `double` value for for '"+_currField.name+"' (type "+_currField.type+")");
     }    
 
     @Override
@@ -939,7 +893,7 @@ public class ProtobufGenerator extends GeneratorBase
             _encodeLongerString(String.valueOf(f));
             return;
         }
-        _reportWrongWireType("float");
+        _reportError("Can not write `float` value for for '"+_currField.name+"' (type "+_currField.type+")");
     }
 
     @Override
@@ -949,9 +903,6 @@ public class ProtobufGenerator extends GeneratorBase
             writeNull();
             return;
         }
-        if (_currField == UNKNOWN_FIELD) {
-            return;
-        }
         // !!! TODO: better handling here... exception or write as string or... ?
         writeNumber(v.doubleValue());
     }
@@ -989,6 +940,33 @@ public class ProtobufGenerator extends GeneratorBase
 
     /*
     /**********************************************************
+    /* Internal lookups
+    /**********************************************************
+     */
+    
+    private final void _findField(String id) throws IOException
+    {
+        if (!_inObject) {
+            _reportError("Can not write field name: current context not an OBJECT but "+_pbContext.getTypeDesc());
+        }
+        ProtobufField f = _currMessage.field(id);
+        if (f == null) {
+            // May be ok, if we have said so
+            if ((_currMessage == UNKNOWN_MESSAGE)
+                    || isEnabled(JsonGenerator.Feature.IGNORE_UNKNOWN)) {
+                f = UNKNOWN_FIELD;
+            } else {
+                _reportError("Unrecognized field '"+id+"' (in Message of type "+_currMessage.getName()
+                        +"); known fields are: "+_currMessage.fieldsAsString());
+                        
+            }
+        }
+        _pbContext.setField(f);
+        _currField = f;
+    }
+
+    /*
+    /**********************************************************
     /* Internal text/binary writes
     /**********************************************************
      */
@@ -1362,13 +1340,6 @@ public class ProtobufGenerator extends GeneratorBase
     /* Helper methods, error reporting
     /**********************************************************
      */
-
-    protected void _reportWrongWireType(String typeStr) throws IOException {
-        if (_currField == UNKNOWN_FIELD) {
-            return;
-        }
-        _reportError("Can not write `string` value for '"+_currField.name+"' (type "+_currField.type+")");
-    }
     
     private void _throwIllegalSurrogate(int code)
     {
