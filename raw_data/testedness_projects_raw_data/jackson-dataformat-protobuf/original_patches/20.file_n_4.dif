diff --git a/src/test/java/com/fasterxml/jackson/dataformat/protobuf/WriteSimpleTest.java b/src/test/java/com/fasterxml/jackson/dataformat/protobuf/WriteSimpleTest.java
index 54ec0fe..f96f026 100644
--- a/src/test/java/com/fasterxml/jackson/dataformat/protobuf/WriteSimpleTest.java
+++ b/src/test/java/com/fasterxml/jackson/dataformat/protobuf/WriteSimpleTest.java
@@ -1,22 +1,11 @@
 package com.fasterxml.jackson.dataformat.protobuf;
 
-import com.fasterxml.jackson.core.JsonGenerator;
-import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.dataformat.protobuf.schema.ProtobufSchema;
 import com.fasterxml.jackson.dataformat.protobuf.schema.ProtobufSchemaLoader;
 
 public class WriteSimpleTest extends ProtobufTestBase
 {
-    static class Point3D extends Point {
-        public int z;
-        
-        public Point3D(int x, int y, int z) {
-            super(x, y);
-            this.z = z;
-        }
-    }
-
     final ObjectMapper MAPPER = new ObjectMapper(new ProtobufFactory());
 
     /*
@@ -39,7 +28,7 @@ public class WriteSimpleTest extends ProtobufTestBase
         assertEquals(7, bytes[1]); // VInt 7, no zig-zag
         assertEquals(0x10, bytes[2]); // wire type 0 (3 LSB), id of 2 (-> 0x10)
         assertEquals(4, bytes[3]); // VInt 2, but with zig-zag
-}
+    }
 
     public void testWriteCoord() throws Exception
     {
@@ -86,27 +75,4 @@ public class WriteSimpleTest extends ProtobufTestBase
         assertEquals(0x10, bytes[10]); // wire type 0 (vint), tag id 2
         assertEquals(0x1E, bytes[11]); // zig-zagged vint value, 0xF becomes 0x1E
     }
-
-    public void testUnknownProperties() throws Exception
-    {
-        ProtobufSchema schema = ProtobufSchemaLoader.std.parse(PROTOC_BOX, "Point");
-        final ObjectWriter w = MAPPER.writerWithType(Point3D.class)
-                .withSchema(schema);
-        
-        // First: if disabled, should get an error
-        try {
-            /*byte[] bytes =*/ w
-                .without(JsonGenerator.Feature.IGNORE_UNKNOWN)
-                .writeValueAsBytes(new Point3D(1, 2, 3));
-        } catch (JsonProcessingException e) {
-            verifyException(e, "Unrecognized field 'z'");
-        }
-
-        byte[] bytes = w
-                .with(JsonGenerator.Feature.IGNORE_UNKNOWN)
-                .writeValueAsBytes(new Point3D(1, 2, 3));
-        assertNotNull(bytes);
-        assertNotNull(bytes);
-        assertEquals(4, bytes.length);
-    }
 }
