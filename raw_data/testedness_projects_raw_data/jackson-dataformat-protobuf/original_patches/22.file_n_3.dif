diff --git a/src/test/java/com/fasterxml/jackson/dataformat/protobuf/WriteArrayTest.java b/src/test/java/com/fasterxml/jackson/dataformat/protobuf/WriteArrayTest.java
index a7fa099..e376512 100644
--- a/src/test/java/com/fasterxml/jackson/dataformat/protobuf/WriteArrayTest.java
+++ b/src/test/java/com/fasterxml/jackson/dataformat/protobuf/WriteArrayTest.java
@@ -1,12 +1,9 @@
 package com.fasterxml.jackson.dataformat.protobuf;
 
-import java.util.*;
-
 import org.junit.Assert;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.ObjectWriter;
-import com.fasterxml.jackson.dataformat.protobuf.ProtobufTestBase.Name;
 import com.fasterxml.jackson.dataformat.protobuf.schema.ProtobufSchema;
 import com.fasterxml.jackson.dataformat.protobuf.schema.ProtobufSchemaLoader;
 
@@ -68,29 +65,22 @@ public class WriteArrayTest extends ProtobufTestBase
         }
     }
 
-    final ObjectMapper MAPPER = new ObjectMapper(new ProtobufFactory());
-
-    final ProtobufSchema SPARSE_STRING_SCHEMA;
-    final ProtobufSchema PACKED_STRING_SCHEMA;
-
-    public WriteArrayTest() throws Exception {
-        SPARSE_STRING_SCHEMA = ProtobufSchemaLoader.std.parse(PROTOC_STRING_ARRAY_SPARSE);
-        PACKED_STRING_SCHEMA = ProtobufSchemaLoader.std.parse(PROTOC_STRING_ARRAY_PACKED);
-    }
-    
     /*
     /**********************************************************
-    /* Test methods, int arrays
+    /* Test methods
     /**********************************************************
      */
 
+    final ObjectMapper MAPPER = new ObjectMapper(new ProtobufFactory());
+
     public void testIntArraySparse() throws Exception
     {
         /*
         final protected static String PROTOC_INT_ARRAY = "message Ints {\n"
                 +" repeated int32 values = 1; }\n";
         */
-        final ObjectWriter w = MAPPER.writer(ProtobufSchemaLoader.std.parse(PROTOC_INT_ARRAY_SPARSE));
+        ProtobufSchema schema = ProtobufSchemaLoader.std.parse(PROTOC_INT_ARRAY_SPARSE);
+        final ObjectWriter w = MAPPER.writer(schema);
         byte[] bytes = w.writeValueAsBytes(new IntArray(3, -1, 2));
         // 3 x 2 bytes per value (typed tag, value) -> 6
         assertEquals(6, bytes.length);
@@ -115,15 +105,10 @@ public class WriteArrayTest extends ProtobufTestBase
         assertEquals(0x4, bytes[4]); // zig-zagged value for 2
     }
 
-    /*
-    /**********************************************************
-    /* Test methods, String arrays
-    /**********************************************************
-     */
-
     public void testStringArraySparse() throws Exception
     {
-        final ObjectWriter w = MAPPER.writer(SPARSE_STRING_SCHEMA);
+        ProtobufSchema schema = ProtobufSchemaLoader.std.parse(PROTOC_STRING_ARRAY_SPARSE);
+        final ObjectWriter w = MAPPER.writer(schema);
         byte[] bytes = w.writeValueAsBytes(new StringArray("Foo", "Bar"));
         assertEquals(10, bytes.length);
         Assert.assertArrayEquals(new byte[] {
@@ -134,7 +119,8 @@ public class WriteArrayTest extends ProtobufTestBase
 
     public void testStringArrayPacked() throws Exception
     {
-        final ObjectWriter w = MAPPER.writer(PACKED_STRING_SCHEMA);
+        ProtobufSchema schema = ProtobufSchemaLoader.std.parse(PROTOC_STRING_ARRAY_PACKED);
+        final ObjectWriter w = MAPPER.writer(schema);
         byte[] bytes = w.writeValueAsBytes(new StringArray("A", "B", "C"));
         assertEquals(8, bytes.length);
         Assert.assertArrayEquals(new byte[] {
@@ -145,104 +131,6 @@ public class WriteArrayTest extends ProtobufTestBase
         }, bytes);
     }
     
-    // and then do something bit more sizable
-    public void testStringArraySparseLong() throws Exception
-    {
-        final ObjectWriter w = MAPPER.writer(SPARSE_STRING_SCHEMA);
-        List<String> strings = new ArrayList<String>();
-        for (int i = 0; i < 4000; ++i) {
-            strings.add("Value"+i);
-        }
-        byte[] bytes = w.writeValueAsBytes(new StringArray(strings.toArray(new String[strings.size()])));
-        int ptr = 0;
-
-        // in case of sparse, same as N copies of a String field
-        for (int i = 0; i < 4000; ++i) {
-            final String str = "Value"+i;
-            byte b = bytes[ptr++];
-            if (b != 0xA) {
-                fail("Different for String #"+i+", at "+(ptr-1)+", type not 0xA but "+b);
-            }
-            assertEquals(str.length(), bytes[ptr++]);
-            for (int x = 0; x < str.length(); ++x) {
-                assertEquals((byte) str.charAt(x), bytes[ptr++]);
-            }
-        }
-        assertEquals(bytes.length, ptr);
-    }
-
-    public void testStringArrayPackedLong() throws Exception
-    {
-        final ObjectWriter w = MAPPER.writer(PACKED_STRING_SCHEMA);
-        List<String> strings = new ArrayList<String>();
-        for (int i = 0; i < 4000; ++i) {
-            strings.add("Value"+i);
-        }
-        byte[] bytes = w.writeValueAsBytes(new StringArray(strings.toArray(new String[strings.size()])));
-        int ptr = 0;
-
-        assertEquals(0xA, bytes[ptr++]);
-
-        // big enough to actually require 3 bytes (above 0x3FFF bytes)
-        int len = (bytes[ptr] & 0x7F) + ((bytes[ptr+1] & 0x7F) << 7)
-                + (bytes[ptr+2] << 14);
-        ptr += 3;
-
-        assertEquals(bytes.length - 4, len);
-        
-        // in case of sparse, same as N copies of a String field
-        for (int i = 0; i < 4000; ++i) {
-            final String str = "Value"+i;
-            assertEquals(str.length(), bytes[ptr++]);
-            for (int x = 0; x < str.length(); ++x) {
-                assertEquals((byte) str.charAt(x), bytes[ptr++]);
-            }
-        }
-        assertEquals(bytes.length, ptr);
-    }
-
-    public void testStringArraySparseWithLongValues() throws Exception
-    {
-        final ObjectWriter w = MAPPER.writer(SPARSE_STRING_SCHEMA);
-        StringBuilder sb = new StringBuilder();
-        do {
-            sb.append("Jexabel");
-        } while (sb.length() < 137);
-        final String LONG_NAME = sb.toString();
-        final int longLen = LONG_NAME.length();
-
-        List<String> strings = new ArrayList<String>();
-        final int COUNT = 128000 / longLen;
-        for (int i = 0; i < COUNT; ++i) {
-            strings.add(LONG_NAME);
-        }
-        byte[] bytes = w.writeValueAsBytes(new StringArray(strings.toArray(new String[strings.size()])));
-        int ptr = 0;
-        final byte FIRST_LEN_BYTE = (byte) (0x80 + (longLen & 0x7F));
-        final byte SECOND_LEN_BYTE = (byte) (longLen >> 7);
-
-        // in case of sparse, same as N copies of a String field
-        for (int i = 0; i < COUNT; ++i) {
-            byte b = bytes[ptr++];
-            if (b != 0xA) {
-                fail("Different for String #"+i+", at "+(ptr-1)+", type not 0xA but "+b);
-            }
-            assertEquals(FIRST_LEN_BYTE, bytes[ptr++]);
-            assertEquals(SECOND_LEN_BYTE, bytes[ptr++]);
-            for (int x = 0; x < longLen; ++x) {
-                assertEquals((byte) LONG_NAME.charAt(x), bytes[ptr++]);
-            }
-        }
-        assertEquals(bytes.length, ptr);
-        
-    }
-    
-    /*
-    /**********************************************************
-    /* Test methods, POJO arrays
-    /**********************************************************
-     */
-
     public void testPointArraySparse() throws Exception
     {
         final ObjectWriter w = MAPPER.writer(ProtobufSchemaLoader.std.parse(PROTOC_POINT_ARRAY_SPARSE));
