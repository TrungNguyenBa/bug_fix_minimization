diff --git a/src/main/java/com/fasterxml/jackson/dataformat/protobuf/ProtobufGenerator.java b/src/main/java/com/fasterxml/jackson/dataformat/protobuf/ProtobufGenerator.java
index 4cc7796..69369c8 100644
--- a/src/main/java/com/fasterxml/jackson/dataformat/protobuf/ProtobufGenerator.java
+++ b/src/main/java/com/fasterxml/jackson/dataformat/protobuf/ProtobufGenerator.java
@@ -21,6 +21,14 @@ public class ProtobufGenerator extends GeneratorBase
      * Enumeration that defines all togglable features for Protobuf generators
      */
     public enum Feature {
+        /**
+         * Feature that can be enabled to quietly ignore serialization of unknown
+         * fields.
+         *<p>
+         * Feature is disabled by default, so that an exception is thrown if unknown
+         * fields are encountered.
+         */
+        IGNORE_UNKNOWN_FIELDS(false)
         ;
 
         protected final boolean _defaultState;
@@ -276,7 +284,7 @@ public class ProtobufGenerator extends GeneratorBase
         if (f == null) {
             // May be ok, if we have said so
             if ((_currentMessage == UNKNOWN_MESSAGE)
-                    || isEnabled(JsonGenerator.Feature.IGNORE_UNKNOWN)) {
+                    || Feature.IGNORE_UNKNOWN_FIELDS.enabledIn(_features)) {
                 f = UNKNOWN_FIELD;
             } else {
                 _reportError("Unrecognized field '"+id+"' (in Message of type "+_currentMessage.getName()
@@ -400,7 +409,6 @@ public class ProtobufGenerator extends GeneratorBase
          * With packed, need length prefix, all that stuff, so need accumulator
          */
         if (!_writeTag) { // packed
-            // note: tag SHOULD be written for array itself, but not contents
             _startBuffering(_currField.typedTag);
         }
     }
@@ -446,12 +453,7 @@ public class ProtobufGenerator extends GeneratorBase
             }
             _currentMessage = _currField.getMessageType();
             // and we need to start buffering, or add more nesting
-            // but we may or may not want to write tag for object
-            if (_writeTag) {
             _startBuffering(_currField.typedTag);
-            } else {
-                _startBuffering();
-            }
         }
         
         if (_inObject) {
@@ -992,7 +994,7 @@ public class ProtobufGenerator extends GeneratorBase
 
     private final int _writeTag(int wireType, int ptr)
     {
-        if (_writeTag) {
+        if (!_currField.packed) {
             final byte[] buf = _currentBuffer;
             int tag = _currField.typedTag;
             if (tag <= 0x7F) {
@@ -1015,10 +1017,6 @@ public class ProtobufGenerator extends GeneratorBase
     /**********************************************************
      */
 
-    /**
-     * Method called when buffering an entry that should be prefixed
-     * with a type tag.
-     */
     private final void _startBuffering(int typedTag) throws IOException
     {
         // need to ensure room for tag id, length (10 bytes); might as well ask for bit more
@@ -1026,18 +1024,7 @@ public class ProtobufGenerator extends GeneratorBase
         // and leave the gap of 10 bytes
         _currentStart = _currentPtr = _currentPtr + 10;
         _buffered = new ByteAccumulator(_buffered, typedTag);
-    }
 
-    /**
-     * Method called when buffering an entry that should not be prefixed
-     * with a type tag.
-     */
-    private final void _startBuffering() throws IOException
-    {
-        // since no tag written, could skimp on space needed
-        _ensureRoom(16);
-        _currentStart = _currentPtr = _currentPtr + 5;
-        _buffered = new ByteAccumulator(_buffered);
     }
 
     private final void _finishBuffering() throws IOException
