diff --git a/src/test/java/com/fasterxml/jackson/dataformat/protobuf/SimpleWriteTest.java b/src/test/java/com/fasterxml/jackson/dataformat/protobuf/SimpleWriteTest.java
index 3b8639c..a7a2712 100644
--- a/src/test/java/com/fasterxml/jackson/dataformat/protobuf/SimpleWriteTest.java
+++ b/src/test/java/com/fasterxml/jackson/dataformat/protobuf/SimpleWriteTest.java
@@ -35,17 +35,12 @@ public class SimpleWriteTest extends ProtobufTestBase
             +"}\n"
     ;
 
-    final protected static String PROTOC_POINT_ARRAY_SPARSE = "message Points {\n"
+    final protected static String PROTOC_POINT_ARRAY_PACKED = "message Points {\n"
+//            +" repeated Point points = 1 [packed=true];\n"
             +" repeated Point points = 1;\n"
             +"}\n"
             +PROTOC_POINT;
     ;
-
-    final protected static String PROTOC_POINT_ARRAY_PACKED = "message Points {\n"
-          +" repeated Point points = 1 [packed=true];\n"
-          +"}\n"
-          +PROTOC_POINT;
-  ;
     
     static class IntArray {
         public int[] values;
@@ -143,7 +138,9 @@ public class SimpleWriteTest extends ProtobufTestBase
     {
         /*
         final protected static String PROTOC_INT_ARRAY = "message Ints {\n"
-                +" repeated int32 values = 1; }\n";
+                +" repeated int32 values = 1;\n"
+                +"}\n"
+        ;
         */
         ProtobufSchema schema = ProtobufSchemaLoader.std.parse(PROTOC_INT_ARRAY_SPARSE);
         final ObjectWriter w = MAPPER.writer(schema);
@@ -171,50 +168,19 @@ public class SimpleWriteTest extends ProtobufTestBase
         assertEquals(0x4, bytes[4]); // zig-zagged value for 2
     }
 
-    public void testPointArraySparse() throws Exception
-    {
-        final ObjectWriter w = MAPPER.writer(ProtobufSchemaLoader.std.parse(PROTOC_POINT_ARRAY_SPARSE));
-        byte[] bytes = w.writeValueAsBytes(new PointArray(new Point(1, 2), new Point(3, 4)));
-        // sequence of 2 embedded messages, each with 1 byte typed tag, 1 byte length
-        // and 2 fields of typed-tag and single-byte value
-        assertEquals(12, bytes.length);
-
-        assertEquals(0xA, bytes[0]); // wire type 2 (length prefix), id of 1 (-> 0x8)
-        assertEquals(4, bytes[1]); // length
-        assertEquals(8, bytes[2]); // wire type 0 (3 LSB), id of 1 (-> 0x8)
-        assertEquals(1, bytes[3]); // VInt 1, no zig-zag
-        assertEquals(0x10, bytes[4]); // wire type 0 (3 LSB), id of 2 (-> 0x10)
-        assertEquals(4, bytes[5]); // VInt 2, but with zig-zag
-
-        assertEquals(0xA, bytes[6]); // similar to above
-        assertEquals(4, bytes[7]); 
-        assertEquals(8, bytes[8]);
-        assertEquals(3, bytes[9]); // Point(3, )
-        assertEquals(0x10, bytes[10]);
-        assertEquals(8, bytes[11]); // Point (, 4)
-    }
-
+    /*
     public void testPointArrayPacked() throws Exception
     {
         final ObjectWriter w = MAPPER.writer(ProtobufSchemaLoader.std.parse(PROTOC_POINT_ARRAY_PACKED));
         byte[] bytes = w.writeValueAsBytes(new PointArray(new Point(1, 2), new Point(3, 4)));
-        // should have 1 byte typed-tag, 1 byte length (for array contents);
-        // followed by 2 embedded messages of 5 bytes length
-
-        assertEquals(12, bytes.length);
+        // 1 byte for typed tag, 1 byte for length, 3 x 1 byte per value -> 5
+        assertEquals(14, bytes.length);
         assertEquals(0xA, bytes[0]); // length-prefixed (2) value, field 1
-        assertEquals(10, bytes[1]); // length of entries in array
-
-        assertEquals(4, bytes[2]); // length of first entry
-        assertEquals(8, bytes[3]); // wire type 0 (3 LSB), id of 1 (-> 0x8)
-        assertEquals(1, bytes[4]); // VInt 1, no zig-zag
-        assertEquals(0x10, bytes[5]); // wire type 0 (3 LSB), id of 2 (-> 0x10)
-        assertEquals(4, bytes[6]); // VInt 2, but with zig-zag
-
-        assertEquals(4, bytes[7]); // length of second entry
-        assertEquals(8, bytes[8]);
-        assertEquals(3, bytes[9]); // Point(3, )
-        assertEquals(0x10, bytes[10]);
-        assertEquals(8, bytes[11]); // Point (, 4)
+        assertEquals(12, bytes[1]); // length of entries in array
+
+        assertEquals(4, bytes[2]); // embedded message length
+
+        assertEquals(4, bytes[8]); // embedded message length
     }
+    */
 }
