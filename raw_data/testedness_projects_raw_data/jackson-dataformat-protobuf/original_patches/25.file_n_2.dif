diff --git a/src/main/java/com/fasterxml/jackson/dataformat/protobuf/ByteAccumulator.java b/src/main/java/com/fasterxml/jackson/dataformat/protobuf/ByteAccumulator.java
index 6fd8493..7cdff4e 100644
--- a/src/main/java/com/fasterxml/jackson/dataformat/protobuf/ByteAccumulator.java
+++ b/src/main/java/com/fasterxml/jackson/dataformat/protobuf/ByteAccumulator.java
@@ -10,60 +10,28 @@ public class ByteAccumulator
 {
     protected final ByteAccumulator _parent;
 
-    protected final int _typedTag;
-    
     // !!! TEMP: inefficient, only used during initial prototyping
     protected final ByteArrayOutputStream _bytes = new ByteArrayOutputStream(200);
     
-    public ByteAccumulator(ByteAccumulator p, int typedTag) {
+    public ByteAccumulator(ByteAccumulator p) {
         _parent = p;
-        _typedTag = typedTag;
     }
 
     public void append(byte[] buf, int offset, int len) {
         _bytes.write(buf, offset, len);
     }
 
-    public ByteAccumulator finish(OutputStream out,
-            byte[] input, int offset, int len) throws IOException
-    {
-        byte[] payload = _bytes.toByteArray();
-        int plen = payload.length + len;
-
-        byte[] tagBytes = ProtobufUtil.lengthAsBytes(_typedTag);
-        byte[] lbytes = ProtobufUtil.lengthAsBytes(plen);
-        
-        // root? Just output it all 
-        if (_parent == null) {
-            out.write(tagBytes);
-            out.write(lbytes);
-            out.write(payload);
-            if (len > 0) {
-                out.write(input, offset, len);
-            }
-        } else {
-            _parent.append(tagBytes, 0, tagBytes.length);
-            _parent.append(lbytes, 0, lbytes.length);
-            _parent.append(payload, 0, payload.length);
-            _parent.append(input, offset, len);
-        }
-        return _parent;
-    }
-    
     public ByteAccumulator finish(OutputStream out) throws IOException
     {
         byte[] payload = _bytes.toByteArray();
         int plen = payload.length;
-        byte[] tagBytes = ProtobufUtil.lengthAsBytes(_typedTag);
         byte[] lbytes = ProtobufUtil.lengthAsBytes(plen);
         
         // root? Just output it all 
         if (_parent == null) {
-            out.write(tagBytes);
             out.write(lbytes);
-            out.write(payload);
+            out.write(lbytes);
         } else {
-            _parent.append(tagBytes, 0, tagBytes.length);
             _parent.append(lbytes, 0, lbytes.length);
             _parent.append(payload, 0, payload.length);
         }
