diff --git a/src/main/java/com/fasterxml/jackson/dataformat/protobuf/schema/TypeResolver.java b/src/main/java/com/fasterxml/jackson/dataformat/protobuf/schema/TypeResolver.java
index b38210d..5dc0243 100644
--- a/src/main/java/com/fasterxml/jackson/dataformat/protobuf/schema/TypeResolver.java
+++ b/src/main/java/com/fasterxml/jackson/dataformat/protobuf/schema/TypeResolver.java
@@ -85,44 +85,36 @@ public class TypeResolver
                 ._resolve(rawType);
     }
         
-    protected ProtobufMessage _resolve(MessageType rawType)
+    public ProtobufMessage _resolve(MessageType rawType)
     {
-        // Important: add type itself as (being) resolved, to allow for self-refs:
-        Map<String,ProtobufField> fields = new LinkedHashMap<String,ProtobufField>();
-        ProtobufMessage message = new ProtobufMessage(rawType.getName(), fields);
-        if (_resolvedMessageTypes.isEmpty()) {
-            _resolvedMessageTypes = new HashMap<String,ProtobufMessage>();
-        }
-        _resolvedMessageTypes.put(rawType.getName(), message);
+        List<ProtobufField> fields = new ArrayList<ProtobufField>();
+        List<Unresolved> unresolved = null;
 
-        // and then resolve fields
         for (Field f : rawType.getFields()) {
             String typeStr = f.getType();
             // First: could it be we have a simple scalar type
             FieldType type = FieldTypes.findType(typeStr);
             if (type != null) { // simple type
-                fields.put(f.getName(), new ProtobufField(f, type));
+                fields.add(new ProtobufField(f, type));
                 continue;
             }
             // If not, a resolved local definition?
             ProtobufField resolvedF = _findLocalResolved(f, typeStr);
             if (resolvedF != null) {
-                fields.put(f.getName(), resolvedF);
+                fields.add(resolvedF);
                 continue;
             }
             // or, barring that local but as of yet unresolved message?
             MessageType nativeMt = _nativeMessageTypes.get(typeStr);
-            if (nativeMt != null) {
-                fields.put(f.getName(), new ProtobufField(f,
-                        TypeResolver.construct(this, nativeMt.getNestedTypes())._resolve(nativeMt)));
-                continue;
-            }
+            if (nativeMt == null) {
                 // If not, perhaps parent might have an answer?
-            resolvedF = _parent._findAnyResolved(f, typeStr);
-            if (resolvedF != null) {
-                fields.put(f.getName(), resolvedF);
+                if (_parent != null) {
+                    ProtobufField f2 = _parent._findAnyResolved(f, typeStr);
+                    if (f2 != null) {
+                        fields.add(f2);
                         continue;
                     }
+                }
                 // Ok, we are out of options here...
                 StringBuilder enumStr = _knownEnums(new StringBuilder());
                 StringBuilder msgStr = _knownMsgs(new StringBuilder());
@@ -130,10 +122,33 @@ public class TypeResolver
                         +"' for field '"+f.getName()+"' of MessageType '"+rawType.getName()
                         +"' (known enum types: "+enumStr+"; known message types: "+msgStr+")");
             }
-        return message;
+            ProtobufField pf = new ProtobufField(f, FieldType.MESSAGE);
+            fields.add(pf);
+            if (unresolved == null) {
+                unresolved = new ArrayList<Unresolved>();
+            }
+            unresolved.add(new Unresolved(pf, nativeMt));
         }
+        ProtobufMessage resolved = new ProtobufMessage(rawType.getName(), fields);
+        if (_resolvedMessageTypes.isEmpty()) {
+            _resolvedMessageTypes = new HashMap<String,ProtobufMessage>();
+        }
+        _resolvedMessageTypes.put(rawType.getName(), resolved);
 
-    private ProtobufMessage _findResolvedMessage(String typeStr)
+        // and then resolve dependencies for remaining fields
+        if (unresolved != null) {
+            for (Unresolved u : unresolved) {
+                ProtobufField f = u.field;
+                if (f.type != FieldType.MESSAGE || (f.getMessageType() != null)) {
+                    continue;
+                }
+                f.assignMessageType(resolve(u.nativeType));
+            }
+        }
+        return resolved;
+    }    
+
+    protected ProtobufMessage _findResolvedMessage(String typeStr)
     {
         ProtobufMessage msg = _resolvedMessageTypes.get(typeStr);
         if ((msg == null) && (_parent !=null)) {
@@ -142,23 +157,16 @@ public class TypeResolver
         return msg;
     }
 
-    private ProtobufField _findAnyResolved(Field nativeField, String typeStr)
+    protected ProtobufField _findAnyResolved(Field nativeField, String typeStr)
     {
         ProtobufField f = _findLocalResolved(nativeField, typeStr);
-        if (f == null) {
-            MessageType nativeMt = _nativeMessageTypes.get(typeStr);
-            if (nativeMt != null) {
-                return new ProtobufField(nativeField,
-                        TypeResolver.construct(this, nativeMt.getNestedTypes())._resolve(nativeMt));
-            }
-            if (_parent != null) {
+        if ((f == null) && (_parent != null)) {
             return _parent._findAnyResolved(nativeField, typeStr);
         }
-        }
         return f;
     }
 
-    private StringBuilder _knownEnums(StringBuilder sb) {
+    protected StringBuilder _knownEnums(StringBuilder sb) {
         if (_parent != null) {
             sb = _parent._knownEnums(sb);
         }
@@ -171,7 +179,7 @@ public class TypeResolver
         return sb;
     }
 
-    private StringBuilder _knownMsgs(StringBuilder sb) {
+    protected StringBuilder _knownMsgs(StringBuilder sb) {
         if (_parent != null) {
             sb = _parent._knownMsgs(sb);
         }
@@ -184,7 +192,7 @@ public class TypeResolver
         return sb;
     }
     
-    private ProtobufField _findLocalResolved(Field nativeField, String typeStr)
+    protected ProtobufField _findLocalResolved(Field nativeField, String typeStr)
     {
         ProtobufMessage msg = _resolvedMessageTypes.get(typeStr);
         if (msg != null) {
@@ -196,4 +204,15 @@ public class TypeResolver
         }
         return null;
     }
+    
+    private final static class Unresolved
+    {
+        public final ProtobufField field;
+        public final MessageType nativeType;
+
+        public Unresolved(ProtobufField f, MessageType nt) {
+            field = f;
+            nativeType = nt;
+        }
+    }
 }
