diff --git a/src/main/java/com/fasterxml/jackson/dataformat/protobuf/ProtobufGenerator.java b/src/main/java/com/fasterxml/jackson/dataformat/protobuf/ProtobufGenerator.java
index 83a3937..537ff65 100644
--- a/src/main/java/com/fasterxml/jackson/dataformat/protobuf/ProtobufGenerator.java
+++ b/src/main/java/com/fasterxml/jackson/dataformat/protobuf/ProtobufGenerator.java
@@ -84,6 +84,8 @@ public class ProtobufGenerator extends GeneratorBase
      */
     protected final static ProtobufMessage UNKNOWN_MESSAGE = ProtobufMessage.bogusMessage("<unknown>");
 
+    protected final static ProtobufMessage ROOT_MESSAGE = ProtobufMessage.bogusMessage("<root>");
+    
     /*
     /**********************************************************
     /* Configuration
@@ -111,7 +113,7 @@ public class ProtobufGenerator extends GeneratorBase
      * Reference to the root context since that is needed for serialization
      */
     protected ProtobufWriteContext _rootContext;
-    
+
     protected boolean _inObject;
 
     /**
@@ -130,7 +132,7 @@ public class ProtobufGenerator extends GeneratorBase
      * Type of protobuf message that is currently being output: usually
      * matches write context, but for arrays may indicate "parent" of array.
      */
-    protected ProtobufMessage _currentMessage;
+    protected ProtobufMessage _currentMessage = ROOT_MESSAGE;
     
     /**
      * Field to be output next; set when {@link JsonToken#FIELD_NAME} is written,
@@ -150,11 +152,6 @@ public class ProtobufGenerator extends GeneratorBase
     final protected OutputStream _output;
 
     /**
-     * Object used In cases where we need to buffer content to calculate length-prefix.
-     */
-    protected ByteAccumulator _buffered;
-    
-    /**
      * Current context, in form we can use it.
      */
     protected ProtobufWriteContext _pbContext;
@@ -282,6 +279,9 @@ public class ProtobufGenerator extends GeneratorBase
         if (!_inObject) {
             _reportError("Can not write field name: current context not an OBJECT but "+_pbContext.getTypeDesc());
         }
+        if (_currField != null) {
+            _reportError("Can not write field name: expecting value (for field '"+_currField.name+"'");
+        }
         ProtobufField f = _currentMessage.field(id);
         if (f == null) {
             // May be ok, if we have said so
@@ -336,16 +336,6 @@ public class ProtobufGenerator extends GeneratorBase
     @Override
     public final void flush() throws IOException
     {
-        // can only flush if we do not need accumulation for length prefixes
-        if (_buffered == null) {
-            int start = _currentStart;
-            int len = _currentPtr - start;
-            if (len > 0) {
-                _currentStart = 0;
-                _currentPtr = 0;
-                _output.write(_currentBuffer, start, len);
-            }
-        }
         _output.flush();
     }
     
@@ -432,26 +422,19 @@ public class ProtobufGenerator extends GeneratorBase
     public final void writeStartObject() throws IOException
     {
         if (_currField == null) {
-            // root?
-            if (!_pbContext.inRoot()) {
-                _reportError("Can not write START_OBJECT without field (message type "+_currentMessage.getName()+")");
-            }
-            _currentMessage = _schema.getRootType();
-        } else {
-            // but also, field value must be Message if so
-            if (!_currField.isObject()) {
-                _reportError("Can not write START_OBJECT: type of field '"+_currField.name+"' not Message but: "+_currField.type);
-            }
-            _currentMessage = _currField.getMessageType();
+            _reportError("Can not write START_OBJECT without field (message type "+_currentMessage.getName()+")");
+        }
+        // but also, field value must be Message if so
+        if (!_currField.isObject()) {
+            _reportError("Can not write START_OBJECT: type of field '"+_currField.name+"' not Message but: "+_currField.type);
         }
         
         if (_inObject) {
-            _pbContext = _pbContext.createChildObjectContext(_currentMessage);
+            _pbContext = _pbContext.createChildObjectContext(_currField.getMessageType());
             _currField = null;
         } else { // must be array, then
-            _pbContext = _pbContext.createChildObjectContext(_currentMessage);
+            _pbContext = _pbContext.createChildObjectContext(_currField.getMessageType());
             // but do NOT clear next field here
-            _inObject = true;
         }
         // even if within array, object fields use tags
         _writeTag = true; 
@@ -463,21 +446,20 @@ public class ProtobufGenerator extends GeneratorBase
         if (!_inObject) {
             _reportError("Current context not an object but "+_pbContext.getTypeDesc());
         }
+        if (_currField != null) {
+            _reportError("Can not write END_OBJECT after writing FIELD_NAME ('"+_currField.name+"') but not value");
+        }
         _pbContext = _pbContext.getParent();
-        if (_pbContext.inRoot()) {
-            if (!_complete) {
-                _complete();
-            }
-        } else {
-            _currentMessage = _pbContext.getMessageType();
+        if (_pbContext.inRoot() && !_complete) {
+            _complete();
         }
         _currField = _pbContext.getField();
         // possible that we might be within array, which might be packed:
-        boolean inObj = _pbContext.inObject();
+        boolean inObj = _pbContext.inArray();
         _inObject = inObj;
-        _writeTag = inObj || !_pbContext.inArray() || !_currField.packed;
+        _writeTag = inObj || !_currField.packed;
     }
-
+    
     /*
     /**********************************************************
     /* Output method implementations, textual
@@ -784,7 +766,6 @@ public class ProtobufGenerator extends GeneratorBase
     protected void _writeString(String v) throws IOException
     {
         // !!!
-        throw new UnsupportedOperationException();
     }
 
     /*
@@ -1005,55 +986,16 @@ public class ProtobufGenerator extends GeneratorBase
 
     protected final void _ensureRoom(int needed) throws IOException
     {
-        // common case: we got it already
-        if ((_currentPtr + needed) < _currentEnd) {
-            return;
-        }
-        // if not, either simple (flush), or 
-        final int start = _currentStart;
-        final int currLen = _currentPtr - start;
-
-        _currentStart = 0;
-        _currentPtr = 0;
-        
-        ByteAccumulator acc = _buffered;
-        if (acc == null) {
-            // without accumulation, we know buffer is free for reuse
-            if (currLen > 0) {
-                _output.write(_currentBuffer, start, currLen);
-            }
-            return;
-        }
-        // but with buffered, need to append, allocate new buffer (since old
-        // almost certainly contains buffered data)
-        if (currLen > 0) {
-            acc.append(_currentBuffer, start, currLen);
-        }
-        _currentBuffer = ProtobufUtil.allocSecondary(_currentBuffer);
+        // !!! TBI
     }
     
     protected void _complete() throws IOException
     {
         _complete = true;
-        final int start = _currentStart;
-        final int currLen = _currentPtr - start;
-        _currentPtr = start;
-
-        ByteAccumulator acc = _buffered;
-        if (acc == null) {
-            if (currLen > 0) {
-                _output.write(_currentBuffer, start, currLen);
-                _currentStart = 0;
-                _currentPtr = 0;
-            }
-        } else {
-            if (currLen > 0) {
-                acc.append(_currentBuffer, start, currLen);
-            }
-            do {
-                acc = acc.finish(_output);
-            } while (acc != null);
-            _buffered = null;
-        }
+        /*
+        BinaryEncoder encoder = AvroSchema.encoder(_output);
+        _rootContext.complete(encoder);
+        encoder.flush();
+        */
     }
 }
