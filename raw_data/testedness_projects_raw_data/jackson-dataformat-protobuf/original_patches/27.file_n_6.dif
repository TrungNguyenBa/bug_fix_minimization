diff --git a/src/main/java/com/fasterxml/jackson/dataformat/protobuf/ProtobufUtil.java b/src/main/java/com/fasterxml/jackson/dataformat/protobuf/ProtobufUtil.java
index 780ec8b..04c9a44 100644
--- a/src/main/java/com/fasterxml/jackson/dataformat/protobuf/ProtobufUtil.java
+++ b/src/main/java/com/fasterxml/jackson/dataformat/protobuf/ProtobufUtil.java
@@ -2,52 +2,6 @@ package com.fasterxml.jackson.dataformat.protobuf;
 
 public class ProtobufUtil
 {
-    public final static int SECONDARY_BUFFER_LENGTH = 64000;
-
-    /**
-     * While we could get all fancy on allocating secondary buffer (after
-     * initial one), let's start with very simple strategy of medium-length
-     * buffer.
-     */
-    public static byte[] allocSecondary(byte[] curr) {
-        return new byte[SECONDARY_BUFFER_LENGTH];
-    }
-    
-    // NOTE: no negative values accepted
-    public static int lengthLength(int len) {
-        if (len <= 0x7F) { // 7 bytes
-            // if negatives were allowed, would need another check here
-            return 1;
-        }
-        if (len <= 0x3FFF) { // 14 bytes
-            return 2;
-        }
-        if (len <= 0x1FFFFF) { // 21 bytes
-            return 3;
-        }
-        if (len <= 0x1FFFFF) { // 21 bytes
-            return 3;
-        }
-        if (len <= 0x0FFFFFFF) { // 28 bytes
-            return 4;
-        }
-        return 5;
-    }
-
-    // NOTE: no negative values accepted
-    public static byte[] lengthAsBytes(int len) {
-        int bytes = lengthLength(len);
-        byte[] result = new byte[bytes];
-        int last = bytes-1;
-
-        for (int i = 0; i < last; ++i) {
-            result[i] = (byte) ((len & 0x7F) + 0x80);
-            len >>= 7;
-        }
-        result[last] = (byte) len;
-        return result;
-    }
-    
     public static int zigzagEncode(int input) {
         // Canonical version:
         //return (input << 1) ^  (input >> 31);
