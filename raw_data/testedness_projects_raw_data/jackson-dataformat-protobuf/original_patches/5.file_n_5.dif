diff --git a/src/main/java/com/fasterxml/jackson/dataformat/protobuf/schema/TypeResolver.java b/src/main/java/com/fasterxml/jackson/dataformat/protobuf/schema/TypeResolver.java
index 8bdb731..371619a 100644
--- a/src/main/java/com/fasterxml/jackson/dataformat/protobuf/schema/TypeResolver.java
+++ b/src/main/java/com/fasterxml/jackson/dataformat/protobuf/schema/TypeResolver.java
@@ -98,8 +98,9 @@ public class TypeResolver
         List<Field> rawFields = rawType.getFields();
         ProtobufField[] resolvedFields = new ProtobufField[rawFields.size()];
         
-        ProtobufMessage message = new ProtobufMessage(rawType.getName(), resolvedFields);
         // Important: add type itself as (being) resolved, to allow for self-refs:
+        Map<String,ProtobufField> fields = new LinkedHashMap<String,ProtobufField>();
+        ProtobufMessage message = new ProtobufMessage(rawType.getName(), fields, resolvedFields);
         if (_resolvedMessageTypes.isEmpty()) {
             _resolvedMessageTypes = new HashMap<String,ProtobufMessage>();
         }
@@ -143,6 +144,7 @@ public class TypeResolver
                 }
             }
             resolvedFields[ix++] = pbf;
+            fields.put(f.getName(), pbf);
         }
         ProtobufField first = (resolvedFields.length == 0) ? null : resolvedFields[0];
         
@@ -150,8 +152,9 @@ public class TypeResolver
         Arrays.sort(resolvedFields);
 
         // And then link the fields, to speed up iteration
-        for (int i = 0, end = resolvedFields.length-1; i < end; ++i) {
-            resolvedFields[i].assignNext(resolvedFields[i+1]);
+        List<ProtobufField> f = new ArrayList<ProtobufField>(fields.values());
+        for (int i = 0, end = f.size()-1; i < end; ++i) {
+            f.get(i).assignNext(f.get(i+1));
         }
         message.init(first);
         return message;
