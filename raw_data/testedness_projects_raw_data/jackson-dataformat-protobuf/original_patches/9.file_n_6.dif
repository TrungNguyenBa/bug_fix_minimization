diff --git a/src/test/java/com/fasterxml/jackson/dataformat/protobuf/ReadComplexPojoTest.java b/src/test/java/com/fasterxml/jackson/dataformat/protobuf/ReadComplexPojoTest.java
index 02b8f27..9a2f0f6 100644
--- a/src/test/java/com/fasterxml/jackson/dataformat/protobuf/ReadComplexPojoTest.java
+++ b/src/test/java/com/fasterxml/jackson/dataformat/protobuf/ReadComplexPojoTest.java
@@ -1,11 +1,7 @@
 package com.fasterxml.jackson.dataformat.protobuf;
 
-import java.io.ByteArrayInputStream;
-import java.io.InputStream;
-
-import org.junit.Assert;
-
 import com.fasterxml.jackson.databind.*;
+
 import com.fasterxml.jackson.dataformat.protobuf.schema.ProtobufSchema;
 import com.fasterxml.jackson.dataformat.protobuf.schema.ProtobufSchemaLoader;
 
@@ -21,18 +17,10 @@ public class ReadComplexPojoTest extends ProtobufTestBase
 
     public void testMediaItemSimple() throws Exception
     {
-        _testMediaItem(false);
-    }
-
-    
-    public void testMediaItemWithSmallReads() throws Exception
-    {
-        _testMediaItem(true);
-    }
-
-    @SuppressWarnings("resource")
-    private void _testMediaItem(boolean smallReads) throws Exception
-    {
+        /*
+        final protected static String PROTOC_INT_ARRAY = "message Ints {\n"
+                +" repeated int32 values = 1; }\n";
+        */
         ProtobufSchema schema = ProtobufSchemaLoader.std.parse(PROTOC_MEDIA_ITEM);
         final ObjectWriter w = MAPPER.writer(schema);
         MediaItem input = MediaItem.buildItem();
@@ -41,21 +29,12 @@ public class ReadComplexPojoTest extends ProtobufTestBase
         assertNotNull(bytes);
         assertEquals(252, bytes.length);
 
-        ObjectReader r =  MAPPER.reader(MediaItem.class).with(schema);
-        MediaItem result;
-        InputStream in = new ByteArrayInputStream(bytes);
-
-        if (smallReads) {
-            in = new LimitingInputStream(in, 123);
-        }
-        result = r.readValue(in);
-        
+        MediaItem result = MAPPER.reader(MediaItem.class).with(schema)
+                .readValue(bytes);
         assertNotNull(result);
         byte[] b2 = w.writeValueAsBytes(result);
         assertEquals(bytes.length, b2.length);
 
-        Assert.assertArrayEquals(bytes, b2);
-
         assertEquals(input, result);
     }
 }
