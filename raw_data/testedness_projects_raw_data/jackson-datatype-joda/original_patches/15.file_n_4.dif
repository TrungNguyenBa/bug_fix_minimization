diff --git a/src/main/java/com/fasterxml/jackson/datatype/joda/deser/IntervalDeserializer.java b/src/main/java/com/fasterxml/jackson/datatype/joda/deser/IntervalDeserializer.java
index d902096..6d5e4ad 100644
--- a/src/main/java/com/fasterxml/jackson/datatype/joda/deser/IntervalDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/datatype/joda/deser/IntervalDeserializer.java
@@ -4,8 +4,6 @@ import com.fasterxml.jackson.core.JsonParser;
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.core.JsonToken;
 import com.fasterxml.jackson.databind.DeserializationContext;
-import com.fasterxml.jackson.databind.JsonMappingException;
-
 import org.joda.time.Interval;
 
 import java.io.IOException;
@@ -21,26 +19,13 @@ public class IntervalDeserializer extends JodaDeserializerBase<Interval>
     @Override
     public Interval deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException, JsonProcessingException
     {
-        JsonToken t = jsonParser.getCurrentToken();
-        if (t != JsonToken.VALUE_STRING) {
-            throw deserializationContext.mappingException("expected JSON String, got "+t);
-        }
-        String v = jsonParser.getText().trim();
-
-        int dashIndex = v.isEmpty() ? -1 : v.indexOf('-', 1);
-        if (dashIndex < 0) {
-            throw deserializationContext.weirdStringException(v, handledType(), "no hyphen found to separate start, end");
-        }
-        long start, end;
-        String str = v.substring(0, dashIndex);
-        try {
-            start = Long.valueOf(str);
-            str = v.substring(dashIndex + 1);
-            end = Long.valueOf(str);
-        } catch (NumberFormatException e) {
-            throw JsonMappingException.from(jsonParser,
-                    "Failed to parse number from '"+str+"' (full source String '"+v+"') to construct "+handledType().getName());
-        }
+        if (jsonParser.getCurrentToken() == JsonToken.VALUE_STRING) {
+            String v = jsonParser.getText();
+            int dashIndex = v.indexOf('-');
+            long start = Long.valueOf(v.substring(0, dashIndex));
+            long end = Long.valueOf(v.substring(dashIndex + 1));
             return new Interval(start, end);
         }
+        throw deserializationContext.mappingException("expected JSON String");
+    }
 }
