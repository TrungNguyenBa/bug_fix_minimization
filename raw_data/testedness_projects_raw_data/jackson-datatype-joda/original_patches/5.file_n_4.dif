diff --git a/src/main/java/com/fasterxml/jackson/datatype/joda/deser/DateMidnightDeserializer.java b/src/main/java/com/fasterxml/jackson/datatype/joda/deser/DateMidnightDeserializer.java
index daaa1b9..9fce8d4 100644
--- a/src/main/java/com/fasterxml/jackson/datatype/joda/deser/DateMidnightDeserializer.java
+++ b/src/main/java/com/fasterxml/jackson/datatype/joda/deser/DateMidnightDeserializer.java
@@ -3,7 +3,6 @@ package com.fasterxml.jackson.datatype.joda.deser;
 import java.io.IOException;
 
 import org.joda.time.DateMidnight;
-import org.joda.time.DateTimeZone;
 import org.joda.time.LocalDate;
 
 import com.fasterxml.jackson.core.JsonParser;
@@ -37,7 +36,6 @@ public class DateMidnightDeserializer
     public DateMidnight deserialize(JsonParser p, DeserializationContext ctxt)
         throws IOException
     {
-    	
         // We'll accept either long (timestamp) or array:
         if (p.isExpectedStartArrayToken()) {
             p.nextToken(); // VALUE_NUMBER_INT
@@ -50,9 +48,7 @@ public class DateMidnightDeserializer
                 throw ctxt.wrongTokenException(p, JsonToken.END_ARRAY,
                         "after DateMidnight ints");
             }
-            DateTimeZone tz = _format.isTimezoneExplicit() ? _format.getTimeZone() : DateTimeZone.forTimeZone(ctxt.getTimeZone());
-
-            return new DateMidnight(year, month, day, tz);
+            return new DateMidnight(year, month, day);
         }
         switch (p.getCurrentToken()) {
         case VALUE_NUMBER_INT:
