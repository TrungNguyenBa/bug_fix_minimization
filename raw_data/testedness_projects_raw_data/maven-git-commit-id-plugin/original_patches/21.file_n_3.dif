diff --git a/src/main/java/pl/project13/maven/git/NativeGitProvider.java b/src/main/java/pl/project13/maven/git/NativeGitProvider.java
index 205be38..17a9f01 100644
--- a/src/main/java/pl/project13/maven/git/NativeGitProvider.java
+++ b/src/main/java/pl/project13/maven/git/NativeGitProvider.java
@@ -1,7 +1,6 @@
 package pl.project13.maven.git;
 
 import com.google.common.base.Splitter;
-import com.google.common.base.Throwables;
 import com.google.common.collect.Lists;
 
 import org.apache.maven.plugin.MojoExecutionException;
@@ -53,26 +52,12 @@ public class NativeGitProvider extends GitDataProvider {
 
   @Override
   protected String getBuildAuthorName() {
-      try {
-          return runGitCommand(canonical, "config --get user.name");
-      } catch (NativeCommandException e) {
-          if (e.getExitCode() == 1) { // No config file found
-              return "";
-          }
-          throw Throwables.propagate(e);
-      }
+    return tryToRunGitCommand(canonical, "config user.name");
   }
 
   @Override
   protected String getBuildAuthorEmail() {
-      try {
-          return runGitCommand(canonical, "config --get user.email");
-      } catch (NativeCommandException e) {
-          if (e.getExitCode() == 1) { // No config file found
-              return "";
-          }
-          throw Throwables.propagate(e);
-      }
+    return tryToRunGitCommand(canonical, "config user.email");
   }
 
   @Override
@@ -87,24 +72,21 @@ public class NativeGitProvider extends GitDataProvider {
   private String getBranch(File canonical) {
     String branch = null;
     try{
-      branch = runGitCommand(canonical, "symbolic-ref HEAD");
+      branch = tryToRunGitCommand(canonical, "symbolic-ref HEAD");
       if (branch != null) {
         branch = branch.replace("refs/heads/", "");
       }
-    } catch(NativeCommandException e) {
+    }catch(RuntimeException e){
       // it seems that git repro is in 'DETACHED HEAD'-State, using Commid-Id as Branch
-        if (e.getExitCode() == 1) {
       branch = getCommitId();
     }
-        throw Throwables.propagate(e);
-    }
     return branch;
   }
 
   @Override
-  protected String getGitDescribe() {
+  protected String getGitDescribe() throws MojoExecutionException {
     final String argumentsForGitDescribe = getArgumentsForGitDescribe(gitDescribe);
-    final String gitDescribe = runQuietGitCommand(canonical, "describe" + argumentsForGitDescribe);
+    final String gitDescribe = tryToRunGitCommand(canonical, "describe" + argumentsForGitDescribe);
     return gitDescribe;
   }
 
@@ -141,11 +123,11 @@ public class NativeGitProvider extends GitDataProvider {
 
   @Override
   protected String getCommitId() {
-    return runQuietGitCommand(canonical, "rev-parse HEAD");
+    return tryToRunGitCommand(canonical, "rev-parse HEAD");
   }
 
   @Override
-  protected String getAbbrevCommitId() {
+  protected String getAbbrevCommitId() throws MojoExecutionException {
     // we could run: tryToRunGitCommand(canonical, "rev-parse --short="+abbrevLength+" HEAD");
     // but minimum length for --short is 4, our abbrevLength could be 2
     String commitId = getCommitId();
@@ -165,34 +147,34 @@ public class NativeGitProvider extends GitDataProvider {
 
   @Override
   protected String getCommitAuthorName() {
-    return runQuietGitCommand(canonical, "log -1 --pretty=format:%an");
+    return tryToRunGitCommand(canonical, "log -1 --pretty=format:%an");
   }
 
   @Override
   protected String getCommitAuthorEmail() {
-    return runQuietGitCommand(canonical, "log -1 --pretty=format:%ae");
+    return tryToRunGitCommand(canonical, "log -1 --pretty=format:%ae");
   }
 
   @Override
   protected String getCommitMessageFull() {
-    return runQuietGitCommand(canonical, "log -1 --pretty=format:%B");
+    return tryToRunGitCommand(canonical, "log -1 --pretty=format:%B");
   }
 
   @Override
   protected String getCommitMessageShort() {
-    return runQuietGitCommand(canonical, "log -1 --pretty=format:%s");
+    return tryToRunGitCommand(canonical, "log -1 --pretty=format:%s");
   }
 
   @Override
   protected String getCommitTime() {
-    String value =  runQuietGitCommand(canonical, "log -1 --pretty=format:%ct");
+    String value =  tryToRunGitCommand(canonical, "log -1 --pretty=format:%ct");
     SimpleDateFormat smf = new SimpleDateFormat(dateFormat);
     return smf.format(Long.parseLong(value)*1000L);
   }
 
   @Override
-  protected String getTags() {
-    final String result = runQuietGitCommand(canonical, "tag --contains");
+  protected String getTags() throws MojoExecutionException {
+    final String result = tryToRunGitCommand(canonical, "tag --contains");
     return result.replace('\n', ',');
   }
 
@@ -207,7 +189,8 @@ public class NativeGitProvider extends GitDataProvider {
 
   private String getOriginRemote(File directory) throws MojoExecutionException {
     String remoteUrl = null;
-    String remotes = runQuietGitCommand(directory, "remote -v");
+    try {
+      String remotes = runGitCommand(directory, "remote -v");
 
       // welcome to text output parsing hell! - no `\n` is not enough
       for (String line : Splitter.onPattern("\\((fetch|push)\\)?").split(remotes)) {
@@ -221,9 +204,22 @@ public class NativeGitProvider extends GitDataProvider {
           remoteUrl = splited[1];
         }
       }
+    } catch (Exception e) {
+      throw new MojoExecutionException("Error while obtaining origin remote", e);
+    }
     return remoteUrl;
   }
 
+  private String tryToRunGitCommand(File directory, String gitCommand) {
+    String retValue = "";
+    try {
+      retValue = runGitCommand(directory, gitCommand);
+    } catch (MojoExecutionException ex) {
+      // do nothing
+    }
+    return retValue;
+  }
+
   /**
    * Runs a maven command and returns {@code true} if output was non empty.
    * Can be used to short cut reading output from command when we know it may be a rather long one.
@@ -245,32 +241,23 @@ public class NativeGitProvider extends GitDataProvider {
     }
   }
 
-  private String runQuietGitCommand(File directory, String gitCommand) {
-      final String env = System.getenv("GIT_PATH");
-      final String exec = (env == null) ? "git" : env;
-      final String command = String.format("%s %s", exec, gitCommand);
-
+  private String runGitCommand(File directory, String gitCommand) throws MojoExecutionException {
     try {
-          return getRunner().run(directory, command.trim()).trim();
-      } catch (IOException e) {
-          throw Throwables.propagate(e);
-      }
-  }
-
-  private String runGitCommand(File directory, String gitCommand) throws NativeCommandException {
       final String env = System.getenv("GIT_PATH");
       final String exec = (env == null) ? "git" : env;
       final String command = String.format("%s %s", exec, gitCommand);
 
-      try {
-          return getRunner().run(directory, command.trim()).trim();
-      } catch (NativeCommandException e) {
-          throw e;
-      } catch (IOException e) {
-          throw Throwables.propagate(e);
+      final String result = getRunner().run(directory, command.trim()).trim();
+      return result;
+    } catch (IOException ex) {
+      if (ex.getMessage().contains("exited with invalid status")) {
+        throw new RuntimeException("Failed to execute git command (`git " + gitCommand + "` @ " + directory +")!", ex);
+      } else {
+        throw new MojoExecutionException("Could not run GIT command - GIT is not installed or not exists in system path? " +
+                                           "Tried to run: 'git " + gitCommand + "'", ex);
+      }
     }
   }
-
 
   private ProcessRunner getRunner() {
     if (runner == null) {
@@ -286,32 +273,6 @@ public class NativeGitProvider extends GitDataProvider {
     boolean runEmpty(File directory, String command) throws IOException;
   }
 
-  public static class NativeCommandException extends IOException
-  {
-      private final int exitCode;
-      private final String command;
-      private final File directory;
-
-      public NativeCommandException(int exitCode, String command, File directory, String message) {
-          super(message);
-          this.exitCode = exitCode;
-          this.command = command;
-          this.directory = directory;
-      }
-
-      public int getExitCode() {
-          return exitCode;
-      }
-
-      public String getCommand() {
-          return command;
-      }
-
-      public File getDirectory() {
-          return directory;
-      }
-  }
-
   protected static class JavaProcessRunner implements ProcessRunner {
     @Override
         public String run(File directory, String command) throws IOException {
@@ -334,7 +295,7 @@ public class NativeGitProvider extends GitDataProvider {
               final StringBuilder errMsg = readStderr(err);
 
               final String message = String.format("Git command exited with invalid status [%d]: stdout: `%s`, stderr: `%s`", proc.exitValue(), output, errMsg.toString());
-              throw new NativeCommandException(proc.exitValue(), command, directory, message);
+              throw new IOException(message);
             }
             output = commandResult.toString();
           } catch (InterruptedException ex) {
