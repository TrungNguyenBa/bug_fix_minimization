diff --git a/src/main/java/pl/project13/maven/git/NativeGitProvider.java b/src/main/java/pl/project13/maven/git/NativeGitProvider.java
index af78910..e06600b 100644
--- a/src/main/java/pl/project13/maven/git/NativeGitProvider.java
+++ b/src/main/java/pl/project13/maven/git/NativeGitProvider.java
@@ -1,10 +1,20 @@
 package pl.project13.maven.git;
 
-import com.google.common.base.Splitter;
-import org.apache.maven.plugin.MojoExecutionException;
+import java.io.ByteArrayInputStream;
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.LinkedHashMap;
+import java.util.Locale;
+import java.util.Map;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+import org.apache.maven.plugin.MojoExecutionException;
 import pl.project13.maven.git.log.LoggerBridge;
-
+import pl.project13.maven.git.log.MavenLoggerBridge;
 import java.io.*;
 
 
@@ -30,7 +40,7 @@ public class NativeGitProvider extends GitDataProvider {
     return new NativeGitProvider(dotGitDirectory);
   }
 
-  NativeGitProvider(@NotNull File dotGitDirectory) {
+  NativeGitProvider(@NotNull File dotGitDirectory){
     this.dotGitDirectory = dotGitDirectory;
   }
 
@@ -63,14 +73,14 @@ public class NativeGitProvider extends GitDataProvider {
     return this;
   }
 
-  public NativeGitProvider setGitDescribe(GitDescribeConfig gitDescribe) {
+  public NativeGitProvider setGitDescribe(GitDescribeConfig gitDescribe){
     super.gitDescribe = gitDescribe;
     return this;
   }
 
   @Override
-  protected void init() throws MojoExecutionException {
-    try {
+  protected void init() throws MojoExecutionException{
+    try{
       canonical = dotGitDirectory.getCanonicalFile();
     } catch (Exception ex) {
       throw new MojoExecutionException("Passed a invalid directory, not a GIT repository: " + dotGitDirectory, ex);
@@ -78,21 +88,21 @@ public class NativeGitProvider extends GitDataProvider {
   }
 
   @Override
-  protected String getBuildAuthorName() {
+  protected String getBuildAuthorName(){
     return tryToRunGitCommand(canonical, "log -1 --pretty=format:\"%an\"");
   }
 
   @Override
-  protected String getBuildAuthorEmail() {
+  protected String getBuildAuthorEmail(){
     return tryToRunGitCommand(canonical, "log -1 --pretty=format:\"%ae\"");
   }
 
   @Override
-  protected void prepareGitToExtractMoreDetailedReproInformation() throws MojoExecutionException {
+  protected void prepareGitToExtractMoreDetailedReproInformation() throws MojoExecutionException{
   }
 
   @Override
-  protected String getBranchName() throws IOException {
+  protected String getBranchName() throws IOException{
     return getBranch(canonical);
   }
 
@@ -105,29 +115,29 @@ public class NativeGitProvider extends GitDataProvider {
   }
 
   @Override
-  protected String getGitDescribe() throws MojoExecutionException {
+  protected String getGitDescribe() throws MojoExecutionException{
     String argumentsForGitDescribe = getArgumentsForGitDescribe(super.gitDescribe);
     String gitDescribe = tryToRunGitCommand(canonical, "describe " + argumentsForGitDescribe);
     return gitDescribe;
   }
 
-  private String getArgumentsForGitDescribe(GitDescribeConfig gitDescribe) {
-    if (gitDescribe != null) {
+  private String getArgumentsForGitDescribe(GitDescribeConfig gitDescribe){
+    if(gitDescribe != null){
       return getArgumentsForGitDescribeAndDescibeNotNull(gitDescribe);
-    } else {
+    }else{
       return "";
     }
   }
   
-  private String getArgumentsForGitDescribeAndDescibeNotNull(GitDescribeConfig gitDescribe) {
+  private String getArgumentsForGitDescribeAndDescibeNotNull(GitDescribeConfig gitDescribe){
     StringBuilder argumentsForGitDescribe = new StringBuilder();
 
-    if (gitDescribe.isAlways()) {
+    if(gitDescribe.isAlways()){
       argumentsForGitDescribe.append("--always ");
     }
 
     String dirtyMark = gitDescribe.getDirty();
-    if (dirtyMark != null && !dirtyMark.isEmpty()) {
+    if(dirtyMark != null && !dirtyMark.isEmpty()){
       // Option: --dirty[=<mark>]
       // TODO: Code Injection? Or does the CliRunner escape Arguments?
       argumentsForGitDescribe.append("--dirty=" + dirtyMark + " ");
@@ -135,29 +145,29 @@ public class NativeGitProvider extends GitDataProvider {
 
     argumentsForGitDescribe.append("--abbrev=" + gitDescribe.getAbbrev() + " ");
 
-    if (gitDescribe.getTags()) {
+    if(gitDescribe.getTags()){
       argumentsForGitDescribe.append("--tags ");
     }
 
-    if (gitDescribe.getForceLongFormat()) {
+    if(gitDescribe.getForceLongFormat()){
       argumentsForGitDescribe.append("--long ");
     }
     return argumentsForGitDescribe.toString();
   }
 
   @Override
-  protected String getCommitId() {
+  protected String getCommitId(){
     return tryToRunGitCommand(canonical, "rev-parse HEAD");
   }
 
   @Override
-  protected String getAbbrevCommitId() throws MojoExecutionException {
+  protected String getAbbrevCommitId() throws MojoExecutionException{
     // we could run: tryToRunGitCommand(canonical, "rev-parse --short="+abbrevLength+" HEAD");
     // but minimum length for --short is 4, our abbrevLength could be 2
     String commitId = getCommitId();
     String abbrevCommitId = "";
 
-    if (commitId != null && !commitId.isEmpty()) {
+    if(commitId != null && !commitId.isEmpty()){
       abbrevCommitId = commitId.substring(0, abbrevLength);
     }
 
@@ -165,58 +175,55 @@ public class NativeGitProvider extends GitDataProvider {
   }
 
   @Override
-  protected String getCommitAuthorName() {
+  protected String getCommitAuthorName(){
     return tryToRunGitCommand(canonical, "log -1 --pretty=format:\"%cn\"");
   }
 
   @Override
-  protected String getCommitAuthorEmail() {
+  protected String getCommitAuthorEmail(){
     return tryToRunGitCommand(canonical, "log -1 --pretty=format:\"%ce\"");
   }
 
   @Override
-  protected String getCommitMessageFull() {
+  protected String getCommitMessageFull(){
      return tryToRunGitCommand(canonical, "log -1 --pretty=format:\"%B\"");
   }
 
   @Override
-  protected String getCommitMessageShort() {
+  protected String getCommitMessageShort(){
     return tryToRunGitCommand(canonical, "log -1 --pretty=format:\"%s\"");
   }
 
   @Override
-  protected String getCommitTime() {
+  protected String getCommitTime(){
     return tryToRunGitCommand(canonical, "log -1 --pretty=format:\"%ci\"");
   }
 
   @Override
-  protected String getRemoteOriginUrl() throws MojoExecutionException {
+  protected String getRemoteOriginUrl() throws MojoExecutionException{
     return getOriginRemote(canonical);
   }
 
   @Override
-  protected void finalCleanUp() {
+  protected void finalCleanUp(){
   }
 
   private String getOriginRemote(File directory) throws MojoExecutionException {
     String remoteUrl = null;
-    try {
+    try{
       String remotes = runGitCommand(directory, "remote -v");
-
-      // welcome to text output parsing hell! - no `\n` is not enough
-      for (String line : Splitter.onPattern("\\((fetch|push)\\)?").split(remotes)) {
+      for (String line : remotes.split("\n")) {
         String trimmed = line.trim();
-
         if (trimmed.startsWith("origin")) {
           String[] splited = trimmed.split("\\s+");
-          if (splited.length != REMOTE_COLS - 1) { // because (fetch/push) was trimmed
-            throw new MojoExecutionException("Unsupported GIT output (verbose remote address): " + line);
+          if (splited.length != REMOTE_COLS) {
+            throw new MojoExecutionException("Unsupported GIT output - verbose remote address:" + line);
           }
           remoteUrl =  splited[1];
         }
       }
-    } catch (Exception e) {
-      throw new MojoExecutionException("Error while obtaining origin remote", e);
+    }catch(Exception e){
+      throw new MojoExecutionException("Error ", e);
     }
     return remoteUrl;
   }
@@ -239,7 +246,7 @@ public class NativeGitProvider extends GitDataProvider {
 
       String result = getRunner().run(directory, command).trim();
       return result;
-    } catch (IOException ex) {
+    }catch(IOException ex) {
       throw new MojoExecutionException("Could not run GIT command - GIT is not installed or not exists in system path? " + "Tried to run: 'git " + gitCommand + "'", ex);
     }
   }
@@ -262,7 +269,7 @@ public class NativeGitProvider extends GitDataProvider {
     @Override
     public String run(File directory, String command) throws IOException {
       String output = "";
-      try {
+      try{
         ProcessBuilder builder = new ProcessBuilder(command.split("\\s"));
         final Process proc = builder.directory(directory).start();
         proc.waitFor();
@@ -275,7 +282,7 @@ public class NativeGitProvider extends GitDataProvider {
         }
 
         if (proc.exitValue() != 0) {
-          String message = String.format("Git command exited with invalid status [%d]: `%s`", proc.exitValue(), output);
+          String message = String.format("Git command exited with invalid status [%d]: `%s`", proc.exitValue(),output);
           throw new IOException(message);
         }
         output = commandResult.toString();
