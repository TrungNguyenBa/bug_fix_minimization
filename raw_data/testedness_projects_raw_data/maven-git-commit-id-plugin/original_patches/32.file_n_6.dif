diff --git a/src/test/java/pl/project13/maven/git/GitCommitIdMojoIntegrationTest.java b/src/test/java/pl/project13/maven/git/GitCommitIdMojoIntegrationTest.java
index c8239a3..1801c11 100644
--- a/src/test/java/pl/project13/maven/git/GitCommitIdMojoIntegrationTest.java
+++ b/src/test/java/pl/project13/maven/git/GitCommitIdMojoIntegrationTest.java
@@ -17,24 +17,31 @@
 
 package pl.project13.maven.git;
 
-import com.fasterxml.jackson.databind.ObjectMapper;
-import com.google.common.io.Files;
-import junitparams.JUnitParamsRunner;
-import junitparams.Parameters;
 import org.apache.maven.plugin.MojoExecutionException;
 import org.apache.maven.project.MavenProject;
 import org.codehaus.plexus.util.FileUtils;
 import org.junit.Test;
+import org.junit.Ignore;
 import org.junit.runner.RunWith;
+import java.util.Arrays;
+import java.util.Collection;
+import junitparams.JUnitParamsRunner;
+import junitparams.Parameters;
+
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.google.common.io.Files;
 import pl.project13.maven.git.FileSystemMavenSandbox.CleanUp;
 import pl.project13.test.utils.AssertException;
 
 import java.io.File;
 import java.nio.charset.Charset;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Properties;
+import java.util.Date;
 import java.text.SimpleDateFormat;
-import java.util.*;
 
-import static java.util.Arrays.*;
 import static org.fest.assertions.Assertions.assertThat;
 import static org.fest.assertions.MapAssert.entry;
 import static org.mockito.internal.util.reflection.Whitebox.setInternalState;
@@ -42,15 +49,28 @@ import static org.mockito.internal.util.reflection.Whitebox.setInternalState;
 @RunWith(JUnitParamsRunner.class)
 public class GitCommitIdMojoIntegrationTest extends GitIntegrationTest {
 
-  static final boolean UseJGit = false;
-  static final boolean UseNativeGit = true;
+  public static Collection defaultParameter() {
+    return Arrays.asList(new Object[] {
+      Boolean.FALSE,
+      Boolean.TRUE
+    });
+  }
 
-  public static Collection useNativeGit() {
-    return asList(UseJGit, UseNativeGit);
+  public static Collection performanceParameter() {
+    return Arrays.asList(new Object[][]{
+              {Boolean.FALSE, 1},
+              {Boolean.TRUE, 1},
+              {Boolean.FALSE, 10},
+              {Boolean.TRUE, 10},
+              {Boolean.FALSE, 100},
+              {Boolean.TRUE, 100},
+              {Boolean.FALSE, 1000},              
+              {Boolean.TRUE, 1000}              
+    });
   }
 
   @Test
-  @Parameters(method = "useNativeGit")
+  @Parameters(method = "defaultParameter")
   public void shouldResolvePropertiesOnDefaultSettingsForNonPomProject(boolean useNativeGit) throws Exception {
     // given
     mavenSandbox.withParentProject("my-jar-project", "jar").withNoChildProject().withGitRepoInParent(AvailableGitTestRepo.WITH_ONE_COMMIT).create(CleanUp.CLEANUP_FIRST);
@@ -66,13 +86,13 @@ public class GitCommitIdMojoIntegrationTest extends GitIntegrationTest {
   }
 
   @Test
-  @Parameters(method = "useNativeGit")
+  @Parameters(method = "defaultParameter")
   public void shouldNotRunWhenSkipIsSet(boolean useNativeGit) throws Exception {
     // given
     mavenSandbox.withParentProject("my-skip-project", "jar").withNoChildProject().withGitRepoInParent(AvailableGitTestRepo.WITH_ONE_COMMIT).create(CleanUp.CLEANUP_FIRST);
     MavenProject targetProject = mavenSandbox.getParentProject();
     setProjectToExecuteMojoIn(targetProject);
-    alterMojoSettings("skip", true);
+    alterMojoSettings("skip", Boolean.TRUE);
     alterMojoSettings("useNativeGit", useNativeGit);
 
     // when
@@ -83,7 +103,7 @@ public class GitCommitIdMojoIntegrationTest extends GitIntegrationTest {
   }
 
   @Test
-  @Parameters(method = "useNativeGit")
+  @Parameters(method = "defaultParameter")
   public void shouldNotRunWhenPackagingPomAndDefaultSettingsApply(boolean useNativeGit) throws Exception {
     // given
     mavenSandbox.withParentProject("my-pom-project", "pom").withNoChildProject().withGitRepoInParent(AvailableGitTestRepo.WITH_ONE_COMMIT).create(CleanUp.CLEANUP_FIRST);
@@ -99,7 +119,7 @@ public class GitCommitIdMojoIntegrationTest extends GitIntegrationTest {
   }
 
   @Test
-  @Parameters(method = "useNativeGit")
+  @Parameters(method = "defaultParameter")
   public void shouldRunWhenPackagingPomAndSkipPomsFalse(boolean useNativeGit) throws Exception {
     // given
     mavenSandbox.withParentProject("my-pom-project", "pom").withNoChildProject().withGitRepoInParent(AvailableGitTestRepo.WITH_ONE_COMMIT).create(CleanUp.CLEANUP_FIRST);
@@ -116,7 +136,7 @@ public class GitCommitIdMojoIntegrationTest extends GitIntegrationTest {
   }
 
   @Test
-  @Parameters(method = "useNativeGit")
+  @Parameters(method = "defaultParameter")
   public void shouldUseParentProjectRepoWhenInvokedFromChild(boolean useNativeGit) throws Exception {
     // given
     mavenSandbox.withParentProject("my-pom-project", "pom").withChildProject("my-jar-module", "jar").withGitRepoInParent(AvailableGitTestRepo.WITH_ONE_COMMIT).create(CleanUp.CLEANUP_FIRST);
@@ -133,7 +153,7 @@ public class GitCommitIdMojoIntegrationTest extends GitIntegrationTest {
   }
 
   @Test
-  @Parameters(method = "useNativeGit")
+  @Parameters(method = "defaultParameter")
   public void shouldUseChildProjectRepoIfInvokedFromChild(boolean useNativeGit) throws Exception {
     // given
     mavenSandbox.withParentProject("my-pom-project", "pom").withChildProject("my-jar-module", "jar").withGitRepoInChild(AvailableGitTestRepo.WITH_ONE_COMMIT).create(CleanUp.CLEANUP_FIRST);
@@ -150,7 +170,7 @@ public class GitCommitIdMojoIntegrationTest extends GitIntegrationTest {
   }
 
   @Test
-  @Parameters(method = "useNativeGit")
+  @Parameters(method = "defaultParameter")
   public void shouldFailWithExceptionWhenNoGitRepoFound(boolean useNativeGit) throws Exception {
     // given
     mavenSandbox.withParentProject("my-pom-project", "pom")
@@ -176,7 +196,7 @@ public class GitCommitIdMojoIntegrationTest extends GitIntegrationTest {
   }
 
   @Test
-  @Parameters(method = "useNativeGit")
+  @Parameters(method = "defaultParameter")
   public void shouldGenerateCustomPropertiesFileProperties(boolean useNativeGit) throws Exception {
       // given
       mavenSandbox.withParentProject("my-pom-project", "pom")
@@ -206,7 +226,7 @@ public class GitCommitIdMojoIntegrationTest extends GitIntegrationTest {
   }
 
   @Test
-  @Parameters(method = "useNativeGit")
+  @Parameters(method = "defaultParameter")
   public void shouldGenerateCustomPropertiesFileJson(boolean useNativeGit) throws Exception {
       // given
       mavenSandbox.withParentProject("my-pom-project", "pom")
@@ -242,7 +262,7 @@ public class GitCommitIdMojoIntegrationTest extends GitIntegrationTest {
   }
 
   @Test
-  @Parameters(method = "useNativeGit")
+  @Parameters(method = "defaultParameter")
   public void shouldSkipWithoutFailOnNoGitDirectoryWhenNoGitRepoFound(boolean useNativeGit) throws Exception {
     // given
     mavenSandbox.withParentProject("my-jar-project", "jar")
@@ -263,7 +283,7 @@ public class GitCommitIdMojoIntegrationTest extends GitIntegrationTest {
   }
 
   @Test
-  @Parameters(method = "useNativeGit")
+  @Parameters(method = "defaultParameter")
   public void shouldNotSkipWithoutFailOnNoGitDirectoryWhenNoGitRepoIsPresent(boolean useNativeGit) throws Exception {
     // given
     mavenSandbox.withParentProject("my-jar-project", "jar")
@@ -284,7 +304,7 @@ public class GitCommitIdMojoIntegrationTest extends GitIntegrationTest {
   }
 
   @Test
-  @Parameters(method = "useNativeGit")
+  @Parameters(method = "defaultParameter")
   public void shouldGenerateDescribeWithTagOnlyWhenForceLongFormatIsFalse(boolean useNativeGit) throws Exception {
     // given
     mavenSandbox.withParentProject("my-pom-project", "pom")
@@ -295,7 +315,7 @@ public class GitCommitIdMojoIntegrationTest extends GitIntegrationTest {
     MavenProject targetProject = mavenSandbox.getChildProject();
 
     setProjectToExecuteMojoIn(targetProject);
-    GitDescribeConfig gitDescribeConfig = createGitDescribeConfig(false, 7);
+    GitDescribeConfig gitDescribeConfig = createGitDescribeConfig(false,7);
     alterMojoSettings("gitDescribe", gitDescribeConfig);
     alterMojoSettings("useNativeGit", useNativeGit);
 
@@ -307,7 +327,7 @@ public class GitCommitIdMojoIntegrationTest extends GitIntegrationTest {
   }
 
   @Test
-  @Parameters(method = "useNativeGit")
+  @Parameters(method = "defaultParameter")
   public void shouldGenerateDescribeWithTagOnlyWhenForceLongFormatIsFalseAndAbbrevLengthIsNonDefault(boolean useNativeGit) throws Exception {
     // given
     mavenSandbox.withParentProject("my-pom-project", "pom")
@@ -318,7 +338,7 @@ public class GitCommitIdMojoIntegrationTest extends GitIntegrationTest {
     MavenProject targetProject = mavenSandbox.getChildProject();
 
     setProjectToExecuteMojoIn(targetProject);
-    GitDescribeConfig gitDescribeConfig = createGitDescribeConfig(false, 10);
+    GitDescribeConfig gitDescribeConfig = createGitDescribeConfig(false,10);
     alterMojoSettings("gitDescribe", gitDescribeConfig);
     alterMojoSettings("useNativeGit", useNativeGit);
 
@@ -331,7 +351,7 @@ public class GitCommitIdMojoIntegrationTest extends GitIntegrationTest {
   }
 
   @Test
-  @Parameters(method = "useNativeGit")
+  @Parameters(method = "defaultParameter")
   public void shouldGenerateDescribeWithTagAndZeroAndCommitIdWhenForceLongFormatIsTrue(boolean useNativeGit) throws Exception {
     // given
     mavenSandbox.withParentProject("my-pom-project", "pom")
@@ -342,7 +362,7 @@ public class GitCommitIdMojoIntegrationTest extends GitIntegrationTest {
     MavenProject targetProject = mavenSandbox.getChildProject();
 
     setProjectToExecuteMojoIn(targetProject);
-    GitDescribeConfig gitDescribeConfig = createGitDescribeConfig(true, 7);
+    GitDescribeConfig gitDescribeConfig = createGitDescribeConfig(true,7);
     alterMojoSettings("gitDescribe", gitDescribeConfig);
     alterMojoSettings("useNativeGit", useNativeGit);
 
@@ -350,11 +370,11 @@ public class GitCommitIdMojoIntegrationTest extends GitIntegrationTest {
     mojo.execute();
 
     // then
-    assertThat(targetProject.getProperties()).includes(entry("git.commit.id.describe", "v1.0.0-0-gde4db35"));
+    assertThat(targetProject.getProperties()).includes(entry("git.commit.id.describe", "v1.0.0-0-gde4db35917"));
   }
 
   @Test
-  @Parameters(method = "useNativeGit")
+  @Parameters(method = "defaultParameter")
   public void shouldGenerateDescribeWithTagAndZeroAndCommitIdWhenForceLongFormatIsTrueAndAbbrevLengthIsNonDefault(boolean useNativeGit) throws Exception {
     // given
     mavenSandbox.withParentProject("my-pom-project", "pom")
@@ -365,7 +385,7 @@ public class GitCommitIdMojoIntegrationTest extends GitIntegrationTest {
     MavenProject targetProject = mavenSandbox.getChildProject();
 
     setProjectToExecuteMojoIn(targetProject);
-    GitDescribeConfig gitDescribeConfig = createGitDescribeConfig(true, 10);
+    GitDescribeConfig gitDescribeConfig = createGitDescribeConfig(true,10);
     alterMojoSettings("gitDescribe", gitDescribeConfig);
     alterMojoSettings("useNativeGit", useNativeGit);
 
@@ -373,12 +393,12 @@ public class GitCommitIdMojoIntegrationTest extends GitIntegrationTest {
     mojo.execute();
 
     // then
-    assertThat(targetProject.getProperties()).includes(entry("git.commit.id.describe", "v1.0.0-0-gde4db35917"));
+    assertThat(targetProject.getProperties()).includes(entry("git.commit.id.describe", "v1.0.0-0-gde4db35"));
     assertThat(targetProject.getProperties()).includes(entry("git.commit.id.describe-short", "v1.0.0-0"));
   }
 
   @Test
-  @Parameters(method = "useNativeGit")
+  @Parameters(method = "defaultParameter")
   public void shouldGenerateCommitIdAbbrevWithDefaultLength(boolean useNativeGit) throws Exception {
     // given
     mavenSandbox.withParentProject("my-pom-project", "pom")
@@ -400,7 +420,7 @@ public class GitCommitIdMojoIntegrationTest extends GitIntegrationTest {
   }
 
   @Test
-  @Parameters(method = "useNativeGit")
+  @Parameters(method = "defaultParameter")
   public void shouldGenerateCommitIdAbbrevWithNonDefaultLength(boolean useNativeGit) throws Exception {
     // given
     mavenSandbox.withParentProject("my-pom-project", "pom")
@@ -422,7 +442,7 @@ public class GitCommitIdMojoIntegrationTest extends GitIntegrationTest {
   }
 
   @Test
-  @Parameters(method = "useNativeGit")
+  @Parameters(method = "defaultParameter")
   public void shouldFormatDate(boolean useNativeGit) throws Exception {
     // given
     mavenSandbox.withParentProject("my-pom-project", "pom")
@@ -448,7 +468,7 @@ public class GitCommitIdMojoIntegrationTest extends GitIntegrationTest {
   }
 
   @Test
-  @Parameters(method = "useNativeGit")
+  @Parameters(method = "defaultParameter")
   public void shouldSkipGitDescribe(boolean useNativeGit) throws Exception {
     // given
     mavenSandbox.withParentProject("my-pom-project", "pom")
@@ -459,7 +479,7 @@ public class GitCommitIdMojoIntegrationTest extends GitIntegrationTest {
 
     setProjectToExecuteMojoIn(targetProject);
 
-    GitDescribeConfig gitDescribeConfig = createGitDescribeConfig(true, 7);
+    GitDescribeConfig gitDescribeConfig = createGitDescribeConfig(true,7);
     gitDescribeConfig.setSkip(true);
     alterMojoSettings("gitDescribe", gitDescribeConfig);
     alterMojoSettings("useNativeGit", useNativeGit);
@@ -472,7 +492,7 @@ public class GitCommitIdMojoIntegrationTest extends GitIntegrationTest {
   }
   
   @Test
-  @Parameters(method = "useNativeGit")
+  @Parameters(method = "defaultParameter")
   public void shouldMarkGitDescribeAsDirty(boolean useNativeGit) throws Exception {
     // given
     mavenSandbox.withParentProject("my-pom-project", "pom")
@@ -483,7 +503,7 @@ public class GitCommitIdMojoIntegrationTest extends GitIntegrationTest {
 
     setProjectToExecuteMojoIn(targetProject);
 
-    GitDescribeConfig gitDescribeConfig = createGitDescribeConfig(true, 7);
+    GitDescribeConfig gitDescribeConfig = createGitDescribeConfig(true,7);
     String dirtySuffix = "-dirtyTest";
     gitDescribeConfig.setDirty(dirtySuffix);
     alterMojoSettings("gitDescribe", gitDescribeConfig);
@@ -493,11 +513,11 @@ public class GitCommitIdMojoIntegrationTest extends GitIntegrationTest {
     mojo.execute();
 
     // then
-    assertThat(targetProject.getProperties()).includes(entry("git.commit.id.describe", "v1.0.0-0-gde4db35" + dirtySuffix));
+    assertThat(targetProject.getProperties()).includes(entry("git.commit.id.describe", "v1.0.0-0-gde4db35"+dirtySuffix));
   }
 
   @Test
-  @Parameters(method = "useNativeGit")
+  @Parameters(method = "defaultParameter")
   public void shouldAlwaysPrintGitDescribe(boolean useNativeGit) throws Exception {
     // given
     mavenSandbox.withParentProject("my-pom-project", "pom")
@@ -508,7 +528,7 @@ public class GitCommitIdMojoIntegrationTest extends GitIntegrationTest {
 
     setProjectToExecuteMojoIn(targetProject);
 
-    GitDescribeConfig gitDescribeConfig = createGitDescribeConfig(true, 7);
+    GitDescribeConfig gitDescribeConfig = createGitDescribeConfig(true,7);
     gitDescribeConfig.setAlways(true);
     alterMojoSettings("gitDescribe", gitDescribeConfig);
     alterMojoSettings("useNativeGit", useNativeGit);
@@ -521,7 +541,7 @@ public class GitCommitIdMojoIntegrationTest extends GitIntegrationTest {
   }
 
   @Test
-  @Parameters(method = "useNativeGit")
+  @Parameters(method = "defaultParameter")
   public void shouldWorkWithEmptyGitDescribe(boolean useNativeGit) throws Exception {
     // given
     mavenSandbox.withParentProject("my-pom-project", "pom")
@@ -544,7 +564,7 @@ public class GitCommitIdMojoIntegrationTest extends GitIntegrationTest {
   }
 
   @Test
-  @Parameters(method = "useNativeGit")
+  @Parameters(method = "defaultParameter")
   public void shouldWorkWithNullGitDescribe(boolean useNativeGit) throws Exception {
     // given
     mavenSandbox.withParentProject("my-pom-project", "pom")
@@ -565,7 +585,38 @@ public class GitCommitIdMojoIntegrationTest extends GitIntegrationTest {
     assertGitPropertiesPresentInProject(targetProject.getProperties());
   }
 
-  private GitDescribeConfig createGitDescribeConfig(boolean forceLongFormat, int abbrev) {
+  @Test
+  @Parameters(method = "performanceParameter")
+  @Ignore("performance Test only")
+  public void performance(boolean useNativeGit, int iterations) throws Exception {
+    // given
+   mavenSandbox.withParentProject("my-pom-project", "pom")
+        .withChildProject("my-jar-module", "jar")
+        .withGitRepoInChild(AvailableGitTestRepo.MAVEN_GIT_COMMIT_ID_PLUGIN)
+        .create(CleanUp.CLEANUP_FIRST);
+    MavenProject targetProject = mavenSandbox.getChildProject();
+
+    setProjectToExecuteMojoIn(targetProject);
+
+    GitDescribeConfig gitDescribeConfig = createGitDescribeConfig(true,7);
+    gitDescribeConfig.setAlways(true);
+    alterMojoSettings("gitDescribe", gitDescribeConfig);
+    alterMojoSettings("useNativeGit", useNativeGit);
+
+    // when
+    long startTime = System.currentTimeMillis();
+    for(int i=0;i<iterations;i++){
+      mojo.execute();
+    }
+    long estimatedTime = System.currentTimeMillis() - startTime;
+    System.out.println("[***] Iterations: " +iterations+ " Time: " + estimatedTime + " ms for useNativeGit=" +useNativeGit);
+
+    // then
+    assertGitPropertiesPresentInProject(targetProject.getProperties());
+  }
+  
+  
+  private GitDescribeConfig createGitDescribeConfig(boolean forceLongFormat, int abbrev){
     GitDescribeConfig gitDescribeConfig = new GitDescribeConfig();
     gitDescribeConfig.setTags(true);
     gitDescribeConfig.setForceLongFormat(forceLongFormat);
