diff --git a/test-common/src/main/java/de/bwaldvogel/mongo/backend/AbstractBackendTest.java b/test-common/src/main/java/de/bwaldvogel/mongo/backend/AbstractBackendTest.java
index a3f98d7..9453fff 100644
--- a/test-common/src/main/java/de/bwaldvogel/mongo/backend/AbstractBackendTest.java
+++ b/test-common/src/main/java/de/bwaldvogel/mongo/backend/AbstractBackendTest.java
@@ -132,7 +132,6 @@ public abstract class AbstractBackendTest extends AbstractSimpleBackendTest {
         DBCursor cursor = collection.find().sort(json("a:1, _id:-1"));
         assertThat(cursor.toArray()).containsExactly(json("a:1, _id:3"), json("a:1, _id:2"), json("a:1, _id:1"),
                 json("a:2, _id:5"), json("a:2, _id:4"));
-        cursor.close();
     }
 
     @Test
@@ -329,7 +328,6 @@ public abstract class AbstractBackendTest extends AbstractSimpleBackendTest {
                 json("_id: 1"),
                 json("_id: 2"),
                 json("_id: 3"));
-        cursor.close();
     }
 
     @Test
@@ -555,7 +553,6 @@ public abstract class AbstractBackendTest extends AbstractSimpleBackendTest {
 
         DBCursor cursor = collection.find(json("name: 'neil'"));
         assertThat(cursor.toArray()).hasSize(2);
-        cursor.close();
     }
 
     @Test
@@ -567,7 +564,6 @@ public abstract class AbstractBackendTest extends AbstractSimpleBackendTest {
 
         DBCursor cursor = collection.find().sort(json("_id: 1")).limit(2).skip(2);
         assertThat(cursor.toArray()).containsExactly(json("_id: 3"), json("_id: 4"));
-        cursor.close();
     }
 
     @Test
@@ -579,7 +575,6 @@ public abstract class AbstractBackendTest extends AbstractSimpleBackendTest {
 
         DBCursor cursor = collection.find().sort(json("_id: -1")).limit(2).skip(2);
         assertThat(cursor.toArray()).containsExactly(json("_id: 2"), json("_id: 1"));
-        cursor.close();
     }
 
     @Test
@@ -595,7 +590,6 @@ public abstract class AbstractBackendTest extends AbstractSimpleBackendTest {
 
         DBCursor cursor = collection.find().sort(json("_id: 1")).limit(2).skip(2);
         assertThat(cursor.toArray()).containsExactly(json("_id: 5"));
-        cursor.close();
     }
 
     @Test
@@ -643,7 +637,6 @@ public abstract class AbstractBackendTest extends AbstractSimpleBackendTest {
 
         DBCursor cursor = collection.find(json("_id: {$in: [3,2,1]}"));
         assertThat(cursor.toArray()).containsExactly(json("_id: 1"), json("_id: 2"), json("_id: 3"));
-        cursor.close();
     }
 
     @Test
@@ -872,11 +865,9 @@ public abstract class AbstractBackendTest extends AbstractSimpleBackendTest {
 
         DBCursor cursor = collection.find().skip(3);
         assertThat(cursor.itcount()).isEqualTo(7);
-        cursor.close();
 
         cursor = collection.find().skip(3).limit(5);
         assertThat(cursor.itcount()).isEqualTo(5);
-        cursor.close();
     }
 
     @Test
@@ -1103,7 +1094,6 @@ public abstract class AbstractBackendTest extends AbstractSimpleBackendTest {
         DBCursor cursor = collection.find().sort(json("a: -1"));
         assertThat(cursor.toArray()).containsExactly(json("a:4, _id:4"), json("a:3, _id:3"), json("a:2, _id:2"),
                 json("a:1, _id:1"), json("_id: 5"));
-        cursor.close();
     }
 
     @Test
@@ -1792,6 +1782,7 @@ public abstract class AbstractBackendTest extends AbstractSimpleBackendTest {
         }
     }
 
+
     @Test
     public void testAddNonUniqueIndexOnNonIdField() {
         collection.createIndex(new BasicDBObject("someField", 1), new BasicDBObject("unique", false));
