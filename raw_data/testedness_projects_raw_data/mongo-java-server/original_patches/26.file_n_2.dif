diff --git a/src/main/java/de/bwaldvogel/mongo/backend/memory/MemoryCollection.java b/src/main/java/de/bwaldvogel/mongo/backend/memory/MemoryCollection.java
index 5a07ba6..8fdeaec 100644
--- a/src/main/java/de/bwaldvogel/mongo/backend/memory/MemoryCollection.java
+++ b/src/main/java/de/bwaldvogel/mongo/backend/memory/MemoryCollection.java
@@ -522,16 +522,7 @@ public class MemoryCollection extends MongoCollection {
     }
 
     private BSONObject projectDocument(BSONObject document, BSONObject fields) {
-
-        if (document == null)
-            return null;
-
-        BSONObject newDocument = new BasicBSONObject();
-        for (String key : fields.keySet()) {
-            if (Utils.isTrue(fields.get(key))) {
-                projectField(document, newDocument, key);
-            }
-        }
+        BSONObject newDocument = projectDocumentSeparingDots(document, fields);
 
         // implicitly add _id if not mentioned
         // http://docs.mongodb.org/manual/core/read-operations/#result-projections
@@ -542,27 +533,41 @@ public class MemoryCollection extends MongoCollection {
         return newDocument;
     }
 
-    private void projectField(BSONObject document, BSONObject newDocument, String key) {
-
+	private BSONObject projectDocumentSeparingDots(BSONObject document,
+			BSONObject fields) {
 		if (document == null)
-            return;
-
-        int dotPos = key.indexOf('.');
-        if (dotPos > 0) {
-            String mainKey = key.substring(0, dotPos);
-            String subKey = key.substring(dotPos + 1);
+            return null;
+        BSONObject newDocument = new BasicBSONObject();
+        for (String key : fields.keySet()) {
+        	if (Utils.isTrue(fields.get(key)))
+        		projectField(document, newDocument, key);
+        }
+		return newDocument;
+	}
 
-            Object object = document.get(mainKey);
-            // do not project the subdocument if it is not of type BSONObject
-            if (object instanceof BSONObject) {
-                if (!newDocument.containsField(mainKey)) {
-                    newDocument.put(mainKey, new BasicBSONObject());
+	private void projectField(BSONObject document, BSONObject newDocument,
+			String key) {
+		String[] splittedKeys = key.split("\\.");
+		String currentField = splittedKeys[0];
+		if (Utils.isTrue(document.get(currentField))) {
+			if (splittedKeys.length == 1)
+				newDocument.put(currentField, document.get(currentField));
+			else {
+				BSONObject remainingFields = new BasicBSONObject();
+				remainingFields.put(key.substring(currentField.length() + 1), new Integer(1));
+				if (newDocument.containsField(currentField))
+					mergeFields((BSONObject)newDocument.get(currentField), projectDocumentSeparingDots((BSONObject)document.get(currentField), remainingFields));
+				else
+					newDocument.put(currentField, projectDocumentSeparingDots((BSONObject)document.get(currentField), remainingFields));
 			}
-                projectField((BSONObject) object, (BSONObject) newDocument.get(mainKey), subKey);
 		}
-        } else {
-            newDocument.put(key, document.get(key));
 	}
+
+    private Object mergeFields(BSONObject object1,
+			BSONObject object2) {
+    	object1.putAll(object2);
+    	
+		return object1;
 	}
 
 	public synchronized Iterable<BSONObject> handleQuery(BSONObject queryObject, int numberToSkip, int numberToReturn)
