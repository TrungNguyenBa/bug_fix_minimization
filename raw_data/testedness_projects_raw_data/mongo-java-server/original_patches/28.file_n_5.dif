diff --git a/src/main/java/de/bwaldvogel/mongo/wire/MongoWireProtocolHandler.java b/src/main/java/de/bwaldvogel/mongo/wire/MongoWireProtocolHandler.java
index 3b8b504..09174a5 100644
--- a/src/main/java/de/bwaldvogel/mongo/wire/MongoWireProtocolHandler.java
+++ b/src/main/java/de/bwaldvogel/mongo/wire/MongoWireProtocolHandler.java
@@ -1,10 +1,17 @@
 package de.bwaldvogel.mongo.wire;
 
 import java.io.IOException;
+import java.nio.charset.Charset;
 import java.util.ArrayList;
+import java.util.Date;
 import java.util.List;
+import java.util.UUID;
+import java.util.regex.Pattern;
 
 import org.bson.BSONObject;
+import org.bson.BasicBSONObject;
+import org.bson.types.BSONTimestamp;
+import org.bson.types.ObjectId;
 import org.jboss.netty.buffer.ChannelBuffer;
 import org.jboss.netty.channel.Channel;
 import org.jboss.netty.channel.ChannelHandlerContext;
@@ -13,6 +20,7 @@ import org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import de.bwaldvogel.mongo.backend.Utils;
 import de.bwaldvogel.mongo.wire.message.MessageHeader;
 import de.bwaldvogel.mongo.wire.message.MongoDelete;
 import de.bwaldvogel.mongo.wire.message.MongoInsert;
@@ -26,6 +34,7 @@ import de.bwaldvogel.mongo.wire.message.MongoUpdate;
  */
 public class MongoWireProtocolHandler extends LengthFieldBasedFrameDecoder {
 
+    public static final int MAX_BSON_OBJECT_SIZE = 16 * 1024 * 1024;
     public static final int MAX_MESSAGE_SIZE_BYTES = 48 * 1000 * 1000;
 
     private static final Logger log = LoggerFactory.getLogger(MongoWireProtocolHandler.class);
@@ -36,11 +45,8 @@ public class MongoWireProtocolHandler extends LengthFieldBasedFrameDecoder {
     private static final int lengthAdjustment = -lengthFieldLength;
     private static final int initialBytesToStrip = 0;
 
-    private final BsonDecoder bsonDecoder;
-
     public MongoWireProtocolHandler() {
         super(maxFrameLength, lengthFieldOffset, lengthFieldLength, lengthAdjustment, initialBytesToStrip);
-        bsonDecoder = new BsonDecoder();
     }
 
     @Override
@@ -113,7 +119,7 @@ public class MongoWireProtocolHandler extends LengthFieldBasedFrameDecoder {
 
         buffer.skipBytes(4); // reserved
 
-        final String fullCollectionName = bsonDecoder.decodeCString(buffer);
+        final String fullCollectionName = readCString(buffer);
 
         final int flags = buffer.readInt();
         boolean singleRemove = false;
@@ -125,7 +131,7 @@ public class MongoWireProtocolHandler extends LengthFieldBasedFrameDecoder {
             throw new UnsupportedOperationException("flags=" + flags + " not yet supported");
         }
 
-        BSONObject selector = bsonDecoder.decodeBson(buffer);
+        BSONObject selector = readBSON(buffer);
         log.debug("delete " + selector + " from " + fullCollectionName);
         return new MongoDelete(channel, header, fullCollectionName, selector, singleRemove);
     }
@@ -134,14 +140,14 @@ public class MongoWireProtocolHandler extends LengthFieldBasedFrameDecoder {
 
         buffer.skipBytes(4); // reserved
 
-        final String fullCollectionName = bsonDecoder.decodeCString(buffer);
+        final String fullCollectionName = readCString(buffer);
 
         final int flags = buffer.readInt();
         boolean upsert = UpdateFlag.UPSERT.isSet(flags);
         boolean multi = UpdateFlag.MULTI_UPDATE.isSet(flags);
 
-        BSONObject selector = bsonDecoder.decodeBson(buffer);
-        BSONObject update = bsonDecoder.decodeBson(buffer);
+        BSONObject selector = readBSON(buffer);
+        BSONObject update = readBSON(buffer);
         log.debug("update " + selector + " in " + fullCollectionName);
         return new MongoUpdate(channel, header, fullCollectionName, selector, update, upsert, multi);
     }
@@ -152,11 +158,11 @@ public class MongoWireProtocolHandler extends LengthFieldBasedFrameDecoder {
         if (flags != 0)
             throw new UnsupportedOperationException("flags=" + flags + " not yet supported");
 
-        final String fullCollectionName =bsonDecoder. decodeCString(buffer);
+        final String fullCollectionName = readCString(buffer);
 
         List<BSONObject> documents = new ArrayList<BSONObject>();
         while (buffer.readable()) {
-            BSONObject document = bsonDecoder.decodeBson(buffer);
+            BSONObject document = readBSON(buffer);
             if (document == null) {
                 return null;
             }
@@ -170,14 +176,14 @@ public class MongoWireProtocolHandler extends LengthFieldBasedFrameDecoder {
 
         int flags = buffer.readInt();
 
-        final String fullCollectionName =bsonDecoder. decodeCString(buffer);
+        final String fullCollectionName = readCString(buffer);
         final int numberToSkip = buffer.readInt();
         final int numberToReturn = buffer.readInt();
 
-        BSONObject query = bsonDecoder.decodeBson(buffer);
+        BSONObject query = readBSON(buffer);
         BSONObject returnFieldSelector = null;
         if (buffer.readable()) {
-            returnFieldSelector = bsonDecoder.decodeBson(buffer);
+            returnFieldSelector = readBSON(buffer);
         }
 
         MongoQuery mongoQuery = new MongoQuery(channel, header, fullCollectionName, numberToSkip, numberToReturn,
@@ -195,4 +201,147 @@ public class MongoWireProtocolHandler extends LengthFieldBasedFrameDecoder {
         return mongoQuery;
     }
 
+    private BSONObject readBSON(ChannelBuffer buffer) throws IOException {
+        // TODO read BSON using Netty
+        final int length = buffer.readInt() - 4;
+        if (buffer.readableBytes() < length) {
+            throw new IOException();
+        }
+        if (length > MAX_BSON_OBJECT_SIZE) {
+            throw new IOException("BSON object too large: " + length + " bytes");
+        }
+
+        BSONObject object = new BasicBSONObject();
+        int start = buffer.readerIndex();
+        while (buffer.readerIndex() - start < length) {
+            byte type = buffer.readByte();
+            if (type == 0x00) {
+                return object;
+            }
+            String name = readCString(buffer);
+            Object value;
+            switch (type) {
+            case 0x01: // double
+                value = Double.valueOf(buffer.readDouble());
+                break;
+            case 0x02: // utf-8 string
+                value = readString(buffer);
+                break;
+            case 0x03: // embedded document
+                value = readBSON(buffer);
+                break;
+            case 0x04: // array
+                value = readArray(buffer);
+                break;
+            case 0x05: // data
+                value = readBinary(buffer);
+                break;
+            case 0x06: // undefined (deprecated)
+                value = null;
+                break;
+            case 0x07: // object id
+                value = readObjectId(buffer);
+                break;
+            case 0x08: // boolean
+                switch (buffer.readByte()) {
+                case 0x00:
+                    value = Boolean.FALSE;
+                    break;
+                case 0x01:
+                    value = Boolean.TRUE;
+                    break;
+                default:
+                    throw new IOException("illegal boolean value");
+                }
+                break;
+            case 0x09: // UTC datetime
+                value = new Date(buffer.readLong());
+                break;
+            case 0x0A: // null
+                value = null;
+                break;
+            case 0x0B: // regex
+                value = readPattern(buffer);
+                break;
+            case 0x10: // int32
+                value = Integer.valueOf(buffer.readInt());
+                break;
+            case 0x11: // Timestamp
+                value = new BSONTimestamp(buffer.readInt(), buffer.readInt());
+                break;
+            case 0x12: // int64
+                value = Long.valueOf(buffer.readLong());
+                break;
+            default:
+                throw new IOException("unknown type: " + type);
+            }
+            object.put(name, value);
+        }
+        throw new IOException("illegal BSON object");
+    }
+
+    private Pattern readPattern(ChannelBuffer buffer) throws IOException {
+        String regex = readCString(buffer);
+        String options = readCString(buffer);
+        return Utils.createPattern(regex, options);
+    }
+
+    private List<Object> readArray(ChannelBuffer buffer) throws IOException {
+        List<Object> array = new ArrayList<Object>();
+        BSONObject arrayObject = readBSON(buffer);
+        for (String key : arrayObject.keySet()) {
+            array.add(arrayObject.get(key));
+        }
+        return array;
+    }
+
+    private ObjectId readObjectId(ChannelBuffer buffer) {
+        byte[] b = new byte[12];
+        buffer.readBytes(b);
+        return new ObjectId(b);
+    }
+
+    private String readString(ChannelBuffer buffer) throws IOException {
+        int length = buffer.readInt();
+        byte[] data = new byte[length - 1];
+        buffer.readBytes(data);
+        String s = new String(data, "UTF-8");
+        byte trail = buffer.readByte();
+        if (trail != 0x00) {
+            throw new IOException();
+        }
+        return s;
+    }
+
+    // default visibility for unit test
+    String readCString(ChannelBuffer buffer) throws IOException {
+        int length = buffer.bytesBefore((byte) 0);
+        if (length < 0)
+            throw new IOException("string termination not found");
+
+        String result = buffer.toString(buffer.readerIndex(), length, Charset.forName("UTF-8"));
+        buffer.skipBytes(length + 1);
+        return result;
+    }
+
+    private Object readBinary(ChannelBuffer buffer) throws IOException {
+        int length = buffer.readInt();
+        int subtype = buffer.readByte();
+        switch (subtype) {
+        case 0x00:
+        case 0x80: {
+            byte[] data = new byte[length];
+            buffer.readBytes(data);
+            return data;
+        }
+        case 0x03:
+        case 0x04:
+            if (length != 128 / 8) {
+                throw new IOException();
+            }
+            return new UUID(buffer.readLong(), buffer.readLong());
+        default:
+            throw new IOException();
+        }
+    }
 }
