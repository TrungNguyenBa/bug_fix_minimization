diff --git a/core/src/main/java/de/bwaldvogel/mongo/backend/AbstractMongoCollection.java b/core/src/main/java/de/bwaldvogel/mongo/backend/AbstractMongoCollection.java
index 1e355a3..f5bc140 100644
--- a/core/src/main/java/de/bwaldvogel/mongo/backend/AbstractMongoCollection.java
+++ b/core/src/main/java/de/bwaldvogel/mongo/backend/AbstractMongoCollection.java
@@ -662,21 +662,14 @@ public abstract class AbstractMongoCollection<KEY> implements MongoCollection<KE
         }
 
         BSONObject newDocument = new BasicBSONObject();
-        if (onlyExclusions(fields)) {
-            newDocument.putAll(document);
-            for (String excludedField : fields.keySet()) {
-                newDocument.removeField(excludedField);
-            }
-        } else {
-            for (String key : fields.keySet()) {
-                if (Utils.isTrue(fields.get(key))) {
-                    projectField(document, newDocument, key);
-                }
+        for (String key : fields.keySet()) {
+            if (Utils.isTrue(fields.get(key))) {
+                projectField(document, newDocument, key);
             }
         }
 
         // implicitly add _id if not mentioned
-        // http://docs.mongodb.org/manual/tutorial/project-fields-from-query-results/#return-the-specified-fields-and-the-id-field-only
+        // http://docs.mongodb.org/manual/core/read-operations/#result-projections
         if (!fields.containsField(idField)) {
             newDocument.put(idField, document.get(idField));
         }
@@ -684,15 +677,6 @@ public abstract class AbstractMongoCollection<KEY> implements MongoCollection<KE
         return newDocument;
     }
 
-    private static boolean onlyExclusions(BSONObject fields) {
-        for (String key : fields.keySet()) {
-            if (Utils.isTrue(fields.get(key))) {
-                return false;
-            }
-        }
-        return true;
-    }
-
     private static void projectField(BSONObject document, BSONObject newDocument, String key) {
 
         if (document == null) {
