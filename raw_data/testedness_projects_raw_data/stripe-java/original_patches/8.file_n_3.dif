diff --git a/src/test/java/com/stripe/net/LiveStripeResponseGetterTest.java b/src/test/java/com/stripe/net/LiveStripeResponseGetterTest.java
index bc283ca..02fea52 100644
--- a/src/test/java/com/stripe/net/LiveStripeResponseGetterTest.java
+++ b/src/test/java/com/stripe/net/LiveStripeResponseGetterTest.java
@@ -52,49 +52,17 @@ public class LiveStripeResponseGetterTest {
 	}
 
 	@Test
-	public void testCreateQueryWithListParams() throws StripeException, UnsupportedEncodingException {
-
+	public void testCreateQueryWithList() throws StripeException, UnsupportedEncodingException {
+		/* Use LinkedHashMap because it preserves iteration order */
+		Map<String, Object> params = new LinkedHashMap<String, Object>();
 		List<String> nested = new LinkedList<String>();
 		nested.add("A");
 		nested.add("B");
 		nested.add("C");
-
-		/* Use LinkedHashMap because it preserves iteration order */
-		Map<String, Object> params = new LinkedHashMap<String, Object>();
 		params.put("nested", nested);
 		params.put("a", "b");
 		params.put("c", "d");
-
-		assertEquals(encode("nested[]=A&nested[]=B&nested[]=C&a=b&c=d"), srg.createQuery(params));
-	}
-
-    // It's really arrays of hashes where things in
-    // application/x-www-urlencoded-form start to get *really* hairy, so let's
-    // have a special test to cover thsi type of case.
-	@Test
-	public void testCreateQueryWithComplexParams() throws StripeException, UnsupportedEncodingException {
-        List<String> deepNestedList = new LinkedList<String>();
-		deepNestedList.add("A");
-		deepNestedList.add("B");
-
-        Map<String, String> deepNestedMap1 = new LinkedHashMap<String, String>();
-		deepNestedMap1.put("C", "C-1");
-		deepNestedMap1.put("D", "D-1");
-
-        Map<String, String> deepNestedMap2 = new LinkedHashMap<String, String>();
-		deepNestedMap2.put("C", "C-2");
-		deepNestedMap2.put("D", "D-2");
-
-		List<Object> nested = new LinkedList<Object>();
-        nested.add(deepNestedList);
-        nested.add(deepNestedMap1);
-        nested.add(deepNestedMap2);
-
-		/* Use LinkedHashMap because it preserves iteration order */
-		Map<String, Object> params = new LinkedHashMap<String, Object>();
-		params.put("nested", nested);
-
-		assertEquals(encode("nested[][]=A&nested[][]=B&nested[][C]=C-1&nested[][D]=D-1&nested[][C]=C-2&nested[][D]=D-2"), srg.createQuery(params));
+		assertEquals(encode("nested[0]=A&nested[1]=B&nested[2]=C&a=b&c=d"), srg.createQuery(params));
 	}
 }
 
