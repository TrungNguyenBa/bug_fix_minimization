diff --git a/src/main/java/net/rubyeye/xmemcached/utils/ByteUtils.java b/src/main/java/net/rubyeye/xmemcached/utils/ByteUtils.java
index 4327c20..10adb25 100644
--- a/src/main/java/net/rubyeye/xmemcached/utils/ByteUtils.java
+++ b/src/main/java/net/rubyeye/xmemcached/utils/ByteUtils.java
@@ -32,8 +32,7 @@ import com.google.code.yanf4j.buffer.IoBuffer;
 public final class ByteUtils {
     public static final Logger log = LoggerFactory.getLogger(ByteUtils.class);
     public static final String DEFAULT_CHARSET_NAME = "utf-8";
-	public static final Charset DEFAULT_CHARSET = Charset
-			.forName(DEFAULT_CHARSET_NAME);
+    public static final Charset DEFAULT_CHARSET = Charset.forName(DEFAULT_CHARSET_NAME);
     public static final ByteBuffer SPLIT = ByteBuffer.wrap(Constants.CRLF);
     /**
      * if it is testing,check key argument even if use binary protocol. The user
@@ -44,25 +44,6 @@ public final class ByteUtils {
     private ByteUtils() {
     }
 
-	public static boolean isNumber(String string) {
-		if (string == null || string.isEmpty()) {
-			return false;
-		}
-		int i = 0;
-		if (string.charAt(0) == '-') {
-			if (string.length() > 1) {
-				i++;
-			} else {
-				return false;
-			}
-		}
-		for (; i < string.length(); i++) {
-			if (!Character.isDigit(string.charAt(i))) {
-				return false;
-			}
-		}
-		return true;
-	}
 
     public static final byte[] getBytes(String k) {
         if (k == null || k.length() == 0) {
@@ -70,7 +51,8 @@ public final class ByteUtils {
         }
         try {
             return k.getBytes(DEFAULT_CHARSET_NAME);
-		} catch (UnsupportedEncodingException e) {
+        }
+        catch (UnsupportedEncodingException e) {
             throw new RuntimeException(e);
         }
     }
@@ -80,12 +63,14 @@ public final class ByteUtils {
         for (Object o : args) {
             if (wasFirst) {
                 wasFirst = false;
-			} else {
+            }
+            else {
                 bb.put(Constants.SPACE);
             }
             if (o instanceof byte[]) {
                 bb.put((byte[]) o);
-			} else {
+            }
+            else {
                 bb.put(getBytes(String.valueOf(o)));
             }
         }
@@ -98,22 +84,26 @@ public final class ByteUtils {
         for (Object o : args) {
             if (wasFirst) {
                 wasFirst = false;
-			} else {
+            }
+            else {
                 bb[s++] = Constants.SPACE;
             }
             if (o instanceof byte[]) {
                 byte[] tmp = (byte[]) o;
                 System.arraycopy(tmp, 0, bb, s, tmp.length);
                 s += tmp.length;
-			} else if (o instanceof Integer) {
+            }
+            else if (o instanceof Integer) {
                 int v = ((Integer) o).intValue();
                 s += stringSize(v);
                 getBytes(v, s, bb);
-			} else if (o instanceof String) {
+            }
+            else if (o instanceof String) {
                 byte[] tmp = getBytes((String) o);
                 System.arraycopy(tmp, 0, bb, s, tmp.length);
                 s += tmp.length;
-			} else if (o instanceof Long) {
+            }
+            else if (o instanceof Long) {
                 long v = ((Long) o).longValue();
                 s += stringSize(v);
                 getBytes(v, s, bb);
@@ -128,19 +119,18 @@ public final class ByteUtils {
     public static final void checkKey(final byte[] keyBytes) {
 
         if (keyBytes.length > ByteUtils.maxKeyLength) {
-			throw new IllegalArgumentException("Key is too long (maxlen = "
-					+ ByteUtils.maxKeyLength + ")");
+            throw new IllegalArgumentException("Key is too long (maxlen = " + ByteUtils.maxKeyLength + ")");
         }
         // Validate the key
         if (memcachedProtocol == Protocol.Text || testing) {
             for (byte b : keyBytes) {
                 if (b == ' ' || b == '\n' || b == '\r' || b == 0) {
                     try {
-						throw new IllegalArgumentException(
-								"Key contains invalid characters:  "
+                        throw new IllegalArgumentException("Key contains invalid characters:  "
                                 + new String(keyBytes, "utf-8"));
 
-					} catch (UnsupportedEncodingException e) {
+                    }
+                    catch (UnsupportedEncodingException e) {
                     }
                 }
 
@@ -154,19 +145,18 @@ public final class ByteUtils {
         }
         byte[] keyBytes = getBytes(key);
         if (keyBytes.length > ByteUtils.maxKeyLength) {
-			throw new IllegalArgumentException("Key is too long (maxlen = "
-					+ ByteUtils.maxKeyLength + ")");
+            throw new IllegalArgumentException("Key is too long (maxlen = " + ByteUtils.maxKeyLength + ")");
         }
         if (memcachedProtocol == Protocol.Text || testing) {
             // Validate the key
             for (byte b : keyBytes) {
                 if (b == ' ' || b == '\n' || b == '\r' || b == 0) {
                     try {
-						throw new IllegalArgumentException(
-								"Key contains invalid characters:"
+                        throw new IllegalArgumentException("Key contains invalid characters:"
                                 + new String(keyBytes, "utf-8"));
 
-					} catch (UnsupportedEncodingException e) {
+                    }
+                    catch (UnsupportedEncodingException e) {
                     }
                 }
 
@@ -183,14 +174,15 @@ public final class ByteUtils {
             throw new NullPointerException("Null Protocol");
         }
         memcachedProtocol = protocol;
-		// if (protocol == Protocol.Text) {
-		// maxKeyLength = 250;
-		// }
-		// else {
-		// maxKeyLength = 65535;
-		// }
+//        if (protocol == Protocol.Text) {
+//            maxKeyLength = 250;
+//        }
+//        else {
+//            maxKeyLength = 65535;
+//        }
     }
 
+
     public static final int normalizeCapacity(int requestedCapacity) {
         switch (requestedCapacity) {
         case 0:
@@ -242,7 +235,8 @@ public final class ByteUtils {
         if (buffer.remaining() >= remaining) {
             buffer.position(buffer.position() + remaining);
             return true;
-		} else {
+        }
+        else {
             return false;
         }
     }
@@ -260,8 +255,7 @@ public final class ByteUtils {
          * 娴��琛ㄦ���� Shift-And绠���归� >BM绠���归���� > �寸��归� > KMP�归�锛�
          * 濡��浣���村ソ��缓璁��璇�mail缁��(killme2008@gmail.com)
          */
-		int index = MemcachedDecoder.SPLIT_MATCHER
-				.matchFirst(com.google.code.yanf4j.buffer.IoBuffer.wrap(buffer));
+        int index = MemcachedDecoder.SPLIT_MATCHER.matchFirst(com.google.code.yanf4j.buffer.IoBuffer.wrap(buffer));
         if (index >= 0) {
             int limit = buffer.limit();
             buffer.limit(index);
@@ -278,14 +273,15 @@ public final class ByteUtils {
     public static String getString(byte[] bytes) {
         try {
             return new String(bytes, DEFAULT_CHARSET_NAME);
-		} catch (UnsupportedEncodingException e) {
+        }
+        catch (UnsupportedEncodingException e) {
             throw new RuntimeException(e);
         }
     }
 
+
     public static void byte2hex(byte b, StringBuffer buf) {
-		char[] hexChars = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
-				'A', 'B', 'C', 'D', 'E', 'F' };
+        char[] hexChars = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
         int high = ((b & 0xf0) >> 4);
         int low = (b & 0x0f);
         buf.append(hexChars[high]);
@@ -394,33 +394,28 @@ public final class ByteUtils {
     /**
      * All possible chars for representing a number as a String
      */
-	final static byte[] digits = { '0', '1', '2', '3', '4', '5', '6', '7', '8',
-			'9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',
-			'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
-			'z' };
-
-	final static byte[] DigitTens = { '0', '0', '0', '0', '0', '0', '0', '0',
-			'0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '2',
-			'2', '2', '2', '2', '2', '2', '2', '2', '2', '3', '3', '3', '3',
-			'3', '3', '3', '3', '3', '3', '4', '4', '4', '4', '4', '4', '4',
-			'4', '4', '4', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5',
-			'6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '7', '7', '7',
-			'7', '7', '7', '7', '7', '7', '7', '8', '8', '8', '8', '8', '8',
-			'8', '8', '8', '8', '9', '9', '9', '9', '9', '9', '9', '9', '9',
-			'9', };
-
-	final static byte[] DigitOnes = { '0', '1', '2', '3', '4', '5', '6', '7',
-			'8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0',
-			'1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3',
-			'4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6',
-			'7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
-			'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2',
-			'3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5',
-			'6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8',
-			'9', };
-
-	final static int[] sizeTable = { 9, 99, 999, 9999, 99999, 999999, 9999999,
-			99999999, 999999999, Integer.MAX_VALUE };
+    final static byte[] digits = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g',
+                                  'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',
+                                  'y', 'z' };
+
+    final static byte[] DigitTens = { '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1',
+                                     '1', '1', '1', '1', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '3', '3',
+                                     '3', '3', '3', '3', '3', '3', '3', '3', '4', '4', '4', '4', '4', '4', '4', '4',
+                                     '4', '4', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '6', '6', '6', '6',
+                                     '6', '6', '6', '6', '6', '6', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7',
+                                     '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '9', '9', '9', '9', '9', '9',
+                                     '9', '9', '9', '9', };
+
+    final static byte[] DigitOnes = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5',
+                                     '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1',
+                                     '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7',
+                                     '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3',
+                                     '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
+                                     '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5',
+                                     '6', '7', '8', '9', };
+
+    final static int[] sizeTable = { 9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, Integer.MAX_VALUE };
+
 
     // Requires positive x
     public static final int stringSize(int x) {
