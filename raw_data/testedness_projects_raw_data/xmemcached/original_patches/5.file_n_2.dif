diff --git a/src/main/java/net/rubyeye/xmemcached/transcoders/BaseSerializingTranscoder.java b/src/main/java/net/rubyeye/xmemcached/transcoders/BaseSerializingTranscoder.java
index 852ac2e..79160a0 100644
--- a/src/main/java/net/rubyeye/xmemcached/transcoders/BaseSerializingTranscoder.java
+++ b/src/main/java/net/rubyeye/xmemcached/transcoders/BaseSerializingTranscoder.java
@@ -1,6 +1,11 @@
 package net.rubyeye.xmemcached.transcoders;
 
-import java.io.*;
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.io.UnsupportedEncodingException;
 import java.util.zip.DeflaterOutputStream;
 import java.util.zip.GZIPInputStream;
 import java.util.zip.GZIPOutputStream;
@@ -92,17 +97,7 @@ public abstract class BaseSerializingTranscoder {
 		try {
 			if (in != null) {
 				bis = new ByteArrayInputStream(in);
-                is = new ObjectInputStream(bis) {
-                    @Override
-                    protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {
-                        try {
-                            //When class is not found,try to load it from context class loader.
-                            return super.resolveClass(desc);
-                        } catch (ClassNotFoundException e) {
-                            return Thread.currentThread().getContextClassLoader().loadClass(desc.getName());
-                        }
-                    }
-                };
+				is = new ObjectInputStream(bis);
 				rv = is.readObject();
 
 			}
