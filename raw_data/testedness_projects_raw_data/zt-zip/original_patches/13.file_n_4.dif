diff --git a/src/main/java/org/zeroturnaround/zip/Java6FileApiPermissionsStrategy.java b/src/main/java/org/zeroturnaround/zip/Java6FileApiPermissionsStrategy.java
deleted file mode 100644
index 58c1c9c..0000000
--- a/src/main/java/org/zeroturnaround/zip/Java6FileApiPermissionsStrategy.java
+++ /dev/null
@@ -1,94 +0,0 @@
-package org.zeroturnaround.zip;
-
-import java.io.File;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-
-class Java6FileApiPermissionsStrategy implements ZTFilePermissionsStrategy {
-  private final Method canExecuteMethod;
-  private final Method setExecutableMethod;
-  private final Method setWritableMethod;
-  private final Method setReadableMethod;
-  
-  public Java6FileApiPermissionsStrategy() throws ZipException {
-    canExecuteMethod = getDeclaredMethod(File.class, "canExecute");
-    setExecutableMethod = getDeclaredMethod(File.class, "setExecutable", boolean.class, boolean.class);
-    setReadableMethod = getDeclaredMethod(File.class, "setReadable", boolean.class, boolean.class);
-    setWritableMethod = getDeclaredMethod(File.class, "setWritable", boolean.class, boolean.class);
-  }
-
-  public ZTFilePermissions getPermissions(File file) {
-    ZTFilePermissions permissions = new ZTFilePermissions();
-    
-    permissions.setDirectory(file.isDirectory());
-    
-    if (canExecute(file)) {
-      // set execute flag only for owner
-      permissions.setOwnerCanExecute(true);
-    }
-    
-    if (file.canWrite()) {
-      // 0644 for files and 0666 for directories 
-      // this is a quite common choice for shared installations
-      permissions.setOwnerCanWrite(true); 
-      if (file.isDirectory()) {
-        permissions.setGroupCanWrite(true);
-        permissions.setOthersCanWrite(true);
-      }
-    }
-    
-    if (file.canRead()) {
-      permissions.setOwnerCanRead(true);
-      permissions.setGroupCanRead(true);
-      permissions.setOthersCanRead(true);
-    }
-    
-    return permissions;
-  }
-
-  public void setPermissions(File file, ZTFilePermissions permissions) {
-    setExecutable(file, permissions.isOwnerCanExecute(), !permissions.isGroupCanExecute() && !permissions.isOthersCanExecute());
-    setWritable(file, permissions.isOwnerCanWrite(), !permissions.isGroupCanWrite() && !permissions.isOthersCanWrite());
-    setReadable(file, permissions.isOwnerCanRead(), !permissions.isGroupCanRead() && !permissions.isOthersCanRead());
-  }
-  
-  private boolean setExecutable(File file, boolean executable, boolean ownerOnly) {
-    return (Boolean) invoke(setExecutableMethod, file, executable, ownerOnly);
-  }
-  
-  private boolean setWritable(File file, boolean executable, boolean ownerOnly) {
-    return (Boolean) invoke(setWritableMethod, file, executable, ownerOnly);
-  }
-  
-  private boolean setReadable(File file, boolean executable, boolean ownerOnly) {
-    return (Boolean) invoke(setReadableMethod, file, executable, ownerOnly);
-  }
-  
-  private boolean canExecute(File file) {
-    return (Boolean) invoke(canExecuteMethod, file);
-  }
-  
-  private static Method getDeclaredMethod(Class<?> clazz, String methodName, Class<?>... parameterTypes) {
-    try {
-      return clazz.getDeclaredMethod(methodName, parameterTypes);
-    }
-    catch (NoSuchMethodException e) {
-      throw new ZipException(e);
-    }
-  }
-  
-  private static Object invoke(Method method, Object obj, Object... args) throws ZipException {
-    try {
-      return method.invoke(obj, args);
-    }
-    catch (IllegalAccessException e) {
-      throw new ZipException(e);
-    }
-    catch (InvocationTargetException e) {
-      throw new ZipException(e);
-    }
-    catch (IllegalArgumentException e) {
-      throw new ZipException(e);
-    }
-  }
-}
