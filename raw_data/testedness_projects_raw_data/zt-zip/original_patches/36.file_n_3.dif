diff --git a/src/main/java/org/zeroturnaround/zip/Zips.java b/src/main/java/org/zeroturnaround/zip/Zips.java
index eff4411..40219f1 100644
--- a/src/main/java/org/zeroturnaround/zip/Zips.java
+++ b/src/main/java/org/zeroturnaround/zip/Zips.java
@@ -21,7 +21,6 @@ import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
-import java.io.OutputStream;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
 import java.nio.charset.Charset;
@@ -41,8 +40,6 @@ import java.util.zip.ZipOutputStream;
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.io.FilenameUtils;
 import org.apache.commons.io.IOUtils;
-import org.zeroturnaround.zip.transform.ZipEntryTransformer;
-import org.zeroturnaround.zip.transform.ZipEntryTransformerEntry;
 
 /**
  * Fluent api for zip handling.
@@ -82,11 +79,6 @@ public class Zips {
    */
   private Set removedEntries = new HashSet();
 
-  /**
-   * List<ZipEntryTransformerEntry>
-   */
-  private List transformers = new ArrayList();
-
   private Zips(File src) {
     this.src = src;
   }
@@ -257,22 +249,10 @@ public class Zips {
   }
 
   /**
-   * Registers a transformer for a given entry.
-   *
-   * @param path entry to transform
-   * @param transformer transformer for the entry
-   * @return this Zips for fluent api
-   */
-  public Zips addTransformer(String path, ZipEntryTransformer transformer) {
-    this.transformers.add(new ZipEntryTransformerEntry(path, transformer));
-    return this;
-  }
-
-  /**
    * Iterates through source Zip entries removing or changing them according to
    * set parameters.
    */
-  public synchronized void process() {
+  public synchronized void execute() {
     if (src == null && dest == null) {
       throw new IllegalArgumentException("Source and destination shouldn't be null together");
     }
@@ -281,44 +261,41 @@ public class Zips {
     File destinationZip = null;
     try {
       destinationZip = isInPlace() ? File.createTempFile("zips", ".zip") : dest;
-      final ZipOutputStream out = createZipOutputStream(new BufferedOutputStream(new FileOutputStream(destinationZip)));
+      final ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(destinationZip)));
       try {
         // Copy and replace entries
-        iterate(new RepackCallback(entryByPath, removedDirs, removedEntries, out));
-        // Add new entries
-        for (Iterator it = entryByPath.values().iterator(); it.hasNext();) {
-          ZipUtil.addEntry((ZipEntrySource) it.next(), out);
+        final Set names = new HashSet();
+        iterate(new ZipEntryCallback() {
+          public void process(InputStream in, ZipEntry zipEntry) throws IOException {
+            String entryName = zipEntry.getName();
+            if (names.add(entryName)) { // duplicate entries are ignored
+              if (removedEntries.contains(entryName) || isEntryInDir(removedDirs, entryName)) {
+                // this entry should be removed.
+                return;
               }
 
-        handleInPlaceActions(destinationZip);
-      }
-      finally {
-        IOUtils.closeQuietly(out);
-      }
+              ZipEntrySource entry = (ZipEntrySource) entryByPath.remove(entryName);
+              if (entry != null) {
+                // change entry
+                ZipUtil.addEntry(entry, out);
               }
-    catch (IOException e) {
-      throw ZipUtil.rethrow(e);
+              else {
+                // unchanged entry
+                copyEntry(zipEntry, in, out);
               }
-    finally {
-      if (isInPlace()) {
-        // destinationZip is a temporary file
-        FileUtils.deleteQuietly(destinationZip);
             }
           }
+        });
+        // Add new entries
+        for (Iterator it = entryByPath.values().iterator(); it.hasNext();) {
+          ZipUtil.addEntry((ZipEntrySource) it.next(), out);
         }
 
-  public synchronized void transform() {
-    if (src == null) {
-      throw new IllegalArgumentException("Source cannot be null for transformation");
+        if (isInPlace()) {
+          // we operate in-place
+          FileUtils.forceDelete(src);
+          FileUtils.moveFile(destinationZip, src);
         }
-    File destinationZip = null;
-    try {
-      destinationZip = isInPlace() ? File.createTempFile("zips", ".zip") : dest;
-      ZipOutputStream out = createZipOutputStream(new BufferedOutputStream(new FileOutputStream(destinationZip)));
-      try {
-        TransformerZipEntryCallback action = new TransformerZipEntryCallback(getTransformersArray(), out);
-        iterate(action);
-        handleInPlaceActions(destinationZip);
       }
       finally {
         IOUtils.closeQuietly(out);
@@ -335,18 +312,6 @@ public class Zips {
     }
   }
 
-  /**
-   * if we are doing something in place, move result file into src.
-   *
-   * @param result destination zip file
-   */
-  private void handleInPlaceActions(File result) throws IOException {
-    if (isInPlace()) {
-      // we operate in-place
-      FileUtils.forceDelete(src);
-      FileUtils.moveFile(result, src);
-    }
-  }
 
   /**
    * Reads the source ZIP file and executes the given action for each entry.
@@ -438,6 +403,16 @@ public class Zips {
   }
 
   /**
+   * Unpacks a ZIP file to its own location (using ZipUtil functionality)
+   */
+  public void explode() {
+    if (src == null) {
+      throw new IllegalStateException("Cannot explode, when source is null");
+    }
+    ZipUtil.explode(src);
+  }
+
+  /**
    * Checks if entry given by name resides inside of one of the dirs.
    *
    * @param dirNames dirs
@@ -471,19 +446,6 @@ public class Zips {
   }
 
   /**
-   * @return transformers as array. Replace with .toArray, when we accept generics
-   */
-  private ZipEntryTransformerEntry[] getTransformersArray() {
-    ZipEntryTransformerEntry[] result = new ZipEntryTransformerEntry[transformers.size()];
-    int idx = 0;
-    Iterator iter = transformers.iterator();
-    while (iter.hasNext()) {
-      result[idx++] = (ZipEntryTransformerEntry) iter.next();
-    }
-    return result;
-  }
-
-  /**
    * Copies a given ZIP entry to a ZIP file. If this.preserveTimestamps is true, original timestamp
    * is carried over, otherwise uses current time.
    *
@@ -538,104 +500,4 @@ public class Zips {
       throw new IllegalArgumentException("Using constructor ZipFile(File, Charset) has failed", e);
     }
   }
-
-  private ZipOutputStream createZipOutputStream(BufferedOutputStream outStream) {
-    if (charset == null)
-      return new ZipOutputStream(outStream);
-
-    try {
-      Constructor constructor = ZipOutputStream.class.getConstructor(new Class[] { OutputStream.class, Charset.class });
-      return (ZipOutputStream) constructor.newInstance(new Object[] { outStream, charset });
-    }
-    catch (NoSuchMethodException e) {
-      throw new IllegalArgumentException("Using constructor ZipOutputStream(OutputStream, Charset) has failed", e);
-    }
-    catch (InstantiationException e) {
-      throw new IllegalArgumentException("Using constructor ZipOutputStream(OutputStream, Charset) has failed", e);
-    }
-    catch (IllegalAccessException e) {
-      throw new IllegalArgumentException("Using constructor ZipOutputStream(OutputStream, Charset) has failed", e);
-    }
-    catch (IllegalArgumentException e) {
-      throw new IllegalArgumentException("Using constructor ZipOutputStream(OutputStream, Charset) has failed", e);
-    }
-    catch (InvocationTargetException e) {
-      throw new IllegalArgumentException("Using constructor ZipOutputStream(OutputStream, Charset) has failed", e);
-    }
-  }
-
-  private final class RepackCallback implements ZipEntryCallback {
-    private final Map changedEntriesByPath;
-    private final Set removedDirNames;
-    private final Set removedEntries;
-    private final ZipOutputStream out;
-
-    // for duplicate entries
-    private final Set names;
-
-    private RepackCallback(Map changedEntriesByPath, Set removedDirNames, Set removedEntries, ZipOutputStream out) {
-      this.changedEntriesByPath = changedEntriesByPath;
-      this.removedDirNames = removedDirNames;
-      this.removedEntries = removedEntries;
-      this.out = out;
-      this.names = new HashSet();
-    }
-
-    public void process(InputStream in, ZipEntry zipEntry) throws IOException {
-      String entryName = zipEntry.getName();
-      if (names.add(entryName)) { // duplicate entries are ignored
-        if (removedEntries.contains(entryName) || isEntryInDir(removedDirNames, entryName)) {
-          // this entry should be removed.
-          return;
-        }
-
-        ZipEntrySource entry = (ZipEntrySource) changedEntriesByPath.remove(entryName);
-        if (entry != null) {
-          // change entry
-          ZipUtil.addEntry(entry, out);
-        }
-        else {
-          // unchanged entry
-          copyEntry(zipEntry, in, out);
-        }
-      }
-    }
-  }
-
-  /**
-   * We need this class because of private timestamp-aware copyEntry.
-   *
-   * @author shelajev
-   *
-   */
-  private final class TransformerZipEntryCallback implements ZipEntryCallback {
-    private final Map entryByPath;
-    private final int entryCount;
-    private final ZipOutputStream out;
-    private final Set names = new HashSet();
-
-    public TransformerZipEntryCallback(ZipEntryTransformerEntry[] entries, ZipOutputStream out) {
-      entryByPath = ZipUtil.byPath(entries);
-      entryCount = entryByPath.size();
-      this.out = out;
-    }
-
-    public void process(InputStream in, ZipEntry zipEntry) throws IOException {
-      if (names.add(zipEntry.getName())) {
-        ZipEntryTransformer entry = (ZipEntryTransformer) entryByPath.remove(zipEntry.getName());
-        if (entry != null)
-          entry.transform(in, zipEntry, out);
-        else
-          copyEntry(zipEntry, in, out);
-      }
-    }
-
-    /**
-     * @return <code>true</code> if at least one entry was replaced.
-     */
-    public boolean found() {
-      return entryByPath.size() < entryCount;
-    }
-
-  }
 }
