diff --git a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java
index 35fe9160b..5f708e6d8 100644
--- a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java
+++ b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java
@@ -122,20 +122,35 @@ public abstract class ContinuedFraction {
      * @throws ConvergenceException if the algorithm fails to converge.
      */
     public double evaluate(double x, double epsilon, int maxIterations) {
+        final double small = 1e-50;
+        double hPrev = getA(0, x);
+        if (Precision.equals(hPrev, 0.0, small)) {
+            hPrev = small;
+        }
         double p0 = 1.0;
         double p1 = getA(0, x);
         double q0 = 0.0;
         double q1 = 1.0;
         double c = p1 / q1;
-        int n = 0;
+        int n = 1;
+        double dPrev = 0.0;
+        double cPrev = hPrev;
+        double hN = hPrev;
         double relativeError = Double.MAX_VALUE;
         while (n < maxIterations && relativeError > epsilon) {
-            ++n;
             double a = getA(n, x);
             double b = getB(n, x);
             double p2 = a * p1 + b * p0;
             double q2 = a * q1 + b * q0;
             boolean infinite = false;
+            double dN = a + b * dPrev;
+            if (Precision.equals(dN, 0.0, small)) {
+                dN = small;
+            }
+            double cN = a + b / cPrev;
+            if (Precision.equals(cN, 0.0, small)) {
+                cN = small;
+            }
             if (Double.isInfinite(p2) || Double.isInfinite(q2)) {
                 /*
                  * Need to scale. Try successive powers of the larger of a or b
@@ -151,21 +166,6 @@ public abstract class ContinuedFraction {
                                                    x);
                 }
                 infinite = true;
-                for (int i = 0; i < maxPower; i++) {
-                    lastScaleFactor = scaleFactor;
-                    scaleFactor *= scale;
-                    if (a != 0.0 && a > b) {
-                        p2 = p1 / lastScaleFactor + (b / scaleFactor * p0);
-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * q0);
-                    } else if (b != 0) {
-                        p2 = (a / scaleFactor * p1) + p0 / lastScaleFactor;
-                        q2 = (a / scaleFactor * q1) + q0 / lastScaleFactor;
-                    }
-                    infinite = Double.isInfinite(p2) || Double.isInfinite(q2);
-                    if (!infinite) {
-                        break;
-                    }
-                }
             }
 
             if (infinite) {
@@ -176,11 +176,17 @@ public abstract class ContinuedFraction {
 
             double r = p2 / q2;
 
-            if (Double.isNaN(r)) {
+            dN = 1 / dN;
+            final double deltaN = cN * dN;
+            hN = hPrev * deltaN;
+            if (Double.isInfinite(hN)) {
+                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,
+                                               x);
+            }
+            if (Double.isNaN(hN)) {
                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,
                                                x);
             }
-            relativeError = FastMath.abs(r / c - 1.0);
 
             // prepare for next iteration
             c = p2 / q2;
@@ -188,6 +194,13 @@ public abstract class ContinuedFraction {
             p1 = p2;
             q0 = q1;
             q1 = q2;
+            if (FastMath.abs(deltaN - 1.0) < epsilon) {
+                break;
+            }
+            dPrev = dN;
+            cPrev = cN;
+            hPrev = hN;
+            n++;
         }
 
         if (n >= maxIterations) {
@@ -195,6 +208,6 @@ public abstract class ContinuedFraction {
                                                 maxIterations, x);
         }
 
-        return c;
+        return hN;
     }
 }
