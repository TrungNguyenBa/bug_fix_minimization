diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java
index ba577223d..a29e327f7 100644
--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java
+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java
@@ -23,7 +23,9 @@ import java.io.ObjectOutputStream;
 import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.HashSet;
 import java.util.List;
+import java.util.Set;
 
 import org.apache.commons.math.linear.MatrixUtils;
 import org.apache.commons.math.linear.RealMatrix;
@@ -321,10 +323,22 @@ class SimplexTableau implements Serializable {
      */
     protected RealPointValuePair getSolution() {
         double[] coefficients = new double[getOriginalNumDecisionVariables()];
-        double mostNegative = getDecisionVariableValue(getOriginalNumDecisionVariables());
+        Integer basicRow =
+            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
+        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
+        Set<Integer> basicRows = new HashSet<Integer>();
         for (int i = 0; i < coefficients.length; i++) {
             coefficients[i] =
                 getDecisionVariableValue(i) - (restrictToNonNegative ? 0 : mostNegative); 
+            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
+            if (basicRows.contains(basicRow)) {
+                coefficients[i] = 0;
+            } else {
+                basicRows.add(basicRow);
+                coefficients[i] =
+                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
+                    (restrictToNonNegative ? 0 : mostNegative);
+            }
         }
         return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
